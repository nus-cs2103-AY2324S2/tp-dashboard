[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"solomonng2001"},"content":"[![CI Status](https://github.com/AY2324S2-CS2103T-W12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103T-W12-1/tp/actions)","lastModifiedDate":"2024-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103T-W12-1/tp/graph/badge.svg?token\u003dSFY0S3364D)](https://codecov.io/gh/AY2324S2-CS2103T-W12-1/tp)","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"## Project Overview","lastModifiedDate":"2024-03-05"},{"lineNumber":7,"author":{"gitId":"solomonng2001"},"content":"* This project aims to develop a desktop application called \u0027ClientCare\u0027 to assist insurance agents in managing their client relationships and follow-ups effectively.","lastModifiedDate":"2024-03-05"},{"lineNumber":8,"author":{"gitId":"solomonng2001"},"content":"* It is written in an object-oriented programming (OOP) fashion, providing a well-structured and scalable codebase.","lastModifiedDate":"2024-03-05"},{"lineNumber":9,"author":{"gitId":"solomonng2001"},"content":"* The project includes comprehensive user and developer documentation to ensure usability and maintainability.","lastModifiedDate":"2024-03-05"},{"lineNumber":10,"author":{"gitId":"solomonng2001"},"content":"* The project is named \u0027ClientCare\u0027 as it is designed to help insurance agents take care of and manage their clients effectively.","lastModifiedDate":"2024-03-05"},{"lineNumber":11,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":12,"author":{"gitId":"solomonng2001"},"content":"## Additional Information","lastModifiedDate":"2024-03-05"},{"lineNumber":13,"author":{"gitId":"solomonng2001"},"content":"* For detailed documentation and updates, visit the **[ClientCare Product Website](https://ay2324s2-cs2103t-w12-1.github.io/tp/index.html)**.","lastModifiedDate":"2024-03-05"},{"lineNumber":14,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":15,"author":{"gitId":"solomonng2001"},"content":"## Acknowledgements","lastModifiedDate":"2024-03-05"},{"lineNumber":16,"author":{"gitId":"solomonng2001"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2024-03-05"}],"authorContributionMap":{"solomonng2001":12,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"### Chia York Lim","lastModifiedDate":"2024-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"\u003cimg src\u003d\"images/yorklim.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"[[github](http://github.com/yorklim)]","lastModifiedDate":"2024-03-06"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"[[portfolio](team/yorklim.md)]","lastModifiedDate":"2024-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"* Role: Team lead + Code quality","lastModifiedDate":"2024-03-06"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"* Responsibilities: Dev Ops","lastModifiedDate":"2024-03-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"### Ge Shuqing","lastModifiedDate":"2024-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"\u003cimg src\u003d\"images/getsquared.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"[[github](http://github.com/getsquared)]","lastModifiedDate":"2024-03-05"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"[[portfolio](team/shuqing.md)]","lastModifiedDate":"2024-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"* Role: Integration + Documentation","lastModifiedDate":"2024-03-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"* Role: Project Advisor","lastModifiedDate":"2024-03-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"### Regan Choy","lastModifiedDate":"2024-03-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"\u003cimg src\u003d\"images/reganchoy.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"[[github](http://github.com/ReganChoy)]","lastModifiedDate":"2024-03-05"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"[[portfolio](team/reganchoy.md)]","lastModifiedDate":"2024-03-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"* Role: Deliverables + Deadline + Scheduling","lastModifiedDate":"2024-03-05"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"* Responsibilities: Model","lastModifiedDate":"2024-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":46,"author":{"gitId":"solomonng2001"},"content":"### Solomon Ng","lastModifiedDate":"2024-03-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"solomonng2001"},"content":"\u003cimg src\u003d\"images/solomonng2001.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"[[github](http://github.com/solomonng2001)]","lastModifiedDate":"2024-03-06"},{"lineNumber":51,"author":{"gitId":"getsquared"},"content":"[[portfolio](team/solomonng.md)]","lastModifiedDate":"2024-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"solomonng2001"},"content":"* Role: Testing","lastModifiedDate":"2024-03-05"},{"lineNumber":54,"author":{"gitId":"solomonng2001"},"content":"* Responsibilities: Storage","lastModifiedDate":"2024-03-05"}],"authorContributionMap":{"getsquared":13,"ReganChoy":7,"solomonng2001":4,"-":30}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"# ClientCare","lastModifiedDate":"2024-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"_{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline continues till the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).\u003cbr\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"   Note that although this is shown as a single step in the diagram above (for simplicity), in the code it can take several interactions (between the command object and the `Model`) to achieve.","lastModifiedDate":"2024-02-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"The following sequence diagram shows how an undo operation goes through the `Logic` component:","lastModifiedDate":"2024-02-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Logic.puml\" alt\u003d\"UndoSequenceDiagram-Logic\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"Similarly, how an undo operation goes through the `Model` component is shown below:","lastModifiedDate":"2024-02-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Model.puml\" alt\u003d\"UndoSequenceDiagram-Model\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":267,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"solomonng2001"},"content":"* insurance agents","lastModifiedDate":"2024-03-06"},{"lineNumber":278,"author":{"gitId":"getsquared"},"content":"* has a need to manage a significant number of clients for insurance policies","lastModifiedDate":"2024-03-05"},{"lineNumber":279,"author":{"gitId":"getsquared"},"content":"* has a need to organise schedules with clients and their details in one place","lastModifiedDate":"2024-03-05"},{"lineNumber":280,"author":{"gitId":"getsquared"},"content":"* has a need for reminders to keep in touch with clients","lastModifiedDate":"2024-03-05"},{"lineNumber":281,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":284,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"solomonng2001"},"content":"**Value proposition**: ","lastModifiedDate":"2024-03-06"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"solomonng2001"},"content":"* conveniently manage client details and schedules faster than a typical mouse/GUI driven app","lastModifiedDate":"2024-03-06"},{"lineNumber":289,"author":{"gitId":"solomonng2001"},"content":"* Convenient tracking of when agent last checked up on clients (eg. reminders)","lastModifiedDate":"2024-03-06"},{"lineNumber":290,"author":{"gitId":"solomonng2001"},"content":"* Organise client contacts details","lastModifiedDate":"2024-03-06"},{"lineNumber":291,"author":{"gitId":"solomonng2001"},"content":"* Optimization by client’s importance (VIP status etc)","lastModifiedDate":"2024-03-06"},{"lineNumber":292,"author":{"gitId":"solomonng2001"},"content":"* Monitor client’s insurance policies","lastModifiedDate":"2024-03-06"},{"lineNumber":293,"author":{"gitId":"solomonng2001"},"content":"* Scheduler to manage appointment to ensure timely follow-up","lastModifiedDate":"2024-03-06"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"| Priority | As a …​         | I want to …​                                          | So that I can…​                                                       |","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"solomonng2001"},"content":"|----------|-----------------|-------------------------------------------------------|-----------------------------------------------------------------------|","lastModifiedDate":"2024-03-06"},{"lineNumber":301,"author":{"gitId":"getsquared"},"content":"| `* * *`  | insurance agent | see usage instructions                                | refer to instructions when I forget how to use the App                |","lastModifiedDate":"2024-03-05"},{"lineNumber":302,"author":{"gitId":"getsquared"},"content":"| `* * *`  | insurance agent | add a new client contact details                      | keep track of the clients I have                                      |","lastModifiedDate":"2024-03-05"},{"lineNumber":303,"author":{"gitId":"getsquared"},"content":"| `* * *`  | insurance agent | delete a client                                       | remove clients that are leaving                                       |","lastModifiedDate":"2024-03-05"},{"lineNumber":304,"author":{"gitId":"getsquared"},"content":"| `* * *`  | insurance agent | find a client by name                                 | locate details of client without having to go through the entire list |","lastModifiedDate":"2024-03-05"},{"lineNumber":305,"author":{"gitId":"solomonng2001"},"content":"| `* * *`  | insurance agent | list all clients                                      | see all clients at a glance                                           |","lastModifiedDate":"2024-03-06"},{"lineNumber":306,"author":{"gitId":"solomonng2001"},"content":"| `* * *`  | insurance agent | view client information                               | know and check client details                                         |","lastModifiedDate":"2024-03-06"},{"lineNumber":307,"author":{"gitId":"ReganChoy"},"content":"| `* *`    | insurance agent | check schedules with clients on a date                | keep track of what I have to do in a day                              |","lastModifiedDate":"2024-03-05"},{"lineNumber":308,"author":{"gitId":"getsquared"},"content":"| `* *`    | insurance agent | add the birthday of my clients                        | wish them happy birthday to keep in contact with them                 |","lastModifiedDate":"2024-03-05"},{"lineNumber":309,"author":{"gitId":"getsquared"},"content":"| `* *`    | insurance agent | delete policy details for a client                    | remove expired policies of the client                                 |","lastModifiedDate":"2024-03-05"},{"lineNumber":310,"author":{"gitId":"getsquared"},"content":"| `* *`    | insurance agent | see when I last met a client                          | check in on a client that I have not met for a long time              |","lastModifiedDate":"2024-03-05"},{"lineNumber":311,"author":{"gitId":"getsquared"},"content":"| `* *`    | insurance agent | mark that a schedule is completed                     | know that i fulfilled the appointment scheduled                       |","lastModifiedDate":"2024-03-05"},{"lineNumber":312,"author":{"gitId":"ReganChoy"},"content":"| `* *`    | insurance agent | add policy details of a client                        | keep track of clients and their policies                              |","lastModifiedDate":"2024-03-05"},{"lineNumber":313,"author":{"gitId":"ReganChoy"},"content":"| `* *`    | insurance agent | schedule checkup date and time for clients            | so I know when to follow-up with them                                 |","lastModifiedDate":"2024-03-05"},{"lineNumber":314,"author":{"gitId":"getsquared"},"content":"| `*`      | insurance agent | sort clients by priority                              | deal with client with higher priority status first                    |","lastModifiedDate":"2024-03-05"},{"lineNumber":315,"author":{"gitId":"ReganChoy"},"content":"| `*`      | insurance agent | track deals that I have closed                        | track my current progress                                             |","lastModifiedDate":"2024-03-05"},{"lineNumber":316,"author":{"gitId":"ReganChoy"},"content":"| `*`      | insurance agent | edit my client\u0027s details                              | update my client\u0027s details                                            |","lastModifiedDate":"2024-03-05"},{"lineNumber":317,"author":{"gitId":"ReganChoy"},"content":"| `*`      | insurance agent | reschedule my appointments                            | change the date and time of appointments with clients                 |","lastModifiedDate":"2024-03-05"},{"lineNumber":318,"author":{"gitId":"ReganChoy"},"content":"| `*`      | insurance agent | filter clients by importance                          | decide on who to prioritise on                                        |","lastModifiedDate":"2024-03-05"},{"lineNumber":319,"author":{"gitId":"ReganChoy"},"content":"| `*`      | insurance agent | get help                                              | use the app when I am lost or confused                                |","lastModifiedDate":"2024-03-05"},{"lineNumber":320,"author":{"gitId":"solomonng2001"},"content":"| `*`      | insurance agent | can sort clients by the expected revenue of the deals | know which clients to prioritise                                      |","lastModifiedDate":"2024-03-06"},{"lineNumber":321,"author":{"gitId":"solomonng2001"},"content":"| `*`      | insurance agent | set the policy payment due dates                      | remind my clients.                                                    |","lastModifiedDate":"2024-03-06"},{"lineNumber":322,"author":{"gitId":"solomonng2001"},"content":"| `*`      | insurance agent | add the maturity date of my client’s policy           | update them and plan for future policies                              |","lastModifiedDate":"2024-03-06"},{"lineNumber":323,"author":{"gitId":"solomonng2001"},"content":"| `*`      | developer       | view list of all bugs reported by users               | conveniently view all reported bugs and fix them                      |","lastModifiedDate":"2024-03-06"},{"lineNumber":324,"author":{"gitId":"solomonng2001"},"content":"| `*`      | colleague       | import someone\u0027s contact list                         | take over his clients                                                 |","lastModifiedDate":"2024-03-06"},{"lineNumber":325,"author":{"gitId":"solomonng2001"},"content":"| `*`      | insurance agent | report issues/bugs                                    | get someone to fix bugs                                               |","lastModifiedDate":"2024-03-06"},{"lineNumber":326,"author":{"gitId":"solomonng2001"},"content":"| `*`      | developer\t      | get a log list of user activity                       | view user activity to bug fix                                         |","lastModifiedDate":"2024-03-06"},{"lineNumber":327,"author":{"gitId":"solomonng2001"},"content":"| `*`      | manager         | view all my subordinates\u0027 clients                     | be aware of their progress and client base                            |","lastModifiedDate":"2024-03-06"},{"lineNumber":328,"author":{"gitId":"solomonng2001"},"content":"| `*`      | insurance agent | get reminders of client birthday                      | send birthday message                                                 |","lastModifiedDate":"2024-03-06"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"getsquared"},"content":"(For all use cases below, the **System** is the `ClientCare` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2024-03-05"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"getsquared"},"content":"**Use case: UC01 - List all clients**","lastModifiedDate":"2024-03-07"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"getsquared"},"content":"1.  User requests to view all clients.","lastModifiedDate":"2024-03-07"},{"lineNumber":340,"author":{"gitId":"getsquared"},"content":"2.  ClientCare shows a list of all clients.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":341,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-06"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"solomonng2001"},"content":"**Extensions**","lastModifiedDate":"2024-03-06"},{"lineNumber":344,"author":{"gitId":"solomonng2001"},"content":"* 1a. The list is empty as no clients have been added at all.","lastModifiedDate":"2024-03-07"},{"lineNumber":345,"author":{"gitId":"solomonng2001"},"content":"  * 1a1. ClientCare lets user know that the list is empty.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":346,"author":{"gitId":"getsquared"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":347,"author":{"gitId":"solomonng2001"},"content":"* 1b. Invalid command usage in the request.","lastModifiedDate":"2024-03-07"},{"lineNumber":348,"author":{"gitId":"solomonng2001"},"content":"  * 1b1. ClientCare shows command usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":349,"author":{"gitId":"solomonng2001"},"content":"  * 1b2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":350,"author":{"gitId":"solomonng2001"},"content":"    Steps 1b1-1b2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":351,"author":{"gitId":"solomonng2001"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2024-03-07"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":354,"author":{"gitId":"solomonng2001"},"content":"**Use case: UC02 - View client details and policies**","lastModifiedDate":"2024-03-06"},{"lineNumber":355,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":356,"author":{"gitId":"solomonng2001"},"content":"**MSS**","lastModifiedDate":"2024-03-06"},{"lineNumber":357,"author":{"gitId":"solomonng2001"},"content":"1.  User requests to view a client\u0027s details and policies.","lastModifiedDate":"2024-03-06"},{"lineNumber":358,"author":{"gitId":"solomonng2001"},"content":"2.  ClientCare shows that client\u0027s details and policies.\u003cbr\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":361,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":362,"author":{"gitId":"solomonng2001"},"content":"* 1a. ClientCare detects that the client does not exist.","lastModifiedDate":"2024-03-07"},{"lineNumber":363,"author":{"gitId":"solomonng2001"},"content":"  * 1a1. ClientCare lets user know that client does not exist.","lastModifiedDate":"2024-03-07"},{"lineNumber":364,"author":{"gitId":"solomonng2001"},"content":"  * 1a2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":365,"author":{"gitId":"solomonng2001"},"content":"    Steps 1a1-1a2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":366,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":367,"author":{"gitId":"solomonng2001"},"content":"* 1b. Invalid command usage in the request.","lastModifiedDate":"2024-03-07"},{"lineNumber":368,"author":{"gitId":"solomonng2001"},"content":"  * 1b1. ClientCare shows command usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":369,"author":{"gitId":"solomonng2001"},"content":"  * 1b2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":370,"author":{"gitId":"solomonng2001"},"content":"    Steps 1b1-1b2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":371,"author":{"gitId":"solomonng2001"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2024-03-06"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":374,"author":{"gitId":"getsquared"},"content":"**Use case: UC03 - Add a new client**","lastModifiedDate":"2024-03-07"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":376,"author":{"gitId":"solomonng2001"},"content":"**MSS**","lastModifiedDate":"2024-03-06"},{"lineNumber":377,"author":{"gitId":"getsquared"},"content":"1.  User requests to add new client.","lastModifiedDate":"2024-03-07"},{"lineNumber":378,"author":{"gitId":"getsquared"},"content":"2.  ClientCare adds the new client to the list.","lastModifiedDate":"2024-03-07"},{"lineNumber":379,"author":{"gitId":"getsquared"},"content":"3.  ClientCare shows a success message and \u003cu\u003edisplay view of new client details and policies (UC02)\u003c/u\u003e.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":380,"author":{"gitId":"getsquared"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":381,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":382,"author":{"gitId":"solomonng2001"},"content":"**Extensions**","lastModifiedDate":"2024-03-06"},{"lineNumber":383,"author":{"gitId":"solomonng2001"},"content":"* 1a. ClientCare detects invalid user information.","lastModifiedDate":"2024-03-07"},{"lineNumber":384,"author":{"gitId":"solomonng2001"},"content":"  * 1a1. ClientCare shows what is wrong with various invalid user information.","lastModifiedDate":"2024-03-07"},{"lineNumber":385,"author":{"gitId":"getsquared"},"content":"  * 1a2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":386,"author":{"gitId":"getsquared"},"content":"    Steps 1a1-1a2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":387,"author":{"gitId":"getsquared"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2024-03-07"},{"lineNumber":388,"author":{"gitId":"solomonng2001"},"content":"* 1b. Invalid command usage in the request.","lastModifiedDate":"2024-03-07"},{"lineNumber":389,"author":{"gitId":"solomonng2001"},"content":"    * 1b1. ClientCare shows command usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":390,"author":{"gitId":"solomonng2001"},"content":"    * 1b2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":391,"author":{"gitId":"solomonng2001"},"content":"      Steps 1b1-1b2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":392,"author":{"gitId":"solomonng2001"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2024-03-07"},{"lineNumber":393,"author":{"gitId":"solomonng2001"},"content":"* 1c. Client name already exists.","lastModifiedDate":"2024-03-07"},{"lineNumber":394,"author":{"gitId":"solomonng2001"},"content":"  * 1c1. ClientCare lets user know that duplicate names are not allowed.","lastModifiedDate":"2024-03-07"},{"lineNumber":395,"author":{"gitId":"solomonng2001"},"content":"  * 1c2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":396,"author":{"gitId":"solomonng2001"},"content":"    Steps 1c1-1c2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":397,"author":{"gitId":"solomonng2001"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2024-03-07"},{"lineNumber":398,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":399,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":400,"author":{"gitId":"getsquared"},"content":"**Use case: UC04 - Find a client by name**","lastModifiedDate":"2024-03-07"},{"lineNumber":401,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":402,"author":{"gitId":"getsquared"},"content":"**MSS**","lastModifiedDate":"2024-03-05"},{"lineNumber":403,"author":{"gitId":"getsquared"},"content":"1.  User requests to find a specific client in the list by name.","lastModifiedDate":"2024-03-07"},{"lineNumber":404,"author":{"gitId":"getsquared"},"content":"2.  ClientCare shows list of client that matches the name.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":405,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-06"},{"lineNumber":406,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":407,"author":{"gitId":"solomonng2001"},"content":"**Extensions**","lastModifiedDate":"2024-03-06"},{"lineNumber":408,"author":{"gitId":"solomonng2001"},"content":"* 2a. The list is empty as there is no matching name found.\u003cbr\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":409,"author":{"gitId":"solomonng2001"},"content":"  * 2a1. ClientCare lets user know that the list is empty.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":410,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-06"},{"lineNumber":411,"author":{"gitId":"solomonng2001"},"content":"* 2b. Invalid command usage in the request.","lastModifiedDate":"2024-03-07"},{"lineNumber":412,"author":{"gitId":"solomonng2001"},"content":"  * 2b1. ClientCare shows command usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":413,"author":{"gitId":"solomonng2001"},"content":"  * 2b2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":414,"author":{"gitId":"solomonng2001"},"content":"    Steps 2b1-2b2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":415,"author":{"gitId":"solomonng2001"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2024-03-07"},{"lineNumber":416,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":417,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":418,"author":{"gitId":"getsquared"},"content":"**Use case: UC05 - Delete a client**","lastModifiedDate":"2024-03-07"},{"lineNumber":419,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":420,"author":{"gitId":"solomonng2001"},"content":"**MSS**","lastModifiedDate":"2024-03-06"},{"lineNumber":421,"author":{"gitId":"getsquared"},"content":"1.  User requests to \u003cu\u003elist all clients (UC01)\u003c/u\u003e or \u003cu\u003efind client by name (UC04)\u003c/u\u003e.","lastModifiedDate":"2024-03-07"},{"lineNumber":422,"author":{"gitId":"getsquared"},"content":"2.  ClientCare shows a list of clients.","lastModifiedDate":"2024-03-07"},{"lineNumber":423,"author":{"gitId":"getsquared"},"content":"3.  User requests to delete a specific client in the list by index.","lastModifiedDate":"2024-03-07"},{"lineNumber":424,"author":{"gitId":"getsquared"},"content":"4.  ClientCare deletes the client.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":425,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"solomonng2001"},"content":"* 2a. The list is empty.\u003cbr\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":429,"author":{"gitId":"solomonng2001"},"content":"  * 2a1. ClientCare lets user know that the list is empty.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":430,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"solomonng2001"},"content":"  * 3a1. ClientCare lets user know that client index should be a number.","lastModifiedDate":"2024-03-07"},{"lineNumber":433,"author":{"gitId":"solomonng2001"},"content":"  * 3a2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":434,"author":{"gitId":"solomonng2001"},"content":"    Steps 3a1-3a2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":436,"author":{"gitId":"solomonng2001"},"content":"* 3b. Invalid command usage in the request.","lastModifiedDate":"2024-03-07"},{"lineNumber":437,"author":{"gitId":"solomonng2001"},"content":"  * 3b1. ClientCare shows command usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":438,"author":{"gitId":"solomonng2001"},"content":"  * 3b2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":439,"author":{"gitId":"solomonng2001"},"content":"    Steps 3b1-3b2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":440,"author":{"gitId":"solomonng2001"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2024-03-07"},{"lineNumber":441,"author":{"gitId":"solomonng2001"},"content":"* 3c. Client does not exist.","lastModifiedDate":"2024-03-07"},{"lineNumber":442,"author":{"gitId":"solomonng2001"},"content":"  * 3c1. ClientCare lets user know that client does not exist.","lastModifiedDate":"2024-03-07"},{"lineNumber":443,"author":{"gitId":"solomonng2001"},"content":"  * 3c2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":444,"author":{"gitId":"solomonng2001"},"content":"    Steps 3c1-3c2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":445,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":448,"author":{"gitId":"getsquared"},"content":"**Use case: UC06 - Schedule an appointment with client**","lastModifiedDate":"2024-03-07"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":450,"author":{"gitId":"getsquared"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":451,"author":{"gitId":"getsquared"},"content":"1.  User schedules a date and time to meet with a client.","lastModifiedDate":"2024-03-07"},{"lineNumber":452,"author":{"gitId":"getsquared"},"content":"2.  ClientCare sets up the appointment.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":453,"author":{"gitId":"ReganChoy"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":454,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":455,"author":{"gitId":"ReganChoy"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":456,"author":{"gitId":"ReganChoy"},"content":"* 1a. Date and time is invalid.","lastModifiedDate":"2024-03-05"},{"lineNumber":457,"author":{"gitId":"solomonng2001"},"content":"  * 1a1. ClientCare lets user know of valid date and time format.","lastModifiedDate":"2024-03-07"},{"lineNumber":458,"author":{"gitId":"solomonng2001"},"content":"  * 1a2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":459,"author":{"gitId":"solomonng2001"},"content":"    Steps 1a1-1a2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":460,"author":{"gitId":"ReganChoy"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":461,"author":{"gitId":"ReganChoy"},"content":"* 1b. Date and time has past.","lastModifiedDate":"2024-03-05"},{"lineNumber":462,"author":{"gitId":"solomonng2001"},"content":"  * 1b1. ClientCare lets user know that it is not possible to schedule an appointment in the past.","lastModifiedDate":"2024-03-07"},{"lineNumber":463,"author":{"gitId":"solomonng2001"},"content":"  * 1b2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":464,"author":{"gitId":"solomonng2001"},"content":"    Steps 1b1-1b2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":465,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":466,"author":{"gitId":"solomonng2001"},"content":"* 1c. Invalid command usage in the request.","lastModifiedDate":"2024-03-07"},{"lineNumber":467,"author":{"gitId":"solomonng2001"},"content":"  * 1c1. ClientCare shows command usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":468,"author":{"gitId":"solomonng2001"},"content":"  * 1c2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":469,"author":{"gitId":"solomonng2001"},"content":"    Steps 1c1-1c2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":470,"author":{"gitId":"ReganChoy"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":471,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":472,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":473,"author":{"gitId":"getsquared"},"content":"**Use case: UC07 - Update client as met**","lastModifiedDate":"2024-03-07"},{"lineNumber":474,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":475,"author":{"gitId":"getsquared"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":476,"author":{"gitId":"getsquared"},"content":"1.  User marks a client as met.","lastModifiedDate":"2024-03-07"},{"lineNumber":477,"author":{"gitId":"getsquared"},"content":"2.  ClientCare updates Last Met date of client.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":478,"author":{"gitId":"ReganChoy"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":479,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":480,"author":{"gitId":"ReganChoy"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":481,"author":{"gitId":"ReganChoy"},"content":"* 1a. Client does not exist.","lastModifiedDate":"2024-03-05"},{"lineNumber":482,"author":{"gitId":"solomonng2001"},"content":"  * 1a1. ClientCare lets user know that client does not exist.","lastModifiedDate":"2024-03-07"},{"lineNumber":483,"author":{"gitId":"solomonng2001"},"content":"  * 1a2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":484,"author":{"gitId":"solomonng2001"},"content":"    Steps 1a1-1a2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":485,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":486,"author":{"gitId":"solomonng2001"},"content":"* 1b. Invalid date and time.","lastModifiedDate":"2024-03-07"},{"lineNumber":487,"author":{"gitId":"solomonng2001"},"content":"  * 1b1. ClientCare lets user know of correct date and time format.","lastModifiedDate":"2024-03-07"},{"lineNumber":488,"author":{"gitId":"solomonng2001"},"content":"  * 1b2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":489,"author":{"gitId":"solomonng2001"},"content":"    Steps 1b1-1b2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":490,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":491,"author":{"gitId":"solomonng2001"},"content":"* 1c. Date and time is before the last met date.","lastModifiedDate":"2024-03-07"},{"lineNumber":492,"author":{"gitId":"solomonng2001"},"content":"  * 1c1. ClientCare confirms if user wants to change last met to an earlier date.","lastModifiedDate":"2024-03-07"},{"lineNumber":493,"author":{"gitId":"solomonng2001"},"content":"  * 1c2. User confirms or rejects.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":494,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":495,"author":{"gitId":"solomonng2001"},"content":"* 1d. Invalid command usage in the request.","lastModifiedDate":"2024-03-07"},{"lineNumber":496,"author":{"gitId":"solomonng2001"},"content":"    * 1d1. ClientCare shows command usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":497,"author":{"gitId":"solomonng2001"},"content":"    * 1d2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":498,"author":{"gitId":"solomonng2001"},"content":"        Steps 1d1-1d2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":499,"author":{"gitId":"ReganChoy"},"content":"        Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":500,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":501,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":502,"author":{"gitId":"getsquared"},"content":"**Use case: UC08 - Mark appointment**","lastModifiedDate":"2024-03-07"},{"lineNumber":503,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":504,"author":{"gitId":"getsquared"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":505,"author":{"gitId":"getsquared"},"content":"1.  User marks an appointment with client as done.","lastModifiedDate":"2024-03-07"},{"lineNumber":506,"author":{"gitId":"solomonng2001"},"content":"2.  ClientCare updates appointment has done and updates last met.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":507,"author":{"gitId":"ReganChoy"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":508,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":509,"author":{"gitId":"ReganChoy"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":510,"author":{"gitId":"solomonng2001"},"content":"* 1a. Appointment does not exist or is already marked.","lastModifiedDate":"2024-03-07"},{"lineNumber":511,"author":{"gitId":"solomonng2001"},"content":"  * 1a1. ClientCare lets user know that there is no open appointment for this client.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":512,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":513,"author":{"gitId":"solomonng2001"},"content":"* 1b. The client does not exist.","lastModifiedDate":"2024-03-07"},{"lineNumber":514,"author":{"gitId":"solomonng2001"},"content":"  * 1b1. ClientCare shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":515,"author":{"gitId":"solomonng2001"},"content":"  * 1b2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":516,"author":{"gitId":"solomonng2001"},"content":"    Steps 1b1-1b2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":517,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":518,"author":{"gitId":"solomonng2001"},"content":"* 1c. Appointment is in the future.","lastModifiedDate":"2024-03-07"},{"lineNumber":519,"author":{"gitId":"solomonng2001"},"content":"  * 1c1. ClientCare lets user know that future appointment cannot be marked.","lastModifiedDate":"2024-03-07"},{"lineNumber":520,"author":{"gitId":"solomonng2001"},"content":"  * 1c2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":521,"author":{"gitId":"solomonng2001"},"content":"    Steps 1c1-1c2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":522,"author":{"gitId":"solomonng2001"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":523,"author":{"gitId":"solomonng2001"},"content":"* 1d. Invalid command usage in the request.","lastModifiedDate":"2024-03-07"},{"lineNumber":524,"author":{"gitId":"solomonng2001"},"content":"    * 1d1. ClientCare shows command usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":525,"author":{"gitId":"solomonng2001"},"content":"    * 1d2. User enters new data.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":526,"author":{"gitId":"solomonng2001"},"content":"        Steps 1d1-1d2 are repeated until the data entered are correct.\u003cbr\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":527,"author":{"gitId":"ReganChoy"},"content":"        Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":528,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":529,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"getsquared"},"content":"4.  The system should respond to user input within 2 seconds.","lastModifiedDate":"2024-03-05"},{"lineNumber":537,"author":{"gitId":"solomonng2001"},"content":"5.  The user interface should be intuitive and easy to use, even for users with limited technical knowledge. This includes providing clear and concise instructions, organizing information logically, and offering helpful error messages and tooltips.","lastModifiedDate":"2024-03-06"},{"lineNumber":538,"author":{"gitId":"solomonng2001"},"content":"6.  The codebase should be well-structured, modular, and documented to facilitate future maintenance and enhancements. This includes adhering to coding standards, using version control, and providing comprehensive developer documentation.","lastModifiedDate":"2024-03-06"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"getsquared"},"content":"* **Client**: Customers or potential customers the insurance agent wants to keep in contact with","lastModifiedDate":"2024-03-05"},{"lineNumber":545,"author":{"gitId":"getsquared"},"content":"* **Command Line Interface (CLI)**: A text-based interface to input commands to interact with the system","lastModifiedDate":"2024-03-05"},{"lineNumber":546,"author":{"gitId":"solomonng2001"},"content":"* **Graphical User Interface (GUI)**: A visual interface to interact with the system","lastModifiedDate":"2024-03-06"},{"lineNumber":547,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, MacOS","lastModifiedDate":"2024-02-09"},{"lineNumber":548,"author":{"gitId":"solomonng2001"},"content":"* **AddressBook**: The underlying system that ClientCare is built on. Interchangeable with ClientCare","lastModifiedDate":"2024-03-06"},{"lineNumber":549,"author":{"gitId":"solomonng2001"},"content":"* **Client Priority**: The level of importance or significance assigned to a client, which may influence the order of interactions or services provided","lastModifiedDate":"2024-03-06"},{"lineNumber":550,"author":{"gitId":"solomonng2001"},"content":"* **Policy**: An agreement or contract between an insurance company and a client, specifying the terms and conditions of insurance coverage","lastModifiedDate":"2024-03-06"},{"lineNumber":551,"author":{"gitId":"solomonng2001"},"content":"* **Scheduler**: A feature of the ClientCare application that allows users to manage and organize appointments and follow-ups with clients","lastModifiedDate":"2024-03-06"},{"lineNumber":552,"author":{"gitId":"solomonng2001"},"content":"* **Reminder**: A notification or alert generated by the ClientCare application to remind users of upcoming appointments or follow-ups with clients","lastModifiedDate":"2024-03-06"},{"lineNumber":553,"author":{"gitId":"solomonng2001"},"content":"* **Last Met**: The date on which the user last interacted with a client, used for tracking and monitoring client interactions","lastModifiedDate":"2024-03-06"},{"lineNumber":554,"author":{"gitId":"solomonng2001"},"content":"* **Refresh**: A command or action that updates the information displayed in the ClientCare application to reflect the most recent data","lastModifiedDate":"2024-03-06"},{"lineNumber":555,"author":{"gitId":"solomonng2001"},"content":"* **Help**: A feature of the ClientCare application that provides assistance, guidance, or instructions to users on how to use the application","lastModifiedDate":"2024-03-06"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":565,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":566,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":578,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":589,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":590,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":593,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":594,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":595,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":596,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":597,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":598,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":600,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":601,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":604,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":605,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":606,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"getsquared":52,"ReganChoy":31,"solomonng2001":145,"-":382}},{"path":"docs/_markbind/layouts/default.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003chead-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003clink rel\u003d\"stylesheet\" href\u003d\"{{baseUrl}}/stylesheets/main.css\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c/head-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cheader sticky\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003cnavbar type\u003d\"dark\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003ca slot\u003d\"brand\" href\u003d\"{{baseUrl}}/index.html\" title\u003d\"Home\" class\u003d\"navbar-brand\"\u003eClientCare\u003c/a\u003e","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/index.html\" class\u003d\"nav-link\"\u003eHome\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/UserGuide.html\" class\u003d\"nav-link\"\u003eUser Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/DeveloperGuide.html\" class\u003d\"nav-link\"\u003eDeveloper Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/AboutUs.html\" class\u003d\"nav-link\"\u003eAbout Us\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"    \u003cli\u003e\u003ca href\u003d\"https://github.com/AY2324S2-CS2103T-W12-1/tp\" target\u003d\"_blank\" class\u003d\"nav-link\"\u003e\u003cmd\u003e:fab-github:\u003c/md\u003e\u003c/a\u003e","lastModifiedDate":"2024-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cli slot\u003d\"right\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cform class\u003d\"navbar-form\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003csearchbar :data\u003d\"searchData\" placeholder\u003d\"Search\" :on-hit\u003d\"searchCallback\" menu-align-right\u003e\u003c/searchbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003c/form\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/navbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003c/header\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"flex-body\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"site-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"site-nav-top\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"fw-bold mb-2\" style\u003d\"font-size: 1.25rem;\"\u003eSite Map\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003csite-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* [Home]({{ baseUrl }}/index.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* [User Guide]({{ baseUrl }}/UserGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * [Quick Start]({{ baseUrl }}/UserGuide.html#quick-start)","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * [Features]({{ baseUrl }}/UserGuide.html#features)","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * [FAQ]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  * [Command Summary]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* [Developer Guide]({{ baseUrl }}/DeveloperGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  * [Acknowledgements]({{ baseUrl }}/DeveloperGuide.html#acknowledgements)","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * [Setting Up]({{ baseUrl }}/DeveloperGuide.html#setting-up-getting-started)","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * [Design]({{ baseUrl }}/DeveloperGuide.html#design)","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * [Implementation]({{ baseUrl }}/DeveloperGuide.html#implementation)","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * [Documentation, logging, testing, configuration, dev-ops]({{ baseUrl }}/DeveloperGuide.html#documentation-logging-testing-configuration-dev-ops)","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * [Appendix: Requirements]({{ baseUrl }}/DeveloperGuide.html#appendix-requirements)","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  * [Appendix: Instructions for manual testing]({{ baseUrl }}/DeveloperGuide.html#appendix-instructions-for-manual-testing)","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Tutorials","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * [Tracing code]({{ baseUrl }}/tutorials/TracingCode.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  * [Adding a command]({{ baseUrl }}/tutorials/AddRemark.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  * [Removing Fields]({{ baseUrl }}/tutorials/RemovingFields.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [About Us]({{ baseUrl }}/AboutUs.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u003c/site-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  \u003cdiv id\u003d\"content-wrapper\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    {{ content }}","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"page-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u003cpage-nav /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003cscroll-top-button\u003e\u003c/scroll-top-button\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003cfooter\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u003c!-- Support MarkBind by including a link to us on your landing page! --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"text-center\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    \u003csmall\u003e[\u003cmd\u003e**Powered by**\u003c/md\u003e \u003cimg src\u003d\"https://markbind.org/favicon.ico\" width\u003d\"30\"\u003e {{MarkBind}}, generated on {{timestamp}}]\u003c/small\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/footer\u003e","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"getsquared":1,"-":66}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"yorklim"},"content":"# ClientCare","lastModifiedDate":"2024-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"yorklim"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103T-W12-1/tp/actions)","lastModifiedDate":"2024-03-06"},{"lineNumber":9,"author":{"gitId":"yorklim"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2324S2-CS2103T-W12-1/tp)","lastModifiedDate":"2024-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"yorklim"},"content":"**ClientCare is a desktop application for assisting insurance agents in managing their client relationships and follow-ups effectively.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2024-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"yorklim"},"content":"* If you are interested in using ClientCare, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2024-03-06"},{"lineNumber":16,"author":{"gitId":"yorklim"},"content":"* If you are interested about developing ClientCare, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"yorklim":6,"-":15}},{"path":"docs/team/reganchoy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"layout: default.md","lastModifiedDate":"2024-03-05"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"title: \"Regan Choy\u0027s Project Portfolio Page\"","lastModifiedDate":"2024-03-05"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"### Project: ClientCare","lastModifiedDate":"2024-03-05"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2024-03-05"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-05"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2024-03-05"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2024-03-05"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2024-03-05"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-05"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-05"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2024-03-05"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2024-03-05"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"* **Project management**:","lastModifiedDate":"2024-03-05"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2024-03-05"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2024-03-05"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2024-03-05"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2024-03-05"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"* **Documentation**:","lastModifiedDate":"2024-03-05"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"    * User Guide:","lastModifiedDate":"2024-03-05"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2024-03-05"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2024-03-05"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"    * Developer Guide:","lastModifiedDate":"2024-03-05"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2024-03-05"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"* **Community**:","lastModifiedDate":"2024-03-05"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2024-03-05"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2024-03-05"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2024-03-05"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2024-03-05"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"* **Tools**:","lastModifiedDate":"2024-03-05"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2024-03-05"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2024-03-05"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2024-03-05"}],"authorContributionMap":{"ReganChoy":46}},{"path":"docs/team/shuqing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"layout: default.md","lastModifiedDate":"2024-03-05"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"title: \"Shuqing\u0027s Project Portfolio Page\"","lastModifiedDate":"2024-03-05"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"### Project: ClientCare","lastModifiedDate":"2024-03-05"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2024-03-05"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-05"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2024-03-05"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2024-03-05"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2024-03-05"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-05"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-05"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2024-03-05"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2024-03-05"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"* **Project management**:","lastModifiedDate":"2024-03-05"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2024-03-05"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2024-03-05"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2024-03-05"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2024-03-05"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"* **Documentation**:","lastModifiedDate":"2024-03-05"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"    * User Guide:","lastModifiedDate":"2024-03-05"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2024-03-05"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2024-03-05"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"    * Developer Guide:","lastModifiedDate":"2024-03-05"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2024-03-05"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"* **Community**:","lastModifiedDate":"2024-03-05"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2024-03-05"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2024-03-05"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2024-03-05"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2024-03-05"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"* **Tools**:","lastModifiedDate":"2024-03-05"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2024-03-05"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2024-03-05"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2024-03-05"}],"authorContributionMap":{"getsquared":46}},{"path":"docs/team/yorklim.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yorklim"},"content":"---","lastModifiedDate":"2024-03-06"},{"lineNumber":2,"author":{"gitId":"yorklim"},"content":"layout: default.md","lastModifiedDate":"2024-03-06"},{"lineNumber":3,"author":{"gitId":"yorklim"},"content":"title: \"York Lim\u0027s Project Portfolio Page\"","lastModifiedDate":"2024-03-06"},{"lineNumber":4,"author":{"gitId":"yorklim"},"content":"---","lastModifiedDate":"2024-03-06"},{"lineNumber":5,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":6,"author":{"gitId":"yorklim"},"content":"### Project: ClientCare","lastModifiedDate":"2024-03-06"},{"lineNumber":7,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":8,"author":{"gitId":"yorklim"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2024-03-06"},{"lineNumber":9,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":10,"author":{"gitId":"yorklim"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-06"},{"lineNumber":11,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":12,"author":{"gitId":"yorklim"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2024-03-06"},{"lineNumber":13,"author":{"gitId":"yorklim"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2024-03-06"},{"lineNumber":14,"author":{"gitId":"yorklim"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2024-03-06"},{"lineNumber":15,"author":{"gitId":"yorklim"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-06"},{"lineNumber":16,"author":{"gitId":"yorklim"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":18,"author":{"gitId":"yorklim"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2024-03-06"},{"lineNumber":19,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":20,"author":{"gitId":"yorklim"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2024-03-06"},{"lineNumber":21,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":22,"author":{"gitId":"yorklim"},"content":"* **Project management**:","lastModifiedDate":"2024-03-06"},{"lineNumber":23,"author":{"gitId":"yorklim"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2024-03-06"},{"lineNumber":24,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":25,"author":{"gitId":"yorklim"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2024-03-06"},{"lineNumber":26,"author":{"gitId":"yorklim"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2024-03-06"},{"lineNumber":27,"author":{"gitId":"yorklim"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2024-03-06"},{"lineNumber":28,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":29,"author":{"gitId":"yorklim"},"content":"* **Documentation**:","lastModifiedDate":"2024-03-06"},{"lineNumber":30,"author":{"gitId":"yorklim"},"content":"    * User Guide:","lastModifiedDate":"2024-03-06"},{"lineNumber":31,"author":{"gitId":"yorklim"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2024-03-06"},{"lineNumber":32,"author":{"gitId":"yorklim"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2024-03-06"},{"lineNumber":33,"author":{"gitId":"yorklim"},"content":"    * Developer Guide:","lastModifiedDate":"2024-03-06"},{"lineNumber":34,"author":{"gitId":"yorklim"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2024-03-06"},{"lineNumber":35,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":36,"author":{"gitId":"yorklim"},"content":"* **Community**:","lastModifiedDate":"2024-03-06"},{"lineNumber":37,"author":{"gitId":"yorklim"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2024-03-06"},{"lineNumber":38,"author":{"gitId":"yorklim"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2024-03-06"},{"lineNumber":39,"author":{"gitId":"yorklim"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2024-03-06"},{"lineNumber":40,"author":{"gitId":"yorklim"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2024-03-06"},{"lineNumber":41,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":42,"author":{"gitId":"yorklim"},"content":"* **Tools**:","lastModifiedDate":"2024-03-06"},{"lineNumber":43,"author":{"gitId":"yorklim"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2024-03-06"},{"lineNumber":44,"author":{"gitId":"yorklim"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2024-03-06"},{"lineNumber":45,"author":{"gitId":"yorklim"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":46,"author":{"gitId":"yorklim"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2024-03-06"}],"authorContributionMap":{"yorklim":46}},{"path":"src/main/java/seedu/address/commons/util/DateTimeUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":" * Helper functions for handling dates and times.","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"public class DateTimeUtil {","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"should be in the format YYYY-MM-DD HH:mm \"","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"            + \"and must be an actual dateTime\";","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"    public static final String DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}\";","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"     * Returns true if a given string is a valid dateTime.","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"     * The string must be in the format \"yyyy-MM-dd hh:mm\".","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"     * The dateTime string should be validated as parsable before calling this method.","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"     * @param test the string to test","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"     * @return true if the string is a valid date","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    public static boolean isValidDateTimeString(String test) {","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"        return (test !\u003d null) \u0026\u0026 test.matches(VALIDATION_REGEX)","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"                \u0026\u0026 isParsableDateTimeString(test);","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"     * Returns true if a given string is a parsable dateTime.","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"     * @param test the string representation of a dateTime to check","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"     * @return true if the string is a parsable dateTime","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"    public static boolean isParsableDateTimeString(String test) {","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        if (test \u003d\u003d null || test.isEmpty()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"            LocalDateTime.parse(test, DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"     * Returns true if a given dateTime is in the past.","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"     * @param dateTime the dateTime to check","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"     * @return true if the dateTime is in the past","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"    public static boolean isPastDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"        return dateTime.isBefore(LocalDateTime.now());","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"     * Parses a string representation of a dateTime into a LocalDateTime object.","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"     * The string representation must be in the format \"yyyy-MM-dd hh:mm\".","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"     * The dateTime string should be validated as parsable before calling this method.","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"     * @param dateTime the string representation of a date","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"     * @return the LocalDate object","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"    public static LocalDateTime parseStringToDateTime(String dateTime) throws DateTimeParseException {","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"        if (dateTime \u003d\u003d null || dateTime.isEmpty()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"            throw new DateTimeParseException(\"Date string is empty\", dateTime, 0);","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"        return LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"     * Parses a LocalDateTime object into a string representation of a dateTime.","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"     * The string representation will be in the format \"YYYY-MM-DD hh:mm\".","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"     * The date should be validated as parsable before calling this method.","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"     * @param dateTime the LocalDateTtime object","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"ReganChoy"},"content":"     * @return the string representation of the date","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"ReganChoy"},"content":"    public static String parseDateToString(LocalDateTime dateTime) throws DateTimeException {","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"ReganChoy"},"content":"            return \"\";","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"ReganChoy"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":92,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":93,"author":{"gitId":"ReganChoy"},"content":"     * Returns a message constraint that is contextualised to the date type.","lastModifiedDate":"2024-03-12"},{"lineNumber":94,"author":{"gitId":"ReganChoy"},"content":"     * For example, if the date type is \"Birthday\", the message constraint will be \"Birthday should be in the format.","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":96,"author":{"gitId":"ReganChoy"},"content":"     * @param dateType the type of date, such as \"Birthday\", \"Appointment\"","lastModifiedDate":"2024-03-12"},{"lineNumber":97,"author":{"gitId":"ReganChoy"},"content":"     * @return a message constraint that is contextualised to the date type","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":99,"author":{"gitId":"ReganChoy"},"content":"    public static String getMessageConstraintsForDateType(String dateType) {","lastModifiedDate":"2024-03-12"},{"lineNumber":100,"author":{"gitId":"ReganChoy"},"content":"        return dateType + \" \" + MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-12"},{"lineNumber":101,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":102,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":102}},{"path":"src/main/java/seedu/address/commons/util/DateUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"solomonng2001"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"solomonng2001"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"solomonng2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"solomonng2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"solomonng2001"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"solomonng2001"},"content":" * Helper functions for handling dates and times.","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"solomonng2001"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"solomonng2001"},"content":"public class DateUtil {","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"solomonng2001"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"should be in the format YYYY-MM-DD and must be an actual date\";","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"solomonng2001"},"content":"    public static final String DATE_FORMAT \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"solomonng2001"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"solomonng2001"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"solomonng2001"},"content":"     * The string must be in the format \"yyyy-MM-dd\".","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"solomonng2001"},"content":"     * The date string should be validated as parsable before calling this method.","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"solomonng2001"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"solomonng2001"},"content":"     * @param test the string to test","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"solomonng2001"},"content":"     * @return true if the string is a valid date","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"solomonng2001"},"content":"    public static boolean isValidDateString(String test) {","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"solomonng2001"},"content":"        return (test !\u003d null) \u0026\u0026 test.matches(VALIDATION_REGEX)","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"solomonng2001"},"content":"                \u0026\u0026 isParsableDateString(test);","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"solomonng2001"},"content":"     * Returns true if a given string is a parsable date.","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"solomonng2001"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"solomonng2001"},"content":"     * @param test the string representation of a date to check","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"solomonng2001"},"content":"     * @return true if the string is a parsable date","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"solomonng2001"},"content":"    public static boolean isParsableDateString(String test) {","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"        if (test \u003d\u003d null || test.isEmpty()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"            return false;","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"solomonng2001"},"content":"        try {","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"solomonng2001"},"content":"            LocalDate.parse(test, DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"solomonng2001"},"content":"            return true;","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"solomonng2001"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"solomonng2001"},"content":"            return false;","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"solomonng2001"},"content":"     * Returns true if a given date is in the past.","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"solomonng2001"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"solomonng2001"},"content":"     * @param date the date to check","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"solomonng2001"},"content":"     * @return true if the date is in the past","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"solomonng2001"},"content":"    public static boolean isPastDate(LocalDate date) {","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"solomonng2001"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"solomonng2001"},"content":"            return false;","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"solomonng2001"},"content":"        return date.isBefore(LocalDate.now());","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"solomonng2001"},"content":"     * Parses a string representation of a date into a LocalDate object.","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"solomonng2001"},"content":"     * The string representation must be in the format \"yyyy-MM-dd\".","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"solomonng2001"},"content":"     * The date string should be validated as parsable before calling this method.","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"solomonng2001"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"solomonng2001"},"content":"     * @param date the string representation of a date","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"solomonng2001"},"content":"     * @return the LocalDate object","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"solomonng2001"},"content":"    public static LocalDate parseStringToDate(String date) throws DateTimeParseException {","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"solomonng2001"},"content":"        if (date \u003d\u003d null || date.isEmpty()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"solomonng2001"},"content":"            throw new DateTimeParseException(\"Date string is empty\", date, 0);","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"solomonng2001"},"content":"        return LocalDate.parse(date, DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"solomonng2001"},"content":"     * Parses a LocalDate object into a string representation of a date.","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"solomonng2001"},"content":"     * The string representation will be in the format \"YYYY-MM-DD\".","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"solomonng2001"},"content":"     * The date should be validated as parsable before calling this method.","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"solomonng2001"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"solomonng2001"},"content":"     * @param date the LocalDate object","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"solomonng2001"},"content":"     * @return the string representation of the date","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"solomonng2001"},"content":"    public static String parseDateToString(LocalDate date) throws DateTimeException {","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"solomonng2001"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"solomonng2001"},"content":"            return \"\";","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"solomonng2001"},"content":"        return date.format(DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"solomonng2001"},"content":"     * Returns a message constraint that is contextualised to the date type.","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"solomonng2001"},"content":"     * For example, if the date type is \"Birthday\", the message constraint will be \"Birthday should be in the format.","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"solomonng2001"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":95,"author":{"gitId":"solomonng2001"},"content":"     * @param dateType the type of date, such as \"Birthday\", \"Appointment\"","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"solomonng2001"},"content":"     * @return a message constraint that is contextualised to the date type","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":98,"author":{"gitId":"solomonng2001"},"content":"    public static String getMessageConstraintsForDateType(String dateType) {","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"solomonng2001"},"content":"        return dateType + \" \" + MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-11"},{"lineNumber":100,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":101,"author":{"gitId":"solomonng2001"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"solomonng2001":101}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_LASTMET_FUTURE \u003d \"You cannot meet someone from the future.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_SCHEDULE_PAST \u003d \"You cannot schedule an appointment in the past.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_SCHEDULE_DONE \u003d \"This schedule has already been completed.\";","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        builder.append(person.getName())","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .append(person.getPhone())","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .append(person.getAddress())","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"solomonng2001"},"content":"                .append(\"; Birthday: \")","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"solomonng2001"},"content":"                .append(person.getBirthday())","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .append(\"; Tags: \");","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        person.getTags().forEach(builder::append);","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReganChoy":3,"solomonng2001":2,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"solomonng2001"},"content":"            + PREFIX_BIRTHDAY + \"BIRTHDAY \"","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"            + PREFIX_BIRTHDAY + \"1990-01-01 \"","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"solomonng2001":3,"-":84}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.LastMet;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Schedule;","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"solomonng2001"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \"","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":107,"author":{"gitId":"solomonng2001"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());","lastModifiedDate":"2024-03-11"},{"lineNumber":108,"author":{"gitId":"ReganChoy"},"content":"        LastMet currentLastMet \u003d personToEdit.getLastMet();","lastModifiedDate":"2024-03-12"},{"lineNumber":109,"author":{"gitId":"ReganChoy"},"content":"        Schedule currentSchedule \u003d personToEdit.getSchedule();","lastModifiedDate":"2024-03-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"ReganChoy"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedBirthday,","lastModifiedDate":"2024-03-12"},{"lineNumber":113,"author":{"gitId":"ReganChoy"},"content":"                currentLastMet, currentSchedule, updatedTags);","lastModifiedDate":"2024-03-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":149,"author":{"gitId":"solomonng2001"},"content":"        private Birthday birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":150,"author":{"gitId":"ReganChoy"},"content":"        private LastMet lastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":151,"author":{"gitId":"ReganChoy"},"content":"        private Schedule schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":165,"author":{"gitId":"solomonng2001"},"content":"            setBirthday(toCopy.birthday);","lastModifiedDate":"2024-03-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"solomonng2001"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, birthday, tags);","lastModifiedDate":"2024-03-11"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":208,"author":{"gitId":"solomonng2001"},"content":"        public void setBirthday(Birthday birthday) {","lastModifiedDate":"2024-03-11"},{"lineNumber":209,"author":{"gitId":"solomonng2001"},"content":"            this.birthday \u003d birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":210,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":211,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":212,"author":{"gitId":"solomonng2001"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {","lastModifiedDate":"2024-03-11"},{"lineNumber":213,"author":{"gitId":"solomonng2001"},"content":"            return Optional.ofNullable(birthday);","lastModifiedDate":"2024-03-11"},{"lineNumber":214,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":215,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":217,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":218,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":219,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":225,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":226,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":227,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":228,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPersonDescriptor.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":249,"author":{"gitId":"solomonng2001"},"content":"                    \u0026\u0026 Objects.equals(birthday, otherEditPersonDescriptor.birthday)","lastModifiedDate":"2024-03-11"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(tags, otherEditPersonDescriptor.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":260,"author":{"gitId":"solomonng2001"},"content":"                    .add(\"birthday\", birthday)","lastModifiedDate":"2024-03-11"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                    .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"solomonng2001":16,"ReganChoy":9,"-":240}},{"path":"src/main/java/seedu/address/logic/commands/LastMetCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LASTMET;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import java.util.List;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.FutureDateException;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.LastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":" * Updates the last met date of the person.","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"public class LastMetCommand extends Command {","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    public static final String COMMAND_WORD \u003d \"met\";","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": marks a person as met. \"","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"            + \"INDEX \"","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"            + PREFIX_LASTMET + \"DATE\\n\"","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"            + \"1 \"","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"            + PREFIX_LASTMET + \"2001-02-03\"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"            + \" which refers to 3 Feb 2001\";","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have met %1$s.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"    private final Index index;","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"    private final LastMet lastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"     * Creates a LastMetCommand to update last mete date of the specified {@code Person}","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"    public LastMetCommand(Index index, LastMet lastMet) {","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(index);","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(lastMet);","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"        this.lastMet \u003d lastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"            checkFutureDate(this.lastMet.getLastMet());","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        } catch (FutureDateException e) {","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"            throw new CommandException(Messages.MESSAGE_LASTMET_FUTURE);","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"        Person personToMeet \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"        Person metPerson \u003d new Person(","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"                personToMeet.getName(), personToMeet.getPhone(), personToMeet.getEmail(),","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"                personToMeet.getAddress(), personToMeet.getBirthday(),","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"                this.lastMet, personToMeet.getSchedule(), personToMeet.getTags());","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"        model.setPerson(personToMeet, metPerson);","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personToMeet.getName()));","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"ReganChoy"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"ReganChoy"},"content":"        if (!(other instanceof LastMetCommand)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"ReganChoy"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"ReganChoy"},"content":"        LastMetCommand otherMetCommand \u003d (LastMetCommand) other;","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"ReganChoy"},"content":"        return index.equals(otherMetCommand.index);","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":92,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":93,"author":{"gitId":"ReganChoy"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":94,"author":{"gitId":"ReganChoy"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"ReganChoy"},"content":"                .add(\"index\", index)","lastModifiedDate":"2024-03-12"},{"lineNumber":96,"author":{"gitId":"ReganChoy"},"content":"                .add(\"date\", lastMet.getLastMet())","lastModifiedDate":"2024-03-12"},{"lineNumber":97,"author":{"gitId":"ReganChoy"},"content":"                .toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":99,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":100,"author":{"gitId":"ReganChoy"},"content":"    private void checkFutureDate(LocalDate date) throws FutureDateException {","lastModifiedDate":"2024-03-12"},{"lineNumber":101,"author":{"gitId":"ReganChoy"},"content":"        if (date.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-03-12"},{"lineNumber":102,"author":{"gitId":"ReganChoy"},"content":"            throw new FutureDateException(Messages.MESSAGE_LASTMET_FUTURE);","lastModifiedDate":"2024-03-12"},{"lineNumber":103,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":104,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":105,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":105}},{"path":"src/main/java/seedu/address/logic/commands/MarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import java.util.List;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.ScheduleAlreadyDoneException;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Schedule;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":" * Marks a schedule with a Client as done.","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": marks a schedule as done. \"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"            + \"INDEX \"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"            + \"1 \";","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Your schedule with %1$s has been marked as done.\";","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"    private final Index index;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"     * Creates a LastMetCommand to update last mete date of the specified {@code Person}","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"    public MarkCommand(Index index) {","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(index);","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"        Person personToMeet \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"            checkIsDone(personToMeet.getSchedule());","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"        } catch (ScheduleAlreadyDoneException e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"            throw new CommandException(Messages.MESSAGE_SCHEDULE_DONE);","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"        Person metPerson \u003d new Person(","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"                personToMeet.getName(), personToMeet.getPhone(), personToMeet.getEmail(),","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"                personToMeet.getAddress(), personToMeet.getBirthday(),","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"                personToMeet.getLastMet(), personToMeet.getSchedule(), personToMeet.getTags());","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"        metPerson.getSchedule().markIsDone();","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"        model.setPerson(personToMeet, metPerson);","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personToMeet.getName()));","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"        if (!(other instanceof MarkCommand)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"        MarkCommand otherMarkCommand \u003d (MarkCommand) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"        return index.equals(otherMarkCommand.index);","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"ReganChoy"},"content":"    public String toString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"ReganChoy"},"content":"                .add(\"index\", index)","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"ReganChoy"},"content":"                .toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"ReganChoy"},"content":"    private void checkIsDone(Schedule schedule) throws ScheduleAlreadyDoneException {","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"ReganChoy"},"content":"        if (schedule.getIsDone()) {","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"ReganChoy"},"content":"            throw new ScheduleAlreadyDoneException(Messages.MESSAGE_SCHEDULE_DONE);","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":96}},{"path":"src/main/java/seedu/address/logic/commands/ScheduleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import java.util.List;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.PastDateException;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":" * Schedules an appointment with the person.","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"public class ScheduleCommand extends Command {","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    public static final String COMMAND_WORD \u003d \"schedule\";","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": schedules an appointment with client. \"","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"            + \"INDEX \"","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"            + PREFIX_SCHEDULE + \"DATE\\n\"","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"            + \"1 \"","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"            + PREFIX_SCHEDULE + \"2001-03-02 12:00 \"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"            + \"which refers to 2 March 2001 12pm\";","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have scheduled an appointment with %1$s.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"    private final Index index;","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"    private final Schedule schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"     * Creates a ScheduleCommand to schedule an appointment with the specified {@code Person}","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"    public ScheduleCommand(Index index, Schedule schedule) {","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(index);","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(schedule);","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"            checkPastDate(this.schedule.getSchedule());","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        } catch (PastDateException e) {","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"            throw new CommandException(Messages.MESSAGE_SCHEDULE_PAST);","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"        Person personToMeet \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"        Person metPerson \u003d new Person(","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"                personToMeet.getName(), personToMeet.getPhone(), personToMeet.getEmail(),","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"                personToMeet.getAddress(), personToMeet.getBirthday(),","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"                personToMeet.getLastMet(), this.schedule, personToMeet.getTags());","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"        model.setPerson(personToMeet, metPerson);","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personToMeet.getName()));","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"ReganChoy"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"ReganChoy"},"content":"        if (!(other instanceof ScheduleCommand)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"ReganChoy"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"ReganChoy"},"content":"        ScheduleCommand otherScheduleCommand \u003d (ScheduleCommand) other;","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"ReganChoy"},"content":"        return index.equals(otherScheduleCommand.index);","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":92,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":93,"author":{"gitId":"ReganChoy"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":94,"author":{"gitId":"ReganChoy"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"ReganChoy"},"content":"                .add(\"index\", index)","lastModifiedDate":"2024-03-12"},{"lineNumber":96,"author":{"gitId":"ReganChoy"},"content":"                .add(\"dateTime\", schedule.getSchedule())","lastModifiedDate":"2024-03-12"},{"lineNumber":97,"author":{"gitId":"ReganChoy"},"content":"                .toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":99,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":100,"author":{"gitId":"ReganChoy"},"content":"    private void checkPastDate(LocalDateTime dateTime) throws PastDateException {","lastModifiedDate":"2024-03-12"},{"lineNumber":101,"author":{"gitId":"ReganChoy"},"content":"        if (dateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2024-03-12"},{"lineNumber":102,"author":{"gitId":"ReganChoy"},"content":"            throw new PastDateException(Messages.MESSAGE_SCHEDULE_PAST);","lastModifiedDate":"2024-03-12"},{"lineNumber":103,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":104,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":105,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":105}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/FutureDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands.exceptions;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"public class FutureDateException extends Exception {","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"     * Constructs a new {@code FutureDateException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"    public FutureDateException(String message) {","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"        super(message);","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":13}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/PastDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands.exceptions;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"public class PastDateException extends Exception {","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"     * Constructs a new {@code PastDateException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"    public PastDateException(String message) {","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"        super(message);","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":13}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/ScheduleAlreadyDoneException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"public class ScheduleAlreadyDoneException extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"     * Constructs a new {@code ScheduleAlreadyDoneException}","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"     * with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"    public ScheduleAlreadyDoneException(String message) {","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"        super(message);","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":14}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"solomonng2001"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"                        PREFIX_BIRTHDAY, PREFIX_TAG);","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":39,"author":{"gitId":"solomonng2001"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_BIRTHDAY)","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"solomonng2001"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"solomonng2001"},"content":"                PREFIX_BIRTHDAY);","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"solomonng2001"},"content":"        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"solomonng2001"},"content":"        Person person \u003d new Person(name, phone, email, address, birthday, tagList);","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"solomonng2001":9,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.LastMetCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.ScheduleCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"        case LastMetCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"            return new LastMetCommandParser().parse(arguments);","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"        case ScheduleCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"            return new ScheduleCommandParser().parse(arguments);","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"            return new MarkCommandParser().parse(arguments);","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReganChoy":12,"-":86}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"    public static final Prefix PREFIX_CLIENTINDEX \u003d new Prefix(\"c/\");","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"    public static final Prefix PREFIX_LASTMET \u003d new Prefix(\"d/\");","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    public static final Prefix PREFIX_SCHEDULE \u003d new Prefix(\"d/\");","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"solomonng2001"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"d/\");","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"ReganChoy":3,"solomonng2001":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"                        PREFIX_BIRTHDAY, PREFIX_TAG);","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2023-07-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"solomonng2001"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"solomonng2001"},"content":"            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"solomonng2001":6,"-":84}},{"path":"src/main/java/seedu/address/logic/parser/LastMetCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LASTMET;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.LastMetCommand;","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.LastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":" * Parses input arguments and creates a new LastMetCommand object","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"public class LastMetCommandParser {","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"     * Parses the given {@code String} of arguments in the context of the LastMetCommand","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"     * and returns an LastMetCommand object for execution.","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"    public LastMetCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LASTMET);","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_LASTMET)","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LastMetCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_LASTMET);","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"        Index index;","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LastMetCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        String lastMetString \u003d argMultimap.getValue(PREFIX_LASTMET).orElse(\"\");","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"            LastMet lastMet \u003d convertStringToLastMet(lastMetString);","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"            return new LastMetCommand(index, lastMet);","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"        } catch (DateTimeParseException ive) {","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LastMetCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"    private LastMet convertStringToLastMet(String input) {","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"        LocalDate formattedInput \u003d DateUtil.parseStringToDate(input);","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"        return new LastMet(formattedInput);","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":69}},{"path":"src/main/java/seedu/address/logic/parser/MarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":" * Parses input arguments and creates a new MarkCommand object","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"public class MarkCommandParser {","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"     * Parses the given {@code String} of arguments in the context of the MarkCommand","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"     * and returns an MarkCommand object for execution.","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    public MarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"        if (!arePrefixesPresent(argMultimap)","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        Index index;","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"        return new MarkCommand(index);","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":49}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"solomonng2001"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"solomonng2001"},"content":"     * Parses a {@code String birthday} into a {@code Birthday}.","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"solomonng2001"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"solomonng2001"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"solomonng2001"},"content":"     * @throws ParseException if the given {@code birthday} is invalid.","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"solomonng2001"},"content":"    public static Birthday parseBirthday(String birthday) throws ParseException {","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"solomonng2001"},"content":"        requireNonNull(birthday);","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"solomonng2001"},"content":"        String trimmedBirthday \u003d birthday.trim();","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"solomonng2001"},"content":"        if (!Birthday.isValidBirthday(trimmedBirthday)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"solomonng2001"},"content":"            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":95,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"solomonng2001"},"content":"        return new Birthday(trimmedBirthday);","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":98,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"solomonng2001":16,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateTimeUtil;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.ScheduleCommand;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":" * Parses input arguments and creates a new ScheduleCommand object","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"public class ScheduleCommandParser {","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"     * Parses the given {@code String} of arguments in the context of the ScheduleCommand","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"     * and returns an ScheduleCommand object for execution.","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    public ScheduleCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SCHEDULE);","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_SCHEDULE)","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_SCHEDULE);","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"        Index index;","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"                    ScheduleCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        String scheduleString \u003d argMultimap.getValue(PREFIX_SCHEDULE).orElse(\"\");","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"            Schedule schedule \u003d convertStringToSchedule(scheduleString);","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"            return new ScheduleCommand(index, schedule);","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"        } catch (DateTimeParseException ive) {","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"                    ScheduleCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"    private Schedule convertStringToSchedule(String input) {","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime formattedInput \u003d DateTimeUtil.parseStringToDateTime(input);","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"        return new Schedule(formattedInput);","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":70}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"solomonng2001"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"solomonng2001"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"solomonng2001"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"solomonng2001"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"solomonng2001"},"content":" * Represents a Client\u0027s birthday in the address book.","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"solomonng2001"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"solomonng2001"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"solomonng2001"},"content":"public class Birthday {","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"solomonng2001"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d DateUtil.getMessageConstraintsForDateType(\"Birthday\");","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"solomonng2001"},"content":"    public final LocalDate date;","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"solomonng2001"},"content":"     * Constructs a {@code Birthday}.","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"solomonng2001"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"solomonng2001"},"content":"     * @param birthday A valid birthday.","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"solomonng2001"},"content":"    public Birthday(String birthday) {","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"solomonng2001"},"content":"        requireNonNull(birthday);","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"solomonng2001"},"content":"        checkArgument(isValidBirthday(birthday), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"solomonng2001"},"content":"        this.date \u003d DateUtil.parseStringToDate(birthday);","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"solomonng2001"},"content":"     * Returns true if a given string is a valid birthday.","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"solomonng2001"},"content":"    public static boolean isValidBirthday(String test) {","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"solomonng2001"},"content":"        if (!DateUtil.isValidDateString(test)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"solomonng2001"},"content":"            return false;","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"        LocalDate birthdayTest \u003d DateUtil.parseStringToDate(test);","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"        if (!DateUtil.isPastDate(birthdayTest)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"solomonng2001"},"content":"            return false;","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"solomonng2001"},"content":"        return true;","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"solomonng2001"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"solomonng2001"},"content":"    public String toString() {","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"solomonng2001"},"content":"        return DateUtil.parseDateToString(date);","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"solomonng2001"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"solomonng2001"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"solomonng2001"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"solomonng2001"},"content":"            return true;","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"solomonng2001"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"solomonng2001"},"content":"        if (!(other instanceof Birthday)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"solomonng2001"},"content":"            return false;","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"solomonng2001"},"content":"        Birthday otherBirthday \u003d (Birthday) other;","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"solomonng2001"},"content":"        return date.equals(otherBirthday.date);","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"solomonng2001"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"solomonng2001"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"solomonng2001"},"content":"        return date.hashCode();","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"solomonng2001"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"solomonng2001":67}},{"path":"src/main/java/seedu/address/model/person/LastMet.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static java.lang.Math.abs;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":" * Represents the last met date with a Client in the address book.","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"public class LastMet {","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"    private static long lastMetDuration \u003d 90;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    private final LocalDate lastMetDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"    private boolean isOverdue;","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"     * Constructs a {@code LastMet}.","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"     * @param lastMet A valid lastMet date.","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    public LastMet(LocalDate lastMet) {","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"        this.lastMetDate \u003d lastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"        checkOverdue();","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"     * Changes the number of days of lastMet before a Client\u0027s LastMet is flagged in the schedule tracker.","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"     * @param days","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"    public static void setLastMetDuration(long days) {","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        lastMetDuration \u003d days;","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"    public static long getLastMetDuration() {","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        return lastMetDuration;","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    private void checkOverdue() {","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"        long periodGap \u003d getPeriodGap();","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"        if (periodGap \u003e lastMetDuration) {","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"            this.isOverdue \u003d true;","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"        } else {","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"            this.isOverdue \u003d false;","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"     * Method returns isOverdue boolean","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"     * @return The status if a new meetup with client is overdue.","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"    public boolean getIsOverdue() {","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"        return this.isOverdue;","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"     * Method returns number of days since lastMet with client.","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"     * @return The number of days since lastMet with client.","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"    public long getPeriodGap() {","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"        return ChronoUnit.DAYS.between(this.lastMetDate, LocalDate.now());","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"    public LocalDate getLastMet() {","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"        return this.lastMetDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"     * Method returns a string representation of LastMet for the GUI.","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"     * @return A string representation of LastMet for the GUI.","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"    public String showLastMet() {","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"        return \"Last Met: \" + this.lastMetDate + \", \" + abs(this.getPeriodGap()) + \" Days Ago.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"        return DateUtil.parseDateToString(this.lastMetDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":81}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"solomonng2001"},"content":"    private final Birthday birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"    private final LastMet lastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"    private final Schedule schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Birthday birthday, Set\u003cTag\u003e tags) {","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"        requireAllNonNull(name, phone, email, address, birthday, tags);","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"solomonng2001"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        this.lastMet \u003d new LastMet(LocalDate.now());","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"        this.schedule \u003d new Schedule(LocalDateTime.now(), true);","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"     * Person constructor used for subsequent LastMet, Schedule and Mark Commands.","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Birthday birthday,","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"                  LastMet lastmet, Schedule schedule, Set\u003cTag\u003e tags) {","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"        requireAllNonNull(name, phone, email, address, birthday, tags);","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"        this.address \u003d address;","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"        this.lastMet \u003d checkNullLastMet(lastmet);","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"        this.schedule \u003d checkNullSchedule(schedule);","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":80,"author":{"gitId":"solomonng2001"},"content":"    public Birthday getBirthday() {","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"solomonng2001"},"content":"        return birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"ReganChoy"},"content":"    public LastMet getLastMet() {","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"ReganChoy"},"content":"        return lastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"ReganChoy"},"content":"    public Schedule getSchedule() {","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"ReganChoy"},"content":"        return schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":92,"author":{"gitId":"ReganChoy"},"content":"    private LastMet checkNullLastMet(LastMet lastmet) {","lastModifiedDate":"2024-03-12"},{"lineNumber":93,"author":{"gitId":"ReganChoy"},"content":"        if (lastmet \u003d\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":94,"author":{"gitId":"ReganChoy"},"content":"            return new LastMet(LocalDate.now());","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"ReganChoy"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":96,"author":{"gitId":"ReganChoy"},"content":"            return lastmet;","lastModifiedDate":"2024-03-12"},{"lineNumber":97,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":99,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":100,"author":{"gitId":"ReganChoy"},"content":"    private Schedule checkNullSchedule(Schedule schedule) {","lastModifiedDate":"2024-03-12"},{"lineNumber":101,"author":{"gitId":"ReganChoy"},"content":"        if (schedule \u003d\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":102,"author":{"gitId":"ReganChoy"},"content":"            return new Schedule(LocalDateTime.now(), true);","lastModifiedDate":"2024-03-12"},{"lineNumber":103,"author":{"gitId":"ReganChoy"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":104,"author":{"gitId":"ReganChoy"},"content":"            return schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":105,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":106,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":107,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                \u0026\u0026 address.equals(otherPerson.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":149,"author":{"gitId":"solomonng2001"},"content":"                \u0026\u0026 birthday.equals(otherPerson.birthday)","lastModifiedDate":"2024-03-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                \u0026\u0026 tags.equals(otherPerson.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":156,"author":{"gitId":"solomonng2001"},"content":"        return Objects.hash(name, phone, email, address, birthday, tags);","lastModifiedDate":"2024-03-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":166,"author":{"gitId":"solomonng2001"},"content":"                .add(\"birthday\", birthday)","lastModifiedDate":"2024-03-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReganChoy":46,"solomonng2001":11,"-":114}},{"path":"src/main/java/seedu/address/model/person/Schedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateTimeUtil;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":" * Schedule class is responsible for keep tracking for appointments with a Client in the address book.","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"public class Schedule {","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"    private LocalDateTime schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"    private boolean isDone;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"    private boolean isMissed;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"     * Constructs a {@code Schedule}.","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"     * @param schedule A valid schedule dateTime.","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"    public Schedule(LocalDateTime schedule) {","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"        checkIsMissed();","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"     * Constructs a {@code Schedule}.","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"     * @param schedule A valid schedule dateTime.","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"     * @param isDone Status of schedule if known","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"    public Schedule(LocalDateTime schedule, boolean isDone) {","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"        checkIsMissed();","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    public LocalDateTime getSchedule() {","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"        return this.schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        return this.isDone;","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"    public void markIsDone() {","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"        return DateTimeUtil.parseDateToString(this.schedule) + \"/\" + isDoneToString();","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"     * Method is used for generating a String representation for the GUI.","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"     * @return A string representation of Schedule for the GUI.","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"    public String showSchedule() {","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"        if (isDone) {","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"            return \"No upcoming appointment\";","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"            return \"Your next appointment is \" + DateTimeUtil.parseDateToString(this.schedule);","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"     * Method is used for converting Storage values to boolean isDone when loading app.","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"     * @param input","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"     * @return","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"    public static boolean checkIsDoneFromString(String input) {","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"        if (input.equals(\"1\")) {","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"     * Method is used for converting boolean isDone value to String value for Storage.","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"     * @return","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"ReganChoy"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"ReganChoy"},"content":"    public String isDoneToString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"ReganChoy"},"content":"        if (isDone) {","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"            return \"1\";","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"ReganChoy"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"ReganChoy"},"content":"            return \"0\";","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"ReganChoy"},"content":"    public boolean getIsMissedReminder() {","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"ReganChoy"},"content":"        if (this.isMissed \u0026\u0026 !this.isDone) {","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"ReganChoy"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"ReganChoy"},"content":"        } else {","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"ReganChoy"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"ReganChoy"},"content":"    private void checkIsMissed() {","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"ReganChoy"},"content":"        if (this.schedule.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"ReganChoy"},"content":"            this.isMissed \u003d true;","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"ReganChoy"},"content":"        } else {","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"ReganChoy"},"content":"            this.isMissed \u003d false;","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"ReganChoy"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"ReganChoy"},"content":"    public boolean getIsMissed() {","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"ReganChoy"},"content":"        return this.isMissed;","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":111}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"solomonng2001"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"solomonng2001"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Birthday(\"1990-01-01\"),","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"solomonng2001"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Birthday(\"1983-03-15\"),","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"solomonng2001"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Birthday(\"1997-12-23\"),","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"solomonng2001"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Birthday(\"2001-05-20\"),","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Birthday(\"1979-10-29\"),","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"solomonng2001"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Birthday(\"2003-11-07\"),","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"solomonng2001":7,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateTimeUtil;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.LastMet;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Schedule;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"    private final String birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"    private final String lastmet;","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    private final String schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"            @JsonProperty(\"birthday\") String birthday, @JsonProperty(\"lastmet\") String lastmet,","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"                             @JsonProperty(\"schedule\") String schedule,","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"solomonng2001"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        this.lastmet \u003d lastmet;","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-01-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-01-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"solomonng2001"},"content":"        birthday \u003d source.getBirthday().toString();","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"        lastmet \u003d source.getLastMet().toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"        schedule \u003d source.getSchedule().toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-01-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-01-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"solomonng2001"},"content":"        if (birthday \u003d\u003d null) {","lastModifiedDate":"2024-03-11"},{"lineNumber":122,"author":{"gitId":"solomonng2001"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-11"},{"lineNumber":123,"author":{"gitId":"solomonng2001"},"content":"                    Birthday.class.getSimpleName()));","lastModifiedDate":"2024-03-11"},{"lineNumber":124,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":125,"author":{"gitId":"solomonng2001"},"content":"        if (!Birthday.isValidBirthday(birthday)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":126,"author":{"gitId":"solomonng2001"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":127,"author":{"gitId":"solomonng2001"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":128,"author":{"gitId":"solomonng2001"},"content":"        final Birthday modelBirthday \u003d new Birthday(birthday);","lastModifiedDate":"2024-03-11"},{"lineNumber":129,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":130,"author":{"gitId":"ReganChoy"},"content":"        final LastMet modelLastMet \u003d new LastMet(DateUtil.parseStringToDate(lastmet));","lastModifiedDate":"2024-03-12"},{"lineNumber":131,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":132,"author":{"gitId":"ReganChoy"},"content":"        String[] scheduleString \u003d schedule.toString().split(\"/\");","lastModifiedDate":"2024-03-12"},{"lineNumber":133,"author":{"gitId":"ReganChoy"},"content":"        String scheduleDateTimeString \u003d scheduleString[0];","lastModifiedDate":"2024-03-12"},{"lineNumber":134,"author":{"gitId":"ReganChoy"},"content":"        String isDoneString \u003d scheduleString[1];","lastModifiedDate":"2024-03-12"},{"lineNumber":135,"author":{"gitId":"ReganChoy"},"content":"        final Schedule modelSchedule \u003d new Schedule(DateTimeUtil.parseStringToDateTime(scheduleDateTimeString),","lastModifiedDate":"2024-03-12"},{"lineNumber":136,"author":{"gitId":"ReganChoy"},"content":"                Schedule.checkIsDoneFromString(isDoneString));","lastModifiedDate":"2024-03-12"},{"lineNumber":137,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"ReganChoy"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelBirthday,","lastModifiedDate":"2024-03-12"},{"lineNumber":140,"author":{"gitId":"ReganChoy"},"content":"                modelLastMet, modelSchedule, modelTags);","lastModifiedDate":"2024-03-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ReganChoy":24,"solomonng2001":12,"-":107}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"solomonng2001"},"content":"    private Label birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"solomonng2001"},"content":"    @FXML","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"    private Label lastMet;","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"    @FXML","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"    private Label schedule;","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"    @FXML","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"solomonng2001"},"content":"        birthday.setText(person.getBirthday().toString());","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"        lastMet.setText(person.getLastMet().showLastMet());","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"        schedule.setText(person.getSchedule().showSchedule());","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"solomonng2001":3,"ReganChoy":7,"-":59}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"solomonng2001"},"content":"      \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"      \u003cLabel fx:id\u003d\"lastMet\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$lastMet\" /\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"      \u003cLabel fx:id\u003d\"schedule\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Schedule\" /\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"solomonng2001":1,"ReganChoy":2,"-":36}},{"path":"src/test/java/seedu/address/commons/util/DateTmeUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"public class DateTmeUtilTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"    public void isValidDateTimeString_validFormat_returnTrue() {","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(DateTimeUtil.isValidDateTimeString(\"2022-03-13 12:30\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"    public void isValidDateTimeString_invalidFormat_returnFalse() {","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(DateTimeUtil.isValidDateTimeString(\"2022/03/13 12:30\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"    public void isValidDateTimeString_nullInput_returnFalse() {","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(DateTimeUtil.isValidDateTimeString(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"    public void isParsableDateTimeString_parsableDateTime_returnTrue() {","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(DateTimeUtil.isParsableDateTimeString(\"2022-03-13 12:30\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"    public void isParsableDateTimeString_invalidDateTime_returnFalse() {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(DateTimeUtil.isParsableDateTimeString(\"2022/03/13 12:30\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"    public void isPastDateTime_pastDateTime_returnTrue() {","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(DateTimeUtil.isPastDateTime(LocalDateTime.now().minusHours(1)));","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"    public void isPastDateTime_futureDateTime_returnFalse() {","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(DateTimeUtil.isPastDateTime(LocalDateTime.now().plusHours(1)));","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"    public void parseStringToDateTime_validDateTime_returnLocalDateTime() {","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"2022-03-13 12:30\",","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"                DateTimeFormatter.ofPattern(DateTimeUtil.DATE_FORMAT));","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(expectedDateTime, DateTimeUtil.parseStringToDateTime(\"2022-03-13 12:30\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"    public void parseStringToDateTime_invalidDateTime_throwDateTimeParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseStringToDateTime(\"2022/03/13 12:30\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"    public void parseDateToString_validDateTime_returnFormattedString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2022-03-13 12:30\",","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"                DateTimeFormatter.ofPattern(DateTimeUtil.DATE_FORMAT));","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(\"2022-03-13 12:30\", DateTimeUtil.parseDateToString(dateTime));","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"    public void parseDateToString_nullDateTime_returnEmptyString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(\"\", DateTimeUtil.parseDateToString(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"    public void getMessageConstraintsForDateType_validDateType_returnFormattedMessage() {","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(\"Birthday should be in the format YYYY-MM-DD HH:mm and must be an actual dateTime\",","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"                DateTimeUtil.getMessageConstraintsForDateType(\"Birthday\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":81}},{"path":"src/test/java/seedu/address/commons/util/DateUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"solomonng2001"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"solomonng2001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"solomonng2001"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"solomonng2001"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"solomonng2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"solomonng2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"solomonng2001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"solomonng2001"},"content":"public class DateUtilTest {","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"solomonng2001"},"content":"    public void isValidDateString() {","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"solomonng2001"},"content":"        // null date","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"solomonng2001"},"content":"        // blank date","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"\")); // empty string","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\" \")); // spaces only","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"solomonng2001"},"content":"        // invalid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"91-12-2020\")); // invalid day","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"31-13-2020\")); // invalid month","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"31-12-20200\")); // invalid year","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"31-12-2020 \")); // trailing space","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\" 31-12-2020\")); // leading space","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"31- 12-2020\")); // spaces within date","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"31-12- 2020\")); // spaces within date","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"31-12-2020 12:00\")); // time included","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"31-12-2020 12:00:00\")); // time included","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"12-31-2020\")); // MM-DD-YYYY format with hyphens","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"2020/12/31\")); // YYYY/MM/DD format with slashes","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"12/31/2020\")); // MM/DD/YYYY format with slashes","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"20201231\")); // YYYYMMDD format without delimiters","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"12312020\")); // MMDDYYYY format without delimiters","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"3 Jan 2021\")); // d MMM YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"31-Jan-2021\")); // DD-MMM-YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"January 3, 2021\")); // Month d, YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"2021-Jan-3\")); // YYYY-MMM-d format","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"2020-12-3A\")); // Alphabetic character in day component","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"2020-AB-31\")); // Alphabetic characters in month component","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"ABCD-12-31\")); // Alphabetic characters in year component","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isValidDateString(\"2020-12-31ABC\")); // Alphabetic characters after the date","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"solomonng2001"},"content":"        // valid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2021-01-01\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2022-02-28\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2023-03-15\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2024-04-30\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2025-05-10\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2026-06-20\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2027-07-31\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2028-08-15\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2029-09-25\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isValidDateString(\"2030-10-05\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"solomonng2001"},"content":"    public void isParsableDateString() {","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"solomonng2001"},"content":"        // null date","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"solomonng2001"},"content":"        // blank date","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"\")); // empty string","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\" \")); // spaces only","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"solomonng2001"},"content":"        // invalid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"91-12-2020\")); // invalid day","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"31-13-2020\")); // invalid month","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"31-12-20200\")); // invalid year","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"31-12-2020 \")); // trailing space","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\" 31-12-2020\")); // leading space","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"31- 12-2020\")); // spaces within date","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"31-12- 2020\")); // spaces within date","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"31-12-2020 12:00\")); // time included","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"31-12-2020 12:00:00\")); // time included","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"12-31-2020\")); // MM-DD-YYYY format with hyphens","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"2020/12/31\")); // YYYY/MM/DD format with slashes","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"12/31/2020\")); // MM/DD/YYYY format with slashes","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"20201231\")); // YYYYMMDD format without delimiters","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"12312020\")); // MMDDYYYY format without delimiters","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"3 Jan 2021\")); // d MMM YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"31-Jan-2021\")); // DD-MMM-YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"January 3, 2021\")); // Month d, YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"2021-Jan-3\")); // YYYY-MMM-d format","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"2020-12-3A\")); // Alphabetic character in day component","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"2020-AB-31\")); // Alphabetic characters in month component","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"ABCD-12-31\")); // Alphabetic characters in year component","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isParsableDateString(\"2020-12-31ABC\")); // Alphabetic characters after the date","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"solomonng2001"},"content":"        // valid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":95,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2021-01-01\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2022-02-28\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2023-03-15\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":98,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2024-04-30\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2025-05-10\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":100,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2026-06-20\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":101,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2027-07-31\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2028-08-15\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2029-09-25\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":104,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isParsableDateString(\"2030-10-05\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":105,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":106,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":107,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":108,"author":{"gitId":"solomonng2001"},"content":"    public void isPastDate() {","lastModifiedDate":"2024-03-11"},{"lineNumber":109,"author":{"gitId":"solomonng2001"},"content":"        // null date","lastModifiedDate":"2024-03-11"},{"lineNumber":110,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isPastDate(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":111,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":112,"author":{"gitId":"solomonng2001"},"content":"        // future dates","lastModifiedDate":"2024-03-11"},{"lineNumber":113,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isPastDate(LocalDate.now().plusDays(1)));","lastModifiedDate":"2024-03-11"},{"lineNumber":114,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isPastDate(LocalDate.now().plusMonths(1)));","lastModifiedDate":"2024-03-11"},{"lineNumber":115,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isPastDate(LocalDate.now().plusYears(1)));","lastModifiedDate":"2024-03-11"},{"lineNumber":116,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":117,"author":{"gitId":"solomonng2001"},"content":"        // current date","lastModifiedDate":"2024-03-11"},{"lineNumber":118,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DateUtil.isPastDate(LocalDate.now()));","lastModifiedDate":"2024-03-11"},{"lineNumber":119,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":120,"author":{"gitId":"solomonng2001"},"content":"        // past dates","lastModifiedDate":"2024-03-11"},{"lineNumber":121,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isPastDate(LocalDate.now().minusDays(1)));","lastModifiedDate":"2024-03-11"},{"lineNumber":122,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isPastDate(LocalDate.now().minusMonths(1)));","lastModifiedDate":"2024-03-11"},{"lineNumber":123,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(DateUtil.isPastDate(LocalDate.now().minusYears(1)));","lastModifiedDate":"2024-03-11"},{"lineNumber":124,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":125,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":126,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":127,"author":{"gitId":"solomonng2001"},"content":"    public void parseStringToDate() {","lastModifiedDate":"2024-03-11"},{"lineNumber":128,"author":{"gitId":"solomonng2001"},"content":"        // null date","lastModifiedDate":"2024-03-11"},{"lineNumber":129,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.parseStringToDate(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":130,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":131,"author":{"gitId":"solomonng2001"},"content":"        // blank date","lastModifiedDate":"2024-03-11"},{"lineNumber":132,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e DateUtil.parseStringToDate(\"\")); // empty string","lastModifiedDate":"2024-03-11"},{"lineNumber":133,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e DateUtil.parseStringToDate(\" \")); // spaces only","lastModifiedDate":"2024-03-11"},{"lineNumber":134,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":135,"author":{"gitId":"solomonng2001"},"content":"        // invalid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":136,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":137,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"91-12-2020\")); // invalid day","lastModifiedDate":"2024-03-11"},{"lineNumber":138,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":139,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"31-13-2020\")); // invalid month","lastModifiedDate":"2024-03-11"},{"lineNumber":140,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":141,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"31-12-20200\")); // invalid year","lastModifiedDate":"2024-03-11"},{"lineNumber":142,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":143,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"31-12-2020 \")); // trailing space","lastModifiedDate":"2024-03-11"},{"lineNumber":144,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":145,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\" 31-12-2020\")); // leading space","lastModifiedDate":"2024-03-11"},{"lineNumber":146,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":147,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"31- 12-2020\")); // spaces within date","lastModifiedDate":"2024-03-11"},{"lineNumber":148,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":149,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"31-12- 2020\")); // spaces within date","lastModifiedDate":"2024-03-11"},{"lineNumber":150,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":151,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"31-12-2020 12:00\")); // time included","lastModifiedDate":"2024-03-11"},{"lineNumber":152,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":153,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"31-12-2020 12:00:00\")); // time included","lastModifiedDate":"2024-03-11"},{"lineNumber":154,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":155,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"12-31-2020\")); // MM-DD-YYYY format with hyphens","lastModifiedDate":"2024-03-11"},{"lineNumber":156,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":157,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"2020/12/31\")); // YYYY/MM/DD format with slashes","lastModifiedDate":"2024-03-11"},{"lineNumber":158,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":159,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"12/31/2020\")); // MM/DD/YYYY format with slashes","lastModifiedDate":"2024-03-11"},{"lineNumber":160,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":161,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"20201231\")); // YYYYMMDD format without delimiters","lastModifiedDate":"2024-03-11"},{"lineNumber":162,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":163,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"12312020\")); // MMDDYYYY format without delimiters","lastModifiedDate":"2024-03-11"},{"lineNumber":164,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":165,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"3 Jan 2021\")); // d MMM YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":166,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":167,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"31-Jan-2021\")); // DD-MMM-YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":168,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":169,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"January 3, 2021\")); // Month d, YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":170,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":171,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"2021-Jan-3\")); // YYYY-MMM-d format","lastModifiedDate":"2024-03-11"},{"lineNumber":172,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":173,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"2020-12-3A\")); // Alphabetic character in day component","lastModifiedDate":"2024-03-11"},{"lineNumber":174,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":175,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"2020-AB-31\")); // Alphabetic characters in month component","lastModifiedDate":"2024-03-11"},{"lineNumber":176,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":177,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"ABCD-12-31\")); // Alphabetic characters in year component","lastModifiedDate":"2024-03-11"},{"lineNumber":178,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":179,"author":{"gitId":"solomonng2001"},"content":"                DateUtil.parseStringToDate(\"2020-12-31ABC\")); // Alphabetic characters after the date","lastModifiedDate":"2024-03-11"},{"lineNumber":180,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":181,"author":{"gitId":"solomonng2001"},"content":"        // valid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":182,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2021-01-01\"), LocalDate.of(2021, 1, 1));","lastModifiedDate":"2024-03-11"},{"lineNumber":183,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":184,"author":{"gitId":"solomonng2001"},"content":"        // valid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":185,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2021-01-01\"), LocalDate.of(2021, 1, 1));","lastModifiedDate":"2024-03-11"},{"lineNumber":186,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2022-02-28\"), LocalDate.of(2022, 2, 28));","lastModifiedDate":"2024-03-11"},{"lineNumber":187,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2023-03-15\"), LocalDate.of(2023, 3, 15));","lastModifiedDate":"2024-03-11"},{"lineNumber":188,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2024-04-30\"), LocalDate.of(2024, 4, 30));","lastModifiedDate":"2024-03-11"},{"lineNumber":189,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2025-05-10\"), LocalDate.of(2025, 5, 10));","lastModifiedDate":"2024-03-11"},{"lineNumber":190,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2026-06-20\"), LocalDate.of(2026, 6, 20));","lastModifiedDate":"2024-03-11"},{"lineNumber":191,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2027-07-31\"), LocalDate.of(2027, 7, 31));","lastModifiedDate":"2024-03-11"},{"lineNumber":192,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2028-08-15\"), LocalDate.of(2028, 8, 15));","lastModifiedDate":"2024-03-11"},{"lineNumber":193,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2029-09-25\"), LocalDate.of(2029, 9, 25));","lastModifiedDate":"2024-03-11"},{"lineNumber":194,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseStringToDate(\"2030-10-05\"), LocalDate.of(2030, 10, 5));","lastModifiedDate":"2024-03-11"},{"lineNumber":195,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":196,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":197,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":198,"author":{"gitId":"solomonng2001"},"content":"    public void parseDateToString() {","lastModifiedDate":"2024-03-11"},{"lineNumber":199,"author":{"gitId":"solomonng2001"},"content":"        // null date","lastModifiedDate":"2024-03-11"},{"lineNumber":200,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(null), \"\");","lastModifiedDate":"2024-03-11"},{"lineNumber":201,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":202,"author":{"gitId":"solomonng2001"},"content":"        // valid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":203,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2021, 1, 1)), \"2021-01-01\");","lastModifiedDate":"2024-03-11"},{"lineNumber":204,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2022, 2, 28)), \"2022-02-28\");","lastModifiedDate":"2024-03-11"},{"lineNumber":205,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2023, 3, 15)), \"2023-03-15\");","lastModifiedDate":"2024-03-11"},{"lineNumber":206,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2024, 4, 30)), \"2024-04-30\");","lastModifiedDate":"2024-03-11"},{"lineNumber":207,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2025, 5, 10)), \"2025-05-10\");","lastModifiedDate":"2024-03-11"},{"lineNumber":208,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2026, 6, 20)), \"2026-06-20\");","lastModifiedDate":"2024-03-11"},{"lineNumber":209,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2027, 7, 31)), \"2027-07-31\");","lastModifiedDate":"2024-03-11"},{"lineNumber":210,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2028, 8, 15)), \"2028-08-15\");","lastModifiedDate":"2024-03-11"},{"lineNumber":211,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2029, 9, 25)), \"2029-09-25\");","lastModifiedDate":"2024-03-11"},{"lineNumber":212,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(DateUtil.parseDateToString(LocalDate.of(2030, 10, 5)), \"2030-10-05\");","lastModifiedDate":"2024-03-11"},{"lineNumber":213,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":214,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":215,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":216,"author":{"gitId":"solomonng2001"},"content":"    void getMessageConstraintsForDateType() {","lastModifiedDate":"2024-03-11"},{"lineNumber":217,"author":{"gitId":"solomonng2001"},"content":"        String dateType \u003d \"Birthday\";","lastModifiedDate":"2024-03-11"},{"lineNumber":218,"author":{"gitId":"solomonng2001"},"content":"        String expectedMessage \u003d dateType + \" \" + DateUtil.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-11"},{"lineNumber":219,"author":{"gitId":"solomonng2001"},"content":"        assertEquals(expectedMessage, DateUtil.getMessageConstraintsForDateType(dateType));","lastModifiedDate":"2024-03-11"},{"lineNumber":220,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":221,"author":{"gitId":"solomonng2001"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"solomonng2001":221}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // Inject LogicManager with an AddressBookStorage that throws the IOException e when saving","lastModifiedDate":"2023-06-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(prefPath) {","lastModifiedDate":"2023-06-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2023-06-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-06-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-06-13"},{"lineNumber":170,"author":{"gitId":"solomonng2001"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY;","lastModifiedDate":"2024-03-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2023-06-13"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2023-06-13"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"solomonng2001":2,"-":174}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"solomonng2001"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"1990-01-01\";","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"solomonng2001"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"1978-11-03\";","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"solomonng2001"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"solomonng2001"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"solomonng2001"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"01-01-1990\"; // reversed date format","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"solomonng2001"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"solomonng2001"},"content":"                .withBirthday(VALID_BIRTHDAY_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"solomonng2001":8,"-":126}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"solomonng2001"},"content":"        // different birthday -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"solomonng2001"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withBirthday(VALID_BIRTHDAY_BOB).build();","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expected \u003d EditPersonDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getName().orElse(null) + \", phone\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getPhone().orElse(null) + \", email\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getEmail().orElse(null) + \", address\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"solomonng2001"},"content":"                + editPersonDescriptor.getBirthday().orElse(null) + \", birthday\u003d\"","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getAddress().orElse(null) + \", tags\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getTags().orElse(null) + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"solomonng2001":6,"-":71}},{"path":"src/test/java/seedu/address/logic/commands/LastMetCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.commands.LastMetCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.LastMet;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"public class LastMetCommandTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"        LastMetCommand lastMetCommand \u003d new LastMetCommand(index, new LastMet(LocalDate.now()));","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"        LastMetCommand sameMetCommand \u003d new LastMetCommand(index, new LastMet(LocalDate.now()));","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(lastMetCommand.equals(lastMetCommand));","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(lastMetCommand.equals(sameMetCommand));","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(lastMetCommand.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(lastMetCommand.equals(new Object()));","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(lastMetCommand.equals(new LastMetCommand(Index.fromOneBased(2), new LastMet(LocalDate.now()))));","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"    public void execute_validIndexAndDate_success() {","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"        Index validIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        LocalDate validDate \u003d LocalDate.now().minusDays(1); // Set a valid date (1 day ago)","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        LastMetCommand lastMetCommand \u003d new LastMetCommand(validIndex, new LastMet(validDate));","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        CommandTestUtil.assertCommandSuccess(lastMetCommand, model,","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"                String.format(MESSAGE_SUCCESS, model.getFilteredPersonList().get(0).getName()), expectedModel);","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"        Index invalidIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"        LocalDate validDate \u003d LocalDate.now().minusDays(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"        LastMetCommand lastMetCommand \u003d new LastMetCommand(invalidIndex, new LastMet(validDate));","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(CommandException.class, () -\u003e lastMetCommand.execute(model),","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"    public void execute_futureDate_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"        Index validIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"        LocalDate futureDate \u003d LocalDate.now().plusDays(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"        LastMetCommand lastMetCommand \u003d new LastMetCommand(validIndex, new LastMet(futureDate));","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(CommandException.class, () -\u003e lastMetCommand.execute(model),","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"                Messages.MESSAGE_LASTMET_FUTURE);","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"    public void toString_validCommand_returnsExpectedString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"        LocalDate date \u003d LocalDate.now();","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"        LastMetCommand lastMetCommand \u003d new LastMetCommand(index, new LastMet(date));","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"        String expected \u003d LastMetCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", date\u003d\" + date + \"}\";","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(expected, lastMetCommand.toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":82}},{"path":"src/test/java/seedu/address/logic/commands/MarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"public class MarkCommandTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"        MarkCommand markCommand \u003d new MarkCommand(index);","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"        MarkCommand sameMarkCommand \u003d new MarkCommand(index);","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(markCommand.equals(markCommand));","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(markCommand.equals(sameMarkCommand));","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(markCommand.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(markCommand.equals(new Object()));","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(markCommand.equals(new MarkCommand(Index.fromOneBased(2))));","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"        Index invalidIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"        MarkCommand markCommand \u003d new MarkCommand(invalidIndex);","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(CommandException.class, () -\u003e markCommand.execute(model),","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"    public void execute_alreadyDoneSchedule_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"        Index validIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"        Person personWithDoneSchedule \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"        personWithDoneSchedule.getSchedule().markIsDone();","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"        MarkCommand markCommand \u003d new MarkCommand(validIndex);","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(CommandException.class, () -\u003e markCommand.execute(model),","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"                Messages.MESSAGE_SCHEDULE_DONE);","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"    public void toString_validCommand_returnsExpectedString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"        MarkCommand markCommand \u003d new MarkCommand(index);","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"        String expected \u003d MarkCommand.class.getCanonicalName() + \"{index\u003d\" + index + \"}\";","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(expected, markCommand.toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":66}},{"path":"src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.commands.ScheduleCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Schedule;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"public class ScheduleCommandTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(index, new Schedule(LocalDateTime.now()));","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"        ScheduleCommand sameScheduleCommand \u003d new ScheduleCommand(index, new Schedule(LocalDateTime.now()));","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(scheduleCommand.equals(scheduleCommand));","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(scheduleCommand.equals(sameScheduleCommand));","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(scheduleCommand.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(scheduleCommand.equals(new Object()));","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(scheduleCommand.equals(new ScheduleCommand(Index.fromOneBased(2),","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"                new Schedule(LocalDateTime.now()))));","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"    public void execute_validIndexAndFutureDate_success() {","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        Index validIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime validDateTime \u003d LocalDateTime.now().plusDays(1); // Set a future date (1 day later)","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(validIndex, new Schedule(validDateTime));","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"        CommandTestUtil.assertCommandSuccess(scheduleCommand, model,","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"                String.format(MESSAGE_SUCCESS, model.getFilteredPersonList().get(0).getName()), expectedModel);","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"        Index invalidIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime validDateTime \u003d LocalDateTime.now().plusDays(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(invalidIndex, new Schedule(validDateTime));","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(CommandException.class, () -\u003e scheduleCommand.execute(model),","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"    public void execute_pastDate_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"        Index validIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime pastDateTime \u003d LocalDateTime.now().minusDays(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(validIndex, new Schedule(pastDateTime));","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(CommandException.class, () -\u003e scheduleCommand.execute(model),","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"                Messages.MESSAGE_SCHEDULE_PAST);","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"    public void toString_validCommand_returnsExpectedString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(index, new Schedule(dateTime));","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"        String expected \u003d ScheduleCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", dateTime\u003d\" + dateTime + \"}\";","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(expected, scheduleCommand.toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":83}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"solomonng2001"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"solomonng2001"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":70,"author":{"gitId":"solomonng2001"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"solomonng2001"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"solomonng2001"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND;","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // multiple emails","lastModifiedDate":"2023-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // multiple addresses","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, ADDRESS_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":95,"author":{"gitId":"solomonng2001"},"content":"        // multiple birthdays","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, BIRTHDAY_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"solomonng2001"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BIRTHDAY));","lastModifiedDate":"2024-03-11"},{"lineNumber":98,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                validExpectedPersonString + PHONE_DESC_AMY + EMAIL_DESC_AMY + NAME_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2023-07-14"},{"lineNumber":102,"author":{"gitId":"solomonng2001"},"content":"                        + BIRTHDAY_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"solomonng2001"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_PHONE,","lastModifiedDate":"2024-03-11"},{"lineNumber":104,"author":{"gitId":"solomonng2001"},"content":"                        PREFIX_BIRTHDAY));","lastModifiedDate":"2024-03-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":124,"author":{"gitId":"solomonng2001"},"content":"        // invalid birthday","lastModifiedDate":"2024-03-11"},{"lineNumber":125,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, INVALID_BIRTHDAY_DESC + validExpectedPersonString,","lastModifiedDate":"2024-03-11"},{"lineNumber":126,"author":{"gitId":"solomonng2001"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BIRTHDAY));","lastModifiedDate":"2024-03-11"},{"lineNumber":127,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":145,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":146,"author":{"gitId":"solomonng2001"},"content":"        // invalid birthday","lastModifiedDate":"2024-03-11"},{"lineNumber":147,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_BIRTHDAY_DESC,","lastModifiedDate":"2024-03-11"},{"lineNumber":148,"author":{"gitId":"solomonng2001"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BIRTHDAY));","lastModifiedDate":"2024-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":155,"author":{"gitId":"solomonng2001"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2024-03-11"},{"lineNumber":156,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_AMY, new AddCommand(expectedPerson));","lastModifiedDate":"2024-03-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":164,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-11"},{"lineNumber":165,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":168,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-11"},{"lineNumber":169,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":172,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-11"},{"lineNumber":173,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-11"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":176,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2024-03-11"},{"lineNumber":177,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-11"},{"lineNumber":178,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":179,"author":{"gitId":"solomonng2001"},"content":"        // missing birthday prefix","lastModifiedDate":"2024-03-11"},{"lineNumber":180,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-11"},{"lineNumber":181,"author":{"gitId":"solomonng2001"},"content":"                + VALID_BIRTHDAY_BOB, expectedMessage);","lastModifiedDate":"2024-03-11"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":184,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2024-03-11"},{"lineNumber":185,"author":{"gitId":"solomonng2001"},"content":"                + VALID_BIRTHDAY_BOB, expectedMessage);","lastModifiedDate":"2024-03-11"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":192,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":196,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":200,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":204,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":205,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":206,"author":{"gitId":"solomonng2001"},"content":"        // invalid birthday","lastModifiedDate":"2024-03-11"},{"lineNumber":207,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-11"},{"lineNumber":208,"author":{"gitId":"solomonng2001"},"content":"                + INVALID_BIRTHDAY_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":212,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":215,"author":{"gitId":"solomonng2001"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2024-03-11"},{"lineNumber":216,"author":{"gitId":"solomonng2001"},"content":"                + BIRTHDAY_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-11"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":220,"author":{"gitId":"solomonng2001"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2024-03-11"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"solomonng2001":53,"-":170}},{"path":"src/test/java/seedu/address/logic/parser/LastMetCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.LastMetCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.LastMet;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"public class LastMetCommandParserTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    private final LastMetCommandParser parser \u003d new LastMetCommandParser();","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"    public void parse_validArgs_returnsLastMetCommand() throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"1 \" + CliSyntax.PREFIX_LASTMET + \"2022-12-31\";","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"        LastMetCommand expectedCommand \u003d new LastMetCommand(ParserUtil.parseIndex(\"1\"),","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"                new LastMet(DateUtil.parseStringToDate(\"2022-12-31\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(expectedCommand, parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"    public void parse_missingIndex_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"        // Missing index","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d CliSyntax.PREFIX_LASTMET + \"2022-12-31\";","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"    public void parse_missingLastMetPrefix_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"        // Missing last met prefix","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"1 2022-12-31\";","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"    public void parse_invalidIndexFormat_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"        // Invalid index format","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"invalid \" + CliSyntax.PREFIX_LASTMET + \"2022-12-31\";","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"    public void parse_invalidLastMetFormat_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"        // Invalid last met format","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"1 \" + CliSyntax.PREFIX_LASTMET + \"invalid-date-format\";","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":53}},{"path":"src/test/java/seedu/address/logic/parser/MarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"public class MarkCommandParserTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"    private final MarkCommandParser parser \u003d new MarkCommandParser();","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"    public void parse_validArgs_returnsMarkCommand() throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"1\";","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"        MarkCommand expectedCommand \u003d new MarkCommand(ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(expectedCommand, parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    public void parse_missingIndex_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"        // Missing index","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"\";","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"    public void parse_invalidIndexFormat_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"        // Invalid index format","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"invalid\";","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    public void parse_extraArgs_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"        // Extra arguments","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"1 extra\";","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":44}},{"path":"src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateTimeUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.commands.ScheduleCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.model.person.Schedule;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"public class ScheduleCommandParserTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"    private final ScheduleCommandParser parser \u003d new ScheduleCommandParser();","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"    public void parse_validArgs_returnsScheduleCommand() throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"1 \" + PREFIX_SCHEDULE + \"2022-12-31 18:00\";","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"        ScheduleCommand expectedCommand \u003d new ScheduleCommand(ParserUtil.parseIndex(\"1\"),","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"                new Schedule(DateTimeUtil.parseStringToDateTime(\"2022-12-31 18:00\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(expectedCommand, parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    public void parse_missingIndex_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"        // Missing index","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d PREFIX_SCHEDULE + \"2022-12-31 18:00\";","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"    public void parse_missingSchedulePrefix_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"        // Missing schedule prefix","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"1 2022-12-31 18:00\";","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"    public void parse_invalidIndexFormat_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"        // Invalid index format","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"invalid \" + PREFIX_SCHEDULE + \"2022-12-31 18:00\";","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"    public void parse_invalidScheduleFormat_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"        // Invalid schedule format","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"        String args \u003d \"1 \" + PREFIX_SCHEDULE + \"invalid-date-format\";","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(args));","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"ReganChoy":54}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"solomonng2001"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"solomonng2001"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"solomonng2001"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"solomonng2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"solomonng2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"solomonng2001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"solomonng2001"},"content":"public class BirthdayTest {","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"solomonng2001"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"solomonng2001"},"content":"    public void constructor_invalidBirthday_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"solomonng2001"},"content":"        String invalidBirthday \u003d \"\";","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"solomonng2001"},"content":"    public void isValidBirthday() {","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"solomonng2001"},"content":"        // null date","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"solomonng2001"},"content":"        // blank date","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"\")); // empty string","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"solomonng2001"},"content":"        // invalid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"91-12-2020\")); // invalid day","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"31-13-2020\")); // invalid month","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"31-12-20200\")); // invalid year","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"31-12-2020 \")); // trailing space","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\" 31-12-2020\")); // leading space","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"31- 12-2020\")); // spaces within date","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"31-12- 2020\")); // spaces within date","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"31-12-2020 12:00\")); // time included","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"31-12-2020 12:00:00\")); // time included","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"12-31-2020\")); // MM-DD-YYYY format with hyphens","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"2020/12/31\")); // YYYY/MM/DD format with slashes","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"12/31/2020\")); // MM/DD/YYYY format with slashes","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"20201231\")); // YYYYMMDD format without delimiters","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"12312020\")); // MMDDYYYY format without delimiters","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"3 Jan 2021\")); // d MMM YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"31-Jan-2021\")); // DD-MMM-YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"January 3, 2021\")); // Month d, YYYY format","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"2021-Jan-3\")); // YYYY-MMM-d format","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"2020-12-3A\")); // Alphabetic character in day component","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"2020-AB-31\")); // Alphabetic characters in month component","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"ABCD-12-31\")); // Alphabetic characters in year component","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(\"2020-12-31ABC\")); // Alphabetic characters after the date","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"solomonng2001"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(LocalDate.now().plusDays(1)","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"solomonng2001"},"content":"                .format(formatter))); // future date","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(LocalDate.now().plusMonths(1)","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"solomonng2001"},"content":"                .format(formatter))); // future date","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(Birthday.isValidBirthday(LocalDate.now().plusYears(1)","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"solomonng2001"},"content":"                .format(formatter))); // future date","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"solomonng2001"},"content":"        // valid dates","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"1992-01-01\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"1993-02-28\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"1994-03-15\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"1995-04-30\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"1996-05-10\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"1997-06-20\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"1998-07-31\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"1999-08-15\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"2000-09-25\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(Birthday.isValidBirthday(\"2001-10-05\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"solomonng2001"},"content":"    public void equals() {","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"solomonng2001"},"content":"        Birthday birthday \u003d new Birthday(\"1993-09-22\");","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"solomonng2001"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(birthday.equals(new Birthday(\"1993-09-22\")));","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"solomonng2001"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"solomonng2001"},"content":"        assertTrue(birthday.equals(birthday));","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"solomonng2001"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(birthday.equals(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"solomonng2001"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(birthday.equals(5.0f));","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"solomonng2001"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":95,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(birthday.equals(new Birthday(\"1993-09-23\")));","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"solomonng2001"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"solomonng2001":97}},{"path":"src/test/java/seedu/address/model/person/LastMetTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"public class LastMetTest {","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    public void constructor_validLastMet_noExceptionThrown() {","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"        assertDoesNotThrow(() -\u003e new LastMet(LocalDate.now().minusDays(7)));","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"    public void constructor_nullLastMet_throwsNullPointerException() {","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LastMet(null));","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"    public void getIsOverdue_isOverdueTrue_returnsCorrectIsOverdue() {","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"        LastMet.setLastMetDuration(90);","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"        LocalDate lastMetDate \u003d LocalDate.now().minusDays(100);","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"        LastMet lastMet \u003d new LastMet(lastMetDate);","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"        boolean getIsOverdue \u003d lastMet.getIsOverdue();","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(true, getIsOverdue);","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"    public void getIsOverdue_isOverdueFalse_returnsCorrectIsOverdue() {","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"        LastMet.setLastMetDuration(90);","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"        LocalDate lastMetDate \u003d LocalDate.now().minusDays(50);","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"        LastMet lastMet \u003d new LastMet(lastMetDate);","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"        boolean getIsOverdue \u003d lastMet.getIsOverdue();","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(false, getIsOverdue);","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"    public void getPeriodGap_validLastMet_returnsCorrectGap() {","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"        LocalDate lastMetDate \u003d LocalDate.now().minusDays(10);","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"        LastMet lastMet \u003d new LastMet(lastMetDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        long periodGap \u003d lastMet.getPeriodGap();","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(10, periodGap);","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"    public void setIsOverdue_overdueLastMet_returnsTrue() {","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"        LastMet.setLastMetDuration(90);","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        LocalDate lastMetDate \u003d LocalDate.now().minusDays(100);","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"        LastMet lastMet \u003d new LastMet(lastMetDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(lastMet.getIsOverdue());","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"    public void setIsOverdue_recentLastMet_returnsFalse() {","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"        LastMet.setLastMetDuration(90);","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"        LocalDate lastMetDate \u003d LocalDate.now().minusDays(60);","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"        LastMet lastMet \u003d new LastMet(lastMetDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(lastMet.getIsOverdue());","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"    public void showLastMet_validLastMet_returnsFormattedString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"        LocalDate lastMetDate \u003d LocalDate.now().minusDays(15);","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"        LastMet lastMet \u003d new LastMet(lastMetDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"        String expected \u003d \"Last Met: \" + lastMetDate + \", 15 Days Ago.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(expected, lastMet.showLastMet());","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"    public void setLastMetDuration_validDuration_updatesLastMetDuration() {","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"        long newDuration \u003d 120;","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"        LastMet.setLastMetDuration(newDuration);","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(newDuration, LastMet.getLastMetDuration());","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":86}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"solomonng2001"},"content":"        // different birthday -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"solomonng2001"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withBirthday(\"1990-01-01\").build();","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"solomonng2001"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String expected \u003d Person.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2019-02-23"},{"lineNumber":100,"author":{"gitId":"solomonng2001"},"content":"                + \", email\u003d\" + ALICE.getEmail() + \", address\u003d\" + ALICE.getAddress()","lastModifiedDate":"2024-03-11"},{"lineNumber":101,"author":{"gitId":"solomonng2001"},"content":"                + \", birthday\u003d\" + ALICE.getBirthday() + \", tags\u003d\" + ALICE.getTags() + \"}\";","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"solomonng2001":6,"-":98}},{"path":"src/test/java/seedu/address/model/person/ScheduleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReganChoy"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"ReganChoy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"ReganChoy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"ReganChoy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"ReganChoy"},"content":"import seedu.address.commons.util.DateTimeUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"ReganChoy"},"content":"public class ScheduleTest {","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"ReganChoy"},"content":"    public void constructor_singleParameter_scheduleInitialized() {","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime schedule \u003d LocalDateTime.now();","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(schedule);","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(schedule, testSchedule.getSchedule());","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(testSchedule.getIsDone()); // By default, isDone should be false","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"ReganChoy"},"content":"    public void constructor_twoParameters_scheduleAndIsDoneInitialized() {","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime schedule \u003d LocalDateTime.now();","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(schedule, true);","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(schedule, testSchedule.getSchedule());","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(testSchedule.getIsDone());","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"ReganChoy"},"content":"    public void getIsMissed_returnsCorrectIsMissed() {","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime schedule \u003d LocalDateTime.of(2022, 1, 1, 12, 0);","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(schedule, false);","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(true, testSchedule.getIsMissed());","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"ReganChoy"},"content":"    public void getIsMissedReminder_isDoneTrue_returnsCorrectIsMissedReminder() {","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime schedule \u003d LocalDateTime.of(2022, 1, 1, 12, 0);","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(schedule, true);","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(false, testSchedule.getIsMissedReminder());","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"ReganChoy"},"content":"    public void getIsMissedReminder_isDoneFalse_returnsCorrectIsMissedReminder() {","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime schedule \u003d LocalDateTime.of(2022, 1, 1, 12, 0);","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(schedule, false);","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(true, testSchedule.getIsMissedReminder());","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"    public void toString_formattingCorrect() {","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime schedule \u003d LocalDateTime.of(2022, 1, 1, 12, 0);","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(schedule, false);","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(\"2022-01-01 12:00/0\", testSchedule.toString());","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"ReganChoy"},"content":"    public void showSchedule_upcomingAppointment_returnsCorrectMessage() {","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime futureSchedule \u003d LocalDateTime.now().plusDays(1);","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(futureSchedule, false);","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(\"Your next appointment is \"","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"ReganChoy"},"content":"                + DateTimeUtil.parseDateToString(futureSchedule), testSchedule.showSchedule());","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"ReganChoy"},"content":"    public void showSchedule_noUpcomingAppointment_returnsCorrectMessage() {","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"ReganChoy"},"content":"        LocalDateTime pastSchedule \u003d LocalDateTime.now().minusDays(1);","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(pastSchedule, true);","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(\"No upcoming appointment\", testSchedule.showSchedule());","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"ReganChoy"},"content":"    public void checkIsDoneFromString_validInput_returnsCorrectBoolean() {","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"ReganChoy"},"content":"        assertTrue(Schedule.checkIsDoneFromString(\"1\"));","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"ReganChoy"},"content":"        assertFalse(Schedule.checkIsDoneFromString(\"0\"));","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"ReganChoy"},"content":"    public void isDoneToString_isDoneTrue_returnsCorrectString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(LocalDateTime.now(), true);","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(\"1\", testSchedule.isDoneToString());","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"ReganChoy"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"    public void isDoneToString_isDoneFalse_returnsCorrectString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"ReganChoy"},"content":"        Schedule testSchedule \u003d new Schedule(LocalDateTime.now(), false);","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"ReganChoy"},"content":"        assertEquals(\"0\", testSchedule.isDoneToString());","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"ReganChoy"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"ReganChoy"},"content":"}","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"ReganChoy"},"content":"","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"ReganChoy":91}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"solomonng2001"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"solomonng2001"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"15-09-1995\";","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ReganChoy"},"content":"    private static final String INVALID_LASTMET \u003d \"03-03-2001\";","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"ReganChoy"},"content":"    private static final String INVALID_SCHEDULE \u003d \"03-03-2001 12:12/1\";","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"solomonng2001"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"ReganChoy"},"content":"    private static final String VALID_LASTMET \u003d BENSON.getLastMet().toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"ReganChoy"},"content":"    private static final String VALID_SCHEDULE \u003d BENSON.getSchedule().toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"solomonng2001"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BIRTHDAY,","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"ReganChoy"},"content":"                        VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"solomonng2001"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"ReganChoy"},"content":"                VALID_BIRTHDAY, VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"solomonng2001"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BIRTHDAY,","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"ReganChoy"},"content":"                        VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"solomonng2001"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"ReganChoy"},"content":"                VALID_BIRTHDAY, VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"solomonng2001"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_BIRTHDAY,","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"ReganChoy"},"content":"                        VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"solomonng2001"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"ReganChoy"},"content":"                VALID_BIRTHDAY, VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"solomonng2001"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_BIRTHDAY,","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"ReganChoy"},"content":"                        VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"solomonng2001"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2024-03-11"},{"lineNumber":111,"author":{"gitId":"ReganChoy"},"content":"                VALID_BIRTHDAY, VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":117,"author":{"gitId":"solomonng2001"},"content":"    public void toModelType_invalidBirthday_throwsIllegalValueException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":118,"author":{"gitId":"solomonng2001"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":119,"author":{"gitId":"solomonng2001"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_BIRTHDAY,","lastModifiedDate":"2024-03-11"},{"lineNumber":120,"author":{"gitId":"ReganChoy"},"content":"                        VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":121,"author":{"gitId":"solomonng2001"},"content":"        String expectedMessage \u003d Birthday.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-11"},{"lineNumber":122,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-11"},{"lineNumber":123,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":124,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":125,"author":{"gitId":"solomonng2001"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":126,"author":{"gitId":"solomonng2001"},"content":"    public void toModelType_nullBirthday_throwsIllegalValueException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":127,"author":{"gitId":"solomonng2001"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2024-03-11"},{"lineNumber":128,"author":{"gitId":"ReganChoy"},"content":"                null, VALID_LASTMET, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2024-03-12"},{"lineNumber":129,"author":{"gitId":"solomonng2001"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName());","lastModifiedDate":"2024-03-11"},{"lineNumber":130,"author":{"gitId":"solomonng2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-11"},{"lineNumber":131,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":132,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"solomonng2001"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BIRTHDAY,","lastModifiedDate":"2024-03-11"},{"lineNumber":139,"author":{"gitId":"ReganChoy"},"content":"                        VALID_LASTMET, VALID_SCHEDULE, invalidTags);","lastModifiedDate":"2024-03-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"solomonng2001":27,"ReganChoy":15,"-":101}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"solomonng2001"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"solomonng2001"},"content":"        descriptor.setBirthday(person.getBirthday());","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":76,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"solomonng2001"},"content":"     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"solomonng2001"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"solomonng2001"},"content":"        descriptor.setBirthday(new Birthday(birthday));","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"solomonng2001"},"content":"        return this;","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"solomonng2001":10,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"solomonng2001"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"solomonng2001"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"1990-01-01\";","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"solomonng2001"},"content":"    private Birthday birthday;","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"solomonng2001"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"solomonng2001"},"content":"        birthday \u003d personToCopy.getBirthday();","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"solomonng2001"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"solomonng2001"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"solomonng2001"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"solomonng2001"},"content":"    public PersonBuilder withBirthday(String birthday) {","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"solomonng2001"},"content":"        this.birthday \u003d new Birthday(birthday);","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"solomonng2001"},"content":"        return this;","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"solomonng2001"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"solomonng2001"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":106,"author":{"gitId":"solomonng2001"},"content":"        return new Person(name, phone, email, address, birthday, tags);","lastModifiedDate":"2024-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"solomonng2001":14,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"solomonng2001"},"content":"        sb.append(PREFIX_BIRTHDAY + person.getBirthday().toString() + \" \");","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"solomonng2001"},"content":"        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY).append(birthday.toString())","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"solomonng2001"},"content":"                .append(\" \"));","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"solomonng2001":4,"-":62}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"solomonng2001"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"solomonng2001"},"content":"            .withPhone(\"94351253\").withBirthday(\"1993-09-22\")","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"solomonng2001"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withBirthday(\"1998-12-03\")","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withBirthday(\"1978-05-06\").build();","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"solomonng2001"},"content":"            .withBirthday(\"1999-07-23\").build();","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withBirthday(\"1995-09-15\").build();","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withBirthday(\"2000-01-01\").build();","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withBirthday(\"1978-11-03\").build();","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withBirthday(\"1987-05-20\").build();","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withBirthday(\"1999-03-27\").build();","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"solomonng2001"},"content":"            .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"solomonng2001"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"solomonng2001"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"solomonng2001":16,"-":64}}]
