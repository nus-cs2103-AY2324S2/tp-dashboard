[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"# vitalconnect","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"[![CI Status](https://github.com/AY2324S2-CS2103T-W08-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103T-W08-2/tp/actions)","lastModifiedDate":"2024-02-25"},{"lineNumber":4,"author":{"gitId":"javierng2knus"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103T-W08-2/tp/graph/badge.svg?token\u003dHOLIQIUTEE)](https://codecov.io/gh/AY2324S2-CS2103T-W08-2/tp)","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"This product is for clinic assistants that have to keep track of a lot of patient information and requires ","lastModifiedDate":"2024-02-25"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"the information at a fast pace, thus preferring to have a simple UI such as a CLI instead of a complex GUI, ","lastModifiedDate":"2024-02-25"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"with the added benefit of having typed user commands for an even faster retrieval of information.","lastModifiedDate":"2024-02-25"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"__Value proposition:__","lastModifiedDate":"2024-02-25"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"Clinic assistants are required to take note of a multitude of information regarding the patient, ","lastModifiedDate":"2024-02-25"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"such as their contact number, any existing medical condition, the specific treatment that they are currently undergoing and much more. ","lastModifiedDate":"2024-02-25"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"With this product, such information will be readily available while also allowing for quality of life features such as scheduling ","lastModifiedDate":"2024-02-25"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"appointments and managing medication.","lastModifiedDate":"2024-02-25"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2024-02-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"## Features (V1.2)","lastModifiedDate":"2024-02-25"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"__Saving the data__","lastModifiedDate":"2024-02-25"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"* All data is saved in the hard disk automatically after any command that changes the data.","lastModifiedDate":"2024-02-25"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"__Clear all existing entries__","lastModifiedDate":"2024-02-25"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"* Clear all the existing entries within the local database.","lastModifiedDate":"2024-02-25"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"__Exit the program__","lastModifiedDate":"2024-02-25"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"* Exits the program. Any data that is not saved cannot be restored upon exiting.","lastModifiedDate":"2024-02-25"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"__Viewing help__","lastModifiedDate":"2024-02-25"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"* Shows a message explaining the instructions to access the user guide.","lastModifiedDate":"2024-02-25"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"### Manage Appointments","lastModifiedDate":"2024-02-25"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"__Create Appointments__","lastModifiedDate":"2024-02-25"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"* Create an appointment of a patient, information such as time and name of patient are required when adding.","lastModifiedDate":"2024-02-25"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"__Delete Appointments__","lastModifiedDate":"2024-02-25"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"* Delete an appointment of a patient.","lastModifiedDate":"2024-02-25"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"__List Appointments__","lastModifiedDate":"2024-02-25"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"* List all the appointments that have been created, provide information such as the patient’s name and time of the appointments.","lastModifiedDate":"2024-02-25"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"### Manage Contact Information","lastModifiedDate":"2024-02-25"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"__Add patient contact information__","lastModifiedDate":"2024-02-25"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"* Add contact information, including phone number and email address. If a specific field already exists, the command would fail.","lastModifiedDate":"2024-02-25"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"__Delete patient contact information__","lastModifiedDate":"2024-02-25"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"* Delete specific or all contact information, including phone number and email address.","lastModifiedDate":"2024-02-25"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"__List patient contact information__","lastModifiedDate":"2024-02-25"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"* List all patient’s contact information.","lastModifiedDate":"2024-02-25"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"### Manage Patients","lastModifiedDate":"2024-02-25"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"__Add patient__","lastModifiedDate":"2024-02-25"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"* Add a new patient to the database so further information about their appointment or contact information can be added.","lastModifiedDate":"2024-02-25"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":73,"author":{"gitId":"MaYuehan"},"content":"__Delete patient__","lastModifiedDate":"2024-02-25"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"* Delete specific or all patients, including their contact and appointment.","lastModifiedDate":"2024-02-25"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":77,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":78,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":79,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":81,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":82,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":83,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":79,"-":3}},{"path":"bin/main/view/CommandBox.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":9}},{"path":"bin/main/view/DarkTheme.css","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":".background {","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":".label {","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":".label-bright {","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":".label-header {","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":".text-field {","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":".tab-pane {","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":".table-view {","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 5;","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":".table-view .column-header-background {","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"    -fx-size: 35;","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color:","lastModifiedDate":"2024-03-04"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"        transparent","lastModifiedDate":"2024-03-04"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"        transparent","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        transparent;","lastModifiedDate":"2024-03-04"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":".table-view .column-header .label {","lastModifiedDate":"2024-03-04"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2024-03-04"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2024-03-04"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2024-03-04"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2024-03-04"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2024-03-04"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2024-03-04"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":84,"author":{"gitId":"Ella-e"},"content":".split-pane {","lastModifiedDate":"2024-03-04"},{"lineNumber":85,"author":{"gitId":"Ella-e"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":86,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":87,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":89,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":90,"author":{"gitId":"Ella-e"},"content":".list-view {","lastModifiedDate":"2024-03-04"},{"lineNumber":91,"author":{"gitId":"Ella-e"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":92,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":93,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":94,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":95,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":96,"author":{"gitId":"Ella-e"},"content":".list-cell {","lastModifiedDate":"2024-03-04"},{"lineNumber":97,"author":{"gitId":"Ella-e"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":99,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":100,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":".list-cell:filled:even {","lastModifiedDate":"2024-03-04"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2024-03-04"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":".list-cell:filled:odd {","lastModifiedDate":"2024-03-04"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2024-03-04"},{"lineNumber":108,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":".list-cell:filled:selected {","lastModifiedDate":"2024-03-04"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2024-03-04"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2024-03-04"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2024-03-04"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":".list-cell .label {","lastModifiedDate":"2024-03-04"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":121,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":122,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":123,"author":{"gitId":"Ella-e"},"content":".cell_big_label {","lastModifiedDate":"2024-03-04"},{"lineNumber":124,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2024-03-04"},{"lineNumber":125,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2024-03-04"},{"lineNumber":126,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2024-03-04"},{"lineNumber":127,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":128,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":129,"author":{"gitId":"Ella-e"},"content":".cell_small_label {","lastModifiedDate":"2024-03-04"},{"lineNumber":130,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2024-03-04"},{"lineNumber":131,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2024-03-04"},{"lineNumber":132,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2024-03-04"},{"lineNumber":133,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":134,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":135,"author":{"gitId":"Ella-e"},"content":".stack-pane {","lastModifiedDate":"2024-03-04"},{"lineNumber":136,"author":{"gitId":"Ella-e"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":137,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":138,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":139,"author":{"gitId":"Ella-e"},"content":".pane-with-border {","lastModifiedDate":"2024-03-04"},{"lineNumber":140,"author":{"gitId":"Ella-e"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":141,"author":{"gitId":"Ella-e"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2024-03-04"},{"lineNumber":142,"author":{"gitId":"Ella-e"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2024-03-04"},{"lineNumber":143,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":144,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":145,"author":{"gitId":"Ella-e"},"content":".status-bar {","lastModifiedDate":"2024-03-04"},{"lineNumber":146,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2024-03-04"},{"lineNumber":147,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":148,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":149,"author":{"gitId":"Ella-e"},"content":".result-display {","lastModifiedDate":"2024-03-04"},{"lineNumber":150,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2024-03-04"},{"lineNumber":151,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2024-03-04"},{"lineNumber":152,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":153,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":154,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":155,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":156,"author":{"gitId":"Ella-e"},"content":".result-display .label {","lastModifiedDate":"2024-03-04"},{"lineNumber":157,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2024-03-04"},{"lineNumber":158,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":159,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":160,"author":{"gitId":"Ella-e"},"content":".status-bar .label {","lastModifiedDate":"2024-03-04"},{"lineNumber":161,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2024-03-04"},{"lineNumber":162,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":163,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2024-03-04"},{"lineNumber":164,"author":{"gitId":"Ella-e"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2024-03-04"},{"lineNumber":165,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":166,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":167,"author":{"gitId":"Ella-e"},"content":".status-bar-with-border {","lastModifiedDate":"2024-03-04"},{"lineNumber":168,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2024-03-04"},{"lineNumber":169,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2024-03-04"},{"lineNumber":170,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2024-03-04"},{"lineNumber":171,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":172,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":173,"author":{"gitId":"Ella-e"},"content":".status-bar-with-border .label {","lastModifiedDate":"2024-03-04"},{"lineNumber":174,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":175,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":176,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":177,"author":{"gitId":"Ella-e"},"content":".grid-pane {","lastModifiedDate":"2024-03-04"},{"lineNumber":178,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2024-03-04"},{"lineNumber":179,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2024-03-04"},{"lineNumber":180,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2024-03-04"},{"lineNumber":181,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":182,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":183,"author":{"gitId":"Ella-e"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2024-03-04"},{"lineNumber":184,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2024-03-04"},{"lineNumber":185,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":186,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":187,"author":{"gitId":"Ella-e"},"content":".context-menu {","lastModifiedDate":"2024-03-04"},{"lineNumber":188,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2024-03-04"},{"lineNumber":189,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":190,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":191,"author":{"gitId":"Ella-e"},"content":".context-menu .label {","lastModifiedDate":"2024-03-04"},{"lineNumber":192,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":193,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":194,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":195,"author":{"gitId":"Ella-e"},"content":".menu-bar {","lastModifiedDate":"2024-03-04"},{"lineNumber":196,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":197,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":198,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":199,"author":{"gitId":"Ella-e"},"content":".menu-bar .label {","lastModifiedDate":"2024-03-04"},{"lineNumber":200,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":201,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2024-03-04"},{"lineNumber":202,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":203,"author":{"gitId":"Ella-e"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2024-03-04"},{"lineNumber":204,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":205,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":206,"author":{"gitId":"Ella-e"},"content":".menu .left-container {","lastModifiedDate":"2024-03-04"},{"lineNumber":207,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: black;","lastModifiedDate":"2024-03-04"},{"lineNumber":208,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":209,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":210,"author":{"gitId":"Ella-e"},"content":"/*","lastModifiedDate":"2024-03-04"},{"lineNumber":211,"author":{"gitId":"Ella-e"},"content":" * Metro style Push Button","lastModifiedDate":"2024-03-04"},{"lineNumber":212,"author":{"gitId":"Ella-e"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2024-03-04"},{"lineNumber":213,"author":{"gitId":"Ella-e"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2024-03-04"},{"lineNumber":214,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":215,"author":{"gitId":"Ella-e"},"content":".button {","lastModifiedDate":"2024-03-04"},{"lineNumber":216,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2024-03-04"},{"lineNumber":217,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2024-03-04"},{"lineNumber":218,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2024-03-04"},{"lineNumber":219,"author":{"gitId":"Ella-e"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":220,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2024-03-04"},{"lineNumber":221,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2024-03-04"},{"lineNumber":222,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":223,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2024-03-04"},{"lineNumber":224,"author":{"gitId":"Ella-e"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2024-03-04"},{"lineNumber":225,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":226,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":227,"author":{"gitId":"Ella-e"},"content":".button:hover {","lastModifiedDate":"2024-03-04"},{"lineNumber":228,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2024-03-04"},{"lineNumber":229,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":230,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":231,"author":{"gitId":"Ella-e"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2024-03-04"},{"lineNumber":232,"author":{"gitId":"Ella-e"},"content":"  -fx-background-color: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":233,"author":{"gitId":"Ella-e"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2024-03-04"},{"lineNumber":234,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":235,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":236,"author":{"gitId":"Ella-e"},"content":".button:focused {","lastModifiedDate":"2024-03-04"},{"lineNumber":237,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2024-03-04"},{"lineNumber":238,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":239,"author":{"gitId":"Ella-e"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2024-03-04"},{"lineNumber":240,"author":{"gitId":"Ella-e"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":241,"author":{"gitId":"Ella-e"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":242,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":243,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":244,"author":{"gitId":"Ella-e"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2024-03-04"},{"lineNumber":245,"author":{"gitId":"Ella-e"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2024-03-04"},{"lineNumber":246,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2024-03-04"},{"lineNumber":247,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":248,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":249,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":250,"author":{"gitId":"Ella-e"},"content":".button:default {","lastModifiedDate":"2024-03-04"},{"lineNumber":251,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2024-03-04"},{"lineNumber":252,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2024-03-04"},{"lineNumber":253,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":254,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":255,"author":{"gitId":"Ella-e"},"content":".button:default:hover {","lastModifiedDate":"2024-03-04"},{"lineNumber":256,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2024-03-04"},{"lineNumber":257,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":258,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":259,"author":{"gitId":"Ella-e"},"content":".dialog-pane {","lastModifiedDate":"2024-03-04"},{"lineNumber":260,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2024-03-04"},{"lineNumber":261,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":262,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":263,"author":{"gitId":"Ella-e"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2024-03-04"},{"lineNumber":264,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2024-03-04"},{"lineNumber":265,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":266,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":267,"author":{"gitId":"Ella-e"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2024-03-04"},{"lineNumber":268,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2024-03-04"},{"lineNumber":269,"author":{"gitId":"Ella-e"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2024-03-04"},{"lineNumber":270,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":271,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":272,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":273,"author":{"gitId":"Ella-e"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2024-03-04"},{"lineNumber":274,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2024-03-04"},{"lineNumber":275,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":276,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":277,"author":{"gitId":"Ella-e"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2024-03-04"},{"lineNumber":278,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2024-03-04"},{"lineNumber":279,"author":{"gitId":"Ella-e"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2024-03-04"},{"lineNumber":280,"author":{"gitId":"Ella-e"},"content":"    -fx-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":281,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":282,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":283,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":284,"author":{"gitId":"Ella-e"},"content":".scroll-bar {","lastModifiedDate":"2024-03-04"},{"lineNumber":285,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":286,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":287,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":288,"author":{"gitId":"Ella-e"},"content":".scroll-bar .thumb {","lastModifiedDate":"2024-03-04"},{"lineNumber":289,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2024-03-04"},{"lineNumber":290,"author":{"gitId":"Ella-e"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2024-03-04"},{"lineNumber":291,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":292,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":293,"author":{"gitId":"Ella-e"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2024-03-04"},{"lineNumber":294,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2024-03-04"},{"lineNumber":295,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":296,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":297,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":298,"author":{"gitId":"Ella-e"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2024-03-04"},{"lineNumber":299,"author":{"gitId":"Ella-e"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2024-03-04"},{"lineNumber":300,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":301,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":302,"author":{"gitId":"Ella-e"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2024-03-04"},{"lineNumber":303,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2024-03-04"},{"lineNumber":304,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":305,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":306,"author":{"gitId":"Ella-e"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2024-03-04"},{"lineNumber":307,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":308,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":309,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":310,"author":{"gitId":"Ella-e"},"content":"#cardPane {","lastModifiedDate":"2024-03-04"},{"lineNumber":311,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2024-03-04"},{"lineNumber":312,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":313,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":314,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":315,"author":{"gitId":"Ella-e"},"content":"#commandTypeLabel {","lastModifiedDate":"2024-03-04"},{"lineNumber":316,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2024-03-04"},{"lineNumber":317,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2024-03-04"},{"lineNumber":318,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":319,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":320,"author":{"gitId":"Ella-e"},"content":"#commandTextField {","lastModifiedDate":"2024-03-04"},{"lineNumber":321,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2024-03-04"},{"lineNumber":322,"author":{"gitId":"Ella-e"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":323,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2024-03-04"},{"lineNumber":324,"author":{"gitId":"Ella-e"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":325,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":326,"author":{"gitId":"Ella-e"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2024-03-04"},{"lineNumber":327,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2024-03-04"},{"lineNumber":328,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":329,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":330,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":331,"author":{"gitId":"Ella-e"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2024-03-04"},{"lineNumber":332,"author":{"gitId":"Ella-e"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2024-03-04"},{"lineNumber":333,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":334,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":335,"author":{"gitId":"Ella-e"},"content":"#resultDisplay .content {","lastModifiedDate":"2024-03-04"},{"lineNumber":336,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2024-03-04"},{"lineNumber":337,"author":{"gitId":"Ella-e"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":338,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":339,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":340,"author":{"gitId":"Ella-e"},"content":"#tags {","lastModifiedDate":"2024-03-04"},{"lineNumber":341,"author":{"gitId":"Ella-e"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2024-03-04"},{"lineNumber":342,"author":{"gitId":"Ella-e"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2024-03-04"},{"lineNumber":343,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":344,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":345,"author":{"gitId":"Ella-e"},"content":"#tags .label {","lastModifiedDate":"2024-03-04"},{"lineNumber":346,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":347,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2024-03-04"},{"lineNumber":348,"author":{"gitId":"Ella-e"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2024-03-04"},{"lineNumber":349,"author":{"gitId":"Ella-e"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2024-03-04"},{"lineNumber":350,"author":{"gitId":"Ella-e"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2024-03-04"},{"lineNumber":351,"author":{"gitId":"Ella-e"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2024-03-04"},{"lineNumber":352,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":352}},{"path":"bin/main/view/Extensions.css","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":".error {","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":".list-cell:empty {","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"    -fx-background: #383838;","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":".tag-selector {","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"    -fx-border-color: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":".tooltip-text {","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":20}},{"path":"bin/main/view/HelpWindow.css","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"#copyButton, #helpMessage {","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"#copyButton {","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: dimgray;","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"#copyButton:hover {","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: gray;","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"#copyButton:armed {","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: darkgray;","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"#helpMessageContainer {","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":19}},{"path":"bin/main/view/HelpWindow.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"  \u003cicons\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"  \u003cscene\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    \u003cScene\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        \u003cURL value\u003d\"@HelpWindow.css\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"      \u003cHBox alignment\u003d\"CENTER\" fx:id\u003d\"helpMessageContainer\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"          \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"              \u003cInsets right\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"          \u003c/Label\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"          \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"              \u003cInsets left\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"          \u003c/Button\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        \u003c/children\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"        \u003copaqueInsets\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"        \u003c/opaqueInsets\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":44}},{"path":"bin/main/view/MainWindow.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"  \u003cicons\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"  \u003cscene\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"    \u003cScene\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":60}},{"path":"bin/main/view/PersonListCard.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"      \u003cFlowPane fx:id\u003d\"allergyTags\" /\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":35,"SeaHogs":1}},{"path":"bin/main/view/PersonListPanel.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":8}},{"path":"bin/main/view/ResultDisplay.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":9}},{"path":"bin/main/view/StatusBarFooter.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"  \u003ccolumnConstraints\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"  \u003c/columnConstraints\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"\u003c/GridPane\u003e","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":12}},{"path":"bin/test/view/UiPartTest/invalidFile.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"Not a valid FXML file","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Ella-e":1}},{"path":"bin/test/view/UiPartTest/validFile.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"\u003c?import vitalConnect.ui.TestFxmlObject?\u003e","lastModifiedDate":"2024-03-10"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"javierng2knus":1,"Ella-e":3}},{"path":"bin/test/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"\u003cfx:root type\u003d\"vitalConnect.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2024-03-10"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"        xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"javierng2knus":1,"Ella-e":5}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"mainClassName \u003d \u0027vitalconnect.Main\u0027","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"    implementation group: \u0027org.apache.poi\u0027, name: \u0027poi-ooxml\u0027, version: \u00273.6\u0027","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"run{","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"    archiveFileName \u003d \u0027vitalconnect.jar\u0027","lastModifiedDate":"2024-03-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"MaYuehan":2,"Ella-e":7,"-":69}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2019-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2019-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for the coding standard at","lastModifiedDate":"2022-05-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://se-education.org/guides/conventions/java/intermediate.html","lastModifiedDate":"2022-05-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e","lastModifiedDate":"2019-02-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-10-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    IMPORT CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.","lastModifiedDate":"2017-01-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:","lastModifiedDate":"2017-01-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      1. STATIC: static imports","lastModifiedDate":"2017-01-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      2. STANDARD_JAVA_PACKAGE: standard java/javax imports","lastModifiedDate":"2017-01-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      3. SPECIAL_IMPORTS: defined as org imports","lastModifiedDate":"2017-01-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      4. THIRD_PARTY_PACKAGE: defined as com imports","lastModifiedDate":"2017-01-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CustomImportOrder\"\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"customImportOrderRules\"","lastModifiedDate":"2017-01-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    An import statement is redundant if:","lastModifiedDate":"2017-01-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2017-01-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2017-01-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2017-01-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for unused import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    An import statement is unused if:","lastModifiedDate":"2017-01-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      It\u0027s not referenced in the file.","lastModifiedDate":"2017-01-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    NAMING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    LENGTH and CODING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2017-04-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      the same line. e.g., the following example is fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } else","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      \u003c!-- This next example is not fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        else","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      if (true) return 1; // Not allowed","lastModifiedDate":"2017-04-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      if (true) { return 1; } // Not allowed","lastModifiedDate":"2016-10-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      else if {","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return 1; // else if should always be multi line","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      if (true)","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return 1; // Not allowed","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2017-09-17"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-17"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that Class variables should never be declared public. --\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"VisibilityModifier\"\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    ORDER CHECKS","lastModifiedDate":"2017-01-16"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2017-04-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2017-04-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2017-04-01"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":243,"author":{"gitId":"-"},"content":"      3. Constructors","lastModifiedDate":"2017-04-01"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      4. Methods","lastModifiedDate":"2017-04-01"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that default is after all cases in a switch statement --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"DefaultComesLast\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"           8.4.3.  The prescribed order is:","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"           public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"           synchronized, native, strictfp","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2017-01-16"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    WHITESPACE CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAround\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that various tokens are surrounded by whitespace.","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"           This includes most binary operators and keywords followed","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"           by regular or curly braces.","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,","lastModifiedDate":"2016-12-10"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty methods e.g. void func() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":286,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":288,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":289,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":294,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":299,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        UNARY_PLUS\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    \u003c!-- No trailing whitespace --\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Regexp\"\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":312,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":313,"author":{"gitId":"-"},"content":"           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\",","lastModifiedDate":"2017-05-22"},{"lineNumber":314,"author":{"gitId":"-"},"content":"           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\",","lastModifiedDate":"2017-05-22"},{"lineNumber":315,"author":{"gitId":"-"},"content":"           \"\u0026\" when used in a generic upper or lower bounds constraints,","lastModifiedDate":"2017-05-22"},{"lineNumber":316,"author":{"gitId":"-"},"content":"             e.g. \u003cT extends Foo \u0026 Bar\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":317,"author":{"gitId":"-"},"content":"           \"::\" when used as a reference to a method or constructor without arguments.","lastModifiedDate":"2017-05-22"},{"lineNumber":318,"author":{"gitId":"-"},"content":"             e.g. String::compareToIgnoreCase","lastModifiedDate":"2017-05-22"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":320,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,","lastModifiedDate":"2017-05-22"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":326,"author":{"gitId":"-"},"content":"           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\".","lastModifiedDate":"2017-05-22"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":328,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,","lastModifiedDate":"2017-05-22"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":330,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":334,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":335,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":336,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":340,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":341,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-14"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":346,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"throwsIndent\" value\u003d\"8\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":351,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBeforeCaseDefaultColon\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there is no whitespace between method/constructor name and open parenthesis. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodParamPad\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParenPad\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":362,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character.","lastModifiedDate":"2018-08-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"         a \u003d 1; // Allowed","lastModifiedDate":"2018-08-15"},{"lineNumber":367,"author":{"gitId":"-"},"content":"         a  \u003d 1; // Not allowed (more than one space before \u003d)","lastModifiedDate":"2018-08-15"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":370,"author":{"gitId":"-"},"content":"      \u003c!-- Validate whitespace surrounding comments as well.","lastModifiedDate":"2018-08-15"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":372,"author":{"gitId":"-"},"content":"           a \u003d 1; // Allowed (single space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":373,"author":{"gitId":"-"},"content":"           a \u003d 1; /* Allowed (single space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":374,"author":{"gitId":"-"},"content":"           /* Allowed (single space after end of comment) */ a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":375,"author":{"gitId":"-"},"content":"           a \u003d 1;  // Not allowed (more than one space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":376,"author":{"gitId":"-"},"content":"           a \u003d 1;  /* Not allowed (more than one space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":377,"author":{"gitId":"-"},"content":"           /* Not allowed (more than one space after end of comment) */  a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":379,"author":{"gitId":"-"},"content":"           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed.","lastModifiedDate":"2018-08-15"},{"lineNumber":380,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":381,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2017-08-20"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    JAVADOC CHECKS","lastModifiedDate":"2017-08-20"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":388,"author":{"gitId":"SeaHogs"},"content":"    \u003c!-- Checks that all block-allergyTags are ordered correctly. --\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":391,"author":{"gitId":"SeaHogs"},"content":"    \u003c!-- Checks that Javadoc block allergyTags appear only at the beginning of the line. --\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocBlockTagLocation\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that all Javadoc comments start from the second line. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocContentLocationCheck\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each line in Javadoc has leading asterisks. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMissingLeadingAsterisk\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each non-empty line in Javadoc has whitespace after leading asterisk. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMissingWhitespaceAfterAsterisk\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":403,"author":{"gitId":"SeaHogs"},"content":"    \u003c!-- Checks that for block allergyTags, indentation of continuation lines is at least 4 spaces. --\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocTagContinuationIndentation\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the Javadoc\u0027s format for every class, enumeration and interface. --\u003e","lastModifiedDate":"2022-05-29"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":408,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":409,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the Javadoc\u0027s format for every public method (excluding getters, setters and constructors). --\u003e","lastModifiedDate":"2022-05-29"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":413,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":414,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"accessModifiers\" value\u003d\"public\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":415,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":416,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":417,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":418,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":419,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":423,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e","lastModifiedDate":"2022-05-29"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":425,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":426,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":427,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*|main)\"/\u003e","lastModifiedDate":"2023-07-10"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":430,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public class, enumeration and interface has a header comment. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocType\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":433,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":434,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":431,"SeaHogs":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"### Ng Wei Chong Javier","lastModifiedDate":"2024-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"\u003cimg src\u003d\"images/javierng2knus.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"[[github](https://github.com/javierng2knus)]","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"[[portfolio](team/javier.md)]","lastModifiedDate":"2024-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"* Role: Team lead","lastModifiedDate":"2024-03-06"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"* Responsibilities: \u003cWill be reassigned on a later date\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"### Ma Yuehan","lastModifiedDate":"2024-02-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"\u003cimg src\u003d\"images/mayuehan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"[[github](https://github.com/MaYuehan)]","lastModifiedDate":"2024-02-25"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"[[portfolio](team/mayuehan.md)]","lastModifiedDate":"2024-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2024-02-25"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"* Responsibilities: Command implementation, documentation, Ui","lastModifiedDate":"2024-03-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"### Mu Zhaoyu","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"\u003cimg src\u003d\"images/ella-e.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"[[github](http://github.com/Ella-e)] ","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"[[portfolio](team/ella-e.md)]","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"* Responsibilities: Command implementation, documentation","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"### Lai Yiwen","lastModifiedDate":"2024-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"\u003cimg src\u003d\"images/seahogs.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"[[github](https://github.com/SeaHogs)]","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"[[portfolio](team/seahogs.md)]","lastModifiedDate":"2024-03-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"* Responsibilities: Command implementation, documentation","lastModifiedDate":"2024-03-06"}],"authorContributionMap":{"javierng2knus":6,"MaYuehan":5,"Ella-e":9,"-":29,"SeaHogs":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2024-03-06"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2024-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document `docs/diagrams` folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline continues till the end of diagram.","lastModifiedDate":"2024-02-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).\u003cbr\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"   Note that although this is shown as a single step in the diagram above (for simplicity), in the code it can take several interactions (between the command object and the `Model`) to achieve.","lastModifiedDate":"2024-02-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"javierng2knus"},"content":"Classes used by multiple components are in the `vitalConnectbook.commons` package.","lastModifiedDate":"2024-03-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"The following sequence diagram shows how an undo operation goes through the `Logic` component:","lastModifiedDate":"2024-02-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram-Logic.png)","lastModifiedDate":"2024-02-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"Similarly, how an undo operation goes through the `Model` component is shown below:","lastModifiedDate":"2024-02-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram-Model.png)","lastModifiedDate":"2024-02-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"Ella-e"},"content":"* has a need to manage a significant number of patient records and contacts","lastModifiedDate":"2024-03-04"},{"lineNumber":262,"author":{"gitId":"Ella-e"},"content":"* need to manage a significant number of appointments","lastModifiedDate":"2024-03-04"},{"lineNumber":263,"author":{"gitId":"Ella-e"},"content":"* need to have a reminder of upcoming appointments","lastModifiedDate":"2024-03-04"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":267,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"Ella-e"},"content":"**Value proposition**:","lastModifiedDate":"2024-03-06"},{"lineNumber":270,"author":{"gitId":"MaYuehan"},"content":"vitalconnect aims to provide a robust and user-friendly platform for medical professionals to streamline their workflow by effectively managing patient information and appointments. The key value propositions include:","lastModifiedDate":"2024-03-13"},{"lineNumber":271,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":272,"author":{"gitId":"Ella-e"},"content":"* Efficient Patient Management: Users can easily add, modify, and retrieve patient information, ensuring a comprehensive and organized patient database.","lastModifiedDate":"2024-03-06"},{"lineNumber":273,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":274,"author":{"gitId":"MaYuehan"},"content":"* Seamless Appointment Handling: vitalconnect allows for the effortless creation, modification, and deletion of appointments, ensuring accurate scheduling and coordination.","lastModifiedDate":"2024-03-13"},{"lineNumber":275,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":276,"author":{"gitId":"Ella-e"},"content":"* CLI Efficiency: The application caters to users who prefer typing commands over graphical interfaces, enabling faster and more precise data entry.","lastModifiedDate":"2024-03-06"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"Ella-e"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (good to but might not have) - `*`","lastModifiedDate":"2024-03-04"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"Ella-e"},"content":"| `* * *`  | new user | have a comprehensive document that details every possible feature. | learn how to use a particular feature |","lastModifiedDate":"2024-03-04"},{"lineNumber":286,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | user | add new patient, either with or without further basic information about the patient | |","lastModifiedDate":"2024-03-06"},{"lineNumber":287,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | user | add the basic information of my patient into the database | so that I can better identify who the patient is |","lastModifiedDate":"2024-03-06"},{"lineNumber":288,"author":{"gitId":"Ella-e"},"content":"| `* * *`  | user | delete patient | free storage resources |","lastModifiedDate":"2024-03-04"},{"lineNumber":289,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | user | list out all of the information about a particular patient | see the detailed information of the patient |","lastModifiedDate":"2024-03-06"},{"lineNumber":290,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | user | add the contact information of my patient into the database | get in touch with them when needed or under emergency situation |","lastModifiedDate":"2024-03-06"},{"lineNumber":291,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | user | delete the contact information for a particular patient when the information is outdated | free storage resources |","lastModifiedDate":"2024-03-06"},{"lineNumber":292,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | user | list out all of the patients and their contact information | |","lastModifiedDate":"2024-03-06"},{"lineNumber":293,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | intermediate user | add appointment information for a patient | easily schedule an appointment and find free time slot for it |","lastModifiedDate":"2024-03-06"},{"lineNumber":294,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | intermediate user | delete appointment for a patient | free up slots if the patient is unable to attend |","lastModifiedDate":"2024-03-06"},{"lineNumber":295,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | intermediate user | list out all of the appointments | |","lastModifiedDate":"2024-03-06"},{"lineNumber":296,"author":{"gitId":"javierng2knus"},"content":"| `* * *`  | user | list out all of the information about a particular patient | see the detailed information of the patient |","lastModifiedDate":"2024-03-06"},{"lineNumber":297,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | add the medical information for the patient | allow the doctor to better treat the patient |","lastModifiedDate":"2024-03-06"},{"lineNumber":298,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | delete the medical information for a patient when the information is outdated | free storage resources |","lastModifiedDate":"2024-03-06"},{"lineNumber":299,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | list out all of the patients and their medical information | |","lastModifiedDate":"2024-03-06"},{"lineNumber":300,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | modify the medical details of a patient | keep the patient\u0027s medical information updated |","lastModifiedDate":"2024-03-06"},{"lineNumber":301,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | modify the basic information of a patient | keep the patient\u0027s basic information updated |","lastModifiedDate":"2024-03-06"},{"lineNumber":302,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | modify the contact information of a patient | keep the patient\u0027s contact information updated |","lastModifiedDate":"2024-03-06"},{"lineNumber":303,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | modify the appointment details of a patient | keep the patient\u0027s appointment information updated |","lastModifiedDate":"2024-03-06"},{"lineNumber":304,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | undo the most recent change or command if possible | fix any errors made |","lastModifiedDate":"2024-03-06"},{"lineNumber":305,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | user | view all of the appointments for the day | |","lastModifiedDate":"2024-03-06"},{"lineNumber":306,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | intermediate user | list out specifically the medication that the patient is currently taking | |","lastModifiedDate":"2024-03-06"},{"lineNumber":307,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | intermediate user | modify the patient\u0027s current medication | better track the medication plan of the patient |","lastModifiedDate":"2024-03-06"},{"lineNumber":308,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | intermediate user | list out specifically the patient\u0027s allergies | prescribe the appropriate medication |","lastModifiedDate":"2024-03-06"},{"lineNumber":309,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | intermediate user | modify the patient\u0027s allergies | |","lastModifiedDate":"2024-03-06"},{"lineNumber":310,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | intermediate user | list out specifically the past illnesses of the patient | assist in the diagnosis process |","lastModifiedDate":"2024-03-06"},{"lineNumber":311,"author":{"gitId":"javierng2knus"},"content":"| `* *`  | intermediate user | modify the patient\u0027s past illnesses upon the previous appointment | |","lastModifiedDate":"2024-03-06"},{"lineNumber":312,"author":{"gitId":"Ella-e"},"content":"| `* *`  | expert user | have short forms of existing commands | save time on typing the commands |","lastModifiedDate":"2024-03-04"},{"lineNumber":313,"author":{"gitId":"Ella-e"},"content":"| `*`  | new user | have the ability to switch to a more simplified and beginner friendly UI | more effectively learn the basics |","lastModifiedDate":"2024-03-04"},{"lineNumber":314,"author":{"gitId":"javierng2knus"},"content":"| `*`  | new user | have interactive elements in the user guide | easily understand the app\u0027s capabilities |","lastModifiedDate":"2024-03-06"},{"lineNumber":315,"author":{"gitId":"javierng2knus"},"content":"| `*`  | new user | be given command suggestions for mistyped commands | type the intended command without needing to refer to the user guide |","lastModifiedDate":"2024-03-06"},{"lineNumber":316,"author":{"gitId":"javierng2knus"},"content":"| `*`  | user | add a reminder for an appointment | be aware of the appointment while busy with work |","lastModifiedDate":"2024-03-06"},{"lineNumber":317,"author":{"gitId":"javierng2knus"},"content":"| `*`  | user | mark a reminder as done or undone | better track done and undone work |","lastModifiedDate":"2024-03-06"},{"lineNumber":318,"author":{"gitId":"javierng2knus"},"content":"| `*`  | user | mark some of the patients as the special focus | better track patients in serious conditions |","lastModifiedDate":"2024-03-06"},{"lineNumber":319,"author":{"gitId":"javierng2knus"},"content":"| `*`  | user | have the ability to leave comments or annotations on shared patient records | communicate specific insights or recommendations to my colleagues |","lastModifiedDate":"2024-03-06"},{"lineNumber":320,"author":{"gitId":"javierng2knus"},"content":"| `*`  | user | have a way to assign specific colors to specific medical terms | better skim through the information |","lastModifiedDate":"2024-03-06"},{"lineNumber":321,"author":{"gitId":"javierng2knus"},"content":"| `*`  | user | have a method for showing tooltips of features when hovered | quickly find out information about the feature without needing other references |","lastModifiedDate":"2024-03-06"},{"lineNumber":322,"author":{"gitId":"javierng2knus"},"content":"| `*`  | user | have a method of giving feedback to the developers | share aspects of the product that I would like changes to |","lastModifiedDate":"2024-03-06"},{"lineNumber":323,"author":{"gitId":"javierng2knus"},"content":"| `*`  | intermediate user | have an efficient way to export and backup patient data | ensure the safety and accessibility of important information |","lastModifiedDate":"2024-03-06"},{"lineNumber":324,"author":{"gitId":"javierng2knus"},"content":"| `*`  | intermediate user | export selected patient\u0027s information | give the information to the doctor or the patient when needed |","lastModifiedDate":"2024-03-06"},{"lineNumber":325,"author":{"gitId":"javierng2knus"},"content":"| `*`  | intermediate user | export selected medical instructions | easily share the instructions to the patient|","lastModifiedDate":"2024-03-06"},{"lineNumber":326,"author":{"gitId":"javierng2knus"},"content":"| `*`  | doctor | be able to set a set of instructions for the assistants for special cases such as performing lung capacity tests for asmatics | make my assistants aware of the procedures to go through before my consultation with the patient |","lastModifiedDate":"2024-03-10"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"MaYuehan"},"content":"(For all use cases below, the **System** is the `vitalconnect` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2024-03-13"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"Ella-e"},"content":"**Use case: UC1 - Add a patient**","lastModifiedDate":"2024-03-04"},{"lineNumber":333,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"Ella-e"},"content":"1.  User requests to add a patient by keying the patient\u0027s name and NRIC in the command.","lastModifiedDate":"2024-03-04"},{"lineNumber":335,"author":{"gitId":"MaYuehan"},"content":"2.  vitalconnect adds the patient\u0027s name and NRIC.","lastModifiedDate":"2024-03-13"},{"lineNumber":336,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"Ella-e"},"content":"* 1a. The NRIC already exists in the system.","lastModifiedDate":"2024-03-04"},{"lineNumber":339,"author":{"gitId":"MaYuehan"},"content":"      * 1a1. vitalconnect displays warning message and the existing patient\u0027s information.","lastModifiedDate":"2024-03-13"},{"lineNumber":340,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":341,"author":{"gitId":"Ella-e"},"content":"* 1b. The NRIC or name entered is invalid.","lastModifiedDate":"2024-03-04"},{"lineNumber":342,"author":{"gitId":"MaYuehan"},"content":"      * 1b1. vitalconnect shows an error message.","lastModifiedDate":"2024-03-13"},{"lineNumber":343,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"Ella-e"},"content":"**Use case: UC2 - Delete a patient**","lastModifiedDate":"2024-03-04"},{"lineNumber":346,"author":{"gitId":"Ella-e"},"content":"**MSS**","lastModifiedDate":"2024-03-04"},{"lineNumber":347,"author":{"gitId":"Ella-e"},"content":"1.  User requests to delete a patient by keying the patient\u0027s name or NRIC in the command.","lastModifiedDate":"2024-03-04"},{"lineNumber":348,"author":{"gitId":"MaYuehan"},"content":"2.  vitalconnect deletes the patient from database.","lastModifiedDate":"2024-03-13"},{"lineNumber":349,"author":{"gitId":"Ella-e"},"content":"Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":350,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2024-03-04"},{"lineNumber":351,"author":{"gitId":"Ella-e"},"content":"* 1a. The patient doesn\u0027t exist in the system.","lastModifiedDate":"2024-03-04"},{"lineNumber":352,"author":{"gitId":"MaYuehan"},"content":"      * 1a1. vitalconnect displays an error message.","lastModifiedDate":"2024-03-13"},{"lineNumber":353,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"Ella-e"},"content":"**Use case: UC3 - Add an appointment**","lastModifiedDate":"2024-03-04"},{"lineNumber":356,"author":{"gitId":"Ella-e"},"content":"**MSS**","lastModifiedDate":"2024-03-04"},{"lineNumber":357,"author":{"gitId":"Ella-e"},"content":"1.  User requests to add an appointment for a patient.","lastModifiedDate":"2024-03-04"},{"lineNumber":358,"author":{"gitId":"MaYuehan"},"content":"2.  vitalconnect add the appointment to the database under this patient\u0027s NRIC.","lastModifiedDate":"2024-03-13"},{"lineNumber":359,"author":{"gitId":"Ella-e"},"content":"Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":360,"author":{"gitId":"Ella-e"},"content":"**Extensions**","lastModifiedDate":"2024-03-04"},{"lineNumber":361,"author":{"gitId":"Ella-e"},"content":"* 1a. Critical information (time and doctor) missing in the appointment.","lastModifiedDate":"2024-03-04"},{"lineNumber":362,"author":{"gitId":"MaYuehan"},"content":"      * 1a1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":363,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":364,"author":{"gitId":"Ella-e"},"content":"* 1b. The assigned patient doesn\u0027t exist in the database.","lastModifiedDate":"2024-03-04"},{"lineNumber":365,"author":{"gitId":"MaYuehan"},"content":"      * 1b1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":366,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":367,"author":{"gitId":"Ella-e"},"content":"* 1c. The appointment time crashes with existing time.","lastModifiedDate":"2024-03-04"},{"lineNumber":368,"author":{"gitId":"MaYuehan"},"content":"      * 1c1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":369,"author":{"gitId":"MaYuehan"},"content":"      * 1c1. vitalconnect displays the appointment with crashing time.","lastModifiedDate":"2024-03-13"},{"lineNumber":370,"author":{"gitId":"-"},"content":"      Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"Ella-e"},"content":"**Use case: UC4 - Delete an appointment**","lastModifiedDate":"2024-03-04"},{"lineNumber":373,"author":{"gitId":"Ella-e"},"content":"**MSS**","lastModifiedDate":"2024-03-04"},{"lineNumber":374,"author":{"gitId":"Ella-e"},"content":"1.  User requests to delete an appointment for a patient.","lastModifiedDate":"2024-03-04"},{"lineNumber":375,"author":{"gitId":"MaYuehan"},"content":"2.  vitalconnect removes the appointment from the database.","lastModifiedDate":"2024-03-13"},{"lineNumber":376,"author":{"gitId":"Ella-e"},"content":"Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":377,"author":{"gitId":"Ella-e"},"content":"**Extensions**","lastModifiedDate":"2024-03-04"},{"lineNumber":378,"author":{"gitId":"Ella-e"},"content":"* 1a. The assigned patient or the appointment doesn\u0027t exist in the database.","lastModifiedDate":"2024-03-04"},{"lineNumber":379,"author":{"gitId":"MaYuehan"},"content":"      * 1a1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":380,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"Ella-e"},"content":"**Use case: UC5 - Modify an appointment**","lastModifiedDate":"2024-03-04"},{"lineNumber":383,"author":{"gitId":"Ella-e"},"content":"**MSS**","lastModifiedDate":"2024-03-04"},{"lineNumber":384,"author":{"gitId":"Ella-e"},"content":"1.  User requests to modify an appointment for a patient by keying the appointment\u0027s id.","lastModifiedDate":"2024-03-04"},{"lineNumber":385,"author":{"gitId":"MaYuehan"},"content":"2.  vitalconnect displays the detail of the appointment to be modified.","lastModifiedDate":"2024-03-13"},{"lineNumber":386,"author":{"gitId":"Ella-e"},"content":"3.  User specify which field to be modified and enters the new information.","lastModifiedDate":"2024-03-04"},{"lineNumber":387,"author":{"gitId":"MaYuehan"},"content":"4.  vitalconnect saves the new appointment information.","lastModifiedDate":"2024-03-13"},{"lineNumber":388,"author":{"gitId":"MaYuehan"},"content":"5.  vitalconnect displays the updated detail of the appointment modified.","lastModifiedDate":"2024-03-13"},{"lineNumber":389,"author":{"gitId":"Ella-e"},"content":"Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":390,"author":{"gitId":"Ella-e"},"content":"**Extensions**","lastModifiedDate":"2024-03-04"},{"lineNumber":391,"author":{"gitId":"Ella-e"},"content":"* 1a. The appointment refered by the id doesn\u0027t exist in the database.","lastModifiedDate":"2024-03-04"},{"lineNumber":392,"author":{"gitId":"MaYuehan"},"content":"      * 1a1. vitalconnect displays an error message.","lastModifiedDate":"2024-03-13"},{"lineNumber":393,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":394,"author":{"gitId":"Ella-e"},"content":"* 1b. The id is not a valid number.","lastModifiedDate":"2024-03-04"},{"lineNumber":395,"author":{"gitId":"MaYuehan"},"content":"      * 1b1. vitalconnect displays an error message.","lastModifiedDate":"2024-03-13"},{"lineNumber":396,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":397,"author":{"gitId":"Ella-e"},"content":"* 3a. The field to be modified is unrecognized.","lastModifiedDate":"2024-03-04"},{"lineNumber":398,"author":{"gitId":"MaYuehan"},"content":"      * 3a1. vitalconnect displays an error message.","lastModifiedDate":"2024-03-13"},{"lineNumber":399,"author":{"gitId":"MaYuehan"},"content":"      * 3a2. vitalconnect request for valid field information.","lastModifiedDate":"2024-03-13"},{"lineNumber":400,"author":{"gitId":"Ella-e"},"content":"      * 3a3. User enters new field information.","lastModifiedDate":"2024-03-04"},{"lineNumber":401,"author":{"gitId":"Ella-e"},"content":"      Steps 3a1-3a3 are repeated until the data entered are correct.","lastModifiedDate":"2024-03-04"},{"lineNumber":402,"author":{"gitId":"Ella-e"},"content":"      Use case resumes from step 4.","lastModifiedDate":"2024-03-04"},{"lineNumber":403,"author":{"gitId":"Ella-e"},"content":"* 3b. The new information is in invalid form or contains invalid character.","lastModifiedDate":"2024-03-04"},{"lineNumber":404,"author":{"gitId":"MaYuehan"},"content":"      * 3b1. vitalconnect displays an error message.","lastModifiedDate":"2024-03-13"},{"lineNumber":405,"author":{"gitId":"MaYuehan"},"content":"      * 3b2. vitalconnect request for valid data entry.","lastModifiedDate":"2024-03-13"},{"lineNumber":406,"author":{"gitId":"Ella-e"},"content":"      * 3b3. User enters new field information.","lastModifiedDate":"2024-03-04"},{"lineNumber":407,"author":{"gitId":"Ella-e"},"content":"      Steps 3b1-3b3 are repeated until the data entered are valid.","lastModifiedDate":"2024-03-04"},{"lineNumber":408,"author":{"gitId":"Ella-e"},"content":"      Use case resumes from step 4.","lastModifiedDate":"2024-03-04"},{"lineNumber":409,"author":{"gitId":"Ella-e"},"content":"* 3c. The appointment time crashes with existing time.","lastModifiedDate":"2024-03-04"},{"lineNumber":410,"author":{"gitId":"MaYuehan"},"content":"      * 3c1. vitalconnect displays an error message.","lastModifiedDate":"2024-03-13"},{"lineNumber":411,"author":{"gitId":"MaYuehan"},"content":"      * 3c2. vitalconnect displays the appointment with crashing time.","lastModifiedDate":"2024-03-13"},{"lineNumber":412,"author":{"gitId":"MaYuehan"},"content":"      * 3c3. vitalconnect request for valid data entry.","lastModifiedDate":"2024-03-13"},{"lineNumber":413,"author":{"gitId":"Ella-e"},"content":"      * 3c4. User enters new field information.","lastModifiedDate":"2024-03-04"},{"lineNumber":414,"author":{"gitId":"Ella-e"},"content":"      Steps 3c1-3c4 are repeated until the time doesn\u0027t crash.","lastModifiedDate":"2024-03-04"},{"lineNumber":415,"author":{"gitId":"Ella-e"},"content":"      Use case resumes from step 4.","lastModifiedDate":"2024-03-04"},{"lineNumber":416,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":417,"author":{"gitId":"javierng2knus"},"content":"**Use case: UC6 - Add specific information for a patient**","lastModifiedDate":"2024-03-06"},{"lineNumber":418,"author":{"gitId":"Ella-e"},"content":"**MSS**","lastModifiedDate":"2024-03-04"},{"lineNumber":419,"author":{"gitId":"javierng2knus"},"content":"1.  User requests to add specific information for a patient.","lastModifiedDate":"2024-03-06"},{"lineNumber":420,"author":{"gitId":"MaYuehan"},"content":"2.  vitalconnect save the specific information to the database.","lastModifiedDate":"2024-03-13"},{"lineNumber":421,"author":{"gitId":"Ella-e"},"content":"Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":422,"author":{"gitId":"Ella-e"},"content":"**Extensions**","lastModifiedDate":"2024-03-04"},{"lineNumber":423,"author":{"gitId":"Ella-e"},"content":"* 1a. The patient doesn\u0027t exist in the database.","lastModifiedDate":"2024-03-04"},{"lineNumber":424,"author":{"gitId":"MaYuehan"},"content":"      * 1a1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":425,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":426,"author":{"gitId":"javierng2knus"},"content":"* 1b. The information is invalid.","lastModifiedDate":"2024-03-06"},{"lineNumber":427,"author":{"gitId":"MaYuehan"},"content":"      * 1b1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":428,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"javierng2knus"},"content":"**Use case: UC7 - Delete specific information**","lastModifiedDate":"2024-03-06"},{"lineNumber":431,"author":{"gitId":"Ella-e"},"content":"**MSS**","lastModifiedDate":"2024-03-04"},{"lineNumber":432,"author":{"gitId":"javierng2knus"},"content":"1.  User requests to delete specific information for a patient.","lastModifiedDate":"2024-03-06"},{"lineNumber":433,"author":{"gitId":"MaYuehan"},"content":"2.  vitalconnect remove the specific information to the database.","lastModifiedDate":"2024-03-13"},{"lineNumber":434,"author":{"gitId":"Ella-e"},"content":"Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":435,"author":{"gitId":"Ella-e"},"content":"**Extensions**","lastModifiedDate":"2024-03-04"},{"lineNumber":436,"author":{"gitId":"javierng2knus"},"content":"* 1a. The patient or specific information doesn\u0027t exist in the database.","lastModifiedDate":"2024-03-06"},{"lineNumber":437,"author":{"gitId":"MaYuehan"},"content":"      * 1a1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":438,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"javierng2knus"},"content":"**Use case: UC8 - Modify specific information**","lastModifiedDate":"2024-03-06"},{"lineNumber":441,"author":{"gitId":"Ella-e"},"content":"**MSS**","lastModifiedDate":"2024-03-04"},{"lineNumber":442,"author":{"gitId":"javierng2knus"},"content":"1.  User requests to modify specific information for a patient.","lastModifiedDate":"2024-03-06"},{"lineNumber":443,"author":{"gitId":"MaYuehan"},"content":"2.  vitalconnect displays the updated specific information of the patient.","lastModifiedDate":"2024-03-13"},{"lineNumber":444,"author":{"gitId":"Ella-e"},"content":"Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":445,"author":{"gitId":"Ella-e"},"content":"**Extensions**","lastModifiedDate":"2024-03-04"},{"lineNumber":446,"author":{"gitId":"javierng2knus"},"content":"* 1a. The patient or specific information doesn\u0027t exist in the database.","lastModifiedDate":"2024-03-06"},{"lineNumber":447,"author":{"gitId":"MaYuehan"},"content":"      * 1a1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":448,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":449,"author":{"gitId":"javierng2knus"},"content":"* 1b. The specific information is invalid.","lastModifiedDate":"2024-03-06"},{"lineNumber":450,"author":{"gitId":"MaYuehan"},"content":"      * 1b1. vitalconnect displays a warning message.","lastModifiedDate":"2024-03-13"},{"lineNumber":451,"author":{"gitId":"Ella-e"},"content":"      Use case ends.","lastModifiedDate":"2024-03-04"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"Ella-e"},"content":"# Technical Requirements","lastModifiedDate":"2024-03-04"},{"lineNumber":456,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"Ella-e"},"content":"# Performance Requirements","lastModifiedDate":"2024-03-04"},{"lineNumber":459,"author":{"gitId":"Ella-e"},"content":"1. Should be able to hold up to 100 patients with 1000 appointments without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2024-03-04"},{"lineNumber":460,"author":{"gitId":"Ella-e"},"content":"2. The system should respond within 3 seconds.","lastModifiedDate":"2024-03-04"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":462,"author":{"gitId":"Ella-e"},"content":"# Quality Requirements","lastModifiedDate":"2024-03-04"},{"lineNumber":463,"author":{"gitId":"Ella-e"},"content":"1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2024-03-04"},{"lineNumber":464,"author":{"gitId":"Ella-e"},"content":"2. System should be robust for any form of data file crashes and invalid user input.","lastModifiedDate":"2024-03-04"},{"lineNumber":465,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":466,"author":{"gitId":"Ella-e"},"content":"# Scope","lastModifiedDate":"2024-03-04"},{"lineNumber":467,"author":{"gitId":"Ella-e"},"content":"1. The product will \u003cstrong\u003eNOT\u003c/strong\u003e enforce any form of protection of the generated data file containing patients\u0027 information. The organization should be responsible for ensuring the safety of their patient\u0027s data.","lastModifiedDate":"2024-03-04"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":469,"author":{"gitId":"Ella-e"},"content":"# Process Requirements","lastModifiedDate":"2024-03-04"},{"lineNumber":470,"author":{"gitId":"Ella-e"},"content":"1. The project is expected to grow in breadth-first iterative process.","lastModifiedDate":"2024-03-04"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, MacOS","lastModifiedDate":"2024-02-09"},{"lineNumber":475,"author":{"gitId":"SeaHogs"},"content":"* **CLI**: Acronym for Command Line Interface, a text-based interface where users interact with the application by typing commands.","lastModifiedDate":"2024-03-06"},{"lineNumber":476,"author":{"gitId":"MaYuehan"},"content":"* **vitalconnect**: The system being described, representing the medical management application.","lastModifiedDate":"2024-03-13"},{"lineNumber":477,"author":{"gitId":"MaYuehan"},"content":"* **Use Case**: A specific scenario or situation in which a user interacts with the vitalconnect system to achieve a specific goal.","lastModifiedDate":"2024-03-13"},{"lineNumber":478,"author":{"gitId":"SeaHogs"},"content":"* **MSS (Main Success Scenario)**: The primary sequence of steps in a use case that represents the successful accomplishment of the user\u0027s goal.","lastModifiedDate":"2024-03-06"},{"lineNumber":479,"author":{"gitId":"SeaHogs"},"content":"* **Extensions**: Additional scenarios that may occur during the execution of a use case, usually describing alternative paths or error-handling situations.","lastModifiedDate":"2024-03-06"},{"lineNumber":480,"author":{"gitId":"SeaHogs"},"content":"* **NRIC**: National Registration Identity Card, a unique identification number used in some countries.","lastModifiedDate":"2024-03-06"},{"lineNumber":481,"author":{"gitId":"SeaHogs"},"content":"* **Database**: A structured set of data stored electronically, in this context, referring to the storage system for patient and appointment information.","lastModifiedDate":"2024-03-06"},{"lineNumber":482,"author":{"gitId":"MaYuehan"},"content":"* **Appointment**: A scheduled meeting or arrangement, often referring to a scheduled medical consultation in the context of vitalconnect.","lastModifiedDate":"2024-03-13"},{"lineNumber":483,"author":{"gitId":"SeaHogs"},"content":"* **Field**: In the context of modifying an appointment, a specific piece of information within the appointment details that the user can choose to modify (e.g., time, doctor).","lastModifiedDate":"2024-03-06"},{"lineNumber":484,"author":{"gitId":"SeaHogs"},"content":"* **ID (Identification Number)**: A unique identifier associated with a specific appointment, used to distinguish and reference individual appointments.","lastModifiedDate":"2024-03-06"},{"lineNumber":485,"author":{"gitId":"MaYuehan"},"content":"* **Warning Message**: An alert displayed by the vitalconnect system to notify the user of a potential issue or discrepancy.","lastModifiedDate":"2024-03-13"},{"lineNumber":486,"author":{"gitId":"MaYuehan"},"content":"* **Error Message**: A notification displayed by the vitalconnect system to inform the user about a critical issue or mistake.","lastModifiedDate":"2024-03-13"},{"lineNumber":487,"author":{"gitId":"SeaHogs"},"content":"* **Crashing Time**: A situation where the proposed time for an appointment conflicts with an existing appointment time in the system.","lastModifiedDate":"2024-03-06"},{"lineNumber":488,"author":{"gitId":"SeaHogs"},"content":"* **Invalid Data Entry**: Information entered by the user that does not meet the required format or criteria.","lastModifiedDate":"2024-03-06"},{"lineNumber":489,"author":{"gitId":"SeaHogs"},"content":"* **Valid Data Entry**: Information entered by the user that meets the required format or criteria.","lastModifiedDate":"2024-03-06"},{"lineNumber":490,"author":{"gitId":"javierng2knus"},"content":"* **Tooltip**: A common graphical user interface element in which, when hovering over a screen element or component, a text box displays information about that element.","lastModifiedDate":"2024-03-06"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"javierng2knus":52,"MaYuehan":40,"Ella-e":92,"-":349,"SeaHogs":10}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"   1. Run the `vitalconnect.Main` and try a few commands.","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"MaYuehan":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"   e.g. `vitalconnect.commons.StringUtilTest`","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"   e.g. `vitalconnect.storage.StorageManagerTest`","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"   e.g. `vitalconnect.logic.LogicManagerTest`","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"MaYuehan":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"## Introduction","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"Welcome to **vitalConnect**, your all-in-one desktop application for efficient clinic management, optimized for both Command Line Interface (CLI) and Graphical User Interface (GUI). Designed to streamline your clinic management tasks, VitalConnect offers the speed of a CLI with the convenience of a GUI, allowing you to effortlessly organize your patient and appointments with just a few keystrokes.","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"If you are relatively good at typing, having the benefit of CLI of reducing time of dragging your mouse around, vitalConnect empowers you to manage your appointments swiftly and effectively. With its intuitive interface and robust features, you can add, delete, and search for appointments, track medical information, as well as check patient contact for communication with ease.","lastModifiedDate":"2024-03-24"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"This user guide serves as your comprehensive manual for navigating vitalConnect\u0027s features and functionalities. From quick-start instructions to detailed command summaries, you\u0027ll find everything you need to maximize your productivity and streamline your management workflow.","lastModifiedDate":"2024-03-24"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"So, whether you\u0027re a busy professional juggling multiple appointments, vitalConnect is here to simplify your life. Let\u0027s dive in and explore how vitalConnect can revolutionize the way you manage your appointment and patient.","lastModifiedDate":"2024-03-24"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2024-03-24"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"## Table of Contents","lastModifiedDate":"2024-03-24"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"\u003ca id\u003d\"top\"\u003e\u003c/a\u003e","lastModifiedDate":"2024-03-24"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"- [Quick start](#quick-start)","lastModifiedDate":"2024-03-24"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"- [Features](#features)","lastModifiedDate":"2024-03-24"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"    - [Viewing help](#viewing-help--help)","lastModifiedDate":"2024-03-24"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"    - [Adding a patient](#adding-a-patient--add)","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"    - [Listing all patients](#listing-all-patients--list)","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"    - [Locating patients by name](#locating-patients-by-name--find)","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"    - [Deleting a patient](#deleting-a-patient--delete)","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"    - [Adding contact information](#adding-contact-information--addc)","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"    - [Listing contact information](#listing-contact-information--listc)","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"    - [Deleting contact information](#deleting-contact-information--deletec)","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    - [Adding medical information](#adding-medical-information--addm)","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"    - [Listing medical information](#listing-medical-information--listm)","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"    - [Deleting medical information](#deleting-medical-information--deletem)","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"    - [Adding an appointment](#adding-an-appointment--adda)","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"    - [Deleting an appointment](#deleting-an-appointment--deletea)","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"    - [Listing appointments](#list-out-appointments--lista)","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"    - [Clearing all entries](#clearing-all-entries--clear)","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"    - [Exiting the program](#exiting-the-program--exit)","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    - [Saving the data](#saving-the-data)","lastModifiedDate":"2024-03-24"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    - [Editing the data file](#editing-the-data-file)","lastModifiedDate":"2024-03-24"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"    - [Editing medical information](#editing-the-medical-information--editm)","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"    - [Archiving data files](#archiving-data-files-coming-in-v20)","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"- [FAQ](#faq)","lastModifiedDate":"2024-03-24"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"- [Known issues](#known-issues)","lastModifiedDate":"2024-03-24"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"- [Command summary](#command-summary)","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"2. Download the latest `vitalconnect.jar` from [here](https://github.com/AY2324S2-CS2103T-W08-2/tp/releases).","lastModifiedDate":"2024-03-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your vitalConnect.","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"javierng2knus"},"content":"4. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar vitalConnect.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"javierng2knus"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   * `list` : Lists all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"   * `delete 3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2023-01-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"   * `clear` : Deletes all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"javierng2knus"},"content":"Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2024-03-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"  e.g. in `add n/NAME ic/NRIC`, `NAME` and `NRIC` are parameters which can be used as `add n/John Doe ic/S1234567D`.","lastModifiedDate":"2024-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"Ella-e"},"content":"  e.g `h/HEIGHT w/WEIGHT [t/ALLERGY]` can be used as `h/163 w/50 t/Amoxicillin` or as `h/163 w/50`.","lastModifiedDate":"2024-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"Ella-e"},"content":"  e.g. `[t/ALLERGY]…​` can be used as ` ` (i.e. 0 times), `t/Amoxicillin`, `t/insulin t/iodine` etc.","lastModifiedDate":"2024-03-23"},{"lineNumber":95,"author":{"gitId":"javierng2knus"},"content":"  e.g. `[t/ALLERGY]…​` can be used as ` ` (i.e. 0 times), `t/Amoxicillin`, `t/insulin t/iodine` etc.","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"  e.g. if the command specifies `ic/NRIC p/PHONE_NUMBER`, `p/PHONE_NUMBER ic/NRIC` is also acceptable.","lastModifiedDate":"2024-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2023-06-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"javierng2knus"},"content":"![help message](images/commandsPictures/helpMessage.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"### Adding a patient : `add`","lastModifiedDate":"2024-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"Adds a patient to the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"javierng2knus"},"content":"![add command](images/commandsPictures/addCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"Ella-e"},"content":"Format: `add n/NAME ic/NRIC`","lastModifiedDate":"2024-03-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"Ella-e"},"content":"* `add n/John Doe ic/S1234567D`","lastModifiedDate":"2024-03-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":129,"author":{"gitId":"Ella-e"},"content":"### Listing all patients : `list`","lastModifiedDate":"2024-03-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"Ella-e"},"content":"Shows a list of all patients in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"javierng2knus"},"content":"![list command](images/commandsPictures/listCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":139,"author":{"gitId":"Ella-e"},"content":"### Locating patients by name : `find`","lastModifiedDate":"2024-03-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"Ella-e"},"content":"Finds patients whose names contain any of the given keywords.","lastModifiedDate":"2024-03-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"Ella-e"},"content":"* Patients matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2024-03-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"Ella-e"},"content":"* `find John` returns `John Doe` and `John Bard`\u003c/br\u003e","lastModifiedDate":"2024-03-23"},{"lineNumber":154,"author":{"gitId":"javierng2knus"},"content":"  ![result for \u0027find John\u0027](images/commandsPictures/findJohnResult.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":158,"author":{"gitId":"Ella-e"},"content":"### Deleting a patient : `delete`","lastModifiedDate":"2024-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"Ella-e"},"content":"Deletes the specified patient from the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"javierng2knus"},"content":"![delete command](images/commandsPictures/deleteCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"Ella-e"},"content":"* Deletes the patient at the specified `INDEX`.","lastModifiedDate":"2024-03-23"},{"lineNumber":167,"author":{"gitId":"Ella-e"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2024-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"Ella-e"},"content":"* `list` followed by `delete 2` deletes the 2nd patient in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":172,"author":{"gitId":"Ella-e"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st patient in the results of the `find` command.","lastModifiedDate":"2024-03-23"},{"lineNumber":173,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":174,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":175,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":176,"author":{"gitId":"Ella-e"},"content":"### Adding contact information : `addc`","lastModifiedDate":"2024-03-23"},{"lineNumber":177,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":178,"author":{"gitId":"Ella-e"},"content":"Adds contact information to a patient in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":179,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":180,"author":{"gitId":"javierng2knus"},"content":"![addc command](images/commandsPictures/addcCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"Ella-e"},"content":"Format: `addc ic/NRIC [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`","lastModifiedDate":"2024-03-23"},{"lineNumber":183,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":184,"author":{"gitId":"Ella-e"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2024-03-23"},{"lineNumber":185,"author":{"gitId":"Ella-e"},"content":"* Rules for phone number: At least 3 digits.","lastModifiedDate":"2024-03-23"},{"lineNumber":186,"author":{"gitId":"Ella-e"},"content":"* Emails should be of the format local-part@domain and adhere to the following constraints:","lastModifiedDate":"2024-03-23"},{"lineNumber":187,"author":{"gitId":"Ella-e"},"content":"  1. The local-part should only contain alphanumeric characters and these special characters, excluding the parentheses, (+_.-). The local-part may not start or end with any special characters.","lastModifiedDate":"2024-03-23"},{"lineNumber":188,"author":{"gitId":"Ella-e"},"content":"  2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels separated by periods.","lastModifiedDate":"2024-03-23"},{"lineNumber":189,"author":{"gitId":"Ella-e"},"content":"     The domain name must:","lastModifiedDate":"2024-03-23"},{"lineNumber":190,"author":{"gitId":"Ella-e"},"content":"      - end with a domain label at least 2 characters long","lastModifiedDate":"2024-03-23"},{"lineNumber":191,"author":{"gitId":"Ella-e"},"content":"      - have each domain label start and end with alphanumeric characters","lastModifiedDate":"2024-03-23"},{"lineNumber":192,"author":{"gitId":"Ella-e"},"content":"      - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.","lastModifiedDate":"2024-03-23"},{"lineNumber":193,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":194,"author":{"gitId":"Ella-e"},"content":"Examples:","lastModifiedDate":"2024-03-23"},{"lineNumber":195,"author":{"gitId":"Ella-e"},"content":"* `addc ic/S1234567D p/91234567`","lastModifiedDate":"2024-03-23"},{"lineNumber":196,"author":{"gitId":"Ella-e"},"content":"* `addc ic/S1234567D e/test@email.com p/91234567`","lastModifiedDate":"2024-03-23"},{"lineNumber":197,"author":{"gitId":"Ella-e"},"content":"* `addc ic/S1234567D a/123, Clementi Rd, 1234665 e/test@email.com p/91234567`","lastModifiedDate":"2024-03-23"},{"lineNumber":198,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":199,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":200,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":201,"author":{"gitId":"Ella-e"},"content":"### Editing contact information : `editc`","lastModifiedDate":"2024-03-25"},{"lineNumber":202,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"Ella-e"},"content":"Edits contact information of a patient in the clinic. It is also used to add or delete certain field of the contact information.","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"Ella-e"},"content":"![editc command](images/commandsPictures/editcCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":207,"author":{"gitId":"Ella-e"},"content":"Format: `editc ic/NRIC [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`","lastModifiedDate":"2024-03-25"},{"lineNumber":208,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"Ella-e"},"content":"* We call `p/`, `e/`, and `a/` as the `optional fields`.","lastModifiedDate":"2024-03-25"},{"lineNumber":210,"author":{"gitId":"Ella-e"},"content":"* At least one of the `optional fields` must be provided.","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"Ella-e"},"content":"* If want to delete an `optional field`, leave the `optional field` empty.","lastModifiedDate":"2024-03-25"},{"lineNumber":212,"author":{"gitId":"Ella-e"},"content":"* If the `optional field` already exist a value, the value will be updated with the new value.","lastModifiedDate":"2024-03-25"},{"lineNumber":213,"author":{"gitId":"Ella-e"},"content":"* If the `optional field` does not previously hold a value, the new value will be added to the `optional field`.","lastModifiedDate":"2024-03-25"},{"lineNumber":214,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":215,"author":{"gitId":"Ella-e"},"content":"Examples:","lastModifiedDate":"2024-03-25"},{"lineNumber":216,"author":{"gitId":"Ella-e"},"content":"* `editc ic/S1234567D p/91234567` will result in the phone number of the patient with NRIC `S1234567D` being updated to `91234567`.","lastModifiedDate":"2024-03-25"},{"lineNumber":217,"author":{"gitId":"Ella-e"},"content":"* `editc ic/S1234567D a/` will result in the address of the patient with NRIC `S1234567D` being deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"Ella-e"},"content":"* Suppose the person now only has a phone number, `editc ic/S1234567D e/email@test.com` will result in the email of the patient with NRIC `S1234567D` being updated to `email@test.com`.","lastModifiedDate":"2024-03-25"},{"lineNumber":219,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":220,"author":{"gitId":"Ella-e"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-25"},{"lineNumber":221,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":222,"author":{"gitId":"Ella-e"},"content":"### Listing contact information : `listc`","lastModifiedDate":"2024-03-23"},{"lineNumber":223,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":224,"author":{"gitId":"Ella-e"},"content":"Lists all patients with contact information.","lastModifiedDate":"2024-03-23"},{"lineNumber":225,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":226,"author":{"gitId":"javierng2knus"},"content":"![listc command](images/commandsPictures/listcCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":227,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":228,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":229,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":230,"author":{"gitId":"Ella-e"},"content":"### Deleting contact information : `deletec`","lastModifiedDate":"2024-03-23"},{"lineNumber":231,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":232,"author":{"gitId":"Ella-e"},"content":"Deletes contact information from a patient in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":233,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":234,"author":{"gitId":"javierng2knus"},"content":"![deletec command](images/commandsPictures/deletecCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":235,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":236,"author":{"gitId":"Ella-e"},"content":"Format: `deletec ic/NRIC`","lastModifiedDate":"2024-03-23"},{"lineNumber":237,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":238,"author":{"gitId":"Ella-e"},"content":"Examples:","lastModifiedDate":"2024-03-23"},{"lineNumber":239,"author":{"gitId":"Ella-e"},"content":"* `deletec ic/S1234567D` will result in the contact information of the patient with NRIC `S1234567D` being deleted.","lastModifiedDate":"2024-03-23"},{"lineNumber":240,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":241,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":242,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":243,"author":{"gitId":"Ella-e"},"content":"### Adding medical information : `addm`","lastModifiedDate":"2024-03-23"},{"lineNumber":244,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":245,"author":{"gitId":"Ella-e"},"content":"Adds medical information to a patient in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":246,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":247,"author":{"gitId":"javierng2knus"},"content":"![addm command](images/commandsPictures/addmCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":248,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":249,"author":{"gitId":"Ella-e"},"content":"Format: `addm ic/NRIC h/HEIGHT w/WEIGHT [t/ALLERGY]…​`","lastModifiedDate":"2024-03-23"},{"lineNumber":250,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":251,"author":{"gitId":"Ella-e"},"content":"Examples:","lastModifiedDate":"2024-03-23"},{"lineNumber":252,"author":{"gitId":"Ella-e"},"content":"* `addm ic/S1234567D h/163 w/50`","lastModifiedDate":"2024-03-23"},{"lineNumber":253,"author":{"gitId":"Ella-e"},"content":"* `addm ic/S1234567D h/163 w/50 t/insulin t/iodine`","lastModifiedDate":"2024-03-23"},{"lineNumber":254,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":255,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":256,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":257,"author":{"gitId":"Ella-e"},"content":"### Listing medical information : `listm`","lastModifiedDate":"2024-03-23"},{"lineNumber":258,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":259,"author":{"gitId":"Ella-e"},"content":"Lists all patients with medical information.","lastModifiedDate":"2024-03-23"},{"lineNumber":260,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":261,"author":{"gitId":"javierng2knus"},"content":"![listm command](images/commandsPictures/listmCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":262,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":263,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":264,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":265,"author":{"gitId":"Ella-e"},"content":"### Deleting medical information : `deletem`","lastModifiedDate":"2024-03-23"},{"lineNumber":266,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":267,"author":{"gitId":"Ella-e"},"content":"Deletes medical information from a patient in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":268,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":269,"author":{"gitId":"javierng2knus"},"content":"![deletem command](images/commandsPictures/deletemCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":270,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":271,"author":{"gitId":"Ella-e"},"content":"Format: `deletem ic/NRIC`","lastModifiedDate":"2024-03-23"},{"lineNumber":272,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":273,"author":{"gitId":"Ella-e"},"content":"Examples:","lastModifiedDate":"2024-03-23"},{"lineNumber":274,"author":{"gitId":"Ella-e"},"content":"* `deletem ic/S1234567D` will result in the medical information of the patient with NRIC `S1234567D` being deleted.","lastModifiedDate":"2024-03-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":277,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":278,"author":{"gitId":"Ella-e"},"content":"### Adding an appointment : `adda`","lastModifiedDate":"2024-03-24"},{"lineNumber":279,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":280,"author":{"gitId":"javierng2knus"},"content":"![adda command](images/commandsPictures/addaCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":281,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":282,"author":{"gitId":"MaYuehan"},"content":"Adds an appointment for an exist patient to the appointment list.","lastModifiedDate":"2024-03-29"},{"lineNumber":283,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":284,"author":{"gitId":"MaYuehan"},"content":"Format: `adda ic/NRIC s/START TIME d/DURATION`","lastModifiedDate":"2024-03-29"},{"lineNumber":285,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":286,"author":{"gitId":"MaYuehan"},"content":"* The patient(ic) should already exist in the patient list.","lastModifiedDate":"2024-03-29"},{"lineNumber":287,"author":{"gitId":"MaYuehan"},"content":"* The start time should be in the format: DD/MM/YYYY HHmm.","lastModifiedDate":"2024-03-29"},{"lineNumber":288,"author":{"gitId":"MaYuehan"},"content":"* The start time should not be earlier than now time.","lastModifiedDate":"2024-03-29"},{"lineNumber":289,"author":{"gitId":"MaYuehan"},"content":"* The time length of one unit of duration equals 15 minutes.","lastModifiedDate":"2024-03-29"},{"lineNumber":290,"author":{"gitId":"MaYuehan"},"content":"* The input for duration should be larger than 0.","lastModifiedDate":"2024-03-29"},{"lineNumber":291,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":292,"author":{"gitId":"Ella-e"},"content":"Examples:","lastModifiedDate":"2024-03-24"},{"lineNumber":293,"author":{"gitId":"MaYuehan"},"content":"* `adda ic/S1234567D s/ 02/02/2024 1300 d/2` ","lastModifiedDate":"2024-03-29"},{"lineNumber":294,"author":{"gitId":"MaYuehan"},"content":"* will add an appointment for the patient with NRIC `S1234567D` start from 2nd February 2024 at 1:00 PM and end at 1:30 PM.","lastModifiedDate":"2024-03-29"},{"lineNumber":295,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":296,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":297,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":298,"author":{"gitId":"Ella-e"},"content":"### Editing an appointment : `edita`","lastModifiedDate":"2024-03-31"},{"lineNumber":299,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":300,"author":{"gitId":"Ella-e"},"content":"Edits the start time and duration of an appointment of an existing person.","lastModifiedDate":"2024-03-31"},{"lineNumber":301,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":302,"author":{"gitId":"Ella-e"},"content":"Format: `edita INDEX s/START TIME d/DURATION`","lastModifiedDate":"2024-03-31"},{"lineNumber":303,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":304,"author":{"gitId":"Ella-e"},"content":"* The index should not be out of range nor negative.","lastModifiedDate":"2024-03-31"},{"lineNumber":305,"author":{"gitId":"Ella-e"},"content":"* The start time should be in the format: DD/MM/YYYY HHmm.","lastModifiedDate":"2024-03-31"},{"lineNumber":306,"author":{"gitId":"Ella-e"},"content":"* The start time should not be earlier than now time.","lastModifiedDate":"2024-03-31"},{"lineNumber":307,"author":{"gitId":"Ella-e"},"content":"* The time length of one unit of duration equals 15 minutes.","lastModifiedDate":"2024-03-31"},{"lineNumber":308,"author":{"gitId":"Ella-e"},"content":"* The input for duration should be larger than 0.","lastModifiedDate":"2024-03-31"},{"lineNumber":309,"author":{"gitId":"Ella-e"},"content":"* The edited appointment should not overlap with other appointments.","lastModifiedDate":"2024-03-31"},{"lineNumber":310,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":311,"author":{"gitId":"Ella-e"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-31"},{"lineNumber":312,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":313,"author":{"gitId":"SeaHogs"},"content":"### Deleting an appointment : `deletea`","lastModifiedDate":"2024-03-24"},{"lineNumber":314,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":315,"author":{"gitId":"javierng2knus"},"content":"![deletea command](images/commandsPictures/deleteaCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":316,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":317,"author":{"gitId":"Ella-e"},"content":"Delete an exist appointment from the appointment list by providing the index of the appointment","lastModifiedDate":"2024-03-24"},{"lineNumber":318,"author":{"gitId":"MaYuehan"},"content":"in the list.","lastModifiedDate":"2024-03-29"},{"lineNumber":319,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":320,"author":{"gitId":"MaYuehan"},"content":"Format: `deletea INDEX`","lastModifiedDate":"2024-03-29"},{"lineNumber":321,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":322,"author":{"gitId":"MaYuehan"},"content":"* The index should not be out of range nor negative.","lastModifiedDate":"2024-03-29"},{"lineNumber":323,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":324,"author":{"gitId":"Ella-e"},"content":"Examples:","lastModifiedDate":"2024-03-24"},{"lineNumber":325,"author":{"gitId":"MaYuehan"},"content":"* `deletea 1`","lastModifiedDate":"2024-03-29"},{"lineNumber":326,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":327,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":328,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":329,"author":{"gitId":"Ella-e"},"content":"### List out appointments : `lista`","lastModifiedDate":"2024-03-24"},{"lineNumber":330,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":331,"author":{"gitId":"javierng2knus"},"content":"![lista command](images/commandsPictures/listaCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":332,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":333,"author":{"gitId":"Ella-e"},"content":"List out all the appointments in the appointment list.","lastModifiedDate":"2024-03-24"},{"lineNumber":334,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":335,"author":{"gitId":"Ella-e"},"content":"Format: `lista`","lastModifiedDate":"2024-03-24"},{"lineNumber":336,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":337,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":339,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"Ella-e"},"content":"Clears all entries from the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"javierng2knus"},"content":"![clear command](images/commandsPictures/clearCommand.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":345,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"Ella-e"},"content":"\u003e [!CAUTION]","lastModifiedDate":"2024-03-23"},{"lineNumber":348,"author":{"gitId":"Ella-e"},"content":"\u003e This command will delete all the patients from the clinic. Please use with cautious.","lastModifiedDate":"2024-03-23"},{"lineNumber":349,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":350,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":351,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":352,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":359,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":360,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"Ella-e"},"content":"Clinic data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2024-03-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"},{"lineNumber":365,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":366,"author":{"gitId":"SeaHogs"},"content":"### Editing the medical information : \"editm\"","lastModifiedDate":"2024-03-27"},{"lineNumber":367,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":368,"author":{"gitId":"SeaHogs"},"content":"Edit the medical information of an existing person.","lastModifiedDate":"2024-03-27"},{"lineNumber":369,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":370,"author":{"gitId":"SeaHogs"},"content":"Format: `editm ic/NRIC h/HEIGHT w/WEIGHT -o at/ALLERGY…​`","lastModifiedDate":"2024-03-27"},{"lineNumber":371,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":372,"author":{"gitId":"SeaHogs"},"content":"* All fields are optional field but at least one should be present.","lastModifiedDate":"2024-03-27"},{"lineNumber":373,"author":{"gitId":"SeaHogs"},"content":"* There should only be one field `-o`.","lastModifiedDate":"2024-03-27"},{"lineNumber":374,"author":{"gitId":"SeaHogs"},"content":"* The order of `-o` and at does not matter, as long as `-o` exist in current command, ","lastModifiedDate":"2024-03-27"},{"lineNumber":375,"author":{"gitId":"SeaHogs"},"content":"all allergyTags will be new tags overwriting the old tags.","lastModifiedDate":"2024-03-27"},{"lineNumber":376,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":377,"author":{"gitId":"SeaHogs"},"content":"Prefix explanation:","lastModifiedDate":"2024-03-27"},{"lineNumber":378,"author":{"gitId":"SeaHogs"},"content":"- `-o` will set mode for this command to overwrite.","lastModifiedDate":"2024-03-27"},{"lineNumber":379,"author":{"gitId":"SeaHogs"},"content":"- `at/ALLERGY` append this tag to existing tag.","lastModifiedDate":"2024-03-27"},{"lineNumber":380,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":381,"author":{"gitId":"SeaHogs"},"content":"Example:","lastModifiedDate":"2024-03-27"},{"lineNumber":382,"author":{"gitId":"SeaHogs"},"content":"* `editm ic/G1234567J w/100, -o at/milk at/egg`","lastModifiedDate":"2024-03-27"},{"lineNumber":383,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":384,"author":{"gitId":"SeaHogs"},"content":"This will change the weight of person with ic G1234567J to 100 and","lastModifiedDate":"2024-03-27"},{"lineNumber":385,"author":{"gitId":"SeaHogs"},"content":"overwrite allergy tag to milk and egg.","lastModifiedDate":"2024-03-27"},{"lineNumber":386,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":387,"author":{"gitId":"SeaHogs"},"content":"\u003e [!CAUTION]","lastModifiedDate":"2024-03-27"},{"lineNumber":388,"author":{"gitId":"SeaHogs"},"content":"\u003e Use if prefix `-o` will delete all existing tag, including the added tag in current command before it. ","lastModifiedDate":"2024-03-27"},{"lineNumber":389,"author":{"gitId":"SeaHogs"},"content":"\u003e Please use with cautious.","lastModifiedDate":"2024-03-27"},{"lineNumber":390,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":391,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-27"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":393,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":395,"author":{"gitId":"Ella-e"},"content":"Clinic data are saved automatically as a JSON file `[JAR file location]/data/clinic.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2024-03-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":397,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":398,"author":{"gitId":"Ella-e"},"content":"If your changes to the data file makes its format invalid, Clinic will discard all data and start with an empty data file at the next run. Hence, it is recommended to take a backup of the file before editing it.\u003cbr\u003e","lastModifiedDate":"2024-03-23"},{"lineNumber":399,"author":{"gitId":"Ella-e"},"content":"Furthermore, certain edits can cause the Clinic to behave in unexpected ways (e.g., if a value entered is outside of the acceptable range). Therefore, edit the data file only if you are confident that you can update it correctly.","lastModifiedDate":"2024-03-23"},{"lineNumber":400,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":402,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"Ella-e"},"content":"_Details coming soon ..._","lastModifiedDate":"2024-03-23"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"Ella-e"},"content":"### Editing a patient : `[coming in v1.3]`","lastModifiedDate":"2024-03-23"},{"lineNumber":406,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"Ella-e"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Clinic home folder.","lastModifiedDate":"2024-03-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":419,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":421,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":423,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"Ella-e"},"content":"| Action      | Format, Examples                                                                                                                        |","lastModifiedDate":"2024-03-23"},{"lineNumber":426,"author":{"gitId":"Ella-e"},"content":"|-------------|-----------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-03-23"},{"lineNumber":427,"author":{"gitId":"Ella-e"},"content":"| **Add**     | `add n/NAME ic/NRIC` \u003cbr\u003e e.g., `add n/John Doe ic/S1234567D`                                                                           |","lastModifiedDate":"2024-03-23"},{"lineNumber":428,"author":{"gitId":"Ella-e"},"content":"| **Clear**   | `clear`                                                                                                                                 |","lastModifiedDate":"2024-03-23"},{"lineNumber":429,"author":{"gitId":"Ella-e"},"content":"| **Delete**  | `delete INDEX`\u003cbr\u003e e.g., `delete 3`                                                                                                     |","lastModifiedDate":"2024-03-23"},{"lineNumber":430,"author":{"gitId":"Ella-e"},"content":"| **Find**    | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`                                                                              |","lastModifiedDate":"2024-03-23"},{"lineNumber":431,"author":{"gitId":"Ella-e"},"content":"| **List**    | `list`                                                                                                                                  |","lastModifiedDate":"2024-03-24"},{"lineNumber":432,"author":{"gitId":"Ella-e"},"content":"| **Addc**    | `addc ic/NRIC [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]` e.g., `addc ic/S1234567D a/123, Clementi Rd, 1234665 e/test@email.com p/91234567` |","lastModifiedDate":"2024-03-23"},{"lineNumber":433,"author":{"gitId":"Ella-e"},"content":"| **Editc**   | `editc ic/NRIC [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]` e.g., `editc ic/S1234567D a/ e/test@email.com p/91234567`                        |","lastModifiedDate":"2024-03-25"},{"lineNumber":434,"author":{"gitId":"Ella-e"},"content":"| **Listc**   | `listc`                                                                                                                                 |","lastModifiedDate":"2024-03-23"},{"lineNumber":435,"author":{"gitId":"Ella-e"},"content":"| **Deletec** | `deletec ic/NRIC` e.g., `deletec ic/S1234567D`                                                                                          |","lastModifiedDate":"2024-03-23"},{"lineNumber":436,"author":{"gitId":"Ella-e"},"content":"| **Addm**    | `addm ic/NRIC h/HEIGHT w/WEIGHT [t/ALLERGY]…​` e.g., `addm ic/S1234567D h/163 w/50 t/insulin t/iodine`                                  |","lastModifiedDate":"2024-03-23"},{"lineNumber":437,"author":{"gitId":"Ella-e"},"content":"| **Listm**   | `listm`                                                                                                                                 |","lastModifiedDate":"2024-03-23"},{"lineNumber":438,"author":{"gitId":"Ella-e"},"content":"| **Deletem** | `deletem ic/NRIC` e.g., `deletec ic/S1234567D`                                                                                          |","lastModifiedDate":"2024-03-23"},{"lineNumber":439,"author":{"gitId":"Ella-e"},"content":"| **Adda**    | `adda NRIC s/DD/MM/YYYY HHMM d/DURATION` e.g., `adda S1234567D s/ 02/02/2024 1300 d/2`                                                  |","lastModifiedDate":"2024-03-31"},{"lineNumber":440,"author":{"gitId":"Ella-e"},"content":"| **Edita**   | `edita INDEX [s/DD/MM/YYYY HHMM] [d/DURATION]` e.g., `edita 1 s/ 02/02/2024 1300 d/4`                                                   |","lastModifiedDate":"2024-03-31"},{"lineNumber":441,"author":{"gitId":"Ella-e"},"content":"| **Lista**   | `lista`                                                                                                                                 |","lastModifiedDate":"2024-03-24"},{"lineNumber":442,"author":{"gitId":"Ella-e"},"content":"| **Deletea** | `deletea INDEX` e.g., `deletea 1`                                                                                                       |","lastModifiedDate":"2024-03-31"},{"lineNumber":443,"author":{"gitId":"Ella-e"},"content":"| **Help**    | `help`                                                                                                                                  |","lastModifiedDate":"2024-03-23"},{"lineNumber":444,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":445,"author":{"gitId":"SeaHogs"},"content":"[\u003cspan style\u003d\"font-size: small;\"\u003eBack to Top\u003c/span\u003e](#top)","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"javierng2knus":30,"MaYuehan":15,"Ella-e":162,"-":139,"SeaHogs":99}},{"path":"docs/diagrams/CommitActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"skin rose","lastModifiedDate":"2023-07-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ActivityFontSize 15","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ArrowFontSize 12","lastModifiedDate":"2023-07-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"start","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":":User executes command;","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"if () then ([command commits Clinic])","lastModifiedDate":"2024-03-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    :Purge redundant states;","lastModifiedDate":"2020-12-12"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"    :Save Clinic to","lastModifiedDate":"2024-03-22"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"    clinicStateList;","lastModifiedDate":"2024-03-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"else ([else])","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"endif","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"stop","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Ella-e":3,"-":15}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model as ModelPackage \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-07-27"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyClinic\" as ReadOnlyAddressClinic","lastModifiedDate":"2024-03-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyUserPrefs\" as ReadOnlyUserPrefs","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"Class Clinic","lastModifiedDate":"2024-03-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"Class Identification\\nInformation","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"Class Nric","lastModifiedDate":"2024-03-22"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"Class Name","lastModifiedDate":"2024-03-22"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"Class Contact\\nInformation","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"Class Medical\\nInformation","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"Class Height","lastModifiedDate":"2024-03-22"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"Class Weight","lastModifiedDate":"2024-03-22"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"Class Allergy","lastModifiedDate":"2024-03-22"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"Class UniqueAppointmentList","lastModifiedDate":"2024-03-22"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"Class Appointment","lastModifiedDate":"2024-03-22"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"Class Doctor","lastModifiedDate":"2024-03-22"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"Class Patient","lastModifiedDate":"2024-03-22"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"Class Time","lastModifiedDate":"2024-03-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Class I #FFFFFF","lastModifiedDate":"2023-07-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"Clinic .up.|\u003e ReadOnlyAddressClinic","lastModifiedDate":"2024-03-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"Model .left.\u003e ReadOnlyAddressClinic","lastModifiedDate":"2024-03-22"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"ModelManager --\u003e \"1\" Clinic","lastModifiedDate":"2024-03-22"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"ModelManager --\u003e \"1\" UserPrefs","lastModifiedDate":"2024-03-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"Clinic *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2024-03-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"UniquePersonList --\u003e \"~* all\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"Person *--\u003e Identification\\nInformation","lastModifiedDate":"2024-03-22"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"Identification\\nInformation *--\u003e Nric","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"Identification\\nInformation *--\u003e Name","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"Person *--\u003e Contact\\nInformation","lastModifiedDate":"2024-03-22"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"Contact\\nInformation *--\u003e Phone","lastModifiedDate":"2024-03-22"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"Contact\\nInformation *--\u003e Email","lastModifiedDate":"2024-03-22"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"Contact\\nInformation *--\u003e Address","lastModifiedDate":"2024-03-22"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"Person *--\u003e Medical\\nInformation","lastModifiedDate":"2024-03-22"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"Medical\\nInformation *--\u003e Height","lastModifiedDate":"2024-03-22"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"Medical\\nInformation *--\u003e Weight","lastModifiedDate":"2024-03-22"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"Medical\\nInformation *--\u003e Allergy","lastModifiedDate":"2024-03-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Person -[hidden]up--\u003e I","lastModifiedDate":"2023-07-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"UniquePersonList -[hidden]right-\u003e I","lastModifiedDate":"2023-07-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"Clinic *--\u003e \"1\" UniqueAppointmentList","lastModifiedDate":"2024-03-22"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"UniqueAppointmentList --\u003e \"~* all\" Appointment","lastModifiedDate":"2024-03-22"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"Appointment *--\u003e Doctor","lastModifiedDate":"2024-03-22"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"Appointment *--\u003e Patient","lastModifiedDate":"2024-03-22"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"Appointment *--\u003e Time","lastModifiedDate":"2024-03-22"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"ModelManager --\u003e \"~* filtered\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"ModelManager --\u003e \"~* filtered\" Appointment","lastModifiedDate":"2024-03-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Ella-e":39,"-":40}},{"path":"docs/diagrams/ParserClasses.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2021-07-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2021-07-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-07-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2021-07-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2021-07-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"package \"Parser classes\"{","lastModifiedDate":"2021-07-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nParser\" as Parser","lastModifiedDate":"2022-01-03"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"Class ClinicParser","lastModifiedDate":"2024-03-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"HiddenOutside ..\u003e ClinicParser","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"ClinicParser .down.\u003e XYZCommandParser: \u003c\u003ccreate\u003e\u003e","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : \u003c\u003ccreate\u003e\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"ClinicParser ..\u003e Command : \u003c\u003cuse\u003e\u003e","lastModifiedDate":"2024-03-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"XYZCommandParser .up.|\u003e Parser","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2021-07-31"}],"authorContributionMap":{"Ella-e":4,"-":34}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage as StoragePackage {","lastModifiedDate":"2023-07-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUserPrefsStorage\" as UserPrefsStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"package \"Clinic Storage\" #F4F6F6{","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nClinicStorage\" as AddressBookStorage","lastModifiedDate":"2024-03-22"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"Class JsonClinicStorage","lastModifiedDate":"2024-03-22"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"Class JsonSerializableClinic","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Storage -right-|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"JsonClinicStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2024-03-22"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"JsonClinicStorage ..\u003e JsonSerializableClinic","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"JsonSerializableClinic --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Ella-e":7,"-":36}},{"path":"docs/team/ella-e.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"---","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"layout: page","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"title: Mu Zhaoyu\u0027s Project Portfolio Page","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"---","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"## Project: vitalconnect","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"This product is doctors or any healthcare workers that have to keep track of a lot ","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"of patient information and requires the information at a fast pace, ","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"thus preferring to have a simple UI such as a CLI instead of a complex GUI, ","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"with the added benefit of having typed user commands for an even faster retrieval of information.","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"### **New Feature**: ","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"1. __Create an appointment__","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"* What it does: allows the user to create an appointment for a patient with the time and date.","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"* Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"* Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"2. __Delete an appointment__","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"* What it does: allows the user to delete an appointment by specifying the appointment index and the patient\u0027s name.","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"* Credits:","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"3. __List appointments__","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"* What it does: allows the user to list out all the upcoming appointments that ordering by time.","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"* Credits:","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"### **Documentation**:","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"User Guide:","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"* Added documentation for the features `Create Appointments`, `Delete Appointments` and `List Appointments` [\\#72]()","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"MaYuehan":1,"Ella-e":41}},{"path":"docs/team/mayuehan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"---","lastModifiedDate":"2024-02-25"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"layout: page","lastModifiedDate":"2024-02-25"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"title: Ma Yuehan\u0027s Project Portfolio Page","lastModifiedDate":"2024-02-25"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"---","lastModifiedDate":"2024-02-25"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"## Project: vitalconnect","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"This product is doctors or any healthcare workers that have to keep track of a lot ","lastModifiedDate":"2024-02-25"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"of patient information and requires the information at a fast pace, ","lastModifiedDate":"2024-02-25"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"thus preferring to have a simple UI such as a CLI instead of a complex GUI, ","lastModifiedDate":"2024-02-25"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"with the added benefit of having typed user commands for an even faster retrieval of information.","lastModifiedDate":"2024-02-25"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-02-25"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"### **New Feature**: ","lastModifiedDate":"2024-02-25"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"1. __Create an appointment__","lastModifiedDate":"2024-02-25"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"* What it does: allows the user to create an appointment for a patient with the time and date.","lastModifiedDate":"2024-02-25"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-02-25"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"* Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-02-25"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"* Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-02-25"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"2. __Delete an appointment__","lastModifiedDate":"2024-02-25"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"* What it does: allows the user to delete an appointment by specifying the appointment index and the patient\u0027s name.","lastModifiedDate":"2024-02-25"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-02-25"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"* Credits:","lastModifiedDate":"2024-02-25"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"3. __List appointments__","lastModifiedDate":"2024-02-25"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"* What it does: allows the user to list out all the upcoming appointments that ordering by time.","lastModifiedDate":"2024-02-25"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-02-25"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"* Credits:","lastModifiedDate":"2024-02-25"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"### **Documentation**:","lastModifiedDate":"2024-02-25"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"User Guide:","lastModifiedDate":"2024-02-25"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"* Added documentation for the features `Create Appointments`, `Delete Appointments` and `List Appointments` [\\#72]()","lastModifiedDate":"2024-02-25"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-02-25"}],"authorContributionMap":{"MaYuehan":42}},{"path":"docs/team/seahogs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"---","lastModifiedDate":"2024-03-06"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"layout: page","lastModifiedDate":"2024-03-06"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"title: Mu Zhaoyu\u0027s Project Portfolio Page","lastModifiedDate":"2024-03-06"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"---","lastModifiedDate":"2024-03-06"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"## Project: vitalconnect","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"This product is doctors or any healthcare workers that have to keep track of a lot","lastModifiedDate":"2024-03-06"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"of patient information and requires the information at a fast pace,","lastModifiedDate":"2024-03-06"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"thus preferring to have a simple UI such as a CLI instead of a complex GUI,","lastModifiedDate":"2024-03-06"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"with the added benefit of having typed user commands for an even faster retrieval of information.","lastModifiedDate":"2024-03-06"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-06"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"### **New Feature**:","lastModifiedDate":"2024-03-06"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"1. __Create an appointment__","lastModifiedDate":"2024-03-06"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"* What it does: allows the user to create an appointment for a patient with the time and date.","lastModifiedDate":"2024-03-06"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-03-06"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"* Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-06"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"* Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-06"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"2. __Delete an appointment__","lastModifiedDate":"2024-03-06"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"* What it does: allows the user to delete an appointment by specifying the appointment index and the patient\u0027s name.","lastModifiedDate":"2024-03-06"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-03-06"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"* Credits:","lastModifiedDate":"2024-03-06"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"3. __List appointments__","lastModifiedDate":"2024-03-06"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"* What it does: allows the user to list out all the upcoming appointments that ordering by time.","lastModifiedDate":"2024-03-06"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"* Justification: This feature improves the product significantly as it is the fundamental functions for the project.","lastModifiedDate":"2024-03-06"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"* Credits:","lastModifiedDate":"2024-03-06"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"### **Documentation**:","lastModifiedDate":"2024-03-06"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"User Guide:","lastModifiedDate":"2024-03-06"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"* Added documentation for the features `Create Appointments`, `Delete Appointments` and `List Appointments` [\\#72]()","lastModifiedDate":"2024-03-06"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-06"}],"authorContributionMap":{"MaYuehan":1,"Ella-e":41}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/RemarkCommandClass.png)","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"MaYuehan"},"content":"Create a `RemarkCommandParser` class in the `vitalconnect.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/RemarkCommandParserClass.png)","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"MaYuehan"},"content":"Create a new `Remark` in `vitalconnect.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2024-03-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":233,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"MaYuehan"},"content":"Simply add the following to [`vitalconnect.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2024-03-13"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":357,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":376,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"MaYuehan":6,"-":393}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"The `address` field in `Person` is actually an instance of the `vitalconnect.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"MaYuehan":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `vitalconnect.logic.Logic`.","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"A quick look at the `vitalconnect.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"MaYuehan":2,"-":299}},{"path":"src/main/java/vitalconnect/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.FileUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Objects.equals(configPath, otherAppParameters.configPath);","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .add(\"configPath\", configPath)","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"MaYuehan":4,"-":69}},{"path":"src/main/java/vitalconnect/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static Logger logger \u003d LogsCenter.getLogger(Main.class);","lastModifiedDate":"2023-07-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // As per https://github.com/openjdk/jfx/blob/master/doc-files/release-notes-16.md","lastModifiedDate":"2023-07-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // JavaFX 16 (or later) runtime logs a warning at startup if JavaFX classes are loaded from","lastModifiedDate":"2023-07-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // the classpath instead of a module.","lastModifiedDate":"2023-07-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // Our application does not use Java modules yet. Even if it did, modules are ignored when","lastModifiedDate":"2023-07-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // packed into a FAT Jar file (as we do), which means this warning will persist even then.","lastModifiedDate":"2023-07-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // The warning however, can be safely ignored. Thus, the following log informs","lastModifiedDate":"2023-07-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // the user (if looking at the log output) that the said warning appearing in the log","lastModifiedDate":"2023-07-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // can be ignored.","lastModifiedDate":"2023-07-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.warning(\"The warning about Unsupported JavaFX configuration below can be ignored.\");","lastModifiedDate":"2023-07-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"MaYuehan":2,"-":39}},{"path":"src/main/java/vitalconnect/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.Config;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.Version;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ConfigUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.StringUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Logic;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.LogicManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.util.SampleDataUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.AppointmentStorage;","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.ClinicStorage;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.JsonAppointmentStorage;","lastModifiedDate":"2024-03-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.JsonClinicStorage;","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.JsonUserPrefsStorage;","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.Storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.StorageManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.UserPrefsStorage;","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.ui.Ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.ui.UiManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"    public static final Version VERSION \u003d new Version(1, 2, 1, true);","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"     * Initializes the application\u0027s primary components.","lastModifiedDate":"2024-03-23"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"javierng2knus"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Clinic ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2023-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"        ClinicStorage clinicStorage \u003d new JsonClinicStorage(userPrefs.getClinicFilePath());","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"        AppointmentStorage appointmentStorage \u003d new JsonAppointmentStorage(userPrefs.getAppointmentFilePath());","lastModifiedDate":"2024-03-23"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"        storage \u003d new StorageManager(clinicStorage, userPrefsStorage, appointmentStorage);","lastModifiedDate":"2024-03-23"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"javierng2knus"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s clinic and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"     * The data from the sample clinic will be used instead if {@code storage}\u0027s clinic is not found,","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"javierng2knus"},"content":"     * or an empty clinic will be used instead if errors occur when reading {@code storage}\u0027s clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":87,"author":{"gitId":"javierng2knus"},"content":"        logger.info(\"Using data file : \" + storage.getClinicFilePath());","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"        Optional\u003cReadOnlyClinic\u003e clinicOptional;","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"javierng2knus"},"content":"        ReadOnlyClinic initialData;","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"MaYuehan"},"content":"        Optional\u003cList\u003cAppointment\u003e\u003e appointmentsOptional;","lastModifiedDate":"2024-03-23"},{"lineNumber":92,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e appointments;","lastModifiedDate":"2024-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"javierng2knus"},"content":"            clinicOptional \u003d storage.readClinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":95,"author":{"gitId":"javierng2knus"},"content":"            if (!clinicOptional.isPresent()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"javierng2knus"},"content":"                logger.info(\"Creating a new data file \" + storage.getClinicFilePath()","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"javierng2knus"},"content":"                        + \" populated with a sample Clinic.\");","lastModifiedDate":"2024-03-11"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"javierng2knus"},"content":"            initialData \u003d clinicOptional.orElseGet(SampleDataUtil::getSampleClinic);","lastModifiedDate":"2024-03-11"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":101,"author":{"gitId":"javierng2knus"},"content":"            logger.warning(\"Data file at \" + storage.getClinicFilePath() + \" could not be loaded.\"","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"javierng2knus"},"content":"                    + \" Will be starting with an empty Clinic.\");","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"javierng2knus"},"content":"            initialData \u003d new Clinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2024-03-23"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"            appointmentsOptional \u003d storage.readAppointments();","lastModifiedDate":"2024-03-23"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"            if (!appointmentsOptional.isPresent()) {","lastModifiedDate":"2024-03-23"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"                logger.info(\"Appointment data file not found. Will be starting with an empty appointment list.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2024-03-23"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"            appointments \u003d appointmentsOptional.orElseGet(Collections::emptyList);","lastModifiedDate":"2024-03-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2024-03-23"},{"lineNumber":113,"author":{"gitId":"MaYuehan"},"content":"            logger.warning(\"Data file for appointments could not be loaded. \"","lastModifiedDate":"2024-03-23"},{"lineNumber":114,"author":{"gitId":"MaYuehan"},"content":"                    + \"Will be starting with an empty appointment list.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":115,"author":{"gitId":"MaYuehan"},"content":"            appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"        return new ModelManager(initialData, userPrefs, appointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);","lastModifiedDate":"2023-05-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \" Using default config properties.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                    + \" Using default preferences.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":196,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":197,"author":{"gitId":"MaYuehan"},"content":"     * Starts the primary stage of the application.","lastModifiedDate":"2024-03-23"},{"lineNumber":198,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":199,"author":{"gitId":"MaYuehan"},"content":"     * @param primaryStage The primary stage for this application.","lastModifiedDate":"2024-03-23"},{"lineNumber":200,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"javierng2knus"},"content":"        logger.info(\"Starting Clinic \" + MainApp.VERSION);","lastModifiedDate":"2024-03-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":208,"author":{"gitId":"MaYuehan"},"content":"     * Stops the application, ensuring all resources are released and necessary data is saved.","lastModifiedDate":"2024-03-23"},{"lineNumber":209,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"javierng2knus"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Clinic ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2024-03-11"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":215,"author":{"gitId":"MaYuehan"},"content":"            // Save appointments when application stops","lastModifiedDate":"2024-03-23"},{"lineNumber":216,"author":{"gitId":"MaYuehan"},"content":"            storage.saveAppointments(model.getFilteredAppointmentList());","lastModifiedDate":"2024-03-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":218,"author":{"gitId":"MaYuehan"},"content":"            logger.severe(\"Failed to save preferences and appointments: \" + StringUtil.getDetails(e));","lastModifiedDate":"2024-03-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"javierng2knus":18,"MaYuehan":57,"Ella-e":1,"-":145}},{"path":"src/main/java/vitalconnect/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Config otherConfig \u003d (Config) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, otherConfig.logLevel)","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, otherConfig.userPrefsFilePath);","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .add(\"logLevel\", logLevel)","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .add(\"userPrefsFilePath\", userPrefsFilePath)","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":2,"-":64}},{"path":"src/main/java/vitalconnect/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        GuiSettings otherGuiSettings \u003d (GuiSettings) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d otherGuiSettings.windowWidth","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d otherGuiSettings.windowHeight","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, otherGuiSettings.windowCoordinates);","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .add(\"windowWidth\", windowWidth)","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .add(\"windowHeight\", windowHeight)","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .add(\"windowCoordinates\", windowCoordinates)","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":2,"-":80}},{"path":"src/main/java/vitalconnect/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-05-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-05-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"    private static final String LOG_FILE \u003d \"clinic.log\";","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger; // logger for this class","lastModifiedDate":"2023-07-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static Logger baseLogger; // to be used as the parent of all other loggers created by this class.","lastModifiedDate":"2023-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // This static block ensures essential loggers are created early","lastModifiedDate":"2023-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2023-07-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        setBaseLogger();","lastModifiedDate":"2023-07-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2023-07-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Initializes loggers with the log level specified in the {@code config} object. Applies to all loggers created","lastModifiedDate":"2023-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * using {@link #getLogger(String)} and {@link #getLogger(Class)} methods except for those that are manually set.","lastModifiedDate":"2023-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        logger.info(\"Log level will be set as: \" + currentLogLevel);","lastModifiedDate":"2023-07-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // set the level of the baseLogger which will be inherited by other loggers","lastModifiedDate":"2023-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        baseLogger.setLevel(currentLogLevel);","lastModifiedDate":"2023-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name prefixed by the {@code baseLogger}\u0027s name so that the created logger","lastModifiedDate":"2023-07-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * becomes a descendant of the {@code baseLogger}. Furthermore, the returned logger will have the same log handlers","lastModifiedDate":"2023-07-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * as the {@code baseLogger}.","lastModifiedDate":"2023-07-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Java organizes loggers into a hierarchy based on their names (using \u0027.\u0027 as a separator, similar to how Java","lastModifiedDate":"2023-07-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // packages form a hierarchy). Furthermore, loggers without a level inherit the level of their parent logger.","lastModifiedDate":"2023-07-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // By prefixing names of all loggers with baseLogger\u0027s name + \".\", we make the baseLogger the parent of all","lastModifiedDate":"2023-07-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // loggers. This allows us to change the level of all loggers simply by changing the baseLogger level.","lastModifiedDate":"2023-07-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(baseLogger.getName() + \".\" + name);","lastModifiedDate":"2023-07-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(true);","lastModifiedDate":"2023-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return logger;","lastModifiedDate":"2023-07-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(clazz);","lastModifiedDate":"2023-05-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Removes all handlers from the {@code logger}.","lastModifiedDate":"2023-07-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Creates a logger named \u0027ab3\u0027, containing a {@code ConsoleHandler} and a {@code FileHandler}.","lastModifiedDate":"2023-07-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets it as the {@code baseLogger}, to be used as the parent logger of all other loggers.","lastModifiedDate":"2023-07-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static void setBaseLogger() {","lastModifiedDate":"2023-07-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        baseLogger \u003d Logger.getLogger(\"ab3\");","lastModifiedDate":"2023-07-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        baseLogger.setUseParentHandlers(false);","lastModifiedDate":"2023-07-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        removeHandlers(baseLogger);","lastModifiedDate":"2023-07-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Level.ALL is used as the level for the handlers because the baseLogger filters the log messages by level","lastModifiedDate":"2023-07-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // already; there is no need to control log message level of the handlers.","lastModifiedDate":"2023-07-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // add a ConsoleHandler to log to the console","lastModifiedDate":"2023-07-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2023-07-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(Level.ALL);","lastModifiedDate":"2023-07-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        baseLogger.addHandler(consoleHandler);","lastModifiedDate":"2023-07-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // add a FileHandler to log to a file","lastModifiedDate":"2023-07-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2023-07-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2023-07-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            fileHandler.setLevel(Level.ALL);","lastModifiedDate":"2023-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            baseLogger.addHandler(fileHandler);","lastModifiedDate":"2023-07-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":1,"-":104}},{"path":"src/main/java/vitalconnect/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!(other instanceof Version)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Version otherVersion \u003d (Version) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return major \u003d\u003d otherVersion.major","lastModifiedDate":"2023-07-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 minor \u003d\u003d otherVersion.minor","lastModifiedDate":"2023-07-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 patch \u003d\u003d otherVersion.patch","lastModifiedDate":"2023-07-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                \u0026\u0026 isEarlyAccess \u003d\u003d otherVersion.isEarlyAccess;","lastModifiedDate":"2023-07-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":1,"-":120}},{"path":"src/main/java/vitalconnect/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core.index;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!(other instanceof Index)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Index otherIndex \u003d (Index) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return zeroBasedIndex \u003d\u003d otherIndex.zeroBasedIndex;","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"zeroBasedIndex\", zeroBasedIndex).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"MaYuehan":2,"-":67}},{"path":"src/main/java/vitalconnect/commons/exceptions/DataLoadingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-06-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during loading of data from a file.","lastModifiedDate":"2023-06-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-06-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataLoadingException extends Exception {","lastModifiedDate":"2023-06-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataLoadingException(Exception cause) {","lastModifiedDate":"2023-06-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2023-06-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-06-14"}],"authorContributionMap":{"MaYuehan":1,"-":10}},{"path":"src/main/java/vitalconnect/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"MaYuehan":1,"-":20}},{"path":"src/main/java/vitalconnect/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.MainApp;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"MaYuehan":2,"-":40}},{"path":"src/main/java/vitalconnect/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"MaYuehan":1,"-":34}},{"path":"src/main/java/vitalconnect/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.Config;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"MaYuehan":3,"-":20}},{"path":"src/main/java/vitalconnect/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":1,"-":82}},{"path":"src/main/java/vitalconnect/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the JSON object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2023-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid JSON file.","lastModifiedDate":"2023-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize JSON file has to correspond to the structure in the class given here.","lastModifiedDate":"2023-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if loading of the JSON file failed.","lastModifiedDate":"2023-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.info(\"JSON file \" + filePath + \" found.\");","lastModifiedDate":"2023-01-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new DataLoadingException(e);","lastModifiedDate":"2023-06-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":3,"-":141}},{"path":"src/main/java/vitalconnect/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":2,"-":66}},{"path":"src/main/java/vitalconnect/commons/util/ToStringBuilder.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Builds a string representation of an object that is suitable as the return value of {@link Object#toString()}.","lastModifiedDate":"2019-02-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class ToStringBuilder {","lastModifiedDate":"2019-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private static final String OBJECT_PREFIX \u003d \"{\";","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private static final String OBJECT_SUFFIX \u003d \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    private static final String FIELD_SEPARATOR \u003d \", \";","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private static final String FIELD_NAME_VALUE_SEPARATOR \u003d \"\u003d\";","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private boolean hasField;","lastModifiedDate":"2019-02-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Constructs a {@code ToStringBuilder} whose formatted output will be prefixed with {@code objectName}.","lastModifiedDate":"2019-02-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public ToStringBuilder(String objectName) {","lastModifiedDate":"2019-02-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        stringBuilder.append(objectName).append(OBJECT_PREFIX);","lastModifiedDate":"2019-02-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code ToStringBuilder} whose formatted output will be prefixed with the","lastModifiedDate":"2019-02-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * canonical class name of {@code object}.","lastModifiedDate":"2019-02-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public ToStringBuilder(Object object) {","lastModifiedDate":"2019-02-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this(object.getClass().getCanonicalName());","lastModifiedDate":"2019-02-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Adds a field name/value pair to the output string.","lastModifiedDate":"2019-02-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-02-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param fieldName The name of the field.","lastModifiedDate":"2019-02-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param fieldValue The value of the field.","lastModifiedDate":"2019-02-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return A reference to this {@code ToStringBuilder} object, allowing method calls to be chained.","lastModifiedDate":"2019-02-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public ToStringBuilder add(String fieldName, Object fieldValue) {","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (hasField) {","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            stringBuilder.append(FIELD_SEPARATOR);","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        stringBuilder.append(fieldName).append(FIELD_NAME_VALUE_SEPARATOR).append(fieldValue);","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        hasField \u003d true;","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the built formatted string representation.","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return stringBuilder.toString() + OBJECT_SUFFIX;","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-23"}],"authorContributionMap":{"MaYuehan":1,"-":52}},{"path":"src/main/java/vitalconnect/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.CommandResult;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"     * Returns the Clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"     * @see vitalconnect.model.Model#getClinic()","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"    ReadOnlyClinic getClinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    /** Returns an unmodifiable view of the filtered list of appointment */","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"     * Returns the user prefs\u0027 clinic file path.","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"    Path getClinicFilePath();","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"javierng2knus":4,"MaYuehan":12,"-":39}},{"path":"src/main/java/vitalconnect/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.Command;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.CommandResult;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.ClinicParser;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.Storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"    private final ClinicParser clinicParser;","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        clinicParser \u003d new ClinicParser();","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"javierng2knus"},"content":"        Command command \u003d clinicParser.parseCommand(commandText);","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"            storage.saveClinic(model.getClinic());","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"    public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"javierng2knus"},"content":"        return model.getClinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-17"},{"lineNumber":77,"author":{"gitId":"MaYuehan"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2024-03-17"},{"lineNumber":78,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"javierng2knus"},"content":"    public Path getClinicFilePath() {","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"javierng2knus"},"content":"        return model.getClinicFilePath();","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"javierng2knus":8,"MaYuehan":16,"-":69}},{"path":"src/main/java/vitalconnect/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.Prefix;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"Person not found\";","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_PERSON_ALREADY_EXIST \u003d \"Person already exists\";","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"    public static final String MESSAGE_MEDICAL_INFO_ALREADY_EXIST \u003d \"Person\u0027s medical information already exists\";","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"    public static final String MESSAGE_MEDICAL_INFO_NOT_FOUND \u003d \"Medical information not found\";","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_CONTACT_INFO_NOT_FOUND \u003d \"Contact information not found\";","lastModifiedDate":"2024-03-25"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_EMAIL_NOT_FOUND \u003d \"Email not found\";","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_PHONE_NOT_FOUND \u003d \"Phone not found\";","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_ADDRESS_NOT_FOUND \u003d \"Address not found\";","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_EMAIL_ALREADY_EXIST \u003d \"Email already exists\";","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_PHONE_ALREADY_EXIST \u003d \"Phone already exists\";","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_ADDRESS_ALREADY_EXIST \u003d \"Address already exists\";","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_NO_PREFIX_PROVIDED \u003d \"At least one prefix must be provided\";","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"    public static final String MESSAGE_ALLERGY_ALREADY_EXIST \u003d \"Allergy already exists\";","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_OPTION_NOT_VALID \u003d \"Option not valid\";","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"        builder.append(person.getIdentificationInformation().getName())","lastModifiedDate":"2024-03-15"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"                .append(\"; NRIC: \")","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"                .append(person.getIdentificationInformation().getNric());","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":2,"MaYuehan":3,"Ella-e":11,"-":39,"SeaHogs":4}},{"path":"src/main/java/vitalconnect/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":" * Adds a person to the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the clinic. \"","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"            + PREFIX_NRIC + \"NRIC \\n\"","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"            + PREFIX_NRIC + \"S1234567D \";","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the clinic\";","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":6,"MaYuehan":8,"-":61}},{"path":"src/main/java/vitalconnect/logic/commands/AddContactCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_ALREADY_EXIST;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":" * Adds a person to the clinic.","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"public class AddContactCommand extends Command {","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"addc\";","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contacts added successfully\";","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the contact information of a person. \"","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"        + \"Parameters: (required field)\\n\"","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        + \"(optional but at least specify one)\\n\"","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_ADDRESS + \"ADDRESS \\n\"","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"        + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"        + PREFIX_NRIC + \"S1234567D \"","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_PHONE + \"98765432 \";","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    private final ContactInformation contactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"     * Creates an AddCommand to add the specified {@code ContactInformation}","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"    public AddContactCommand(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(contactInformation);","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        this.contactInformation \u003d contactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        // if person not exist, throw error","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        Person p \u003d model.findPersonByNric(nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"        if (p \u003d\u003d null) {","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        // if person already has contact information, throw error","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"        ContactInformation ci \u003d p.getContactInformation();","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"        if (!ci.isEmptyContact()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(MESSAGE_PERSON_ALREADY_EXIST);","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"        // add the contact information to the person","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"        model.updatePersonContactInformation(nric, contactInformation);","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        // update the person to the model","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-17"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2024-03-17"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"            || (other instanceof AddContactCommand // instanceof handles nulls","lastModifiedDate":"2024-03-17"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"            \u0026\u0026 nric.equals(((AddContactCommand) other).nric)","lastModifiedDate":"2024-03-17"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"            \u0026\u0026 contactInformation.equals(((AddContactCommand) other).contactInformation));","lastModifiedDate":"2024-03-17"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"    public String toString() {","lastModifiedDate":"2024-03-17"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"        return \"addContact\" + nric + contactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"javierng2knus":4,"Ella-e":76}},{"path":"src/main/java/vitalconnect/logic/commands/AddMedInfoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.Messages.MESSAGE_MEDICAL_INFO_ALREADY_EXIST;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ALLERGYTAG;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_HEIGHT;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_WEIGHT;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":" * Adds medication information for a person.","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"public class AddMedInfoCommand extends Command {","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"addm\";","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Medical information added successfully\";","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the medical information of a person.\\n\"","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"            + \"Parameters: \"","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"            + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"            + PREFIX_HEIGHT + \"Height(in cm) \"","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"            + PREFIX_WEIGHT + \"Weight(in kg) \"","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"            + \"[\" + PREFIX_ALLERGYTAG + \"Allergy]...\\n\"","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"            + PREFIX_NRIC + \"S1234567A \"","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"            + PREFIX_HEIGHT + \"175 \"","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"            + PREFIX_WEIGHT + \"60 \"","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"            + PREFIX_ALLERGYTAG + \"Amoxicillin \";","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"    private final MedicalInformation medicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"     * Creates an AddMedInfoCommand to add the specified {@code MedicalInformation}","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    public AddMedInfoCommand(Nric nric, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(medicalInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        this.medicalInformation \u003d medicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"        Person p \u003d model.findPersonByNric(nric);","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"        if (p \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"        if (p.hasMedicalInformation()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"            throw new CommandException(MESSAGE_MEDICAL_INFO_ALREADY_EXIST);","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"            model.updatePersonMedicalInformation(nric, medicalInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"            return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"                || (other instanceof AddMedInfoCommand // instanceof handles nulls","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"                \u0026\u0026 nric.equals(((AddMedInfoCommand) other).nric)","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"                \u0026\u0026 medicalInformation.equals(((AddMedInfoCommand) other).medicalInformation));","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"        return \"addMedInfo\" + nric + medicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"javierng2knus":4,"Ella-e":4,"SeaHogs":71}},{"path":"src/main/java/vitalconnect/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":" * Clears the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Clinic has been cleared!\";","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"        model.setClinic(new Clinic());","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":3,"MaYuehan":3,"-":17}},{"path":"src/main/java/vitalconnect/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"MaYuehan":3,"-":17}},{"path":"src/main/java/vitalconnect/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":" * Contains information about the execution result, such as feedback to the user,","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":" * whether help information should be shown, whether the application should exit,","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":" * and the type of view to show in the UI.","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"     * Represents the type of view to show in the UI.","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"    public enum Type {","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"        SHOW_PERSONS,","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"        SHOW_APPOINTMENTS","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"    /** Feedback message to be shown to the user. */","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    /** The type of view to show in the UI. */","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"    private final Type type;","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"     * Constructs a {@code CommandResult} with all fields specified.","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"     * @param feedbackToUser Feedback message to the user.","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"     * @param showHelp True if help information should be shown.","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"     * @param exit True if the application should exit.","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"     * @param type The type of result, indicating which UI view should be shown.","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, Type type) {","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"        this.type \u003d type;","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"     * Constructs a {@code CommandResult} with the specified feedback message","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"     * and default values for other fields.","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"     * @param feedbackToUser Feedback message to the user.","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"        this(feedbackToUser, false, false, Type.SHOW_PERSONS);","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .add(\"feedbackToUser\", feedbackToUser)","lastModifiedDate":"2019-02-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .add(\"showHelp\", showHelp)","lastModifiedDate":"2019-02-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .add(\"exit\", exit)","lastModifiedDate":"2019-02-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"    public Type getType() {","lastModifiedDate":"2024-03-17"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"        return type;","lastModifiedDate":"2024-03-17"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"MaYuehan":33,"-":75}},{"path":"src/main/java/vitalconnect/logic/commands/CreateAptCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.DURATION_UNIT;","lastModifiedDate":"2024-03-30"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":" * Represents a command to create an appointment for a patient in the address book.","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":" * This command schedules appointments by specifying the patient\u0027s NRIC","lastModifiedDate":"2024-03-23"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":" * and the desired date and time for the appointment.","lastModifiedDate":"2024-03-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"public class CreateAptCommand extends Command {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"adda\";","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"            + \": Adds an appointment for a patient in the patient list.\\n \"","lastModifiedDate":"2024-03-29"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"            + \"Format: \" + COMMAND_WORD + \" ic/ NRIC s/ START TIME d/ DURATION\\n\"","lastModifiedDate":"2024-03-29"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"            + \"(One unit of duration represent 15 minutes.)\\n\"","lastModifiedDate":"2024-03-29"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"            + \"ic/S1234567D time/ 02/02/2024 1330 d/2\\n\"","lastModifiedDate":"2024-03-29"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"            + \"It means creating an appointment for S1234567D start on 2024 Feb. 2 13:30 and end at 14:00.\\n\"","lastModifiedDate":"2024-03-29"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"            + \"Note: Ensure the date and time are in dd/MM/yyyy HHmm format and duration should be larger than 0.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    private final LocalDateTime endDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"    private String patientName \u003d null;","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    private final int duration;","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    private final int unit \u003d DURATION_UNIT;","lastModifiedDate":"2024-03-30"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"     * Constructs a {@code CreateAptCommand} to schedule an appointment.","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"     * @param nric The NRIC of the patient for whom the appointment is being created.","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"     * @param dateTime The date and time of the appointment, in DD/MM/YYYY HHMM format.","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"     * @param duration The time duration of the appointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"    public CreateAptCommand(Nric nric, LocalDateTime dateTime, int duration) {","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"        this.endDateTime \u003d dateTime.plusMinutes(unit * duration);","lastModifiedDate":"2024-03-29"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"     * Executes the command to create an appointment in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"     * The method verifies the existence of a person with the specified NRIC in the address book.","lastModifiedDate":"2024-03-23"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"     * If the person exists and the date and time format is valid, an appointment is scheduled.","lastModifiedDate":"2024-03-23"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"     * If the person does not exist or the date and time are incorrectly formatted,","lastModifiedDate":"2024-03-23"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"     * a {@code CommandException} is thrown.","lastModifiedDate":"2024-03-23"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"     * @param model The model of the address book in which the appointment is to be created.","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"     * @return A {@code CommandResult} object containing the success message upon","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"     *         successful creation of the appointment, and the type of command result.","lastModifiedDate":"2024-03-23"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"     * @throws CommandException If the specified patient does not exist or if the","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"     *                          date and time string is in an incorrect format.","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"MaYuehan"},"content":"        if (dateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2024-03-29"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"            throw new CommandException(\"Appointment time cannot be in the past.\");","lastModifiedDate":"2024-03-29"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-29"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"        Person person \u003d model.findPersonByNric(nric);","lastModifiedDate":"2024-03-23"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"        if (person \u003d\u003d null) {","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"        Name name \u003d person.getIdentificationInformation().getName();","lastModifiedDate":"2024-03-23"},{"lineNumber":81,"author":{"gitId":"MaYuehan"},"content":"        this.patientName \u003d name.toString();","lastModifiedDate":"2024-03-23"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"        String patientIc \u003d nric.toString();","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"        Appointment appointment \u003d new Appointment(patientName, patientIc, dateTime, endDateTime, duration);","lastModifiedDate":"2024-03-30"},{"lineNumber":84,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e conflictingAppointments \u003d model.getConflictingAppointments(appointment);","lastModifiedDate":"2024-03-28"},{"lineNumber":85,"author":{"gitId":"MaYuehan"},"content":"        if (!conflictingAppointments.isEmpty()) {","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"MaYuehan"},"content":"            String conflictMessage \u003d buildConflictMessage(conflictingAppointments);","lastModifiedDate":"2024-03-28"},{"lineNumber":87,"author":{"gitId":"MaYuehan"},"content":"            throw new CommandException(\"Appointment time conflicts detected:\\n\" + conflictMessage);","lastModifiedDate":"2024-03-28"},{"lineNumber":88,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":89,"author":{"gitId":"MaYuehan"},"content":"        model.addAppointment(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"MaYuehan"},"content":"        return new CommandResult(String.format(\"Created an appointment successfully!\\n\"","lastModifiedDate":"2024-03-28"},{"lineNumber":91,"author":{"gitId":"MaYuehan"},"content":"                        + \"Name: %s\\nNRIC: %s\\nStart time: %s\\nEnd time: %s\",","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"MaYuehan"},"content":"          patientName, patientIc, dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\")),","lastModifiedDate":"2024-03-28"},{"lineNumber":93,"author":{"gitId":"MaYuehan"},"content":"                endDateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\"))),","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"          false, false, CommandResult.Type.SHOW_APPOINTMENTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"     * Builds a message listing all conflicting appointments.","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"     * @param appointments List of conflicting appointments.","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"MaYuehan"},"content":"     * @return A string detailing the conflicting appointments.","lastModifiedDate":"2024-03-28"},{"lineNumber":102,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"    private String buildConflictMessage(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-28"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"            message.append(String.format(\"Appointment with %s (%s) from %s to %s\\n\",","lastModifiedDate":"2024-03-28"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"                    appointment.getPatientName(),","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"                    appointment.getPatientIc(),","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"                    appointment.getDateTime().format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\")),","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"                    appointment.getEndDateTime().format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\"))));","lastModifiedDate":"2024-03-28"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":112,"author":{"gitId":"MaYuehan"},"content":"        return message.toString();","lastModifiedDate":"2024-03-28"},{"lineNumber":113,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":115,"author":{"gitId":"MaYuehan"},"content":"     * Returns the NRIC of the patient associated with this appointment.","lastModifiedDate":"2024-03-23"},{"lineNumber":116,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":117,"author":{"gitId":"MaYuehan"},"content":"     * @return The patient\u0027s NRIC as a {@code String}.","lastModifiedDate":"2024-03-23"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":"    public Nric getPatientIc() {","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"        return nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":121,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":122,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":123,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"MaYuehan"},"content":"     * Returns the name of the patient associated with this appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"     * @return The patient\u0027s name as a {@code String}.","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"MaYuehan"},"content":"    public String getPatientName() {","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"MaYuehan"},"content":"        return patientName;","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"     * Returns the date and time of the appointment as a string.","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"     * @return The date and time of the appointment in \"dd/MM/yyyy HHmm\" format.","lastModifiedDate":"2024-03-23"},{"lineNumber":135,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"Ella-e"},"content":"    public LocalDateTime getDateTimeStr() {","lastModifiedDate":"2024-03-26"},{"lineNumber":137,"author":{"gitId":"Ella-e"},"content":"        return dateTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"MaYuehan"},"content":"    public LocalDateTime getEndTimeStr() {","lastModifiedDate":"2024-03-28"},{"lineNumber":140,"author":{"gitId":"MaYuehan"},"content":"        return endDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":141,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":121,"Ella-e":20}},{"path":"src/main/java/vitalconnect/logic/commands/DeleteAptCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":" * A command to delete an appointment of a patient from the address book based on the index provided.","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":" * This command allows users to remove a specific appointment identified by its index in the","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":" * list of all displayed appointments and the patient\u0027s name.","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"public class DeleteAptCommand extends Command {","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"deletea\";","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an appointment of a patient by the index\\n\"","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"    private final Index index;","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"     * Constructs a {@code DeleteAptCommand} with the specified index and patient name.","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"     * @param index The index of the appointment to be deleted, as displayed to the user.","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"    public DeleteAptCommand(Index index) {","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"     * Executes the deletion of an appointment identified by its index and the specified patient\u0027s name.","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"     * The method checks if the appointment list is empty, if the provided index is within the valid range,","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"     * and if the appointment at the specified index belongs to the patient with the given name. If any of","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"     * these conditions are not met, a {@code CommandException} is thrown with an appropriate message.","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"     * @return A {@code CommandResult} object containing the success message upon","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"     *         successful deletion of the appointment and the type of command result.","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"     * @throws CommandException If the appointment list is empty, the index is out of range,","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"     *                          or no appointment matches the provided index and patient name.","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"        if (lastShownList.size() \u003c 1) {","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"            throw new CommandException(\"OOPS! The appointment list is empty.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"        if (index.getOneBased() \u003c 1 || index.getOneBased() \u003e lastShownList.size()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"            throw new CommandException(\"OOPS! The deletion of the appointment failed as the index of \"","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"                    + \"appointment is out of range.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"        Appointment appointmentToDelete \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"        String name \u003d appointmentToDelete.getPatientName();","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"        model.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"        return new CommandResult(String.format(\"Deleted the appointment successfully:\\nName: %s\\nTime: %s\",","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"                name,","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"                appointmentToDelete.getDateTime().format(DateTimeFormatter.ofPattern(\"d MMM uuuu HH:mm\"))),","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"                false, false, CommandResult.Type.SHOW_APPOINTMENTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"     * Gets the index of the appointment to be deleted.","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"MaYuehan"},"content":"     * This index is used to identify the specific appointment in the list of appointments","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"     * displayed to the user. It is based on a 1-based indexing system.","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"     * @return The index of the appointment to be deleted.","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"    public Index getIndex() {","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"MaYuehan"},"content":"        return index;","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":69,"Ella-e":11}},{"path":"src/main/java/vitalconnect/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":" * Deletes a person identified using it\u0027s displayed index from the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, Messages.format(personToDelete)));","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof DeleteCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return targetIndex.equals(otherDeleteCommand.targetIndex);","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":7,"-":61}},{"path":"src/main/java/vitalconnect/logic/commands/DeleteContactCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":" * Deletes a person\u0027s contact from the clinic.","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"public class DeleteContactCommand extends Command {","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"deletec\";","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contacts deleted successfully\";","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete the contact information of a person. \"","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"        + \"Parameter: \\n\"","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_NRIC + \"NRIC\\n\"","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_NRIC + \"S1234567D \";","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"     * Creates an AddCommand to add the specified {@code ContactInformation}","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    public DeleteContactCommand(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"        // if person not exist, throw error","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        Person personToEdit \u003d model.findPersonByNric(nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"        if (personToEdit \u003d\u003d null) {","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"        // Erase the current contact information","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        ContactInformation contactInformation \u003d new ContactInformation(new Email(\"\"), new Phone(\"\"), new Address(\"\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        model.updatePersonContactInformation(nric, contactInformation);","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"            return true;","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"        if (!(other instanceof DeleteContactCommand)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"            return false;","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        return nric.equals(((DeleteContactCommand) other).nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"javierng2knus":4,"Ella-e":62}},{"path":"src/main/java/vitalconnect/logic/commands/DeleteMedicalCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Height;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Weight;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":" * Deletes a person\u0027s contact from the clinic.","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"public class DeleteMedicalCommand extends Command {","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"deletem\";","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Medical information deleted successfully\";","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete the medical information of a person. \"","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"            + \"Parameter: \\n\"","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"            + PREFIX_NRIC + \"NRIC\\n\"","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"            + PREFIX_NRIC + \"S1234567D \";","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"     * Creates an AddCommand to add the specified {@code ContactInformation}","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"    public DeleteMedicalCommand(Nric nric) {","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"        Person personToEdit \u003d model.findPersonByNric(nric);","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"        if (personToEdit \u003d\u003d null) {","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"        MedicalInformation medicalInformation \u003d new MedicalInformation(new Height(\"\"), new Weight(\"\"));","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"        model.updatePersonMedicalInformation(nric, medicalInformation);","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"            return true;","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        if (!(other instanceof DeleteMedicalCommand)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"            return false;","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"        return nric.equals(((DeleteMedicalCommand) other).nric);","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"javierng2knus":3,"SeaHogs":61}},{"path":"src/main/java/vitalconnect/logic/commands/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-30"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.DURATION_UNIT;","lastModifiedDate":"2024-03-30"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2024-03-30"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2024-03-30"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import java.util.List;","lastModifiedDate":"2024-03-30"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-30"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-30"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-30"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":" * Edits the details of an existing appointment in the clinic.","lastModifiedDate":"2024-03-30"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-30"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"public class EditAppointmentCommand extends Command {","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"    public static final String COMMAND_WORD \u003d \"edita\";","lastModifiedDate":"2024-03-30"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Appointment updated successfully: \\n\";","lastModifiedDate":"2024-03-30"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2024-03-30"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"        + \": Edit details for an appointment.\\n \"","lastModifiedDate":"2024-03-30"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        + \"Parameters: \" + COMMAND_WORD + \" INDEX (Index of appointment in the appointment list) \"","lastModifiedDate":"2024-03-30"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"        + \"[\" + PREFIX_TIME + \"START TIME\" + \"]\"","lastModifiedDate":"2024-03-30"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"        + \"[\" + PREFIX_DURATION + \"DURATION\" + \"] \"","lastModifiedDate":"2024-03-30"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"        + \"(One unit of duration represent 15 minutes.)\\n\"","lastModifiedDate":"2024-03-30"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-30"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        + \"1 s/ 02/02/2024 1330 d/2\\n\"","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"        + \"It means changing the appointment number 1 to 2024 Feb. 2 13:30 and end at 14:00.\\n\"","lastModifiedDate":"2024-03-30"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"        + \"Note: Ensure the date and time are in dd/MM/yyyy HHmm format and duration should be larger than 0.\";","lastModifiedDate":"2024-03-30"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    private final Index index;","lastModifiedDate":"2024-03-30"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    private final int duration;","lastModifiedDate":"2024-03-30"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    private final int unit \u003d DURATION_UNIT;","lastModifiedDate":"2024-03-30"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-30"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"     * Constructs a {@code EditAppointmentCommand} to edit an appointment.","lastModifiedDate":"2024-03-30"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-30"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"    public EditAppointmentCommand(Index index, LocalDateTime dateTime, int duration) {","lastModifiedDate":"2024-03-30"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-30"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-03-30"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-30"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2024-03-30"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        if (lastShownList.size() \u003c 1) {","lastModifiedDate":"2024-03-30"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(\"OOPS! The appointment list is empty.\");","lastModifiedDate":"2024-03-30"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        if (index.getOneBased() \u003c 1 || index.getOneBased() \u003e lastShownList.size()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(\"OOPS! The edit of the appointment failed as the index of \"","lastModifiedDate":"2024-03-30"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"              + \"appointment is out of range.\");","lastModifiedDate":"2024-03-30"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"        Appointment appointmentToEdit \u003d lastShownList.get(index.getZeroBased()).getCopy();","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"        if (dateTime !\u003d null \u0026\u0026 duration \u003e 0) {","lastModifiedDate":"2024-03-30"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"            // both updated","lastModifiedDate":"2024-03-30"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"            checkAppointmentTime(dateTime);","lastModifiedDate":"2024-03-30"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"            endDateTime \u003d dateTime.plusMinutes(unit * duration);","lastModifiedDate":"2024-03-30"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"            appointmentToEdit.setDateTime(dateTime);","lastModifiedDate":"2024-03-30"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"            appointmentToEdit.setEndDateTime(endDateTime);","lastModifiedDate":"2024-03-30"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"            appointmentToEdit.setDuration(duration);","lastModifiedDate":"2024-03-30"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"        if (dateTime !\u003d null \u0026\u0026 duration \u003c\u003d 0) {","lastModifiedDate":"2024-03-30"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"            // only time updated","lastModifiedDate":"2024-03-30"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"            checkAppointmentTime(dateTime);","lastModifiedDate":"2024-03-30"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"            endDateTime \u003d dateTime.plusMinutes(appointmentToEdit.getDuration() * unit);","lastModifiedDate":"2024-03-30"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"            appointmentToEdit.setDateTime(dateTime);","lastModifiedDate":"2024-03-30"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"            appointmentToEdit.setEndDateTime(endDateTime);","lastModifiedDate":"2024-03-30"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"        if (dateTime \u003d\u003d null \u0026\u0026 duration \u003e 0) {","lastModifiedDate":"2024-03-30"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"            // only duration updated","lastModifiedDate":"2024-03-30"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"            endDateTime \u003d appointmentToEdit.getDateTime().plusMinutes(unit * duration);","lastModifiedDate":"2024-03-30"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"            appointmentToEdit.setEndDateTime(endDateTime);","lastModifiedDate":"2024-03-30"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"            appointmentToEdit.setDuration(duration);","lastModifiedDate":"2024-03-30"},{"lineNumber":84,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":85,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":86,"author":{"gitId":"Ella-e"},"content":"        String conflictMessage \u003d isConflict(appointmentToEdit, model);","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"Ella-e"},"content":"        if (!conflictMessage.equals(\"\")) {","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(\"Appointment time conflicts detected:\\n\" + conflictMessage);","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"Ella-e"},"content":"        model.updateAppointment(index, appointmentToEdit);","lastModifiedDate":"2024-03-30"},{"lineNumber":91,"author":{"gitId":"Ella-e"},"content":"        return new CommandResult(MESSAGE_SUCCESS + appointmentToEdit.toString(),","lastModifiedDate":"2024-03-30"},{"lineNumber":92,"author":{"gitId":"Ella-e"},"content":"          false, false, CommandResult.Type.SHOW_APPOINTMENTS);","lastModifiedDate":"2024-03-30"},{"lineNumber":93,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":94,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":95,"author":{"gitId":"Ella-e"},"content":"    private void checkAppointmentTime(LocalDateTime dateTime) throws CommandException {","lastModifiedDate":"2024-03-30"},{"lineNumber":96,"author":{"gitId":"Ella-e"},"content":"        if (dateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2024-03-30"},{"lineNumber":97,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(\"Appointment time cannot be in the past.\");","lastModifiedDate":"2024-03-30"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":99,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":100,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"    private String isConflict(Appointment appointment, Model model) throws CommandException {","lastModifiedDate":"2024-03-31"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":"        List\u003cAppointment\u003e conflictingAppointments \u003d model.getConflictingAppointmentsForExistingApt(index, appointment);","lastModifiedDate":"2024-03-31"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"        String conflictMessage \u003d \"\";","lastModifiedDate":"2024-03-31"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"        if (!conflictingAppointments.isEmpty()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"            conflictMessage \u003d buildConflictMessage(conflictingAppointments);","lastModifiedDate":"2024-03-31"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":"            return conflictMessage;","lastModifiedDate":"2024-03-31"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":108,"author":{"gitId":"Ella-e"},"content":"        return conflictMessage;","lastModifiedDate":"2024-03-31"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"     * Builds a message listing all conflicting appointments.","lastModifiedDate":"2024-03-31"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"     * @param appointments List of conflicting appointments.","lastModifiedDate":"2024-03-31"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"     * @return A string detailing the conflicting appointments.","lastModifiedDate":"2024-03-31"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"    private String buildConflictMessage(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-31"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2024-03-31"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2024-03-31"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"            message.append(String.format(\"Appointment with %s (%s) from %s to %s\\n\",","lastModifiedDate":"2024-03-31"},{"lineNumber":121,"author":{"gitId":"Ella-e"},"content":"                appointment.getPatientName(),","lastModifiedDate":"2024-03-31"},{"lineNumber":122,"author":{"gitId":"Ella-e"},"content":"                appointment.getPatientIc(),","lastModifiedDate":"2024-03-31"},{"lineNumber":123,"author":{"gitId":"Ella-e"},"content":"                appointment.getDateTime().format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\")),","lastModifiedDate":"2024-03-31"},{"lineNumber":124,"author":{"gitId":"Ella-e"},"content":"                appointment.getEndDateTime().format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\"))));","lastModifiedDate":"2024-03-31"},{"lineNumber":125,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":126,"author":{"gitId":"Ella-e"},"content":"        return message.toString();","lastModifiedDate":"2024-03-31"},{"lineNumber":127,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":128,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-30"}],"authorContributionMap":{"Ella-e":128}},{"path":"src/main/java/vitalconnect/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.CollectionUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.IdentificationInformation;","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":" * Edits the details of an existing person in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"            + \"[\" + PREFIX_NRIC + \"NRIC] \";","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the clinic.\";","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":84,"author":{"gitId":"javierng2knus"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getIdentificationInformation().getName());","lastModifiedDate":"2024-03-15"},{"lineNumber":85,"author":{"gitId":"javierng2knus"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getIdentificationInformation().getNric());","lastModifiedDate":"2024-03-15"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"javierng2knus"},"content":"        IdentificationInformation updatedInfo \u003d new IdentificationInformation(updatedName, updatedNric);","lastModifiedDate":"2024-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"        if (personToEdit.hasContactInformation()) {","lastModifiedDate":"2024-03-15"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"            return new Person(updatedInfo, personToEdit.getContactInformation());","lastModifiedDate":"2024-03-18"},{"lineNumber":91,"author":{"gitId":"javierng2knus"},"content":"        } else {","lastModifiedDate":"2024-03-15"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"            return new Person(updatedInfo);","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":126,"author":{"gitId":"javierng2knus"},"content":"        private Nric nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":132,"author":{"gitId":"SeaHogs"},"content":"         * A defensive copy of {@code allergyTags} is used internally.","lastModifiedDate":"2024-03-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":136,"author":{"gitId":"javierng2knus"},"content":"            setNric(toCopy.nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"SeaHogs"},"content":"            return CollectionUtil.isAnyNonNull(name, nric);","lastModifiedDate":"2024-03-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"javierng2knus"},"content":"        public void setNric(Nric nric) {","lastModifiedDate":"2024-03-15"},{"lineNumber":155,"author":{"gitId":"javierng2knus"},"content":"            this.nric \u003d nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"javierng2knus"},"content":"        public Optional\u003cNric\u003e getNric() {","lastModifiedDate":"2024-03-15"},{"lineNumber":159,"author":{"gitId":"javierng2knus"},"content":"            return Optional.ofNullable(nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":176,"author":{"gitId":"SeaHogs"},"content":"                    \u0026\u0026 Objects.equals(nric, otherEditPersonDescriptor.nric);","lastModifiedDate":"2024-03-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"javierng2knus"},"content":"                    .add(\"nric\", nric)","lastModifiedDate":"2024-03-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"javierng2knus":18,"MaYuehan":11,"-":151,"SeaHogs":7}},{"path":"src/main/java/vitalconnect/logic/commands/EditContactCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-25"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_CONTACT_INFO_NOT_FOUND;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2024-03-25"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-25"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-25"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-25"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-25"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-25"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-25"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":" * Edits the details of an existing person in the clinic.","lastModifiedDate":"2024-03-25"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-25"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"public class EditContactCommand extends Command {","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"    public static final String COMMAND_WORD \u003d \"editc\";","lastModifiedDate":"2024-03-25"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contact information updated successfully\";","lastModifiedDate":"2024-03-25"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit contact of a person. \"","lastModifiedDate":"2024-03-25"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        + \"Parameters:\\n\"","lastModifiedDate":"2024-03-25"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2024-03-25"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"        + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2024-03-25"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"        + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"        + \"[\" + PREFIX_ADDRESS + \"ADDRESS \\n\"","lastModifiedDate":"2024-03-25"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"        + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-25"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_NRIC + \"S1234567D \"","lastModifiedDate":"2024-03-25"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"        + PREFIX_PHONE + \"98765432 \";","lastModifiedDate":"2024-03-25"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-25"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"    private final Email email;","lastModifiedDate":"2024-03-25"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    private final Phone phone;","lastModifiedDate":"2024-03-25"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"    private final Address address;","lastModifiedDate":"2024-03-25"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"     * @param nric of the person in the filtered person list to edit","lastModifiedDate":"2024-03-25"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"     * @param email details to edit the person with","lastModifiedDate":"2024-03-25"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"     * @param phone details to edit the person with","lastModifiedDate":"2024-03-25"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"     * @param address details to edit the person with","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"    public EditContactCommand(Nric nric, Email email, Phone phone, Address address) {","lastModifiedDate":"2024-03-25"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-25"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-25"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-25"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        this.address \u003d address;","lastModifiedDate":"2024-03-25"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-25"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"        // check if current person exists","lastModifiedDate":"2024-03-25"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"        // if person not exist, throw error","lastModifiedDate":"2024-03-25"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"        Person p \u003d model.findPersonByNric(nric);","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"        if (p \u003d\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2024-03-25"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        // fetch current person contact information, update fields.","lastModifiedDate":"2024-03-25"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"        ContactInformation ci \u003d p.getContactInformation();","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"        // check if current person has contanct information","lastModifiedDate":"2024-03-25"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"        if (ci.isEmptyContact()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"            throw new CommandException(MESSAGE_CONTACT_INFO_NOT_FOUND);","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"        // update the contact info","lastModifiedDate":"2024-03-25"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"        if (email !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"            ci.updateEmail(email);","lastModifiedDate":"2024-03-25"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"        if (phone !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"            ci.updatePhone(phone);","lastModifiedDate":"2024-03-25"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"        if (address !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"            ci.updateAddress(address);","lastModifiedDate":"2024-03-25"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"        // update the person\u0027s contact","lastModifiedDate":"2024-03-25"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"        model.updatePersonContactInformation(nric, ci);","lastModifiedDate":"2024-03-25"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"        // store into the list","lastModifiedDate":"2024-03-25"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"        model.updateFilteredPersonList(model.getCurrentPredicate());","lastModifiedDate":"2024-03-25"},{"lineNumber":84,"author":{"gitId":"Ella-e"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-25"},{"lineNumber":85,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-25"}],"authorContributionMap":{"Ella-e":88}},{"path":"src/main/java/vitalconnect/logic/commands/EditMedicalCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.Messages.MESSAGE_MEDICAL_INFO_NOT_FOUND;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_APPENDTAG;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_HEIGHT;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_OVERWRITETAG;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_WEIGHT;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import java.util.HashSet;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import java.util.Set;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Height;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Weight;","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":" * Edits the medical information of an existing person in the clinic.","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"public class EditMedicalCommand extends Command {","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"    public static final String COMMAND_WORD \u003d \"editm\";","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Medical information updated successfully\";","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit medical information of a person. \"","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"        + \"Parameters:\\n\"","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"        + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"        + PREFIX_HEIGHT + \"HEIGHT \"","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"        + PREFIX_WEIGHT + \"WEIGHT \"","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        + PREFIX_OVERWRITETAG + \"ALLERGY \"","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"        + PREFIX_APPENDTAG + \"ALLERGY \\n\"","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"        + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"        + PREFIX_NRIC + \"S1234567D \"","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"        + PREFIX_HEIGHT + \"180 \"","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"        + PREFIX_APPENDTAG + \"Peanuts\";","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"    private final Height height;","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"    private final Weight weight;","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"    private final boolean overwriteTag;","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"    private final Set\u003cAllergyTag\u003e appendTag;","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"     * @param nric of the person in the filtered person list to edit","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"     * @param height details to edit the person with","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"     * @param weight details to edit the person with","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"     * @param overwriteTag details to edit the person with","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"     * @param appendTag details to edit the person with","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"    public EditMedicalCommand(Nric nric, Height height, Weight weight,","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"                              boolean overwriteTag, Set\u003cAllergyTag\u003e appendTag) {","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        this.height \u003d height;","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"        this.overwriteTag \u003d overwriteTag;","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"        this.appendTag \u003d appendTag;","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"        Person p \u003d model.findPersonByNric(nric);","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"        if (p \u003d\u003d null) {","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"        MedicalInformation medicalInformation \u003d p.getMedicalInformation();","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"        if (medicalInformation.isEmpty()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"            throw new CommandException(MESSAGE_MEDICAL_INFO_NOT_FOUND);","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"        if (height !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"            medicalInformation.setHeight(height);","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"        if (weight !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"            medicalInformation.setWeight(weight);","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"        if (overwriteTag) {","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"            medicalInformation.setAllergyTag(new HashSet\u003c\u003e());","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"        if (appendTag !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"            for (AllergyTag tag : appendTag) {","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"SeaHogs"},"content":"                medicalInformation.appendAllergyTag(tag);","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"SeaHogs"},"content":"        model.updatePersonMedicalInformation(nric, medicalInformation);","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"SeaHogs"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"SeaHogs"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"SeaHogs":100}},{"path":"src/main/java/vitalconnect/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting app as requested ...\";","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"                false, true, CommandResult.Type.SHOW_PERSONS);","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":4,"-":15}},{"path":"src/main/java/vitalconnect/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"javierng2knus"},"content":" * Finds and lists all persons in clinic whose name contains any of the argument keywords.","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return predicate.equals(otherFindCommand.predicate);","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":5,"-":52}},{"path":"src/main/java/vitalconnect/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE,","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"                true, false, CommandResult.Type.SHOW_PERSONS);","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"MaYuehan":4,"-":18}},{"path":"src/main/java/vitalconnect/logic/commands/ListAptCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":" * Represents a command to list all appointments in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":" * This command allows users to view all scheduled appointments, sorted in the order they were added.","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"public class ListAptCommand extends Command {","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"lista\";","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"     * Executes the command to list all appointments in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"     * If no appointments are present in the address book, a message indicating","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"     * that no appointments are in the list is returned. Otherwise, all appointments","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"     * are listed, each prefixed with an index for easy reference.","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"     * @return A {@code CommandResult} object containing the list of appointments if any,","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"     *         or a message indicating that no appointments are in the list.","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"        if (lastShownList.size() \u003c 1) {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"            return new CommandResult(\"No appointment is in the list.\",","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"                    false, false, CommandResult.Type.SHOW_APPOINTMENTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"        return new CommandResult(MESSAGE_SUCCESS,","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"                false, false, CommandResult.Type.SHOW_APPOINTMENTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":44}},{"path":"src/main/java/vitalconnect/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":" * Lists all persons in the clinic to the user.","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"        model.setCurrentPredicate(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-25"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"        model.updateFilteredPersonList(model.getCurrentPredicate());","lastModifiedDate":"2024-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":3,"Ella-e":2,"-":19}},{"path":"src/main/java/vitalconnect/logic/commands/ListContactCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_CONTACT;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":" * List all the contact information of a person with their name","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"public class ListContactCommand extends Command {","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"listc\";","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons with their contact information\";","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        model.setCurrentPredicate(PREDICATE_SHOW_ALL_CONTACT);","lastModifiedDate":"2024-03-25"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"        model.updateFilteredPersonList(model.getCurrentPredicate());","lastModifiedDate":"2024-03-25"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"javierng2knus":2,"Ella-e":21}},{"path":"src/main/java/vitalconnect/logic/commands/ListMedicalCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_MEDICAL;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":" * List all the medical information of a person with their name","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"public class ListMedicalCommand extends Command {","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"    public static final String COMMAND_WORD \u003d \"listm\";","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons with their medical information\";","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * @return {@code CommandResult} that describes the result of executing this command","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_MEDICAL);","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"javierng2knus":2,"SeaHogs":24}},{"path":"src/main/java/vitalconnect/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"MaYuehan":1,"-":16}},{"path":"src/main/java/vitalconnect/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.AddCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.IdentificationInformation;","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC);","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC)","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_NRIC);","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"        IdentificationInformation iInfo \u003d new IdentificationInformation(name, nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"        Person person \u003d new Person(iInfo);","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"javierng2knus":7,"MaYuehan":7,"-":37,"SeaHogs":2}},{"path":"src/main/java/vitalconnect/logic/parser/AddContactCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.AddContactCommand;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"public class AddContactCommandParser implements Parser\u003cAddContactCommand\u003e {","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"    public AddContactCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"            ArgumentTokenizer.tokenize(userInput, PREFIX_NRIC,","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"            PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        Phone phone \u003d new Phone(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"        Email email \u003d new Email(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"        Address address \u003d new Address(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"        // Check if at least one of the fields is present","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        if (phone.isEmpty() \u0026\u0026 email.isEmpty() \u0026\u0026 address.isEmpty()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        ContactInformation contactInformation \u003d new ContactInformation(email, phone, address);","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        return new AddContactCommand(nric, contactInformation);","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"Ella-e":66}},{"path":"src/main/java/vitalconnect/logic/parser/AddMedicalCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ALLERGYTAG;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_HEIGHT;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_WEIGHT;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"import java.util.Set;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.AddMedInfoCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Height;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":" * Parses input arguments and creates a new AddMedInfoCommand object","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"public class AddMedicalCommandParser implements Parser\u003cAddMedInfoCommand\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"    public AddMedInfoCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_NRIC, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_ALLERGYTAG);","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_HEIGHT, PREFIX_WEIGHT)","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedInfoCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NRIC, PREFIX_HEIGHT, PREFIX_WEIGHT);","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"        Height height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get());","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        Weight weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"        Set\u003cAllergyTag\u003e allergyTags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_ALLERGYTAG));","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"        if (height.isEmpty() \u0026\u0026 weight.isEmpty() \u0026\u0026 Nric.isValidNric(nric.toString())) {","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedInfoCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"        MedicalInformation medicalInformation \u003d new MedicalInformation(height, weight, allergyTags);","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        return new AddMedInfoCommand(nric, medicalInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"SeaHogs":56}},{"path":"src/main/java/vitalconnect/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Throws a {@code ParseException} if any of the prefixes given in {@code prefixes} appeared more than","lastModifiedDate":"2023-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * once among the arguments.","lastModifiedDate":"2023-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void verifyNoDuplicatePrefixesFor(Prefix... prefixes) throws ParseException {","lastModifiedDate":"2023-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Prefix[] duplicatedPrefixes \u003d Stream.of(prefixes).distinct()","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .filter(prefix -\u003e argMultimap.containsKey(prefix) \u0026\u0026 argMultimap.get(prefix).size() \u003e 1)","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .toArray(Prefix[]::new);","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (duplicatedPrefixes.length \u003e 0) {","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new ParseException(Messages.getErrorMessageForDuplicatePrefixes(duplicatedPrefixes));","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"MaYuehan":3,"-":75}},{"path":"src/main/java/vitalconnect/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"MaYuehan":1,"-":147}},{"path":"src/main/java/vitalconnect/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"    public static final Prefix PREFIX_ALLERGYTAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"s/\");","lastModifiedDate":"2024-03-29"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"    public static final Prefix PREFIX_OVERWRITETAG \u003d new Prefix(\"-o\");","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"    public static final Prefix PREFIX_APPENDTAG \u003d new Prefix(\"at/\");","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"    public static final int DURATION_UNIT \u003d 15;","lastModifiedDate":"2024-03-30"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":4,"Ella-e":1,"-":12,"SeaHogs":5}},{"path":"src/main/java/vitalconnect/logic/parser/ClinicParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.AddCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.AddContactCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.AddMedInfoCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.ClearCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.Command;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.CreateAptCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.DeleteAptCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.DeleteCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.DeleteContactCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.DeleteMedicalCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2024-03-30"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.EditCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.EditContactCommand;","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.EditMedicalCommand;","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.ExitCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.FindCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.HelpCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.ListAptCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.ListCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.ListContactCommand;","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.ListMedicalCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"public class ClinicParser {","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ClinicParser.class);","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":92,"author":{"gitId":"MaYuehan"},"content":"        case CreateAptCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-10"},{"lineNumber":93,"author":{"gitId":"MaYuehan"},"content":"            return new CreateAptCommandParser().parse(arguments);","lastModifiedDate":"2024-03-10"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"        case ListAptCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-10"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"            return new ListAptCommand();","lastModifiedDate":"2024-03-10"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"        case DeleteAptCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-10"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"            return new DeleteAptCommandParser().parse(arguments);","lastModifiedDate":"2024-03-10"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"        case AddContactCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-17"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":"            return new AddContactCommandParser().parse(arguments);","lastModifiedDate":"2024-03-17"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"        case ListContactCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-23"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"            return new ListContactCommand();","lastModifiedDate":"2024-03-23"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"        case EditContactCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"Ella-e"},"content":"            return new EditContactCommandParser().parse(arguments);","lastModifiedDate":"2024-03-25"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"        case DeleteContactCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"            return new DeleteContactCommandParser().parse(arguments);","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"SeaHogs"},"content":"        case AddMedInfoCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"SeaHogs"},"content":"            return new AddMedicalCommandParser().parse(arguments);","lastModifiedDate":"2024-03-26"},{"lineNumber":115,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"SeaHogs"},"content":"        case ListMedicalCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"SeaHogs"},"content":"            return new ListMedicalCommand();","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"SeaHogs"},"content":"        case DeleteMedicalCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"SeaHogs"},"content":"            return new DeleteMedicalCommandParser().parse(arguments);","lastModifiedDate":"2024-03-19"},{"lineNumber":121,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":122,"author":{"gitId":"SeaHogs"},"content":"        case EditMedicalCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-26"},{"lineNumber":123,"author":{"gitId":"SeaHogs"},"content":"            return new EditMedicalCommandParser().parse(arguments);","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":125,"author":{"gitId":"Ella-e"},"content":"        case EditAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-30"},{"lineNumber":126,"author":{"gitId":"Ella-e"},"content":"            return new EditAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2024-03-30"},{"lineNumber":127,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":2,"MaYuehan":15,"Ella-e":18,"-":69,"SeaHogs":30}},{"path":"src/main/java/vitalconnect/logic/parser/CreateAptCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.CreateAptCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":" * Parses input arguments and creates a new CreateAptCommand object.","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":" * This parser is responsible for handling the raw input arguments provided","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":" * for the creation of an appointment and ensuring they meet the expected format","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":" * which includes the patient\u0027s NRIC and the appointment date and time.","lastModifiedDate":"2024-03-23"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"public class CreateAptCommandParser {","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"     * Parses the given {@code String} of arguments in the context of the CreateAptCommand","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"     * and returns a CreateAptCommand object for execution.","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"     * This method expects the arguments to contain the NRIC of a patient followed by","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"     * the \u0027/time\u0027 keyword and the appointment datetime in \u0027dd/MM/yyyy HHmm\u0027 format.","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"     * If the arguments do not conform to this expected format, a ParseException is thrown.","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"     * @param userInput The input arguments to be parsed, including the patient\u0027s NRIC and","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"     *             the appointment datetime.","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"     * @return A new CreateAptCommand object encapsulating the parsed patient NRIC","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"     *         and appointment datetime.","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"     * @throws ParseException If the provided arguments do not conform to the expected","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"     *                        format or if other parsing errors occur.","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"    public CreateAptCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"            ArgumentTokenizer.tokenize(userInput, PREFIX_NRIC, PREFIX_TIME, PREFIX_DURATION);","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"            || !arePrefixesPresent(argMultimap, PREFIX_TIME)","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"            || !arePrefixesPresent(argMultimap, PREFIX_DURATION)","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateAptCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"        Nric ic \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        LocalDateTime dateTimeStr \u003d null;","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"        int duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"            dateTimeStr \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"        if (dateTimeStr \u003d\u003d null) {","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateAptCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"        return new CreateAptCommand(ic, dateTimeStr, duration);","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"MaYuehan":38,"Ella-e":31}},{"path":"src/main/java/vitalconnect/logic/parser/DeleteAptCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.DeleteAptCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":" * Parses input arguments to create a new {@code DeleteAptCommand} object.","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":" * This parser is responsible for interpreting the raw input arguments provided","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":" * for the deletion of an appointment and ensuring they meet the expected format.","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"public class DeleteAptCommandParser implements Parser\u003cDeleteAptCommand\u003e {","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAptCommand","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"     * and returns an instance of DeleteAptCommand for execution.","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"     * The method expects the arguments to contain an index followed by the \u0027/name\u0027 keyword","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"     * and the patient\u0027s name. The index should be a positive integer indicating the position","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"     * of the appointment in the list as shown to the user. The patient\u0027s name identifies","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"     * whose appointment is to be deleted. If the arguments do not conform to this expected","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"     * format, a ParseException is thrown with a message indicating proper usage.","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"     * @param args The input arguments to be parsed.","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"     * @return A new instance of DeleteAptCommand encapsulating the specified index","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"     *         and patient\u0027s name for the appointment to be deleted.","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"     * @throws ParseException If the provided arguments do not conform to the expected","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"     *                        format or if other parsing errors occur, such as an invalid","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"     *                        integer for the index.","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    public DeleteAptCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        try {","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"            return new DeleteAptCommand(index);","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"              String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAptCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"MaYuehan":33,"Ella-e":8}},{"path":"src/main/java/vitalconnect/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.DeleteCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"MaYuehan":5,"-":24}},{"path":"src/main/java/vitalconnect/logic/parser/DeleteContactCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.DeleteContactCommand;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":" * Parser of deleteContactCommand","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"public class DeleteContactCommandParser implements Parser\u003cDeleteContactCommand\u003e {","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    public DeleteContactCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"            ArgumentTokenizer.tokenize(userInput, PREFIX_NRIC);","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        return new DeleteContactCommand(nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"Ella-e":34}},{"path":"src/main/java/vitalconnect/logic/parser/DeleteMedicalCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.DeleteMedicalCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":" * Parses user input into a {@code DeleteMedicalCommand}.","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":" * This class ensures that the user input contains the necessary prefix for deleting medical information.","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"public class DeleteMedicalCommandParser implements Parser\u003cDeleteMedicalCommand\u003e {","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * Parses the user input and returns a {@code DeleteMedicalCommand} if the input is valid.","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"     * @return A {@code DeleteMedicalCommand} representing the parsed user input.","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"     * @throws ParseException If the user input does not conform to the expected format.","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"    public DeleteMedicalCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_NRIC);","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMedicalCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"        return new DeleteMedicalCommand(nric);","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"     * Checks if all the specified prefixes are present and non-empty in the given {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"     * @param argumentMultimap The {@code ArgumentMultimap} containing the parsed arguments.","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"     * @param prefixes The prefixes to check.","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"     * @return {@code true} if all prefixes are present and non-empty, {@code false} otherwise.","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"SeaHogs":43}},{"path":"src/main/java/vitalconnect/logic/parser/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-30"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-30"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-30"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2024-03-30"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2024-03-30"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2024-03-30"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-30"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-30"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":" * Parses input arguments and creates a new EditAppointmentCommand object","lastModifiedDate":"2024-03-30"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {","lastModifiedDate":"2024-03-30"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"    public EditAppointmentCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2024-03-30"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-30"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"            ArgumentTokenizer.tokenize(userInput, PREFIX_TIME, PREFIX_DURATION);","lastModifiedDate":"2024-03-30"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        Index index;","lastModifiedDate":"2024-03-30"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"        try {","lastModifiedDate":"2024-03-30"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2024-03-30"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-03-30"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-03-30"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"                EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-03-30"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"        LocalDateTime dateTime \u003d null;","lastModifiedDate":"2024-03-30"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        int duration \u003d 0;","lastModifiedDate":"2024-03-30"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_TIME, PREFIX_DURATION);","lastModifiedDate":"2024-03-30"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"            dateTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2024-03-30"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"            duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());","lastModifiedDate":"2024-03-30"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"        if (!argMultimap.getValue(PREFIX_TIME).isPresent() \u0026\u0026 !argMultimap.getValue(PREFIX_DURATION).isPresent()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(\"At least one field to edit must be provided.\");","lastModifiedDate":"2024-03-30"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"        return new EditAppointmentCommand(index, dateTime, duration);","lastModifiedDate":"2024-03-30"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-30"}],"authorContributionMap":{"Ella-e":50}},{"path":"src/main/java/vitalconnect/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ALLERGYTAG;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_ALLERGYTAG);","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_NRIC);","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"    // for later use","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"    //    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"    //     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cAllergyTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"    //     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"    //     * {@code Set\u003cAllergyTag\u003e} containing zero tags.","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"    //     */","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"    //    private Optional\u003cSet\u003cAllergyTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"    //        assert tags !\u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"    //","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"    //        if (tags.isEmpty()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"    //            return Optional.empty();","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"    //        }","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"    //        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"    //        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"    //    }","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"javierng2knus":4,"MaYuehan":7,"-":41,"SeaHogs":17}},{"path":"src/main/java/vitalconnect/logic/parser/EditContactCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-25"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-25"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.EditContactCommand;","lastModifiedDate":"2024-03-25"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-25"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-25"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-25"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"/**","lastModifiedDate":"2024-03-25"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":" * Parses input arguments and creates a new EditContactCommand object","lastModifiedDate":"2024-03-25"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":" */","lastModifiedDate":"2024-03-25"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"public class EditContactCommandParser implements Parser\u003cEditContactCommand\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"    public EditContactCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-25"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"            ArgumentTokenizer.tokenize(userInput, PREFIX_NRIC,","lastModifiedDate":"2024-03-25"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"              PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2024-03-25"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)","lastModifiedDate":"2024-03-25"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-25"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2024-03-25"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-25"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        Phone phone \u003d null;","lastModifiedDate":"2024-03-25"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"        Email email \u003d null;","lastModifiedDate":"2024-03-25"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"        Address address \u003d null;","lastModifiedDate":"2024-03-25"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2024-03-25"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2024-03-25"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2024-03-25"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"        // Check if at least one of the fields is present","lastModifiedDate":"2024-03-25"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"        if (phone \u003d\u003d null \u0026\u0026 email \u003d\u003d null \u0026\u0026 address \u003d\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-25"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        return new EditContactCommand(nric, email, phone, address);","lastModifiedDate":"2024-03-25"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-25"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-25"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-25"}],"authorContributionMap":{"Ella-e":62}},{"path":"src/main/java/vitalconnect/logic/parser/EditMedicalCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_APPENDTAG;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_HEIGHT;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_OVERWRITETAG;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_WEIGHT;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import java.util.Set;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.commands.EditMedicalCommand;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Height;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Weight;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":" * Edits the medical information of an existing person in the clinic.","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"public class EditMedicalCommandParser implements Parser\u003cEditMedicalCommand\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"    public EditMedicalCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_NRIC, PREFIX_HEIGHT, PREFIX_WEIGHT,","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"                        PREFIX_OVERWRITETAG, PREFIX_APPENDTAG);","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMedicalCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NRIC, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_OVERWRITETAG);","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"        Height height \u003d null;","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"        Weight weight \u003d null;","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"        boolean overwriteTags \u003d false;","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"        Set\u003cAllergyTag\u003e appendTags \u003d null;","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"        if (argMultimap.getValue(PREFIX_HEIGHT).isPresent()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"            height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get());","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"        if (argMultimap.getValue(PREFIX_WEIGHT).isPresent()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"            weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        if (argMultimap.getValue(PREFIX_OVERWRITETAG).isPresent()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"            overwriteTags \u003d true;","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"        if (argMultimap.getValue(PREFIX_APPENDTAG).isPresent()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"            appendTags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_APPENDTAG));","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        if (height \u003d\u003d null \u0026\u0026 weight \u003d\u003d null \u0026\u0026 !overwriteTags \u0026\u0026 appendTags \u003d\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMedicalCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"        return new EditMedicalCommand(nric, height, weight, overwriteTags, appendTags);","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"SeaHogs":69}},{"path":"src/main/java/vitalconnect/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.FindCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"MaYuehan":5,"-":28}},{"path":"src/main/java/vitalconnect/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.Command;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"MaYuehan":3,"-":13}},{"path":"src/main/java/vitalconnect/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.StringUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Height;","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"     * Parses a {@code String duration} into an integer representing the duration of an appointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"     * The duration is expected to be a positive integer, representing the number of time intervals","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"     * (with each interval being 15 minutes) for the appointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"     * @param duration The string input representing the duration in time intervals.","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"     * @return An integer representing the parsed duration in time intervals.","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"     * @throws ParseException if the given {@code duration} is invalid, not a positive integer.","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"    public static int parseDuration(String duration) throws ParseException {","lastModifiedDate":"2024-03-28"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"        String trimmedDuration \u003d duration.trim();","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedDuration)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"            throw new ParseException(\"Invalid duration format. Duration must be a positive integer.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"        return Integer.parseInt(trimmedDuration);","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"     * Parses a {@code String nric} into a {@code Nric}.","lastModifiedDate":"2024-03-15"},{"lineNumber":79,"author":{"gitId":"javierng2knus"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-15"},{"lineNumber":80,"author":{"gitId":"javierng2knus"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":81,"author":{"gitId":"javierng2knus"},"content":"     * @throws ParseException if the given {@code nric} is invalid.","lastModifiedDate":"2024-03-15"},{"lineNumber":82,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"    public static Nric parseNric(String nric) throws ParseException {","lastModifiedDate":"2024-03-15"},{"lineNumber":84,"author":{"gitId":"javierng2knus"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":85,"author":{"gitId":"javierng2knus"},"content":"        String trimmedName \u003d nric.trim();","lastModifiedDate":"2024-03-15"},{"lineNumber":86,"author":{"gitId":"javierng2knus"},"content":"        if (!Nric.isValidNric(trimmedName)) {","lastModifiedDate":"2024-03-15"},{"lineNumber":87,"author":{"gitId":"javierng2knus"},"content":"            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-15"},{"lineNumber":88,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"        return new Nric(trimmedName);","lastModifiedDate":"2024-03-15"},{"lineNumber":90,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":91,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"Ella-e"},"content":"     * Parses a {@code String dateTimeStr} into a {@code Date}.","lastModifiedDate":"2024-03-26"},{"lineNumber":139,"author":{"gitId":"Ella-e"},"content":"     * @param dateTimeStr A string representing the date and time.","lastModifiedDate":"2024-03-26"},{"lineNumber":140,"author":{"gitId":"Ella-e"},"content":"     * @return A {@code Date} object representing the date and time.","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"Ella-e"},"content":"     * @throws ParseException if the given {@code String dateTimeStr} is invalid.","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":143,"author":{"gitId":"Ella-e"},"content":"    public static LocalDateTime parseTime(String dateTimeStr) throws ParseException {","lastModifiedDate":"2024-03-26"},{"lineNumber":144,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(dateTimeStr);","lastModifiedDate":"2024-03-26"},{"lineNumber":145,"author":{"gitId":"Ella-e"},"content":"        // Parse and validate date time","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"Ella-e"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-03-26"},{"lineNumber":147,"author":{"gitId":"Ella-e"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":148,"author":{"gitId":"Ella-e"},"content":"            return LocalDateTime.parse(dateTimeStr, formatter);","lastModifiedDate":"2024-03-26"},{"lineNumber":149,"author":{"gitId":"Ella-e"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":150,"author":{"gitId":"Ella-e"},"content":"            throw new ParseException(\"Invalid date time format. Please enter in the format \u0027dd/MM/yyyy HHmm\u0027.\");","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":153,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"SeaHogs"},"content":"     * Parses a {@code String allergytag} into a {@code AllergyTag}.","lastModifiedDate":"2024-03-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"SeaHogs"},"content":"     * @throws ParseException if the given {@code allergytag} is invalid.","lastModifiedDate":"2024-03-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"SeaHogs"},"content":"    public static AllergyTag parseTag(String tag) throws ParseException {","lastModifiedDate":"2024-03-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"SeaHogs"},"content":"        if (!AllergyTag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":164,"author":{"gitId":"SeaHogs"},"content":"            throw new ParseException(AllergyTag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"SeaHogs"},"content":"        return new AllergyTag(trimmedTag);","lastModifiedDate":"2024-03-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":170,"author":{"gitId":"SeaHogs"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cAllergyTag\u003e}.","lastModifiedDate":"2024-03-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":172,"author":{"gitId":"SeaHogs"},"content":"    public static Set\u003cAllergyTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2024-03-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":174,"author":{"gitId":"SeaHogs"},"content":"        final Set\u003cAllergyTag\u003e allergyTagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2024-03-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":176,"author":{"gitId":"SeaHogs"},"content":"            allergyTagSet.add(parseTag(tagName));","lastModifiedDate":"2024-03-18"},{"lineNumber":177,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":178,"author":{"gitId":"SeaHogs"},"content":"        return allergyTagSet;","lastModifiedDate":"2024-03-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":180,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":181,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":182,"author":{"gitId":"SeaHogs"},"content":"     * Parses a {@code String height} into a {@code HEIGHT}.","lastModifiedDate":"2024-03-18"},{"lineNumber":183,"author":{"gitId":"SeaHogs"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-18"},{"lineNumber":184,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":185,"author":{"gitId":"SeaHogs"},"content":"     * @throws ParseException if the given {@code HEIGHT} is invalid.","lastModifiedDate":"2024-03-18"},{"lineNumber":186,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":187,"author":{"gitId":"SeaHogs"},"content":"    public static Height parseHeight(String height) {","lastModifiedDate":"2024-03-18"},{"lineNumber":188,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(height);","lastModifiedDate":"2024-03-18"},{"lineNumber":189,"author":{"gitId":"SeaHogs"},"content":"        String trimmedHeight \u003d height.trim();","lastModifiedDate":"2024-03-18"},{"lineNumber":190,"author":{"gitId":"SeaHogs"},"content":"        return new Height(trimmedHeight);","lastModifiedDate":"2024-03-18"},{"lineNumber":191,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":192,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":193,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":194,"author":{"gitId":"SeaHogs"},"content":"     * Parses a {@code String weight} into a {@code WEIGHT}.","lastModifiedDate":"2024-03-18"},{"lineNumber":195,"author":{"gitId":"SeaHogs"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-18"},{"lineNumber":196,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":197,"author":{"gitId":"SeaHogs"},"content":"     * @throws ParseException if the given {@code WEIGHT} is invalid.","lastModifiedDate":"2024-03-18"},{"lineNumber":198,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":199,"author":{"gitId":"SeaHogs"},"content":"    public static Weight parseWeight(String weight) {","lastModifiedDate":"2024-03-18"},{"lineNumber":200,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(weight);","lastModifiedDate":"2024-03-18"},{"lineNumber":201,"author":{"gitId":"SeaHogs"},"content":"        String trimmedWeight \u003d weight.trim();","lastModifiedDate":"2024-03-18"},{"lineNumber":202,"author":{"gitId":"SeaHogs"},"content":"        return new Weight(trimmedWeight);","lastModifiedDate":"2024-03-18"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"javierng2knus":16,"MaYuehan":27,"Ella-e":18,"-":104,"SeaHogs":39}},{"path":"src/main/java/vitalconnect/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!(other instanceof Prefix)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return prefix.equals(otherPrefix.prefix);","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"MaYuehan":1,"-":41}},{"path":"src/main/java/vitalconnect/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"MaYuehan":2,"-":15}},{"path":"src/main/java/vitalconnect/model/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":" * Represents an appointment with a patient. Each appointment has a patient name","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":" * and a scheduled date and time.","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"public class Appointment {","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"    private String patientName;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"    private String patientIc;","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"    private int duration;","lastModifiedDate":"2024-03-30"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"     * Constructs an {@code Appointment} with the specified patient name and date/time.","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"     * @param patientName The name of the patient for the appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"     * @param startDateTime The date and time of the appointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"     * @param endDateTime The time duration of the appointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"    public Appointment(String patientName, String patientIc, LocalDateTime startDateTime,","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"                       LocalDateTime endDateTime, int duration) {","lastModifiedDate":"2024-03-30"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"        this.patientIc \u003d patientIc;","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"        this.patientName \u003d patientName;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-03-30"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"     * Returns the name of the patient associated with this appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"     * @return The patient\u0027s name.","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"    public String getPatientName() {","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"        return patientName;","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"     * Returns the NRIC of the patient associated with this appointment.","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"     * @return The patient\u0027s ic.","lastModifiedDate":"2024-03-23"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"    public String getPatientIc() {","lastModifiedDate":"2024-03-23"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"        return patientIc;","lastModifiedDate":"2024-03-23"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"     * Returns the date and time of the appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"     * @return The date and time of the appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"        return startDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"     * Returns the end time of the appointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"     * @return The date and time of the appointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"    public LocalDateTime getEndDateTime() {","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"        return endDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"    public int getDuration() {","lastModifiedDate":"2024-03-30"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"        return duration;","lastModifiedDate":"2024-03-30"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"    public void setDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2024-03-30"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"        this.startDateTime \u003d dateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"    public void setEndDateTime(LocalDateTime endDateTime) {","lastModifiedDate":"2024-03-30"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"    public void setDuration(int duration) {","lastModifiedDate":"2024-03-30"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-03-30"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":84,"author":{"gitId":"Ella-e"},"content":"    public Appointment getCopy() {","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"Ella-e"},"content":"        return new Appointment(getPatientName(), getPatientIc(),","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"Ella-e"},"content":"                getDateTime(), getEndDateTime(), getDuration());","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"MaYuehan"},"content":"     * Returns a string representation of the appointment, including the patient\u0027s name","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"MaYuehan"},"content":"     * and the date and time of the appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"MaYuehan"},"content":"     * @return A string representation of the appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"    public String toString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"        return \"Appointment with \" + patientName + \" on \" + startDateTime + \" to \" + \" on \" + endDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":102,"author":{"gitId":"MaYuehan"},"content":"     * Checks if this appointment is equal to another object. Two appointments are equal","lastModifiedDate":"2024-03-23"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"     * if they have the same patient name, patient NRIC, and date/time.","lastModifiedDate":"2024-03-23"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"     * @param that The object to compare with this appointment.","lastModifiedDate":"2024-03-23"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"     * @return true if the given object represents an appointment equivalent to this appointment, false otherwise.","lastModifiedDate":"2024-03-23"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"    public boolean equals(Object that) {","lastModifiedDate":"2024-03-23"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"        if (that \u003d\u003d this) {","lastModifiedDate":"2024-03-23"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"            return true;","lastModifiedDate":"2024-03-23"},{"lineNumber":112,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":113,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":114,"author":{"gitId":"MaYuehan"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-23"},{"lineNumber":115,"author":{"gitId":"MaYuehan"},"content":"        if (!(that instanceof Appointment)) {","lastModifiedDate":"2024-03-23"},{"lineNumber":116,"author":{"gitId":"MaYuehan"},"content":"            return false;","lastModifiedDate":"2024-03-23"},{"lineNumber":117,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":119,"author":{"gitId":"MaYuehan"},"content":"        Appointment otherApt \u003d (Appointment) that;","lastModifiedDate":"2024-03-23"},{"lineNumber":120,"author":{"gitId":"MaYuehan"},"content":"        return patientName.equals(otherApt.patientName)","lastModifiedDate":"2024-03-23"},{"lineNumber":121,"author":{"gitId":"MaYuehan"},"content":"                \u0026\u0026 patientIc.equals(otherApt.patientIc)","lastModifiedDate":"2024-03-23"},{"lineNumber":122,"author":{"gitId":"MaYuehan"},"content":"                \u0026\u0026 startDateTime.equals(otherApt.startDateTime)","lastModifiedDate":"2024-03-28"},{"lineNumber":123,"author":{"gitId":"MaYuehan"},"content":"                \u0026\u0026 endDateTime.equals(otherApt.endDateTime);","lastModifiedDate":"2024-03-28"},{"lineNumber":124,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":125,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"MaYuehan":103,"Ella-e":24}},{"path":"src/main/java/vitalconnect/model/Clinic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.UniquePersonList;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":" * Wraps all data at the clinic level","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"public class Clinic implements ReadOnlyClinic {","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"    public Clinic() {}","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"     * Creates an Clinic using the Persons in the {@code toBeCopied}","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"    public Clinic(ReadOnlyClinic toBeCopied) {","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"     * Resets the existing data of this {@code Clinic} with {@code newData}.","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"    public void resetData(ReadOnlyClinic newData) {","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"     * Adds a person to the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"     * The person must not already exist in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":81,"author":{"gitId":"javierng2knus"},"content":"     * {@code target} must exist in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"javierng2knus"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"javierng2knus"},"content":"     * Removes {@code key} from this {@code Clinic}.","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"javierng2knus"},"content":"     * {@code key} must exist in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":119,"author":{"gitId":"javierng2knus"},"content":"        if (!(other instanceof Clinic)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"javierng2knus"},"content":"        Clinic otherClinic \u003d (Clinic) other;","lastModifiedDate":"2024-03-11"},{"lineNumber":124,"author":{"gitId":"javierng2knus"},"content":"        return persons.equals(otherClinic.persons);","lastModifiedDate":"2024-03-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":132,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":133,"author":{"gitId":"Ella-e"},"content":"     * Returns true if a person with the same name as {@code name} exists in the clinic.","lastModifiedDate":"2024-03-17"},{"lineNumber":134,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":135,"author":{"gitId":"Ella-e"},"content":"    public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":136,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":137,"author":{"gitId":"Ella-e"},"content":"        for (Person p : persons) {","lastModifiedDate":"2024-03-17"},{"lineNumber":138,"author":{"gitId":"Ella-e"},"content":"            if (p.getIdentificationInformation().getNric().nric.equalsIgnoreCase(nric.toString())) {","lastModifiedDate":"2024-03-17"},{"lineNumber":139,"author":{"gitId":"Ella-e"},"content":"                return p;","lastModifiedDate":"2024-03-17"},{"lineNumber":140,"author":{"gitId":"Ella-e"},"content":"            }","lastModifiedDate":"2024-03-17"},{"lineNumber":141,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":142,"author":{"gitId":"Ella-e"},"content":"        return null;","lastModifiedDate":"2024-03-17"},{"lineNumber":143,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"javierng2knus":17,"MaYuehan":4,"Ella-e":14,"-":109}},{"path":"src/main/java/vitalconnect/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_CONTACT \u003d Person::hasContactInformation;","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_MEDICAL \u003d Person::hasMedicalInformation;","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"     * Set current user Predicates.","lastModifiedDate":"2024-03-25"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"    void setCurrentPredicate(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2024-03-25"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"     * Get current user Predicates.","lastModifiedDate":"2024-03-25"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"    Predicate\u003cPerson\u003e getCurrentPredicate();","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"     * Returns the user prefs\u0027 clinic file path.","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"    Path getClinicFilePath();","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"     * Sets the user prefs\u0027 clinic file path.","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"    void setClinicFilePath(Path clinicFilePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"     * Replaces clinic data with the data in {@code clinic}.","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"    void setClinic(ReadOnlyClinic clinic);","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"    /** Returns the Clinic */","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"    ReadOnlyClinic getClinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"     * The person must exist in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"javierng2knus"},"content":"     * {@code person} must not already exist in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":90,"author":{"gitId":"javierng2knus"},"content":"     * {@code target} must exist in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"javierng2knus"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"    boolean doesPersonExist(String name);","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"    boolean doesIcExist(String nric);","lastModifiedDate":"2024-03-23"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2024-03-10"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"    void setAppointments(List\u003cAppointment\u003e appointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"     * Checks if the given appointment conflicts with any existing appointments.","lastModifiedDate":"2024-03-28"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":112,"author":{"gitId":"MaYuehan"},"content":"     * @param appointment The appointment to check.","lastModifiedDate":"2024-03-28"},{"lineNumber":113,"author":{"gitId":"MaYuehan"},"content":"     * @return true if there is a conflict, false otherwise.","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":115,"author":{"gitId":"MaYuehan"},"content":"    List\u003cAppointment\u003e getConflictingAppointments(Appointment appointment);","lastModifiedDate":"2024-03-28"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"    List\u003cAppointment\u003e getConflictingAppointmentsForExistingApt(Index index, Appointment appointment);","lastModifiedDate":"2024-03-31"},{"lineNumber":117,"author":{"gitId":"MaYuehan"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2024-03-10"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"    void deleteAppointment(Appointment appointment);","lastModifiedDate":"2024-03-10"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":"    Person findPersonByNric(Nric nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"    void updatePersonContactInformation(Nric nric, ContactInformation contactInformation);","lastModifiedDate":"2024-03-17"},{"lineNumber":121,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":122,"author":{"gitId":"SeaHogs"},"content":"    void updatePersonMedicalInformation(Nric nric, MedicalInformation medicalInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":123,"author":{"gitId":"Ella-e"},"content":"    void updateAppointment(Index index, Appointment appointment);","lastModifiedDate":"2024-03-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"javierng2knus":13,"MaYuehan":18,"Ella-e":19,"-":70,"SeaHogs":4}},{"path":"src/main/java/vitalconnect/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":" * Represents the in-memory model of the clinic data.","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"    private final Clinic clinic;","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"    private final ObservableList\u003cAppointment\u003e appointments;","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    private Predicate\u003cPerson\u003e currentPredicate;","lastModifiedDate":"2024-03-25"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"     * Initializes a ModelManager with the given clinic and userPrefs.","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"    public ModelManager(ReadOnlyClinic clinic, ReadOnlyUserPrefs userPrefs, List\u003cAppointment\u003e loadedAppointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        requireAllNonNull(clinic, userPrefs);","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"        logger.fine(\"Initializing with clinic: \" + clinic + \" and user prefs \" + userPrefs);","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"        this.clinic \u003d new Clinic(clinic);","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.clinic.getPersonList());","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"        this.appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-10"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        this.currentPredicate \u003d PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-25"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"        if (loadedAppointments !\u003d null) {","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"            this.appointments.setAll(loadedAppointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"        this(new Clinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"javierng2knus"},"content":"    public Path getClinicFilePath() {","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"javierng2knus"},"content":"        return userPrefs.getClinicFilePath();","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"javierng2knus"},"content":"    public void setClinicFilePath(Path clinicFilePath) {","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"javierng2knus"},"content":"        requireNonNull(clinicFilePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"javierng2knus"},"content":"        userPrefs.setClinicFilePath(clinicFilePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"     * Adds the given appointment to the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"     * @param appointment The appointment to add.","lastModifiedDate":"2024-03-23"},{"lineNumber":101,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":102,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-10"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-10"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-10"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"        appointments.add(appointment);","lastModifiedDate":"2024-03-10"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"        FXCollections.sort(appointments, Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"     * Replaces the current list of appointments with the provided list.","lastModifiedDate":"2024-03-23"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":112,"author":{"gitId":"MaYuehan"},"content":"     * @param appointments The list of appointments to set.","lastModifiedDate":"2024-03-23"},{"lineNumber":113,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":114,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":115,"author":{"gitId":"MaYuehan"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":116,"author":{"gitId":"MaYuehan"},"content":"        this.appointments.setAll(appointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":117,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":119,"author":{"gitId":"MaYuehan"},"content":"     * Returns an unmodifiable view of the list of appointments.","lastModifiedDate":"2024-03-23"},{"lineNumber":120,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":121,"author":{"gitId":"MaYuehan"},"content":"     * @return An unmodifiable view of the list of appointments.","lastModifiedDate":"2024-03-23"},{"lineNumber":122,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":123,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-10"},{"lineNumber":124,"author":{"gitId":"MaYuehan"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-10"},{"lineNumber":125,"author":{"gitId":"Ella-e"},"content":"        FXCollections.sort(appointments, Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2024-03-30"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"        return appointments;","lastModifiedDate":"2024-03-10"},{"lineNumber":127,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":128,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":129,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":130,"author":{"gitId":"MaYuehan"},"content":"     * Deletes the specified appointment from the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":131,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"     * @param appointment The appointment to delete.","lastModifiedDate":"2024-03-23"},{"lineNumber":133,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-10"},{"lineNumber":135,"author":{"gitId":"MaYuehan"},"content":"    public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-10"},{"lineNumber":136,"author":{"gitId":"MaYuehan"},"content":"        appointments.remove(appointment);","lastModifiedDate":"2024-03-10"},{"lineNumber":137,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":138,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":139,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":140,"author":{"gitId":"MaYuehan"},"content":"    public List\u003cAppointment\u003e getConflictingAppointments(Appointment newAppointment) {","lastModifiedDate":"2024-03-28"},{"lineNumber":141,"author":{"gitId":"MaYuehan"},"content":"        return getFilteredAppointmentList().stream()","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"MaYuehan"},"content":"                .filter(existingAppointment -\u003e","lastModifiedDate":"2024-03-28"},{"lineNumber":143,"author":{"gitId":"MaYuehan"},"content":"                        newAppointment.getDateTime().isBefore(existingAppointment.getEndDateTime())","lastModifiedDate":"2024-03-28"},{"lineNumber":144,"author":{"gitId":"MaYuehan"},"content":"                                \u0026\u0026 newAppointment.getEndDateTime().isAfter(existingAppointment.getDateTime()))","lastModifiedDate":"2024-03-28"},{"lineNumber":145,"author":{"gitId":"MaYuehan"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2024-03-28"},{"lineNumber":146,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":147,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":148,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":149,"author":{"gitId":"Ella-e"},"content":"    public List\u003cAppointment\u003e getConflictingAppointmentsForExistingApt(Index index, Appointment newAppointment) {","lastModifiedDate":"2024-03-31"},{"lineNumber":150,"author":{"gitId":"Ella-e"},"content":"        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e(getFilteredAppointmentList());","lastModifiedDate":"2024-03-31"},{"lineNumber":151,"author":{"gitId":"Ella-e"},"content":"        appointments.remove(index.getZeroBased());","lastModifiedDate":"2024-03-31"},{"lineNumber":152,"author":{"gitId":"Ella-e"},"content":"        return appointments.stream()","lastModifiedDate":"2024-03-31"},{"lineNumber":153,"author":{"gitId":"Ella-e"},"content":"          .filter(existingAppointment -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":154,"author":{"gitId":"Ella-e"},"content":"            newAppointment.getDateTime().isBefore(existingAppointment.getEndDateTime())","lastModifiedDate":"2024-03-31"},{"lineNumber":155,"author":{"gitId":"Ella-e"},"content":"              \u0026\u0026 newAppointment.getEndDateTime().isAfter(existingAppointment.getDateTime()))","lastModifiedDate":"2024-03-31"},{"lineNumber":156,"author":{"gitId":"Ella-e"},"content":"          .collect(Collectors.toList());","lastModifiedDate":"2024-03-31"},{"lineNumber":157,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":159,"author":{"gitId":"javierng2knus"},"content":"    public void setClinic(ReadOnlyClinic clinic) {","lastModifiedDate":"2024-03-11"},{"lineNumber":160,"author":{"gitId":"javierng2knus"},"content":"        this.clinic.resetData(clinic);","lastModifiedDate":"2024-03-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":164,"author":{"gitId":"javierng2knus"},"content":"    public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-11"},{"lineNumber":165,"author":{"gitId":"javierng2knus"},"content":"        return clinic;","lastModifiedDate":"2024-03-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":171,"author":{"gitId":"javierng2knus"},"content":"        return clinic.hasPerson(person);","lastModifiedDate":"2024-03-11"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":176,"author":{"gitId":"javierng2knus"},"content":"        clinic.removePerson(target);","lastModifiedDate":"2024-03-11"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":181,"author":{"gitId":"javierng2knus"},"content":"        clinic.addPerson(person);","lastModifiedDate":"2024-03-11"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":189,"author":{"gitId":"javierng2knus"},"content":"        clinic.setPerson(target, editedPerson);","lastModifiedDate":"2024-03-11"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":191,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":192,"author":{"gitId":"MaYuehan"},"content":"     * Checks if a person with the specified name exists in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":193,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":194,"author":{"gitId":"MaYuehan"},"content":"     * @param name The name of the person to check for existence.","lastModifiedDate":"2024-03-23"},{"lineNumber":195,"author":{"gitId":"MaYuehan"},"content":"     * @return true if there is at least one person in the clinic with the specified name, ignoring case.","lastModifiedDate":"2024-03-23"},{"lineNumber":196,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":197,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-10"},{"lineNumber":198,"author":{"gitId":"MaYuehan"},"content":"    public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-13"},{"lineNumber":199,"author":{"gitId":"MaYuehan"},"content":"        requireNonNull(name);","lastModifiedDate":"2024-03-10"},{"lineNumber":200,"author":{"gitId":"MaYuehan"},"content":"        return filteredPersons.stream()","lastModifiedDate":"2024-03-10"},{"lineNumber":201,"author":{"gitId":"javierng2knus"},"content":"                .anyMatch(person -\u003e person.getIdentificationInformation().getName().fullName.equalsIgnoreCase(name));","lastModifiedDate":"2024-03-15"},{"lineNumber":202,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":203,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":204,"author":{"gitId":"MaYuehan"},"content":"     * Checks if a person with the specified National Registration Identity Card (NRIC) exists in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":205,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":206,"author":{"gitId":"MaYuehan"},"content":"     * @param ic The NRIC of the person to check for existence.","lastModifiedDate":"2024-03-23"},{"lineNumber":207,"author":{"gitId":"MaYuehan"},"content":"     * @return true if there is at least one person in the clinic with the specified NRIC, ignoring case.","lastModifiedDate":"2024-03-23"},{"lineNumber":208,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":209,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":210,"author":{"gitId":"MaYuehan"},"content":"    public boolean doesIcExist(String ic) {","lastModifiedDate":"2024-03-23"},{"lineNumber":211,"author":{"gitId":"MaYuehan"},"content":"        requireNonNull(ic);","lastModifiedDate":"2024-03-23"},{"lineNumber":212,"author":{"gitId":"MaYuehan"},"content":"        return filteredPersons.stream()","lastModifiedDate":"2024-03-23"},{"lineNumber":213,"author":{"gitId":"MaYuehan"},"content":"                .anyMatch(person -\u003e person.getIdentificationInformation().getNric().nric.equalsIgnoreCase(ic));","lastModifiedDate":"2024-03-23"},{"lineNumber":214,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":215,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":216,"author":{"gitId":"MaYuehan"},"content":"     * Finds and returns the person in the clinic whose NRIC matches the specified NRIC.","lastModifiedDate":"2024-03-23"},{"lineNumber":217,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":218,"author":{"gitId":"MaYuehan"},"content":"     * @param nric The NRIC of the person to find.","lastModifiedDate":"2024-03-23"},{"lineNumber":219,"author":{"gitId":"MaYuehan"},"content":"     * @return The person with the specified NRIC or null if no such person exists in the clinic.","lastModifiedDate":"2024-03-23"},{"lineNumber":220,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":221,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":222,"author":{"gitId":"Ella-e"},"content":"    public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":223,"author":{"gitId":"Ella-e"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":224,"author":{"gitId":"Ella-e"},"content":"        return clinic.findPersonByNric(nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":225,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":226,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":227,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":228,"author":{"gitId":"Ella-e"},"content":"     * Updates the contact information of the person in the clinic.","lastModifiedDate":"2024-03-17"},{"lineNumber":229,"author":{"gitId":"Ella-e"},"content":"     * @param nric Nric of the person to be updated","lastModifiedDate":"2024-03-17"},{"lineNumber":230,"author":{"gitId":"Ella-e"},"content":"     * @param contactInformation New contact information of the person","lastModifiedDate":"2024-03-17"},{"lineNumber":231,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":232,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":233,"author":{"gitId":"Ella-e"},"content":"    public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":234,"author":{"gitId":"Ella-e"},"content":"        Person person \u003d clinic.findPersonByNric(nric);","lastModifiedDate":"2024-03-17"},{"lineNumber":235,"author":{"gitId":"Ella-e"},"content":"        Person personToUpdate \u003d person.copyPerson();","lastModifiedDate":"2024-03-17"},{"lineNumber":236,"author":{"gitId":"Ella-e"},"content":"        personToUpdate.setContactInformation(contactInformation);","lastModifiedDate":"2024-03-17"},{"lineNumber":237,"author":{"gitId":"Ella-e"},"content":"        setPerson(person, personToUpdate);","lastModifiedDate":"2024-03-17"},{"lineNumber":238,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":239,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":240,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":241,"author":{"gitId":"SeaHogs"},"content":"    public void updatePersonMedicalInformation(Nric nric, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":242,"author":{"gitId":"SeaHogs"},"content":"        Person person \u003d clinic.findPersonByNric(nric);","lastModifiedDate":"2024-03-18"},{"lineNumber":243,"author":{"gitId":"SeaHogs"},"content":"        Person personToUpdate \u003d person.copyPerson();","lastModifiedDate":"2024-03-18"},{"lineNumber":244,"author":{"gitId":"SeaHogs"},"content":"        personToUpdate.setMedicalInformation(medicalInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":245,"author":{"gitId":"SeaHogs"},"content":"        setPerson(person, personToUpdate);","lastModifiedDate":"2024-03-18"},{"lineNumber":246,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":247,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":248,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":249,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":250,"author":{"gitId":"Ella-e"},"content":"    public void updateAppointment(Index index, Appointment appointmentToSave) {","lastModifiedDate":"2024-03-30"},{"lineNumber":251,"author":{"gitId":"Ella-e"},"content":"        appointments.set(index.getZeroBased(), appointmentToSave);","lastModifiedDate":"2024-03-30"},{"lineNumber":252,"author":{"gitId":"Ella-e"},"content":"        FXCollections.sort(appointments, Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2024-03-30"},{"lineNumber":253,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":254,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":255,"author":{"gitId":"Ella-e"},"content":"    public void setCurrentPredicate(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":256,"author":{"gitId":"Ella-e"},"content":"        currentPredicate \u003d predicate;","lastModifiedDate":"2024-03-25"},{"lineNumber":257,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":258,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":259,"author":{"gitId":"Ella-e"},"content":"    public Predicate\u003cPerson\u003e getCurrentPredicate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":260,"author":{"gitId":"Ella-e"},"content":"        return currentPredicate;","lastModifiedDate":"2024-03-25"},{"lineNumber":261,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":262,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":268,"author":{"gitId":"javierng2knus"},"content":"     * {@code versionedClinic}","lastModifiedDate":"2024-03-11"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":281,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":282,"author":{"gitId":"MaYuehan"},"content":"     * Checks for equality with another object. Returns true if the other object is also a ModelManager","lastModifiedDate":"2024-03-23"},{"lineNumber":283,"author":{"gitId":"MaYuehan"},"content":"     * and has the same clinic and user preferences data.","lastModifiedDate":"2024-03-23"},{"lineNumber":284,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":285,"author":{"gitId":"MaYuehan"},"content":"     * @param other The other object to compare against.","lastModifiedDate":"2024-03-23"},{"lineNumber":286,"author":{"gitId":"MaYuehan"},"content":"     * @return True if both objects are of the same class and contain the same data, false otherwise.","lastModifiedDate":"2024-03-23"},{"lineNumber":287,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":296,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":300,"author":{"gitId":"javierng2knus"},"content":"        if (clinic.equals(otherModelManager.clinic)) {","lastModifiedDate":"2024-03-15"},{"lineNumber":301,"author":{"gitId":"javierng2knus"},"content":"            if (userPrefs.equals(otherModelManager.userPrefs)) {","lastModifiedDate":"2024-03-15"},{"lineNumber":302,"author":{"gitId":"javierng2knus"},"content":"                if (filteredPersons.equals(otherModelManager.filteredPersons)) {","lastModifiedDate":"2024-03-15"},{"lineNumber":303,"author":{"gitId":"javierng2knus"},"content":"                    return true;","lastModifiedDate":"2024-03-15"},{"lineNumber":304,"author":{"gitId":"javierng2knus"},"content":"                }","lastModifiedDate":"2024-03-15"},{"lineNumber":305,"author":{"gitId":"javierng2knus"},"content":"            }","lastModifiedDate":"2024-03-15"},{"lineNumber":306,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":307,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":308,"author":{"gitId":"javierng2knus"},"content":"        return clinic.equals(otherModelManager.clinic)","lastModifiedDate":"2024-03-11"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons);","lastModifiedDate":"2023-07-13"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"javierng2knus":31,"MaYuehan":105,"Ella-e":50,"-":117,"SeaHogs":10}},{"path":"src/main/java/vitalconnect/model/ReadOnlyClinic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":" * Unmodifiable view of a clinic","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":"public interface ReadOnlyClinic {","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"javierng2knus":2,"MaYuehan":2,"-":13}},{"path":"src/main/java/vitalconnect/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"    Path getClinicFilePath();","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"    Path getAppointmentFilePath();","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":3,"-":13}},{"path":"src/main/java/vitalconnect/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"    private Path clinicFilePath \u003d Paths.get(\"data\" , \"clinic.json\");","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"    private Path appointmentFilePath \u003d Paths.get(\"data\", \"appointments.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"        setClinicFilePath(newUserPrefs.getClinicFilePath());","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        setAppointmentFilePath(newUserPrefs.getAppointmentFilePath());","lastModifiedDate":"2024-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"    public Path getClinicFilePath() {","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"        return clinicFilePath;","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"    public void setClinicFilePath(Path clinicFilePath) {","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"javierng2knus"},"content":"        requireNonNull(clinicFilePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"javierng2knus"},"content":"        this.clinicFilePath \u003d clinicFilePath;","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"    public Path getAppointmentFilePath() {","lastModifiedDate":"2024-03-23"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"        return appointmentFilePath;","lastModifiedDate":"2024-03-23"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"    public void setAppointmentFilePath(Path appointmentFilePath) {","lastModifiedDate":"2024-03-23"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"        requireNonNull(appointmentFilePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"        this.appointmentFilePath \u003d appointmentFilePath;","lastModifiedDate":"2024-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":82,"author":{"gitId":"MaYuehan"},"content":"                \u0026\u0026 clinicFilePath.equals(otherUserPrefs.clinicFilePath)","lastModifiedDate":"2024-03-23"},{"lineNumber":83,"author":{"gitId":"MaYuehan"},"content":"                \u0026\u0026 appointmentFilePath.equals(otherUserPrefs.appointmentFilePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"MaYuehan"},"content":"        return Objects.hash(guiSettings, clinicFilePath, appointmentFilePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"        sb.append(\"Gui Settings : \").append(guiSettings);","lastModifiedDate":"2024-03-23"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"        sb.append(\"\\nLocal clinic data file location : \").append(clinicFilePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"        sb.append(\"\\nLocal appointment data file location : \").append(appointmentFilePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"javierng2knus":7,"MaYuehan":17,"-":75}},{"path":"src/main/java/vitalconnect/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.IdentificationInformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":" * Represents a Person in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"    // Information fields","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    private IdentificationInformation identificationInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"    private ContactInformation contactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"    private MedicalInformation medicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"     * Only identificationInformation is present.","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"    public Person(IdentificationInformation identificationInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"        requireAllNonNull(identificationInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"        this.identificationInformation \u003d identificationInformation;","lastModifiedDate":"2024-03-15"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        this.contactInformation \u003d new ContactInformation();","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        this.medicalInformation \u003d new MedicalInformation();","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"     * Only identificationInformation and contactInformation are present.","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"    public Person(IdentificationInformation identificationInformation,","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"                  ContactInformation contactInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"        requireAllNonNull(identificationInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"        this.identificationInformation \u003d identificationInformation;","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"        this.contactInformation \u003d contactInformation;","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        this.medicalInformation \u003d new MedicalInformation();","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"     * Only identificationInformation and medicalInformation are present.","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"    public Person(IdentificationInformation identificationInformation,","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"                  MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"        requireAllNonNull(identificationInformation);","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"        this.identificationInformation \u003d identificationInformation;","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        this.contactInformation \u003d new ContactInformation();","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        this.medicalInformation \u003d medicalInformation;","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"     * All fields are present.","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"    public Person(IdentificationInformation identificationInformation,","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"                  ContactInformation contactInformation, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        requireAllNonNull(identificationInformation, contactInformation, medicalInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"        this.identificationInformation \u003d identificationInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"        this.contactInformation \u003d contactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"        this.medicalInformation \u003d medicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"javierng2knus"},"content":"    public IdentificationInformation getIdentificationInformation() {","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"        return this.identificationInformation;","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"    public void setContactInformation(ContactInformation contactInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"        this.contactInformation \u003d contactInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"    public ContactInformation getContactInformation() {","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"        return this.contactInformation;","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"    public boolean hasContactInformation() {","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"        return !this.contactInformation.isEmptyContact();","lastModifiedDate":"2024-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"    public void setMedicalInformation(MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"        this.medicalInformation \u003d medicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"    public MedicalInformation getMedicalInformation() {","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"        return this.medicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"    public boolean hasMedicalInformation() {","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"Ella-e"},"content":"        return !this.medicalInformation.isEmpty();","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":91,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"javierng2knus"},"content":"     * Returns true if both persons have the same identification info.","lastModifiedDate":"2024-03-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"SeaHogs"},"content":"                \u0026\u0026 otherPerson","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"SeaHogs"},"content":"                .getIdentificationInformation()","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"SeaHogs"},"content":"                .getNric()","lastModifiedDate":"2024-03-18"},{"lineNumber":106,"author":{"gitId":"SeaHogs"},"content":"                .equals(getIdentificationInformation().getNric());","lastModifiedDate":"2024-03-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"     * Make a new copy of that person.","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"    public Person copyPerson() {","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"SeaHogs"},"content":"        if (hasContactInformation() \u0026\u0026 hasMedicalInformation()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"SeaHogs"},"content":"            return new Person(this.identificationInformation, this.contactInformation, this.medicalInformation);","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"SeaHogs"},"content":"        } else if (hasContactInformation()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"SeaHogs"},"content":"            return new Person(this.identificationInformation, this.contactInformation);","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"SeaHogs"},"content":"        } else if (hasMedicalInformation()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"SeaHogs"},"content":"            return new Person(this.identificationInformation, this.medicalInformation);","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"SeaHogs"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"SeaHogs"},"content":"            return new Person(this.identificationInformation);","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":123,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":140,"author":{"gitId":"SeaHogs"},"content":"        boolean isSamePerson \u003d getIdentificationInformation().equals(otherPerson.getIdentificationInformation());","lastModifiedDate":"2024-03-19"},{"lineNumber":141,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":142,"author":{"gitId":"javierng2knus"},"content":"        if (otherPerson.hasContactInformation() \u0026\u0026 hasContactInformation()) {","lastModifiedDate":"2024-03-15"},{"lineNumber":143,"author":{"gitId":"SeaHogs"},"content":"            // true if both have same contact information","lastModifiedDate":"2024-03-19"},{"lineNumber":144,"author":{"gitId":"SeaHogs"},"content":"            isSamePerson \u003d isSamePerson \u0026\u0026 getContactInformation().equals(otherPerson.getContactInformation());","lastModifiedDate":"2024-03-19"},{"lineNumber":145,"author":{"gitId":"SeaHogs"},"content":"        } else {","lastModifiedDate":"2024-03-19"},{"lineNumber":146,"author":{"gitId":"SeaHogs"},"content":"            // true if both do not have contact information","lastModifiedDate":"2024-03-19"},{"lineNumber":147,"author":{"gitId":"SeaHogs"},"content":"            isSamePerson \u003d isSamePerson \u0026\u0026 !otherPerson.hasContactInformation() \u0026\u0026 !hasContactInformation();","lastModifiedDate":"2024-03-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":150,"author":{"gitId":"SeaHogs"},"content":"        if (otherPerson.hasMedicalInformation() \u0026\u0026 hasMedicalInformation()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":151,"author":{"gitId":"SeaHogs"},"content":"            // true if both have same medical information","lastModifiedDate":"2024-03-19"},{"lineNumber":152,"author":{"gitId":"SeaHogs"},"content":"            isSamePerson \u003d isSamePerson \u0026\u0026 getMedicalInformation().equals(otherPerson.getMedicalInformation());","lastModifiedDate":"2024-03-19"},{"lineNumber":153,"author":{"gitId":"SeaHogs"},"content":"        } else {","lastModifiedDate":"2024-03-19"},{"lineNumber":154,"author":{"gitId":"SeaHogs"},"content":"            // true if both do not have medical information","lastModifiedDate":"2024-03-19"},{"lineNumber":155,"author":{"gitId":"SeaHogs"},"content":"            isSamePerson \u003d isSamePerson \u0026\u0026 !otherPerson.hasMedicalInformation() \u0026\u0026 !hasMedicalInformation();","lastModifiedDate":"2024-03-19"},{"lineNumber":156,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":157,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":158,"author":{"gitId":"SeaHogs"},"content":"        return isSamePerson;","lastModifiedDate":"2024-03-19"},{"lineNumber":159,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":160,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":164,"author":{"gitId":"SeaHogs"},"content":"        return Objects.hash(getIdentificationInformation(), getContactInformation(), getMedicalInformation());","lastModifiedDate":"2024-03-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":169,"author":{"gitId":"SeaHogs"},"content":"        if (hasContactInformation() \u0026\u0026 hasMedicalInformation()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":170,"author":{"gitId":"SeaHogs"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2024-03-18"},{"lineNumber":171,"author":{"gitId":"SeaHogs"},"content":"                    .add(\"identification\", getIdentificationInformation())","lastModifiedDate":"2024-03-18"},{"lineNumber":172,"author":{"gitId":"SeaHogs"},"content":"                    .add(\"contact\", getContactInformation())","lastModifiedDate":"2024-03-18"},{"lineNumber":173,"author":{"gitId":"SeaHogs"},"content":"                    .add(\"medicalinfo\", getMedicalInformation())","lastModifiedDate":"2024-03-18"},{"lineNumber":174,"author":{"gitId":"SeaHogs"},"content":"                    .toString();","lastModifiedDate":"2024-03-18"},{"lineNumber":175,"author":{"gitId":"SeaHogs"},"content":"        } else if (hasContactInformation()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":177,"author":{"gitId":"javierng2knus"},"content":"                    .add(\"identification\", getIdentificationInformation())","lastModifiedDate":"2024-03-15"},{"lineNumber":178,"author":{"gitId":"javierng2knus"},"content":"                    .add(\"contact\", getContactInformation())","lastModifiedDate":"2024-03-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":180,"author":{"gitId":"SeaHogs"},"content":"        } else if (hasMedicalInformation()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":181,"author":{"gitId":"SeaHogs"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2024-03-19"},{"lineNumber":182,"author":{"gitId":"SeaHogs"},"content":"                    .add(\"identification\", getIdentificationInformation())","lastModifiedDate":"2024-03-19"},{"lineNumber":183,"author":{"gitId":"SeaHogs"},"content":"                    .add(\"medicalinfo\", getMedicalInformation())","lastModifiedDate":"2024-03-19"},{"lineNumber":184,"author":{"gitId":"SeaHogs"},"content":"                    .toString();","lastModifiedDate":"2024-03-19"},{"lineNumber":185,"author":{"gitId":"javierng2knus"},"content":"        } else {","lastModifiedDate":"2024-03-15"},{"lineNumber":186,"author":{"gitId":"javierng2knus"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2024-03-15"},{"lineNumber":187,"author":{"gitId":"javierng2knus"},"content":"                    .add(\"identification\", getIdentificationInformation())","lastModifiedDate":"2024-03-15"},{"lineNumber":188,"author":{"gitId":"javierng2knus"},"content":"                    .toString();","lastModifiedDate":"2024-03-15"},{"lineNumber":189,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":33,"MaYuehan":5,"Ella-e":17,"-":59,"SeaHogs":78}},{"path":"src/main/java/vitalconnect/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!(other instanceof UniquePersonList)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        UniquePersonList otherUniquePersonList \u003d (UniquePersonList) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return internalList.equals(otherUniquePersonList.internalList);","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return internalList.toString();","lastModifiedDate":"2019-02-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"MaYuehan":4,"-":146}},{"path":"src/main/java/vitalconnect/model/person/contactinformation/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.contactinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":" * Represents a Person\u0027s address in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[^/]*$\";","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    public Address() {","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        value \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"        return value.equals(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        return test.matches(VALIDATION_REGEX) || test.equals(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!(other instanceof Address)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Address otherAddress \u003d (Address) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return value.equals(otherAddress.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":2,"Ella-e":10,"-":60}},{"path":"src/main/java/vitalconnect/model/person/contactinformation/ContactInformation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.contactinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"javierng2knus"},"content":" * Represents a Person\u0027s contact information","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidContactInformation(ContactInformation)}","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"public class ContactInformation {","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Invalid Contactinformation\";","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"    // Identity fields","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"    private Email email;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"    private Phone phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"    private Address address;","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"     * Constructor","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    public ContactInformation() {","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        this.email \u003d new Email(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"        this.phone \u003d new Phone(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"        this.address \u003d new Address(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"     * Use String as the parameter for the instantiation.","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    public ContactInformation(String email, String phone, String address) {","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"     * Constructs a {@code ContactInformation}.","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"     * @param email A valid email.","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"     * @param phone A valid phone.","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"     * @param address A valid address.","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"    public ContactInformation(Email email, Phone phone, Address address) {","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        this.address \u003d address;","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"    public Email getEmail() {","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"        return email;","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"javierng2knus"},"content":"    public Phone getPhone() {","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"javierng2knus"},"content":"        return phone;","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"    public Address getAddress() {","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"        return address;","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"    public void updateEmail(Email email) {","lastModifiedDate":"2024-03-25"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-25"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"    public void updatePhone(Phone phone) {","lastModifiedDate":"2024-03-25"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-25"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"    public void updateAddress(Address address) {","lastModifiedDate":"2024-03-25"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"        this.address \u003d address;","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"     * Returns true if a given string is a valid contactInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"    public static boolean isValidContactInformation(ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"        String emailTest \u003d contactInformation.getEmail().value;","lastModifiedDate":"2024-03-17"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"        String phoneTest \u003d contactInformation.getPhone().value;","lastModifiedDate":"2024-03-17"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"        String addressTest \u003d contactInformation.getAddress().value;","lastModifiedDate":"2024-03-17"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"        return emailTest.matches(Email.VALIDATION_REGEX) \u0026\u0026 phoneTest.matches(Phone.VALIDATION_REGEX)","lastModifiedDate":"2024-03-17"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"            \u0026\u0026 addressTest.matches(vitalconnect.model.person.contactinformation.Address.VALIDATION_REGEX);","lastModifiedDate":"2024-03-17"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"    public boolean isEmptyContact() {","lastModifiedDate":"2024-03-17"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"        return email.isEmpty() \u0026\u0026 phone.isEmpty() \u0026\u0026 address.isEmpty();","lastModifiedDate":"2024-03-17"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":84,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":85,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":86,"author":{"gitId":"Ella-e"},"content":"    public String toString() {","lastModifiedDate":"2024-03-17"},{"lineNumber":87,"author":{"gitId":"Ella-e"},"content":"        String result \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"        if (!phone.isEmpty()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"Ella-e"},"content":"            result +\u003d \"phone: \" + phone + \"\\n\";","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":91,"author":{"gitId":"Ella-e"},"content":"        if (!email.isEmpty()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"Ella-e"},"content":"            result +\u003d \"email: \" + email + \"\\n\";","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":94,"author":{"gitId":"Ella-e"},"content":"        if (!address.isEmpty()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"Ella-e"},"content":"            result +\u003d \"address: \" + address + \"\\n\";","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":97,"author":{"gitId":"Ella-e"},"content":"        return result;","lastModifiedDate":"2024-03-17"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":99,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":100,"author":{"gitId":"Ella-e"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-17"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-17"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"            return true;","lastModifiedDate":"2024-03-17"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-17"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"        if (!(other instanceof ContactInformation)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":108,"author":{"gitId":"Ella-e"},"content":"            return false;","lastModifiedDate":"2024-03-17"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"        ContactInformation otherCI \u003d (ContactInformation) other;","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"        return otherCI.getEmail().equals(this.getEmail())","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"            \u0026\u0026 otherCI.getAddress().equals(this.getAddress())","lastModifiedDate":"2024-03-17"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"            \u0026\u0026 otherCI.getPhone().equals(this.getPhone());","lastModifiedDate":"2024-03-17"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":116,"author":{"gitId":"javierng2knus"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"javierng2knus":33,"MaYuehan":1,"Ella-e":82}},{"path":"src/main/java/vitalconnect/model/person/contactinformation/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.contactinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":" * Represents a Person\u0027s email in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"     * Default initializer","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"    public Email() {","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        value \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"        return test.matches(VALIDATION_REGEX) || test.equals(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"        return value.equals(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!(other instanceof Email)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Email otherEmail \u003d (Email) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return value.equals(otherEmail.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":2,"Ella-e":11,"-":75}},{"path":"src/main/java/vitalconnect/model/person/contactinformation/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.contactinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":" * Represents a Person\u0027s phone number in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"    public Phone() {","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"        value \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        return value.equals(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"        return test.matches(VALIDATION_REGEX) || test.equals(\"\");","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof Phone)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Phone otherPhone \u003d (Phone) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return value.equals(otherPhone.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":2,"Ella-e":9,"-":57}},{"path":"src/main/java/vitalconnect/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"MaYuehan":1,"-":10}},{"path":"src/main/java/vitalconnect/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"MaYuehan":1,"-":5}},{"path":"src/main/java/vitalconnect/model/person/identificationinformation/IdentificationInformation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.identificationinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"javierng2knus"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":" * Represents a Person\u0027s identification information","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidIdentificationInformation(String, String)}","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"javierng2knus"},"content":"public class IdentificationInformation {","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":"    // Identity fields","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"    private final Name name;","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"javierng2knus"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"     * Constructs a {@code IdentificationInformation}.","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"     * @param name A valid name.","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"     * @param nric A valid nric.","lastModifiedDate":"2024-03-15"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"    public IdentificationInformation(Name name, Nric nric) {","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"     * Constructs a {@code IdentificationInformation}.","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"     * @param name A valid name.","lastModifiedDate":"2024-03-15"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"     * @param nric A valid nric.","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"    public IdentificationInformation(String name, String nric) {","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"     * Returns true if a given info is a valid IdentificationInformation.","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"    public static boolean isValidIdentificationInformation(String nameTest, String nricTest) {","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"        return Name.isValidName(nameTest) \u0026\u0026 Nric.isValidNric(nricTest);","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"    public Name getName() {","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        return name;","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"    public Nric getNric() {","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"        return nric;","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"javierng2knus"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"javierng2knus"},"content":"    public String toString() {","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"        return \"[name\u003d\" + name + \", nric\u003d\" + nric + \"]\";","lastModifiedDate":"2024-03-15"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"javierng2knus"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"javierng2knus"},"content":"            return true;","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"javierng2knus"},"content":"        if (!(other instanceof IdentificationInformation)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"            return false;","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"        IdentificationInformation otherInfo \u003d (IdentificationInformation) other;","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"javierng2knus"},"content":"        return name.equals(otherInfo.name) \u0026\u0026 nric.equals(otherInfo.nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"javierng2knus"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"javierng2knus"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"        return name.hashCode() + nric.hashCode();","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"javierng2knus"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"javierng2knus":73,"MaYuehan":1}},{"path":"src/main/java/vitalconnect/model/person/identificationinformation/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.identificationinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":" * Represents a Person\u0027s name in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!(other instanceof Name)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Name otherName \u003d (Name) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fullName.equals(otherName.fullName);","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":2,"-":63}},{"path":"src/main/java/vitalconnect/model/person/identificationinformation/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.identificationinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.StringUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"                .anyMatch(keyword -\u003e","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"                          StringUtil.containsWordIgnoreCase(person.getIdentificationInformation().getName().fullName,","lastModifiedDate":"2024-03-15"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"                                                            keyword));","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!(other instanceof NameContainsKeywordsPredicate)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d (NameContainsKeywordsPredicate) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"javierng2knus":3,"MaYuehan":4,"-":40}},{"path":"src/main/java/vitalconnect/model/person/identificationinformation/Nric.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.identificationinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":" * Represents a Person\u0027s NRIC in the clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"javierng2knus"},"content":" * Got formula from nric Validation from https://github.com/samliew/singapore-nric/tree/main","lastModifiedDate":"2024-03-15"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"public class Nric {","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"javierng2knus"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[S T F G M]\\\\d{7}\\\\w$\";","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"            \"NRIC is invalid, should be @xxxxxxx# \"","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":"            + \"where @ is a letter that can be S,T,F,G or M and \"","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"            + \"# is the appropriate letter.\";","lastModifiedDate":"2024-03-15"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"    public final String nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"     * Constructs a {@code Nric}.","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"     * @param nric A valid Nric.","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"    public Nric(String nric) {","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-15"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"     * Returns true if a given string is a valid nric.","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"    public static boolean isValidNric(String test) {","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"        if (test.matches(\"test\")) {","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"            return true;","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"        if (!test.matches(VALIDATION_REGEX)) {","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"            return false;","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        String checksumStr \u003d test.substring(1, 8);","lastModifiedDate":"2024-03-15"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"        return isValidChecksum(test.charAt(0), checksumStr, test.charAt(8));","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":50,"author":{"gitId":"javierng2knus"},"content":"     * Returns true if the given char is valid based on the given string and prefix","lastModifiedDate":"2024-03-15"},{"lineNumber":51,"author":{"gitId":"javierng2knus"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"     * @param prefixChar The prefix char to check.","lastModifiedDate":"2024-03-15"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"     * @param checksumStr The checksum string to check.","lastModifiedDate":"2024-03-15"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"     * @param charToCheck The char to check if it is valid.","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"    public static boolean isValidChecksum(char prefixChar, String checksumStr, char charToCheck) {","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"javierng2knus"},"content":"        // Multiply the digits by the appropriate weightage","lastModifiedDate":"2024-03-15"},{"lineNumber":58,"author":{"gitId":"javierng2knus"},"content":"        int total \u003d Character.getNumericValue(checksumStr.charAt(0)) * 2","lastModifiedDate":"2024-03-15"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"                  + Character.getNumericValue(checksumStr.charAt(1)) * 7","lastModifiedDate":"2024-03-15"},{"lineNumber":60,"author":{"gitId":"javierng2knus"},"content":"                  + Character.getNumericValue(checksumStr.charAt(2)) * 6","lastModifiedDate":"2024-03-15"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"                  + Character.getNumericValue(checksumStr.charAt(3)) * 5","lastModifiedDate":"2024-03-15"},{"lineNumber":62,"author":{"gitId":"javierng2knus"},"content":"                  + Character.getNumericValue(checksumStr.charAt(4)) * 4","lastModifiedDate":"2024-03-15"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"                  + Character.getNumericValue(checksumStr.charAt(5)) * 3","lastModifiedDate":"2024-03-15"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"                  + Character.getNumericValue(checksumStr.charAt(6)) * 2;","lastModifiedDate":"2024-03-15"},{"lineNumber":65,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"        // Add the proper offset and set the array (following the checksum algorithm)","lastModifiedDate":"2024-03-15"},{"lineNumber":67,"author":{"gitId":"javierng2knus"},"content":"        char[] checksumResultChar \u003d new char[]{ \u0027J\u0027, \u0027Z\u0027, \u0027I\u0027, \u0027H\u0027, \u0027G\u0027, \u0027F\u0027, \u0027E\u0027, \u0027D\u0027, \u0027C\u0027, \u0027B\u0027, \u0027A\u0027 };","lastModifiedDate":"2024-03-15"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"        switch (prefixChar) {","lastModifiedDate":"2024-03-15"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"        case \u0027S\u0027:","lastModifiedDate":"2024-03-15"},{"lineNumber":70,"author":{"gitId":"javierng2knus"},"content":"            break;","lastModifiedDate":"2024-03-15"},{"lineNumber":71,"author":{"gitId":"javierng2knus"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2024-03-15"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"            total +\u003d 4;","lastModifiedDate":"2024-03-15"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"            break;","lastModifiedDate":"2024-03-15"},{"lineNumber":74,"author":{"gitId":"javierng2knus"},"content":"        case \u0027G\u0027:","lastModifiedDate":"2024-03-15"},{"lineNumber":75,"author":{"gitId":"javierng2knus"},"content":"            total +\u003d 4;","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"            checksumResultChar \u003d new char[]{ \u0027X\u0027, \u0027W\u0027, \u0027U\u0027, \u0027T\u0027, \u0027R\u0027, \u0027Q\u0027, \u0027P\u0027, \u0027N\u0027, \u0027M\u0027, \u0027L\u0027, \u0027K\u0027 };","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"javierng2knus"},"content":"            break;","lastModifiedDate":"2024-03-15"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"        case \u0027F\u0027:","lastModifiedDate":"2024-03-15"},{"lineNumber":79,"author":{"gitId":"javierng2knus"},"content":"            checksumResultChar \u003d new char[]{ \u0027X\u0027, \u0027W\u0027, \u0027U\u0027, \u0027T\u0027, \u0027R\u0027, \u0027Q\u0027, \u0027P\u0027, \u0027N\u0027, \u0027M\u0027, \u0027L\u0027, \u0027K\u0027 };","lastModifiedDate":"2024-03-15"},{"lineNumber":80,"author":{"gitId":"javierng2knus"},"content":"            break;","lastModifiedDate":"2024-03-15"},{"lineNumber":81,"author":{"gitId":"javierng2knus"},"content":"        case \u0027M\u0027:","lastModifiedDate":"2024-03-15"},{"lineNumber":82,"author":{"gitId":"javierng2knus"},"content":"            checksumResultChar \u003d new char[]{ \u0027K\u0027, \u0027L\u0027, \u0027J\u0027, \u0027N\u0027, \u0027P\u0027, \u0027Q\u0027, \u0027R\u0027, \u0027T\u0027, \u0027U\u0027, \u0027W\u0027, \u0027X\u0027 };","lastModifiedDate":"2024-03-15"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"            total +\u003d 3;","lastModifiedDate":"2024-03-15"},{"lineNumber":84,"author":{"gitId":"javierng2knus"},"content":"            break;","lastModifiedDate":"2024-03-15"},{"lineNumber":85,"author":{"gitId":"javierng2knus"},"content":"        default:","lastModifiedDate":"2024-03-15"},{"lineNumber":86,"author":{"gitId":"javierng2knus"},"content":"            break;","lastModifiedDate":"2024-03-15"},{"lineNumber":87,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":88,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"        total %\u003d 11;","lastModifiedDate":"2024-03-15"},{"lineNumber":90,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":91,"author":{"gitId":"javierng2knus"},"content":"        // If M, need to adjust","lastModifiedDate":"2024-03-15"},{"lineNumber":92,"author":{"gitId":"javierng2knus"},"content":"        if (prefixChar \u003d\u003d \u0027M\u0027) {","lastModifiedDate":"2024-03-15"},{"lineNumber":93,"author":{"gitId":"javierng2knus"},"content":"            total \u003d 10 - total;","lastModifiedDate":"2024-03-15"},{"lineNumber":94,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":95,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":96,"author":{"gitId":"javierng2knus"},"content":"        return checksumResultChar[total] \u003d\u003d charToCheck;","lastModifiedDate":"2024-03-15"},{"lineNumber":97,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":98,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"javierng2knus"},"content":"    @Override","lastModifiedDate":"2024-03-15"},{"lineNumber":100,"author":{"gitId":"javierng2knus"},"content":"    public String toString() {","lastModifiedDate":"2024-03-15"},{"lineNumber":101,"author":{"gitId":"javierng2knus"},"content":"        return nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":102,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":103,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":104,"author":{"gitId":"javierng2knus"},"content":"    @Override","lastModifiedDate":"2024-03-15"},{"lineNumber":105,"author":{"gitId":"javierng2knus"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-15"},{"lineNumber":106,"author":{"gitId":"javierng2knus"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-15"},{"lineNumber":107,"author":{"gitId":"javierng2knus"},"content":"            return true;","lastModifiedDate":"2024-03-15"},{"lineNumber":108,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":109,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":110,"author":{"gitId":"javierng2knus"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-15"},{"lineNumber":111,"author":{"gitId":"javierng2knus"},"content":"        if (!(other instanceof Nric)) {","lastModifiedDate":"2024-03-15"},{"lineNumber":112,"author":{"gitId":"javierng2knus"},"content":"            return false;","lastModifiedDate":"2024-03-15"},{"lineNumber":113,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":114,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":115,"author":{"gitId":"javierng2knus"},"content":"        Nric otherNric \u003d (Nric) other;","lastModifiedDate":"2024-03-15"},{"lineNumber":116,"author":{"gitId":"javierng2knus"},"content":"        return nric.equals(otherNric.nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":117,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":118,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":119,"author":{"gitId":"javierng2knus"},"content":"    @Override","lastModifiedDate":"2024-03-15"},{"lineNumber":120,"author":{"gitId":"javierng2knus"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-15"},{"lineNumber":121,"author":{"gitId":"javierng2knus"},"content":"        return nric.hashCode();","lastModifiedDate":"2024-03-15"},{"lineNumber":122,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":123,"author":{"gitId":"javierng2knus"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"javierng2knus":122,"MaYuehan":1}},{"path":"src/main/java/vitalconnect/model/person/medicalinformation/AllergyTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.model.person.medicalinformation;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":" * Represents a AllergyTag in the clinic.","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"public class AllergyTag {","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a {@code AllergyTag}.","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"     * @param tagName A valid allergytag name.","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    public AllergyTag(String tagName) {","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"     * Returns true if a given string is a valid allergytag name.","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"        if (!(other instanceof AllergyTag)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        AllergyTag otherAllergyTag \u003d (AllergyTag) other;","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"        return tagName.equals(otherAllergyTag.tagName);","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"MaYuehan":1,"-":51,"SeaHogs":10}},{"path":"src/main/java/vitalconnect/model/person/medicalinformation/Height.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.model.person.medicalinformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":" * Represents a Person\u0027s name in the clinic.","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"public class Height {","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"            \"Height should only contain alphanumerical measured in cm, and should be bigger than 0\";","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"    /*","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"    public static final String VALIDATION_REGEX \u003d \"[0-9]*\\\\.?[0-9]+\";","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"    public final String value;","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a {@code Height}.","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"     * @param height A valid height.","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"    public Height(String height) {","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(height);","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"        this.value \u003d height;","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"     * Constructs a {@code Height}.","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    public Height() {","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"        this.value \u003d \"\";","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    public static boolean isValidHeight(String test) {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"        if (test.isEmpty()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 Float.parseFloat(test) \u003e 0;","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"        return value;","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"        if (!(other instanceof Height)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"            return false;","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"        Height otherHeight \u003d (Height) other;","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"        return value.equals(otherHeight.value);","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"        return value.isEmpty();","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"        return value.hashCode();","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"Ella-e":7,"SeaHogs":70}},{"path":"src/main/java/vitalconnect/model/person/medicalinformation/MedicalInformation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.model.person.medicalinformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import java.util.HashSet;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import java.util.Set;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":" * Represents the medical information of a person, including height, weight, and allergies.","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"public class MedicalInformation {","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"    private Height height;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"    private Weight weight;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"    private Set\u003cAllergyTag\u003e allergyTag;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a MedicalInformation object with the specified height, weight, and set of allergy tags.","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * @param height      the height of the person","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     * @param weight      the weight of the person","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"     * @param allergyTag  the set of allergy tags associated with the person","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    public MedicalInformation(Height height, Weight weight, Set\u003cAllergyTag\u003e allergyTag) {","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"        this.height \u003d height;","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"        this.allergyTag \u003d allergyTag;","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a MedicalInformation object with the specified height and weight,","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"     * initializing the allergy tags to an empty set.","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"     * @param height  the height of the person","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"     * @param weight  the weight of the person","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"    public MedicalInformation(Height height, Weight weight) {","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        this.height \u003d height;","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"        this.allergyTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"     * Constructs a MedicalInformation object with the specified height and weight,","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"    public MedicalInformation() {","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        this.height \u003d new Height(\"\");","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"        this.weight \u003d new Weight(\"\");","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"        this.allergyTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        return height.isEmpty() \u0026\u0026 weight.isEmpty() \u0026\u0026 allergyTag.isEmpty();","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"     * Gets the height of the person.","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"     * @return the height of the person","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"    public Height getHeight() {","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"        return height;","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"     * Gets the weight of the person.","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"     * @return the weight of the person","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"    public Weight getWeight() {","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"        return weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"     * Gets an unmodifiable set of allergy tags associated with the person.","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"     * @return an unmodifiable set of allergy tags","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"    public Set\u003cAllergyTag\u003e getAllergyTag() {","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"        return Collections.unmodifiableSet(allergyTag);","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"    public void setHeight(Height height) {","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"        this.height \u003d height;","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"    public void setWeight(Weight weight) {","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"    public void setAllergyTag(Set\u003cAllergyTag\u003e allergyTag) {","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"        this.allergyTag \u003d allergyTag;","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"SeaHogs"},"content":"    public void appendAllergyTag(AllergyTag allergyTag) {","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"SeaHogs"},"content":"        this.allergyTag.add(allergyTag);","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":97,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":98,"author":{"gitId":"SeaHogs"},"content":"     * Returns a string representation of the MedicalInformation object.","lastModifiedDate":"2024-03-18"},{"lineNumber":99,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":100,"author":{"gitId":"SeaHogs"},"content":"     * @return a string representation of the object","lastModifiedDate":"2024-03-18"},{"lineNumber":101,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":102,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":103,"author":{"gitId":"SeaHogs"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"SeaHogs"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"javierng2knus"},"content":"        builder.append(\" Height: \").append(getHeight()).append(\"cm\")","lastModifiedDate":"2024-03-21"},{"lineNumber":106,"author":{"gitId":"javierng2knus"},"content":"               .append(\"\\n Weight: \").append(getWeight()).append(\"kg\");","lastModifiedDate":"2024-03-21"},{"lineNumber":107,"author":{"gitId":"SeaHogs"},"content":"        return builder.toString();","lastModifiedDate":"2024-03-18"},{"lineNumber":108,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"SeaHogs"},"content":"     * Checks if this MedicalInformation object is equal to another object.","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"SeaHogs"},"content":"     * @param other the object to compare","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"SeaHogs"},"content":"     * @return true if the objects are equal, false otherwise","lastModifiedDate":"2024-03-18"},{"lineNumber":115,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":117,"author":{"gitId":"SeaHogs"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-18"},{"lineNumber":118,"author":{"gitId":"SeaHogs"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-18"},{"lineNumber":119,"author":{"gitId":"SeaHogs"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":120,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":121,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":122,"author":{"gitId":"SeaHogs"},"content":"        if (!(other instanceof MedicalInformation)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":123,"author":{"gitId":"SeaHogs"},"content":"            return false;","lastModifiedDate":"2024-03-18"},{"lineNumber":124,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":125,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":126,"author":{"gitId":"SeaHogs"},"content":"        MedicalInformation otherInfo \u003d (MedicalInformation) other;","lastModifiedDate":"2024-03-18"},{"lineNumber":127,"author":{"gitId":"SeaHogs"},"content":"        return height.equals(otherInfo.height) \u0026\u0026 weight.equals(otherInfo.weight)","lastModifiedDate":"2024-03-18"},{"lineNumber":128,"author":{"gitId":"SeaHogs"},"content":"                \u0026\u0026 allergyTag.equals(otherInfo.allergyTag);","lastModifiedDate":"2024-03-18"},{"lineNumber":129,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":130,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":131,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":132,"author":{"gitId":"SeaHogs"},"content":"     * Generates a hash code for the MedicalInformation object.","lastModifiedDate":"2024-03-18"},{"lineNumber":133,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":134,"author":{"gitId":"SeaHogs"},"content":"     * @return the hash code value for this object","lastModifiedDate":"2024-03-18"},{"lineNumber":135,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":136,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":137,"author":{"gitId":"SeaHogs"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-18"},{"lineNumber":138,"author":{"gitId":"SeaHogs"},"content":"        return this.toString().hashCode();","lastModifiedDate":"2024-03-18"},{"lineNumber":139,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":140,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":141,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"javierng2knus":2,"Ella-e":16,"SeaHogs":123}},{"path":"src/main/java/vitalconnect/model/person/medicalinformation/Weight.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.model.person.medicalinformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":" * Represents a Person\u0027s name in the clinic.","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"public class Weight {","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"            \"Weight should only contain alphanumerical measured in kg, and should be bigger than 0\";","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"    /*","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"    public static final String VALIDATION_REGEX \u003d \"[0-9]*\\\\.?[0-9]+\";","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"    public final String value;","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a {@code Height}.","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"     * @param weight A valid weight.","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"    public Weight(String weight) {","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"        requireNonNull(weight);","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"        this.value \u003d weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    public Weight() {","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        this.value \u003d \"\";","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    public boolean isEmtpy() {","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"        return value.isEmpty();","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"     * Returns true if a given string is a valid weight.","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    public static boolean isValidWeight(String test) {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"        if (test.isEmpty()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 Float.parseFloat(test) \u003e 0;","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"        return value;","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"        if (!(other instanceof Weight)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"            return false;","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"        Weight otherWeight \u003d (Weight) other;","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"        return value.equals(otherWeight.value);","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"        return value.hashCode();","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"        return value.isEmpty();","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"Ella-e":7,"SeaHogs":71}},{"path":"src/main/java/vitalconnect/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.IdentificationInformation;","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":" * Contains utility methods for populating {@code Clinic} with sample data.","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"            new Person(new IdentificationInformation(new Name(\"Alex Yeoh\"), new Nric(\"G7654321L\"))),","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"            new Person(new IdentificationInformation(new Name(\"Bernice Yu\"), new Nric(\"M7654321J\")))","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"    public static ReadOnlyClinic getSampleClinic() {","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"        Clinic sampleAb \u003d new Clinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"     * Returns a allergytag set containing the list of strings given.","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"    public static Set\u003cAllergyTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"                .map(AllergyTag::new)","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"javierng2knus":5,"MaYuehan":5,"-":27,"SeaHogs":6}},{"path":"src/main/java/vitalconnect/storage/AppointmentStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-23"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":" * Represents the storage for appointment data.","lastModifiedDate":"2024-03-23"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"public interface AppointmentStorage {","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"     * Returns the file path of the appointment data file.","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"     * @return The path to the appointment data file.","lastModifiedDate":"2024-03-23"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"    Path getAppointmentFilePath();","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"     * Reads the appointment data from the default file path.","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"     * @return An {@code Optional} containing a list of {@code Appointment} if the data can be read successfully.","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"     * @throws DataLoadingException If there is an error loading data from the file.","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"    Optional\u003cList\u003cAppointment\u003e\u003e readAppointments() throws DataLoadingException;","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"     * Reads the appointment data from a specified file path.","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"     * @param filePath The path to the appointment data file.","lastModifiedDate":"2024-03-23"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"     * @return An {@code Optional} containing a list of {@code Appointment} if the data can be read successfully.","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"     * @throws DataLoadingException If there is an error loading data from the file.","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    Optional\u003cList\u003cAppointment\u003e\u003e readAppointments(Path filePath) throws DataLoadingException;","lastModifiedDate":"2024-03-23"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"     * Saves the given appointment data to the default file path.","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"     * @param appointments The list of appointments to be saved, which cannot be null.","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"     * @throws IOException If there is an error writing to the file.","lastModifiedDate":"2024-03-23"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"    void saveAppointments(List\u003cAppointment\u003e appointments) throws IOException;","lastModifiedDate":"2024-03-23"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"     * Saves the given appointment data to a specified file path.","lastModifiedDate":"2024-03-23"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"     * @param appointments The list of appointments to be saved, which cannot be null.","lastModifiedDate":"2024-03-23"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"     * @param filePath The path to save the appointment data file.","lastModifiedDate":"2024-03-23"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"     * @throws IOException If there is an error writing to the file.","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"    void saveAppointments(List\u003cAppointment\u003e appointments, Path filePath) throws IOException;","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-23"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"MaYuehan":59}},{"path":"src/main/java/vitalconnect/storage/ClinicStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"javierng2knus"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":" * Represents a storage for {@link vitalconnect.model.Clinic}.","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"public interface ClinicStorage {","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"    Path getClinicFilePath();","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"     * Returns Clinic data as a {@link ReadOnlyClinic}.","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"    Optional\u003cReadOnlyClinic\u003e readClinic() throws DataLoadingException;","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"     * @see #getClinicFilePath()","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"    Optional\u003cReadOnlyClinic\u003e readClinic(Path filePath) throws DataLoadingException;","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"     * Saves the given {@link ReadOnlyClinic} to the storage.","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"     * @param clinic cannot be null.","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"    void saveClinic(ReadOnlyClinic clinic) throws IOException;","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"     * @see #saveClinic(ReadOnlyClinic)","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"    void saveClinic(ReadOnlyClinic clinic, Path filePath) throws IOException;","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"javierng2knus":41,"MaYuehan":4}},{"path":"src/main/java/vitalconnect/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-23"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":" * A Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"    private final String patientName;","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"    private final String patientIc;","lastModifiedDate":"2024-03-23"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"    private final String dateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"    private final String endTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    private int duration \u003d 0;","lastModifiedDate":"2024-03-30"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details.","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"    @JsonCreator","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"patientName\") String patientName,","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"                                  @JsonProperty(\"patientIc\") String patientIc,","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"                                  @JsonProperty(\"dateTime\") String dateTime,","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"                                  @JsonProperty(\"endTime\") String endTime,","lastModifiedDate":"2024-03-30"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"                                  @JsonProperty(\"duration\") int duration) {","lastModifiedDate":"2024-03-30"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        if (patientName \u003d\u003d null || patientIc \u003d\u003d null || dateTime \u003d\u003d null || endTime \u003d\u003d null) {","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"            throw new IllegalArgumentException(\"Missing fields in Appointment data.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"        this.patientName \u003d patientName;","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"        this.patientIc \u003d patientIc;","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-03-30"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2024-03-23"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2024-03-23"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"        patientName \u003d source.getPatientName();","lastModifiedDate":"2024-03-23"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"        patientIc \u003d source.getPatientIc();","lastModifiedDate":"2024-03-23"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"        dateTime \u003d source.getDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-03-23"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"        endTime \u003d source.getEndDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        duration \u003d source.getDuration();","lastModifiedDate":"2024-03-30"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment.","lastModifiedDate":"2024-03-23"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-23"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"        if (patientName \u003d\u003d null || patientIc \u003d\u003d null || dateTime \u003d\u003d null || endTime \u003d\u003d null) {","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"            throw new IllegalValueException(\"Missing fields in Appointment data.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime localDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime localEndDateTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"        try {","lastModifiedDate":"2024-03-23"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-03-23"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"            localEndDateTime \u003d LocalDateTime.parse(endTime, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-23"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"            throw new IllegalValueException(\"Incorrect format for appointment dateTime. Expected dd/MM/yyyy HHmm.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"        return new Appointment(patientName, patientIc, localDateTime, localEndDateTime, duration);","lastModifiedDate":"2024-03-30"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-23"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"MaYuehan":70,"Ella-e":6}},{"path":"src/main/java/vitalconnect/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.IdentificationInformation;","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Height;","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"    private final String nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"    private String email;","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    private String phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    private String address;","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"    private String height;","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    private String weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"    private final List\u003cJsonAdaptedTag\u003e allergyTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"nric\") String nric,","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"                             @JsonProperty(\"address\") String address, @JsonProperty(\"height\") String height,","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"                             @JsonProperty(\"weight\") String weight,","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e allergyTags) {","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        this.address \u003d address;","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"        this.height \u003d height;","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        if (allergyTags !\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"            this.allergyTags.addAll(allergyTags);","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"        name \u003d source.getIdentificationInformation().getName().fullName;","lastModifiedDate":"2024-03-15"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"        nric \u003d source.getIdentificationInformation().getNric().nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"        email \u003d source.getContactInformation().getEmail().value;","lastModifiedDate":"2024-03-17"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"        phone \u003d source.getContactInformation().getPhone().value;","lastModifiedDate":"2024-03-17"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"        address \u003d source.getContactInformation().getAddress().value;","lastModifiedDate":"2024-03-17"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"        height \u003d source.getMedicalInformation().getHeight().value;","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"        weight \u003d source.getMedicalInformation().getWeight().value;","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"        allergyTags.addAll(source.getMedicalInformation().getAllergyTag().stream()","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"        final List\u003cAllergyTag\u003e personAllergyTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"        for (JsonAdaptedTag tag : allergyTags) {","lastModifiedDate":"2024-03-18"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"            personAllergyTags.add(tag.toModelType());","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"javierng2knus"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2024-03-15"},{"lineNumber":100,"author":{"gitId":"javierng2knus"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2024-03-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"javierng2knus"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2024-03-15"},{"lineNumber":103,"author":{"gitId":"javierng2knus"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"javierng2knus"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2024-03-17"},{"lineNumber":108,"author":{"gitId":"Ella-e"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2024-03-17"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2024-03-17"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2024-03-17"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2024-03-17"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":121,"author":{"gitId":"Ella-e"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2024-03-17"},{"lineNumber":122,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":123,"author":{"gitId":"Ella-e"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2024-03-17"},{"lineNumber":124,"author":{"gitId":"Ella-e"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2024-03-17"},{"lineNumber":125,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":126,"author":{"gitId":"Ella-e"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":127,"author":{"gitId":"Ella-e"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":128,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":129,"author":{"gitId":"Ella-e"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2024-03-17"},{"lineNumber":130,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":131,"author":{"gitId":"Ella-e"},"content":"        final ContactInformation contactInformation \u003d new ContactInformation(modelEmail, modelPhone, modelAddress);","lastModifiedDate":"2024-03-17"},{"lineNumber":132,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":133,"author":{"gitId":"SeaHogs"},"content":"        if (height \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":134,"author":{"gitId":"SeaHogs"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName()));","lastModifiedDate":"2024-03-18"},{"lineNumber":135,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":136,"author":{"gitId":"SeaHogs"},"content":"        if (!Height.isValidHeight(height)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":137,"author":{"gitId":"SeaHogs"},"content":"            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"SeaHogs"},"content":"        final Height modelHeight \u003d new Height(height);","lastModifiedDate":"2024-03-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"SeaHogs"},"content":"        if (weight \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":142,"author":{"gitId":"SeaHogs"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Weight.class.getSimpleName()));","lastModifiedDate":"2024-03-18"},{"lineNumber":143,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":144,"author":{"gitId":"SeaHogs"},"content":"        if (!Weight.isValidWeight(weight)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":145,"author":{"gitId":"SeaHogs"},"content":"            throw new IllegalValueException(Weight.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":146,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":147,"author":{"gitId":"SeaHogs"},"content":"        final Weight modelWeight \u003d new Weight(weight);","lastModifiedDate":"2024-03-18"},{"lineNumber":148,"author":{"gitId":"SeaHogs"},"content":"        final Set\u003cAllergyTag\u003e modelAllergyTags \u003d new HashSet\u003c\u003e(personAllergyTags);","lastModifiedDate":"2024-03-18"},{"lineNumber":149,"author":{"gitId":"SeaHogs"},"content":"        final MedicalInformation medicalInformation \u003d new MedicalInformation(modelHeight,","lastModifiedDate":"2024-03-18"},{"lineNumber":150,"author":{"gitId":"SeaHogs"},"content":"                modelWeight, modelAllergyTags);","lastModifiedDate":"2024-03-18"},{"lineNumber":151,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":152,"author":{"gitId":"SeaHogs"},"content":"        return new Person(new IdentificationInformation(modelName, modelNric), contactInformation, medicalInformation);","lastModifiedDate":"2024-03-18"},{"lineNumber":153,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"javierng2knus":12,"MaYuehan":4,"Ella-e":41,"-":58,"SeaHogs":39}},{"path":"src/main/java/vitalconnect/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":" * Jackson-friendly version of {@link AllergyTag}.","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"     * Converts a given {@code AllergyTag} into this class for Jackson use.","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"    public JsonAdaptedTag(AllergyTag source) {","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"     * Converts this Jackson-friendly adapted allergytag object into the model\u0027s {@code AllergyTag} object.","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted allergytag.","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"    public AllergyTag toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"        if (!AllergyTag.isValidTagName(tagName)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"            throw new IllegalValueException(AllergyTag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"        return new AllergyTag(tagName);","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"MaYuehan":2,"-":36,"SeaHogs":10}},{"path":"src/main/java/vitalconnect/storage/JsonAppointmentStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-23"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-23"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.JsonUtil;","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":" * A class to access Appointment data stored as a JSON file on the hard disk.","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-23"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"public class JsonAppointmentStorage implements AppointmentStorage {","lastModifiedDate":"2024-03-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"    private final Path filePath;","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"     * Constructs a {@code JsonAppointmentStorage} with the given file path.","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"     * @param filePath Path to the file where appointment data is stored.","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"    public JsonAppointmentStorage(Path filePath) {","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"     * Returns the file path where the appointment data is stored.","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"     * @return The file path of the appointment data.","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    public Path getAppointmentFilePath() {","lastModifiedDate":"2024-03-23"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"        return filePath;","lastModifiedDate":"2024-03-23"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"     * Reads the appointment data from the default storage file.","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"     * @return An {@code Optional} contain a list of appointments if file exists, or {@code Optional.empty()} otherwise.","lastModifiedDate":"2024-03-23"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"     * @throws DataLoadingException If there is an error reading from the file.","lastModifiedDate":"2024-03-23"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"    public Optional\u003cList\u003cAppointment\u003e\u003e readAppointments() throws DataLoadingException {","lastModifiedDate":"2024-03-23"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"        return readAppointments(filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"     * Reads the appointment data from a specified file path.","lastModifiedDate":"2024-03-23"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"     * @param filePath Path to the file from which appointment data should be read.","lastModifiedDate":"2024-03-23"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"     * @return An {@code Optional} contain a list of appointments if file exists or {@code Optional.empty()} otherwise.","lastModifiedDate":"2024-03-23"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"     * @throws DataLoadingException If there is an error reading from the file.","lastModifiedDate":"2024-03-23"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"    public Optional\u003cList\u003cAppointment\u003e\u003e readAppointments(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-23"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"        Optional\u003cJsonSerializableAppointment\u003e jsonAppointment \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2024-03-23"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"                filePath, JsonSerializableAppointment.class);","lastModifiedDate":"2024-03-23"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"        if (!jsonAppointment.isPresent()) {","lastModifiedDate":"2024-03-23"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"            return Optional.empty();","lastModifiedDate":"2024-03-23"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"        try {","lastModifiedDate":"2024-03-23"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"            return Optional.of(jsonAppointment.get().toModelType());","lastModifiedDate":"2024-03-23"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2024-03-23"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2024-03-23"},{"lineNumber":73,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":77,"author":{"gitId":"MaYuehan"},"content":"     * Saves the provided list of appointments to the default storage file.","lastModifiedDate":"2024-03-23"},{"lineNumber":78,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":79,"author":{"gitId":"MaYuehan"},"content":"     * @param appointments The list of appointments to save.","lastModifiedDate":"2024-03-23"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"     * @throws IOException If there is an error writing to the file.","lastModifiedDate":"2024-03-23"},{"lineNumber":81,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":82,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":83,"author":{"gitId":"MaYuehan"},"content":"    public void saveAppointments(List\u003cAppointment\u003e appointments) throws IOException {","lastModifiedDate":"2024-03-23"},{"lineNumber":84,"author":{"gitId":"MaYuehan"},"content":"        saveAppointments(appointments, filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":85,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":86,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":87,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":88,"author":{"gitId":"MaYuehan"},"content":"     * Saves the provided list of appointments to a specified file path.","lastModifiedDate":"2024-03-23"},{"lineNumber":89,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":90,"author":{"gitId":"MaYuehan"},"content":"     * @param appointments The list of appointments to save.","lastModifiedDate":"2024-03-23"},{"lineNumber":91,"author":{"gitId":"MaYuehan"},"content":"     * @param filePath Path to the file where appointment data should be saved.","lastModifiedDate":"2024-03-23"},{"lineNumber":92,"author":{"gitId":"MaYuehan"},"content":"     * @throws IOException If there is an error writing to the file.","lastModifiedDate":"2024-03-23"},{"lineNumber":93,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"    public void saveAppointments(List\u003cAppointment\u003e appointments, Path filePath) throws IOException {","lastModifiedDate":"2024-03-23"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"        requireNonNull(appointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"        List\u003cJsonAdaptedAppointment\u003e jsonAdaptedAppointments \u003d appointments.stream()","lastModifiedDate":"2024-03-23"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"                .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2024-03-23"},{"lineNumber":101,"author":{"gitId":"MaYuehan"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2024-03-23"},{"lineNumber":102,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAppointment(jsonAdaptedAppointments), filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"MaYuehan":105}},{"path":"src/main/java/vitalconnect/storage/JsonClinicStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.FileUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.JsonUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":" * A class to access Clinic data stored as a json file on the hard disk.","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"public class JsonClinicStorage implements ClinicStorage {","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonClinicStorage.class);","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"    public JsonClinicStorage(Path filePath) {","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"    public Path getClinicFilePath() {","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"    public Optional\u003cReadOnlyClinic\u003e readClinic() throws DataLoadingException {","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"        return readClinic(filePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"     * Similar to {@link #readClinic()}.","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"    public Optional\u003cReadOnlyClinic\u003e readClinic(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"        Optional\u003cJsonSerializableClinic\u003e jsonClinic \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"                filePath, JsonSerializableClinic.class);","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"javierng2knus"},"content":"        if (!jsonClinic.isPresent()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"            return Optional.of(jsonClinic.get().toModelType());","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2023-06-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"    public void saveClinic(ReadOnlyClinic clinic) throws IOException {","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"        saveClinic(clinic, filePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"     * Similar to {@link #saveClinic(ReadOnlyClinic)}.","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"    public void saveClinic(ReadOnlyClinic clinic, Path filePath) throws IOException {","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"        requireNonNull(clinic);","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"javierng2knus"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableClinic(clinic), filePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"javierng2knus":19,"MaYuehan":7,"-":54}},{"path":"src/main/java/vitalconnect/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":" * An Immutable Clinic that is serializable to JSON format.","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"@JsonRootName(value \u003d \"clinic\")","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"class JsonSerializableClinic {","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"     * Constructs a {@code JsonSerializableClinic} with the given persons.","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"    public JsonSerializableClinic(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"     * Converts a given {@code ReadOnlyClinic} into this class for Jackson use.","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableClinic}.","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"    public JsonSerializableClinic(ReadOnlyClinic source) {","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"     * Converts this clinic into the model\u0027s {@code Clinic} object.","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"    public Clinic toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"        Clinic clinic \u003d new Clinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"            if (clinic.hasPerson(person)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"            clinic.addPerson(person);","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"javierng2knus"},"content":"        return clinic;","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"javierng2knus":14,"MaYuehan":5,"-":41}},{"path":"src/main/java/vitalconnect/storage/JsonSerializableAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-23"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":" * Represents a list of appointments that can be serialized into JSON format. This class provides a convenient way","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":" * to convert between a list of {@code Appointment} objects and their JSON representation, which can be used for","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":" * persistent storage.","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"class JsonSerializableAppointment {","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"    private List\u003cJsonAdaptedAppointment\u003e appointments;","lastModifiedDate":"2024-03-23"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"     * Constructs a {@code JsonSerializableAppointment} with the given list of {@code JsonAdaptedAppointment}.","lastModifiedDate":"2024-03-23"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"     * @param appointments A list of {@code JsonAdaptedAppointment} which is a JSON-friendly representation of","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"     *                     appointments.","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"    @JsonCreator","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"    public JsonSerializableAppointment(@JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"        this.appointments \u003d new ArrayList\u003c\u003e(appointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"     * Converts this JSON-friendly adapted appointment list into the model\u0027s {@code Appointment} list.","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-23"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"     * @return A list containing the {@code Appointment} objects corresponding to this JSON-friendly list.","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"     * @throws IllegalValueException If any data constraints are violated in the adapted appointments.","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    public List\u003cAppointment\u003e toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-23"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-23"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"            appointmentList.add(appointment);","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"        return appointmentList;","lastModifiedDate":"2024-03-23"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-23"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"MaYuehan":48}},{"path":"src/main/java/vitalconnect/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.JsonUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if the file format is not as expected.","lastModifiedDate":"2023-06-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"MaYuehan":5,"-":42}},{"path":"src/main/java/vitalconnect/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"public interface Storage extends ClinicStorage, UserPrefsStorage, AppointmentStorage {","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"    Path getClinicFilePath();","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"    Optional\u003cReadOnlyClinic\u003e readClinic() throws DataLoadingException;","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"    void saveClinic(ReadOnlyClinic clinic) throws IOException;","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    Path getAppointmentFilePath();","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"    Optional\u003cList\u003cAppointment\u003e\u003e readAppointments() throws DataLoadingException;","lastModifiedDate":"2024-03-23"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"    void saveAppointments(List\u003cAppointment\u003e appointments) throws IOException;","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"javierng2knus":3,"MaYuehan":18,"-":23}},{"path":"src/main/java/vitalconnect/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":" * Manages storage of Clinic data in local storage.","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"    private ClinicStorage clinicStorage;","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"    private AppointmentStorage appointmentStorage;","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"     * Creates a {@code StorageManager} with the given {@code ClinicStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"    public StorageManager(ClinicStorage clinicStorage, UserPrefsStorage userPrefsStorage,","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"                          AppointmentStorage appointmentStorage) {","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"        this.clinicStorage \u003d clinicStorage;","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        this.appointmentStorage \u003d appointmentStorage;","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Clinic methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"javierng2knus"},"content":"    public Path getClinicFilePath() {","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"javierng2knus"},"content":"        return clinicStorage.getClinicFilePath();","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"javierng2knus"},"content":"    public Optional\u003cReadOnlyClinic\u003e readClinic() throws DataLoadingException {","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"        return readClinic(clinicStorage.getClinicFilePath());","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"javierng2knus"},"content":"    public Optional\u003cReadOnlyClinic\u003e readClinic(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"        return clinicStorage.readClinic(filePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"    public void saveClinic(ReadOnlyClinic clinic) throws IOException {","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"javierng2knus"},"content":"        saveClinic(clinic, clinicStorage.getClinicFilePath());","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"    public void saveClinic(ReadOnlyClinic clinic, Path filePath) throws IOException {","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"javierng2knus"},"content":"        clinicStorage.saveClinic(clinic, filePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"MaYuehan"},"content":"    // Appointment methods","lastModifiedDate":"2024-03-23"},{"lineNumber":84,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":85,"author":{"gitId":"MaYuehan"},"content":"    public Path getAppointmentFilePath() {","lastModifiedDate":"2024-03-23"},{"lineNumber":86,"author":{"gitId":"MaYuehan"},"content":"        return appointmentStorage.getAppointmentFilePath();","lastModifiedDate":"2024-03-23"},{"lineNumber":87,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":88,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":89,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":90,"author":{"gitId":"MaYuehan"},"content":"    public Optional\u003cList\u003cAppointment\u003e\u003e readAppointments() throws DataLoadingException {","lastModifiedDate":"2024-03-23"},{"lineNumber":91,"author":{"gitId":"MaYuehan"},"content":"        return appointmentStorage.readAppointments();","lastModifiedDate":"2024-03-23"},{"lineNumber":92,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":93,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"    public Optional\u003cList\u003cAppointment\u003e\u003e readAppointments(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-23"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"        return appointmentStorage.readAppointments(filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":101,"author":{"gitId":"MaYuehan"},"content":"    public void saveAppointments(List\u003cAppointment\u003e appointments) throws IOException {","lastModifiedDate":"2024-03-23"},{"lineNumber":102,"author":{"gitId":"MaYuehan"},"content":"        appointmentStorage.saveAppointments(appointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"        saveAppointments(appointments, appointmentStorage.getAppointmentFilePath());","lastModifiedDate":"2024-03-23"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"    @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"    public void saveAppointments(List\u003cAppointment\u003e appointments, Path filePath) throws IOException {","lastModifiedDate":"2024-03-23"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"        appointmentStorage.saveAppointments(appointments, filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":112,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":113,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"javierng2knus":15,"MaYuehan":43,"-":56}},{"path":"src/main/java/vitalconnect/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":" * Represents a storage for {@link vitalconnect.model.UserPrefs}.","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if the loading of data from preference file failed.","lastModifiedDate":"2023-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"     * Saves the given {@link vitalconnect.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"MaYuehan":6,"-":30}},{"path":"src/main/java/vitalconnect/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":" * A UI component that displays information of an {@code Appointment}.","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":" * This component is used to display the details of an appointment in the UI, specifically","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":" * in a list view where each appointment is represented as a card. Each card shows the","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":" * patient\u0027s name and the appointment time, formatted according to the specified pattern.","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"    public final Appointment appointment;","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"    @FXML","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"    private HBox cardPane;","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"    @FXML","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"    private Label name;","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"    @FXML","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"    private Label ic;","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"    @FXML","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"    private Label id;","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    @FXML","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"    private Label time;","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"    @FXML","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"    private Label endTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"     * Creates an {@code AppointmentCard} with the given {@code Appointment} and index to display.","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"     * @param appointment The appointment object containing the data to be displayed on the card.","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"     * @param displayedIndex The index of the appointment in the list, which is used for displaying","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"     *                       the appointment number on the card.","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"        super(FXML);","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"        name.setText(appointment.getPatientName());","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"        ic.setText(appointment.getPatientIc());","lastModifiedDate":"2024-03-23"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\");","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"        time.setText(appointment.getDateTime().format(formatter));","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"        endTime.setText(appointment.getEndDateTime().format(formatter));","lastModifiedDate":"2024-03-28"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"    public Label getName() {","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"        return this.name;","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"    public Label getIc() {","lastModifiedDate":"2024-03-23"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"        return this.ic;","lastModifiedDate":"2024-03-23"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"    public Label getId() {","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"        return this.id;","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"    public Label getTime() {","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"        return this.time;","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"    public Label getEndTime() {","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"        return this.endTime;","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-17"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"MaYuehan":72}},{"path":"src/main/java/vitalconnect/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":" * A UI component that displays a list of {@code Appointment} objects.","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":" * This component is responsible for rendering the appointments in the UI,","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":" * with each appointment represented as an individual card within a list view.","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":" * It uses {@code AppointmentCard} to visually represent each appointment\u0027s data.","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"    @FXML","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"     * Creates an {@code AppointmentListPanel} with the given list of appointments.","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"     *","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"     * @param appointmentList An ObservableList of appointments to be displayed in the panel.","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        super(FXML);","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"     * Custom {@code ListCell} that displays the graphics of an {@code Appointment} using an {@code AppointmentCard}.","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"                setGraphic(null);","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"                setText(null);","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"            } else {","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"            }","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"MaYuehan":56}},{"path":"src/main/java/vitalconnect/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.CommandResult;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"         * @see vitalconnect.logic.Logic#execute(String)","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"MaYuehan":5,"-":80}},{"path":"src/main/java/vitalconnect/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2324s2-cs2103t-w08-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":2,"-":99}},{"path":"src/main/java/vitalconnect/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Logic;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.CommandResult;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"    private AppointmentListPanel appointmentListPanel;","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"    @FXML","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"    private StackPane appointmentListPanelPlaceholder;","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"MaYuehan"},"content":"        // Initialize AppointmentListPanel but don\u0027t add it to the placeholder yet","lastModifiedDate":"2024-03-17"},{"lineNumber":120,"author":{"gitId":"MaYuehan"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());","lastModifiedDate":"2024-03-17"},{"lineNumber":121,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"javierng2knus"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getClinicFilePath());","lastModifiedDate":"2024-03-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":133,"author":{"gitId":"MaYuehan"},"content":"     * Switches the displayed list in the main window to show the appointment list.","lastModifiedDate":"2024-03-17"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"     * This method clears any current content in the placeholder and then loads the appointment list view.","lastModifiedDate":"2024-03-17"},{"lineNumber":135,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":136,"author":{"gitId":"MaYuehan"},"content":"    public void showAppointmentList() {","lastModifiedDate":"2024-03-17"},{"lineNumber":137,"author":{"gitId":"MaYuehan"},"content":"        personListPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2024-03-17"},{"lineNumber":138,"author":{"gitId":"MaYuehan"},"content":"        personListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2024-03-17"},{"lineNumber":139,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":140,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":141,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":142,"author":{"gitId":"MaYuehan"},"content":"     * Switches the displayed list in the main window to show the person list.","lastModifiedDate":"2024-03-17"},{"lineNumber":143,"author":{"gitId":"MaYuehan"},"content":"     * This method clears any current content in the placeholder and then loads the person list view.","lastModifiedDate":"2024-03-17"},{"lineNumber":144,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":145,"author":{"gitId":"MaYuehan"},"content":"    public void showPersonList() {","lastModifiedDate":"2024-03-17"},{"lineNumber":146,"author":{"gitId":"MaYuehan"},"content":"        personListPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2024-03-17"},{"lineNumber":147,"author":{"gitId":"MaYuehan"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2024-03-17"},{"lineNumber":148,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":149,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":150,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"MaYuehan"},"content":"     * Executes the given command string and updates the UI based on the result of the command.","lastModifiedDate":"2024-03-17"},{"lineNumber":197,"author":{"gitId":"MaYuehan"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":198,"author":{"gitId":"MaYuehan"},"content":"     * This method uses the {@code Logic} component to execute the command and obtain a {@code CommandResult},","lastModifiedDate":"2024-03-17"},{"lineNumber":199,"author":{"gitId":"MaYuehan"},"content":"     * then updates the {@code ResultDisplay} with feedback from the command. Based on the type of the","lastModifiedDate":"2024-03-17"},{"lineNumber":200,"author":{"gitId":"MaYuehan"},"content":"     * {@code CommandResult}, it switches the view between the person list and the appointment list. It also","lastModifiedDate":"2024-03-17"},{"lineNumber":201,"author":{"gitId":"MaYuehan"},"content":"     * handles the display of help and exit commands.","lastModifiedDate":"2024-03-17"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"MaYuehan"},"content":"     * @param commandText The command string to be executed.","lastModifiedDate":"2024-03-17"},{"lineNumber":204,"author":{"gitId":"MaYuehan"},"content":"     * @return The result of the command execution.","lastModifiedDate":"2024-03-17"},{"lineNumber":205,"author":{"gitId":"MaYuehan"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2024-03-17"},{"lineNumber":206,"author":{"gitId":"MaYuehan"},"content":"     * @throws ParseException If an error occurs during parsing of the command string.","lastModifiedDate":"2024-03-17"},{"lineNumber":207,"author":{"gitId":"MaYuehan"},"content":"     * @see vitalconnect.logic.Logic#execute(String)","lastModifiedDate":"2024-03-13"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"MaYuehan"},"content":"            switch (commandResult.getType()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":216,"author":{"gitId":"MaYuehan"},"content":"            case SHOW_PERSONS:","lastModifiedDate":"2024-03-17"},{"lineNumber":217,"author":{"gitId":"MaYuehan"},"content":"                showPersonList();","lastModifiedDate":"2024-03-17"},{"lineNumber":218,"author":{"gitId":"MaYuehan"},"content":"                break;","lastModifiedDate":"2024-03-17"},{"lineNumber":219,"author":{"gitId":"MaYuehan"},"content":"            case SHOW_APPOINTMENTS:","lastModifiedDate":"2024-03-17"},{"lineNumber":220,"author":{"gitId":"MaYuehan"},"content":"                showAppointmentList();","lastModifiedDate":"2024-03-17"},{"lineNumber":221,"author":{"gitId":"MaYuehan"},"content":"                break;","lastModifiedDate":"2024-03-17"},{"lineNumber":222,"author":{"gitId":"MaYuehan"},"content":"            default:","lastModifiedDate":"2024-03-17"},{"lineNumber":223,"author":{"gitId":"MaYuehan"},"content":"                showPersonList();","lastModifiedDate":"2024-03-17"},{"lineNumber":224,"author":{"gitId":"MaYuehan"},"content":"            }","lastModifiedDate":"2024-03-17"},{"lineNumber":225,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":241,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":243,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":244,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":57,"-":186}},{"path":"src/main/java/vitalconnect/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Clinic level 4\u003c/a\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"    private Label nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"    @FXML","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"    private Label contactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    @FXML","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"    private Label medicalInformation;","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"    @FXML","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"    private Label allergy;","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        ContactInformation ci \u003d person.getContactInformation();","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"        MedicalInformation mi \u003d person.getMedicalInformation();","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        String contactInformationText \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"        if (!ci.isEmptyContact()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"            contactInformationText \u003d ci.toString();","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"        String medicalInformationText \u003d \"\";","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"        if (!mi.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"            medicalInformationText \u003d mi.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"        name.setText(person.getIdentificationInformation().getName().fullName);","lastModifiedDate":"2024-03-15"},{"lineNumber":67,"author":{"gitId":"javierng2knus"},"content":"        nric.setText(person.getIdentificationInformation().getNric().nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"        contactInformation.setText(contactInformationText);","lastModifiedDate":"2024-03-17"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"        medicalInformation.setText(medicalInformationText);","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"        // Set allergy label visibility based on medical information and allergy tags","lastModifiedDate":"2024-03-23"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"        if (!mi.isEmpty() \u0026\u0026 !mi.getAllergyTag().isEmpty()) {","lastModifiedDate":"2024-03-23"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"            allergy.setVisible(true);","lastModifiedDate":"2024-03-23"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"            allergy.setText(\"Allergic to: \");","lastModifiedDate":"2024-03-23"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"            mi.getAllergyTag().stream()","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"        } else {","lastModifiedDate":"2024-03-23"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"            allergy.setVisible(false);","lastModifiedDate":"2024-03-23"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"            allergy.setText(\"\");","lastModifiedDate":"2024-03-23"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"javierng2knus":4,"MaYuehan":2,"Ella-e":11,"-":42,"SeaHogs":26}},{"path":"src/main/java/vitalconnect/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"MaYuehan":2,"-":43}},{"path":"src/main/java/vitalconnect/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"MaYuehan":1,"-":27}},{"path":"src/main/java/vitalconnect/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":1,"-":27}},{"path":"src/main/java/vitalconnect/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"MaYuehan":1,"-":12}},{"path":"src/main/java/vitalconnect/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.MainApp;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.LogsCenter;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.StringUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Logic;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"MaYuehan":5,"-":83}},{"path":"src/main/java/vitalconnect/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.MainApp;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"MaYuehan":2,"-":86}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"200\" /\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"            \u003cLabel fx:id\u003d\"ic\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ic\" /\u003e","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"            \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"MaYuehan":38}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"    \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"MaYuehan":9}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#def3fc, 20%);","lastModifiedDate":"2024-03-30"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"    background-color: #def3fc; /* Used in the default.html file */","lastModifiedDate":"2024-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #c9efff;","lastModifiedDate":"2024-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"    -fx-base: #c9efff;","lastModifiedDate":"2024-03-30"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"    -fx-control-inner-background: #f7fbfc;","lastModifiedDate":"2024-03-30"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #f7fbfc;","lastModifiedDate":"2024-03-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: white;","lastModifiedDate":"2024-03-30"},{"lineNumber":81,"author":{"gitId":"MaYuehan"},"content":"    -fx-border-color: transparent transparent transparent white;","lastModifiedDate":"2024-03-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 35%);","lastModifiedDate":"2024-03-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 35%);","lastModifiedDate":"2024-03-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #e1f4fc;","lastModifiedDate":"2024-03-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #c8ebfa;","lastModifiedDate":"2024-03-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #f0f1fc;","lastModifiedDate":"2024-03-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":136,"author":{"gitId":"MaYuehan"},"content":"     -fx-background-color: derive(#e6f5fc, 35%);","lastModifiedDate":"2024-03-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"MaYuehan"},"content":"     -fx-background-color: derive(#e6f5fc, 35%);","lastModifiedDate":"2024-03-30"},{"lineNumber":141,"author":{"gitId":"MaYuehan"},"content":"     -fx-border-color: derive(#e6f5fc, 35%);","lastModifiedDate":"2024-03-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 35%);","lastModifiedDate":"2024-03-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":157,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d !important;","lastModifiedDate":"2024-03-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":162,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#010b4d, 30%);","lastModifiedDate":"2024-03-30"},{"lineNumber":169,"author":{"gitId":"MaYuehan"},"content":"    -fx-border-color: derive(#010b4d, 25%);","lastModifiedDate":"2024-03-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 30%);","lastModifiedDate":"2024-03-30"},{"lineNumber":179,"author":{"gitId":"MaYuehan"},"content":"    -fx-border-color: derive(#e6f5fc, 30%);","lastModifiedDate":"2024-03-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":184,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 30%);","lastModifiedDate":"2024-03-30"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 35%);","lastModifiedDate":"2024-03-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#f7fbfc, 20%);","lastModifiedDate":"2024-03-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":202,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"MaYuehan"},"content":"    -fx-border-color: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #e6f5fc;","lastModifiedDate":"2024-03-30"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #e6f5fc;","lastModifiedDate":"2024-03-30"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"MaYuehan"},"content":"  -fx-background-color: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":233,"author":{"gitId":"MaYuehan"},"content":"  -fx-text-fill: #e6f5fc;","lastModifiedDate":"2024-03-30"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #e6f5fc;","lastModifiedDate":"2024-03-30"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 35%);","lastModifiedDate":"2024-03-30"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: #e6f5fc;","lastModifiedDate":"2024-03-30"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 25%);","lastModifiedDate":"2024-03-30"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":285,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#e6f5fc, 20%);","lastModifiedDate":"2024-03-30"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: derive(#010b4d, 20%);","lastModifiedDate":"2024-03-30"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":321,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: transparent #f7fbfc transparent #f7fbfc;","lastModifiedDate":"2024-03-30"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"MaYuehan"},"content":"    -fx-border-color: #010b4d #010b4d #010b4d #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"MaYuehan"},"content":"    -fx-text-fill: #010b4d;","lastModifiedDate":"2024-03-30"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":332,"author":{"gitId":"MaYuehan"},"content":"    -fx-effect: innershadow(gaussian, #010b4d, 10, 0, 0, 0);","lastModifiedDate":"2024-03-30"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"MaYuehan"},"content":"    -fx-background-color: transparent, white, transparent, white;","lastModifiedDate":"2024-03-30"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"MaYuehan":51,"-":301}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"    -fx-background: #f7fbfc, 10%;","lastModifiedDate":"2024-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":1,"-":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-07-27"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"         title\u003d\"VitalConnect\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"        \u003cSplitPane fx:id\u003d\"mainSplitPane\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"          \u003cStackPane fx:id\u003d\"leftPane\"\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"            \u003c!-- Left pane content goes here --\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"          \u003cVBox fx:id\u003d\"centerPane\"\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                       minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"              \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" /\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"          \u003cStackPane fx:id\u003d\"rightPane\"\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"            \u003c!-- Right pane content goes here --\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2024-03-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"MaYuehan":16,"-":58}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        \u003cLabel fx:id\u003d\"contactInformation\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"        \u003cLabel fx:id\u003d\"medicalInformation\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"      \u003cLabel fx:id\u003d\"allergy\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"javierng2knus":1,"Ella-e":1,"-":33,"SeaHogs":2}},{"path":"src/test/java/vitalconnect/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-02-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expected \u003d AppParameters.class.getCanonicalName() + \"{configPath\u003d\" + appParameters.getConfigPath() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(expected, appParameters.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(appParameters.equals(new AppParameters()));","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(appParameters.equals(appParameters));","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(appParameters.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(appParameters.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different config path -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d new AppParameters();","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        otherAppParameters.setConfigPath(Paths.get(\"configPath\"));","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(appParameters.equals(otherAppParameters));","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"MaYuehan":1,"-":88}},{"path":"src/test/java/vitalconnect/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2019-02-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        String expected \u003d Config.class.getCanonicalName() + \"{logLevel\u003d\" + config.getLogLevel()","lastModifiedDate":"2019-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"                + \", userPrefsFilePath\u003d\" + config.getUserPrefsFilePath() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(expected, config.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"MaYuehan":1,"-":26}},{"path":"src/test/java/vitalconnect/commons/core/GuiSettingsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class GuiSettingsTest {","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        String expected \u003d GuiSettings.class.getCanonicalName() + \"{windowWidth\u003d\" + guiSettings.getWindowWidth()","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"                + \", windowHeight\u003d\" + guiSettings.getWindowHeight() + \", windowCoordinates\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + guiSettings.getWindowCoordinates() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertEquals(expected, guiSettings.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-23"}],"authorContributionMap":{"MaYuehan":1,"-":15}},{"path":"src/test/java/vitalconnect/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":2,"-":133}},{"path":"src/test/java/vitalconnect/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.core.index;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromZeroBased(0);","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expected \u003d Index.class.getCanonicalName() + \"{zeroBasedIndex\u003d\" + index.getZeroBased() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(expected, index.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"MaYuehan":2,"-":65}},{"path":"src/test/java/vitalconnect/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"MaYuehan":2,"-":34}},{"path":"src/test/java/vitalconnect/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"MaYuehan":3,"-":105}},{"path":"src/test/java/vitalconnect/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.Config;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataLoadingException, IOException {","lastModifiedDate":"2023-06-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"MaYuehan":4,"-":112}},{"path":"src/test/java/vitalconnect/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":2,"-":21}},{"path":"src/test/java/vitalconnect/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.SerializableTestClass;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.TestUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":3,"-":42}},{"path":"src/test/java/vitalconnect/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.commons.util;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"MaYuehan":2,"-":141}},{"path":"src/test/java/vitalconnect/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.AddCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.CommandResult;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.ListCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.JsonAppointmentStorage;","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.JsonClinicStorage;","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.JsonUserPrefsStorage;","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.storage.StorageManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"        Path clinicFilePath \u003d temporaryFolder.resolve(\"clinic.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"        Path userPrefsFilePath \u003d temporaryFolder.resolve(\"userPrefs.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"        Path appointmentFilePath \u003d temporaryFolder.resolve(\"appointments.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"        JsonClinicStorage clinicStorage \u003d new JsonClinicStorage(clinicFilePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(userPrefsFilePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"        JsonAppointmentStorage appointmentStorage \u003d new JsonAppointmentStorage(appointmentFilePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"        StorageManager storage \u003d new StorageManager(clinicStorage, userPrefsStorage, appointmentStorage);","lastModifiedDate":"2024-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"    //    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"    //    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"    //        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"    //                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"    //    }","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"    //","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"    //    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"    //    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"    //        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"    //                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2024-03-18"},{"lineNumber":91,"author":{"gitId":"SeaHogs"},"content":"    //    }","lastModifiedDate":"2024-03-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"        Model expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":158,"author":{"gitId":"MaYuehan"},"content":"        Path clinicPath \u003d temporaryFolder.resolve(\"ExceptionClinic.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":159,"author":{"gitId":"MaYuehan"},"content":"        Path appointmentPath \u003d temporaryFolder.resolve(\"ExceptionAppointments.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":161,"author":{"gitId":"MaYuehan"},"content":"        // Mock ClinicStorage that throws the IOException e when saving","lastModifiedDate":"2024-03-23"},{"lineNumber":162,"author":{"gitId":"MaYuehan"},"content":"        JsonClinicStorage clinicStorage \u003d new JsonClinicStorage(clinicPath) {","lastModifiedDate":"2024-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":164,"author":{"gitId":"MaYuehan"},"content":"            public void saveClinic(ReadOnlyClinic clinic, Path filePath) throws IOException {","lastModifiedDate":"2024-03-23"},{"lineNumber":165,"author":{"gitId":"MaYuehan"},"content":"                throw e;","lastModifiedDate":"2024-03-23"},{"lineNumber":166,"author":{"gitId":"MaYuehan"},"content":"            }","lastModifiedDate":"2024-03-23"},{"lineNumber":167,"author":{"gitId":"MaYuehan"},"content":"        };","lastModifiedDate":"2024-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"MaYuehan"},"content":"        // Mock AppointmentStorage that throws the IOException e when saving","lastModifiedDate":"2024-03-23"},{"lineNumber":170,"author":{"gitId":"MaYuehan"},"content":"        JsonAppointmentStorage appointmentStorage \u003d new JsonAppointmentStorage(appointmentPath) {","lastModifiedDate":"2024-03-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"MaYuehan"},"content":"            public void saveAppointments(List\u003cAppointment\u003e appointments, Path filePath) throws IOException {","lastModifiedDate":"2024-03-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":179,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":180,"author":{"gitId":"MaYuehan"},"content":"        // Inject StorageManager with the mock storages","lastModifiedDate":"2024-03-23"},{"lineNumber":181,"author":{"gitId":"MaYuehan"},"content":"        StorageManager storage \u003d new StorageManager(clinicStorage, userPrefsStorage, appointmentStorage);","lastModifiedDate":"2024-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":185,"author":{"gitId":"MaYuehan"},"content":"        // Triggers the saveClinic and saveAppointments methods by executing an add command","lastModifiedDate":"2024-03-23"},{"lineNumber":186,"author":{"gitId":"javierng2knus"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":187,"author":{"gitId":"SeaHogs"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2023-06-13"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"},{"lineNumber":193,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"javierng2knus":2,"MaYuehan":51,"-":128,"SeaHogs":12}},{"path":"src/test/java/vitalconnect/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"        model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"        Model expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                expectedModel);","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"        Person personInList \u003d model.getClinic().getPersonList().get(0);","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model,","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":13,"-":36}},{"path":"src/test/java/vitalconnect/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":97,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"        public void setCurrentPredicate(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":99,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":100,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"        public Predicate\u003cPerson\u003e getCurrentPredicate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"javierng2knus"},"content":"        public Path getClinicFilePath() {","lastModifiedDate":"2024-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"javierng2knus"},"content":"        public void setClinicFilePath(Path clinicFilePath) {","lastModifiedDate":"2024-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"javierng2knus"},"content":"        public void setClinic(ReadOnlyClinic newData) {","lastModifiedDate":"2024-03-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"javierng2knus"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":178,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-13"},{"lineNumber":179,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":181,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":182,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":183,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesIcExist(String name) {","lastModifiedDate":"2024-03-23"},{"lineNumber":184,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":185,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":186,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":187,"author":{"gitId":"MaYuehan"},"content":"        @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":188,"author":{"gitId":"MaYuehan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":189,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":190,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":191,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":192,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":193,"author":{"gitId":"MaYuehan"},"content":"        public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":194,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":195,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":196,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":197,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":198,"author":{"gitId":"MaYuehan"},"content":"        public List\u003cAppointment\u003e getConflictingAppointments(Appointment appointment) {","lastModifiedDate":"2024-03-28"},{"lineNumber":199,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":200,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":201,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":202,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":203,"author":{"gitId":"Ella-e"},"content":"        public List\u003cAppointment\u003e getConflictingAppointmentsForExistingApt(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-31"},{"lineNumber":204,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":205,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":206,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":207,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":208,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":209,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":210,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":211,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":212,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":213,"author":{"gitId":"MaYuehan"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":214,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":215,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":216,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":217,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":218,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":219,"author":{"gitId":"Ella-e"},"content":"        public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":220,"author":{"gitId":"Ella-e"},"content":"            return null;","lastModifiedDate":"2024-03-17"},{"lineNumber":221,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":222,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":223,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":224,"author":{"gitId":"Ella-e"},"content":"        public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":225,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":226,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":227,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":228,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-03-18"},{"lineNumber":229,"author":{"gitId":"SeaHogs"},"content":"         * @param nric","lastModifiedDate":"2024-03-18"},{"lineNumber":230,"author":{"gitId":"SeaHogs"},"content":"         * @param medicalInformation","lastModifiedDate":"2024-03-18"},{"lineNumber":231,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-03-18"},{"lineNumber":232,"author":{"gitId":"SeaHogs"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":233,"author":{"gitId":"SeaHogs"},"content":"        public void updatePersonMedicalInformation(Nric nric, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":234,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":235,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":236,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":237,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":238,"author":{"gitId":"Ella-e"},"content":"        public void updateAppointment(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-30"},{"lineNumber":239,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":240,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":241,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":263,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":281,"author":{"gitId":"javierng2knus"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-11"},{"lineNumber":282,"author":{"gitId":"javierng2knus"},"content":"            return new Clinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"javierng2knus":6,"MaYuehan":51,"Ella-e":33,"-":186,"SeaHogs":10}},{"path":"src/test/java/vitalconnect/logic/commands/AddContactCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"public class AddContactCommandTest {","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    private Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    public void constructor_nullContactInformation_throwsNullPointerException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddContactCommand(null, null));","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"    public void execute_personNotFind_failure() {","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"            Messages.MESSAGE_PERSON_NOT_FOUND, () -\u003e new AddContactCommand(new Nric(\"S2519229Z\"),","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"                new ContactInformation()).execute(model));","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"    public void execute_duplicateContactInformation_failure() {","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        Person personInList \u003d model.getClinic().getPersonList().get(0);","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"        ContactInformation contactInformation \u003d new ContactInformation(new Email(\"\"), new Phone(\"\"), new Address(\"\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        AddContactCommand addContactCommand \u003d new AddContactCommand(personInList","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"            .getIdentificationInformation().getNric(), contactInformation);","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"        assertThrows(CommandException.class, Messages.MESSAGE_PERSON_ALREADY_EXIST, () -\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"            addContactCommand.execute(model));","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"    public void execute_addContactInformation_success() throws CommandException {","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        ModelStubHasOnePersonWithEmptyCI modelStub \u003d new ModelStubHasOnePersonWithEmptyCI();","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        Person validPerson \u003d modelStub.findPersonByNric(new Nric(\"S2519229Z\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"        ContactInformation ci \u003d new ContactInformation(new Email(\"email@123.com\"), new Phone(\"\"), new Address(\"\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"        CommandResult commandResult \u003d new AddContactCommand(validPerson","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"            .getIdentificationInformation().getNric(), ci).execute(modelStub);","lastModifiedDate":"2024-03-17"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"        assertEquals(AddContactCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2024-03-17"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"            commandResult.getFeedbackToUser());","lastModifiedDate":"2024-03-17"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"    public void toStringTest() {","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"        Nric nric \u003d new Nric(\"S2519229Z\");","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"        ContactInformation ci \u003d new ContactInformation(new Email(\"email@123.com\"), new Phone(\"\"), new Address(\"\"));","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"        AddContactCommand command \u003d new AddContactCommand(nric, ci);","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"        assertEquals(command.toString(), \"addContact\" + nric + ci);","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2024-03-17"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":84,"author":{"gitId":"Ella-e"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2024-03-17"},{"lineNumber":85,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"Ella-e"},"content":"        public void setCurrentPredicate(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":91,"author":{"gitId":"Ella-e"},"content":"        public Predicate\u003cPerson\u003e getCurrentPredicate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":93,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":94,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":95,"author":{"gitId":"Ella-e"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-17"},{"lineNumber":96,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":97,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":99,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":100,"author":{"gitId":"Ella-e"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2024-03-17"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2024-03-17"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":108,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"        public Path getClinicFilePath() {","lastModifiedDate":"2024-03-17"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"        public void setClinicFilePath(Path clinicFilePath) {","lastModifiedDate":"2024-03-17"},{"lineNumber":121,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":122,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":123,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":124,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":125,"author":{"gitId":"Ella-e"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2024-03-17"},{"lineNumber":126,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":127,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":128,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":129,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":130,"author":{"gitId":"Ella-e"},"content":"        public void setClinic(ReadOnlyClinic newData) {","lastModifiedDate":"2024-03-17"},{"lineNumber":131,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":132,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":133,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":134,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":135,"author":{"gitId":"Ella-e"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-17"},{"lineNumber":136,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":137,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":138,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":139,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":140,"author":{"gitId":"Ella-e"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2024-03-17"},{"lineNumber":141,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":142,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":143,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":144,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":145,"author":{"gitId":"Ella-e"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2024-03-17"},{"lineNumber":146,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":147,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":148,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":149,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":150,"author":{"gitId":"Ella-e"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2024-03-17"},{"lineNumber":151,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":152,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":153,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":154,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":155,"author":{"gitId":"Ella-e"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-17"},{"lineNumber":156,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":157,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":158,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":159,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":160,"author":{"gitId":"Ella-e"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-17"},{"lineNumber":161,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":162,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":163,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":164,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":165,"author":{"gitId":"Ella-e"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-17"},{"lineNumber":166,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":167,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":168,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":169,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":170,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesIcExist(String name) {","lastModifiedDate":"2024-03-23"},{"lineNumber":171,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":172,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":173,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":174,"author":{"gitId":"Ella-e"},"content":"        @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":175,"author":{"gitId":"Ella-e"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-17"},{"lineNumber":176,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":177,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":178,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":179,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":180,"author":{"gitId":"MaYuehan"},"content":"        public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":181,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":182,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":183,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":184,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":185,"author":{"gitId":"MaYuehan"},"content":"        public List\u003cAppointment\u003e getConflictingAppointments(Appointment appointment) {","lastModifiedDate":"2024-03-28"},{"lineNumber":186,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":187,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":188,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":189,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":190,"author":{"gitId":"Ella-e"},"content":"        public List\u003cAppointment\u003e getConflictingAppointmentsForExistingApt(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-31"},{"lineNumber":191,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":192,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":193,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":194,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":195,"author":{"gitId":"Ella-e"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-17"},{"lineNumber":196,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":197,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":198,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":199,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":200,"author":{"gitId":"Ella-e"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-17"},{"lineNumber":201,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":202,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":203,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":204,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":205,"author":{"gitId":"Ella-e"},"content":"        public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":206,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":207,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":208,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":209,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":210,"author":{"gitId":"Ella-e"},"content":"        public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":211,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":212,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":213,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":214,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-03-18"},{"lineNumber":215,"author":{"gitId":"SeaHogs"},"content":"         * @param nric","lastModifiedDate":"2024-03-18"},{"lineNumber":216,"author":{"gitId":"SeaHogs"},"content":"         * @param medicalInformation","lastModifiedDate":"2024-03-18"},{"lineNumber":217,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-03-18"},{"lineNumber":218,"author":{"gitId":"SeaHogs"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":219,"author":{"gitId":"SeaHogs"},"content":"        public void updatePersonMedicalInformation(Nric nric, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":220,"author":{"gitId":"SeaHogs"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":221,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":222,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":223,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":224,"author":{"gitId":"Ella-e"},"content":"        public void updateAppointment(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-30"},{"lineNumber":225,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":226,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":227,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":228,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":229,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":230,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":231,"author":{"gitId":"Ella-e"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2024-03-17"},{"lineNumber":232,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":233,"author":{"gitId":"Ella-e"},"content":"    private class ModelStubHasOnePersonWithEmptyCI extends ModelStub {","lastModifiedDate":"2024-03-17"},{"lineNumber":234,"author":{"gitId":"Ella-e"},"content":"        final Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-17"},{"lineNumber":235,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":236,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":237,"author":{"gitId":"Ella-e"},"content":"        public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":238,"author":{"gitId":"Ella-e"},"content":"            return this.person;","lastModifiedDate":"2024-03-17"},{"lineNumber":239,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":240,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":241,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":242,"author":{"gitId":"Ella-e"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-17"},{"lineNumber":243,"author":{"gitId":"Ella-e"},"content":"            return new Clinic();","lastModifiedDate":"2024-03-17"},{"lineNumber":244,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":245,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":246,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":247,"author":{"gitId":"Ella-e"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-17"},{"lineNumber":248,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":249,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":250,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":251,"author":{"gitId":"Ella-e"},"content":"        public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":252,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":253,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":254,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":255,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":256,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"MaYuehan":18,"Ella-e":228,"SeaHogs":10}},{"path":"src/test/java/vitalconnect/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"    public void execute_emptyClinic_success() {","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"    public void execute_nonEmptyClinic_success() {","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"        Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"        expectedModel.setClinic(new Clinic());","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"javierng2knus":3,"MaYuehan":11,"-":20}},{"path":"src/test/java/vitalconnect/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\",","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"                false, false, CommandResult.Type.SHOW_PERSONS)));","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\",","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"                true, false, CommandResult.Type.SHOW_PERSONS)));","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\",","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"                false, true, CommandResult.Type.SHOW_PERSONS)));","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        // different type value -\u003e returns different hashcode","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\",","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"                false, true, CommandResult.Type.SHOW_APPOINTMENTS)));","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\",","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"                true, false, CommandResult.Type.SHOW_PERSONS).hashCode());","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\",","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"                false, true, CommandResult.Type.SHOW_PERSONS).hashCode());","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expected \u003d CommandResult.class.getCanonicalName() + \"{feedbackToUser\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                + commandResult.getFeedbackToUser() + \", showHelp\u003d\" + commandResult.isShowHelp()","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                + \", exit\u003d\" + commandResult.isExit() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(expected, commandResult.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"MaYuehan":16,"-":57}},{"path":"src/test/java/vitalconnect/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ALLERGYTAG;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_HEIGHT;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_WEIGHT;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"    public static final String VALID_NRIC_AMY \u003d \"S9999999C\";","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"    public static final String VALID_NRIC_BOB \u003d \"T9999999Z\";","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    public static final String VALID_PHONE_BOB \u003d \"12345678\";","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"123@email.com\";","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"a\";","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_ALLERGYTAG + VALID_TAG_FRIEND;","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_ALLERGYTAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"    public static final String HEIGH_DESC_AMY \u003d \" \" + PREFIX_HEIGHT + \"170\";","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"    public static final String WEIGHT_DESC_AMY \u003d \" \" + PREFIX_WEIGHT + \"60\";","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"911a\"; // check Nric.java for validity","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"1\";","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"abc\";","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS + \" def/abc\";","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_ALLERGYTAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"                .withNric(VALID_NRIC_AMY).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"                .withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"javierng2knus"},"content":"     * - the clinic, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2024-03-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"javierng2knus"},"content":"        Clinic expectedClinic \u003d new Clinic(actualModel.getClinic());","lastModifiedDate":"2024-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":113,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(expectedClinic, actualModel.getClinic());","lastModifiedDate":"2024-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":118,"author":{"gitId":"javierng2knus"},"content":"     * {@code model}\u0027s clinic.","lastModifiedDate":"2024-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":124,"author":{"gitId":"javierng2knus"},"content":"        final String[] splitName \u003d person.getIdentificationInformation().getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2024-03-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"javierng2knus":10,"MaYuehan":9,"Ella-e":6,"-":90,"SeaHogs":15}},{"path":"src/test/java/vitalconnect/logic/commands/CreateAptCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.parser.ParserUtil;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"//import java.time.LocalDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"//import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"//import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"public class CreateAptCommandTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    public void execute_icNotExist_throwsCommandException() throws ParseException {","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        ModelStub modelStub \u003d new ModelStubWithoutPerson();","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"        Nric patientIc \u003d new Nric(\"S4848058F\");","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime dateTimeStr \u003d ParserUtil.parseTime(\"02/06/2026 1330\");","lastModifiedDate":"2024-03-29"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"        int duration \u003d 2;","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"        CreateAptCommand createAptCommand \u003d new CreateAptCommand(patientIc, dateTimeStr, duration);","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2024-03-23"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"            MESSAGE_PERSON_NOT_FOUND, () -\u003e createAptCommand.execute(modelStub));","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"    public void execute_invalidDuration_throwsCommandException() throws ParseException {","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"        Nric patientIc \u003d new Nric(\"S1234567D\");","lastModifiedDate":"2024-03-28"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime dateTime \u003d ParserUtil.parseTime(\"02/02/2024 1330\");","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"        int duration \u003d 0; // invalid duration","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"        CreateAptCommand createAptCommand \u003d new CreateAptCommand(patientIc, dateTime, duration);","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(CommandException.class, () -\u003e createAptCommand.execute(modelStub));","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"    public void execute_conflictingAppointment_throwsCommandException() throws ParseException {","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"        ModelStub modelStub \u003d new ModelStubWithConflictingAppointment();","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"        Nric patientIc \u003d new Nric(\"S1234567D\");","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime dateTimeStr \u003d ParserUtil.parseTime(\"02/02/2024 1330\");","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"        int duration \u003d 2;","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"        CreateAptCommand createAptCommand \u003d new CreateAptCommand(patientIc, dateTimeStr, duration);","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(CommandException.class, () -\u003e createAptCommand.execute(modelStub));","lastModifiedDate":"2024-03-28"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-29"},{"lineNumber":73,"author":{"gitId":"MaYuehan"},"content":"    public void execute_appointmentInPast_throwsCommandException() {","lastModifiedDate":"2024-03-29"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"        ModelStub modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2024-03-29"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"        Nric patientIc \u003d new Nric(\"S1234567D\");","lastModifiedDate":"2024-03-29"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"        // Set a date and time in the past","lastModifiedDate":"2024-03-29"},{"lineNumber":77,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime pastDateTime \u003d LocalDateTime.now().minusDays(1);","lastModifiedDate":"2024-03-29"},{"lineNumber":78,"author":{"gitId":"MaYuehan"},"content":"        int duration \u003d 2; // duration in units (each unit represents 15 minutes)","lastModifiedDate":"2024-03-29"},{"lineNumber":79,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"        CreateAptCommand createAptCommand \u003d new CreateAptCommand(patientIc, pastDateTime, duration);","lastModifiedDate":"2024-03-29"},{"lineNumber":81,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":82,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2024-03-29"},{"lineNumber":83,"author":{"gitId":"MaYuehan"},"content":"                \"Appointment time cannot be in the past.\", () -\u003e createAptCommand.execute(modelStub));","lastModifiedDate":"2024-03-29"},{"lineNumber":84,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":85,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":86,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":87,"author":{"gitId":"MaYuehan"},"content":"    /*","lastModifiedDate":"2024-03-23"},{"lineNumber":88,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":89,"author":{"gitId":"MaYuehan"},"content":"    public void execute_appointmentCreatedSuccessfully() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"MaYuehan"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"MaYuehan"},"content":"        String patientIc \u003d \"S1234567D\";","lastModifiedDate":"2024-03-23"},{"lineNumber":92,"author":{"gitId":"MaYuehan"},"content":"        String dateTimeStr \u003d \"02/02/2024 1330\";","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"MaYuehan"},"content":"        CreateAptCommand createAptCommand \u003d new CreateAptCommand(patientIc, dateTimeStr);","lastModifiedDate":"2024-03-23"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"        CommandResult commandResult \u003d createAptCommand.execute(modelStub);","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(dateTimeStr, formatter);","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"        String successString \u003d String.format(\"Created an appointment successfully!\\nName: \"","lastModifiedDate":"2024-03-23"},{"lineNumber":101,"author":{"gitId":"MaYuehan"},"content":"                + \"Amy\" + \"\\nNRIC: %s\\nTime: %s\",","lastModifiedDate":"2024-03-23"},{"lineNumber":102,"author":{"gitId":"MaYuehan"},"content":"                patientIc, dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\")));","lastModifiedDate":"2024-03-23"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":104,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(successString, commandResult.getFeedbackToUser());","lastModifiedDate":"2024-03-17"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"        assertTrue(modelStub.appointmentsAdded.stream().anyMatch(appointment -\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"                appointment.getPatientIc().equals(patientIc)","lastModifiedDate":"2024-03-23"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"                        \u0026\u0026 appointment.getDateTime().equals(dateTime)));","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"*/","lastModifiedDate":"2024-03-23"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"        public void setCurrentPredicate(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"        public Predicate\u003cPerson\u003e getCurrentPredicate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"MaYuehan"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"MaYuehan"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"MaYuehan"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"MaYuehan"},"content":"        public Path getClinicFilePath() {","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"MaYuehan"},"content":"        public void setClinicFilePath(Path clinicFilePath) {","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"MaYuehan"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":157,"author":{"gitId":"MaYuehan"},"content":"        public void setClinic(ReadOnlyClinic newData) {","lastModifiedDate":"2024-03-13"},{"lineNumber":158,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":159,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":160,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":161,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":162,"author":{"gitId":"MaYuehan"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-13"},{"lineNumber":163,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":164,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":165,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":166,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":167,"author":{"gitId":"MaYuehan"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2024-03-13"},{"lineNumber":168,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":169,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":170,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":171,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":172,"author":{"gitId":"MaYuehan"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2024-03-13"},{"lineNumber":173,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":175,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":176,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"MaYuehan"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2024-03-13"},{"lineNumber":178,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":179,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":181,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":182,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":183,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":184,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":185,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":186,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":187,"author":{"gitId":"MaYuehan"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-13"},{"lineNumber":188,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":189,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":190,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":191,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":192,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesIcExist(String name) {","lastModifiedDate":"2024-03-23"},{"lineNumber":193,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":194,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":195,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":196,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":197,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-23"},{"lineNumber":198,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":199,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":200,"author":{"gitId":"MaYuehan"},"content":"        @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":201,"author":{"gitId":"MaYuehan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":202,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":203,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":204,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":205,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":206,"author":{"gitId":"MaYuehan"},"content":"        public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":207,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":208,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":209,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":210,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":211,"author":{"gitId":"MaYuehan"},"content":"        public List\u003cAppointment\u003e getConflictingAppointments(Appointment appointment) {","lastModifiedDate":"2024-03-28"},{"lineNumber":212,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":213,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":214,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":215,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"Ella-e"},"content":"        public List\u003cAppointment\u003e getConflictingAppointmentsForExistingApt(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-31"},{"lineNumber":217,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":218,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":219,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":220,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":221,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":222,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":223,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":224,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":225,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":226,"author":{"gitId":"MaYuehan"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":227,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":228,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":229,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":230,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":231,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":232,"author":{"gitId":"Ella-e"},"content":"        public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":233,"author":{"gitId":"Ella-e"},"content":"            return null;","lastModifiedDate":"2024-03-17"},{"lineNumber":234,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":235,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":236,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":237,"author":{"gitId":"Ella-e"},"content":"        public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":238,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":239,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":240,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":241,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-03-18"},{"lineNumber":242,"author":{"gitId":"SeaHogs"},"content":"         * @param nric","lastModifiedDate":"2024-03-18"},{"lineNumber":243,"author":{"gitId":"SeaHogs"},"content":"         * @param medicalInformation","lastModifiedDate":"2024-03-18"},{"lineNumber":244,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-03-18"},{"lineNumber":245,"author":{"gitId":"SeaHogs"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":246,"author":{"gitId":"SeaHogs"},"content":"        public void updatePersonMedicalInformation(Nric nric, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":247,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":248,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":249,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":250,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":251,"author":{"gitId":"Ella-e"},"content":"        public void updateAppointment(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-30"},{"lineNumber":252,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":253,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":254,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":255,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":256,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":257,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStubWithoutPerson extends ModelStub {","lastModifiedDate":"2024-03-13"},{"lineNumber":258,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":259,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-13"},{"lineNumber":260,"author":{"gitId":"MaYuehan"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":261,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":262,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":263,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesIcExist(String ic) {","lastModifiedDate":"2024-03-23"},{"lineNumber":264,"author":{"gitId":"MaYuehan"},"content":"            return false;","lastModifiedDate":"2024-03-23"},{"lineNumber":265,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":266,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":267,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":268,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":269,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":270,"author":{"gitId":"MaYuehan"},"content":"     * A Model stub that always accept the appointment being added.","lastModifiedDate":"2024-03-13"},{"lineNumber":271,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":272,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2024-03-13"},{"lineNumber":273,"author":{"gitId":"MaYuehan"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-13"},{"lineNumber":274,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":275,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-13"},{"lineNumber":276,"author":{"gitId":"MaYuehan"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":277,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":278,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":279,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":280,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesIcExist(String ic) {","lastModifiedDate":"2024-03-23"},{"lineNumber":281,"author":{"gitId":"MaYuehan"},"content":"            return true;","lastModifiedDate":"2024-03-23"},{"lineNumber":282,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":283,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":284,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":285,"author":{"gitId":"MaYuehan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":286,"author":{"gitId":"MaYuehan"},"content":"            appointmentsAdded.add(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":287,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":288,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":289,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":290,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStubWithConflictingAppointment extends ModelStubAcceptingPersonAdded {","lastModifiedDate":"2024-03-28"},{"lineNumber":291,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":292,"author":{"gitId":"MaYuehan"},"content":"        public List\u003cAppointment\u003e getConflictingAppointments(Appointment appointment) {","lastModifiedDate":"2024-03-28"},{"lineNumber":293,"author":{"gitId":"MaYuehan"},"content":"            ArrayList\u003cAppointment\u003e conflictingAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-28"},{"lineNumber":294,"author":{"gitId":"MaYuehan"},"content":"            conflictingAppointments.add(appointment); // Simulate a conflict","lastModifiedDate":"2024-03-28"},{"lineNumber":295,"author":{"gitId":"MaYuehan"},"content":"            return conflictingAppointments;","lastModifiedDate":"2024-03-28"},{"lineNumber":296,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":297,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":298,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":299,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":300,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":301,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"javierng2knus":3,"MaYuehan":249,"Ella-e":39,"SeaHogs":10}},{"path":"src/test/java/vitalconnect/logic/commands/DeleteAptCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"public class DeleteAptCommandTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"    public void execute_validIndexAppointmentDeletedSuccessfully() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"        ModelStubWithAppointments modelStub \u003d new ModelStubWithAppointments();","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime endTime \u003d LocalDateTime.now().plusMinutes(30);","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"        Appointment appointment \u003d new Appointment(\"John Doe\", \"S1234567D\", dateTime, endTime, 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"        modelStub.addAppointment(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        Index appointmentIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"        DeleteAptCommand deleteAptCommand \u003d new DeleteAptCommand(appointmentIndex);","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"        CommandResult commandResult \u003d deleteAptCommand.execute(modelStub);","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(\"Deleted the appointment successfully:\\nName: John Doe\\nTime: \"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"                + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM uuuu HH:mm\")), commandResult.getFeedbackToUser());","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(modelStub.appointments.contains(appointment)); // Verify the appointment was removed","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"    public void execute_emptyList_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"        ModelStubWithAppointments modelStub \u003d new ModelStubWithAppointments();","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime endTime \u003d LocalDateTime.now().plusMinutes(30);","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"        Appointment existingAppointment \u003d new Appointment(\"John Doe\", \"S1234567D\",","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"                dateTime, endTime, 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"        modelStub.addAppointment(existingAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"        Index invalidIndex \u003d Index.fromOneBased(999);","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"        DeleteAptCommand deleteAptCommand \u003d new DeleteAptCommand(invalidIndex);","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(CommandException.class, \"OOPS! The deletion of the appointment failed \"","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"                + \"as the index of appointment is out of range.\", () -\u003e deleteAptCommand.execute(modelStub));","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"        ModelStubWithAppointments modelStub \u003d new ModelStubWithAppointments();","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"        Index invalidIndex \u003d Index.fromOneBased(999);","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"        DeleteAptCommand deleteAptCommand \u003d new DeleteAptCommand(invalidIndex);","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(CommandException.class, \"OOPS! The appointment list is empty.\", (","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"MaYuehan"},"content":"        ) -\u003e deleteAptCommand.execute(modelStub));","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"MaYuehan"},"content":"     * A Model stub that contains and allows manipulation of appointments.","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStubWithAppointments extends ModelStub {","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"        final ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"MaYuehan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"MaYuehan"},"content":"            appointments.add(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"MaYuehan"},"content":"            return appointments.stream().anyMatch(appointment -\u003e appointment.getPatientName().equals(name));","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"MaYuehan"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"MaYuehan"},"content":"            appointments.remove(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"            // Assuming you have a method to convert your ArrayList to an ObservableList","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"            // This conversion is necessary because your command likely operates on ObservableList","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"MaYuehan"},"content":"            return FXCollections.observableArrayList(appointments);","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"        // Implement other abstract methods as necessary, throwing AssertionError for unimplemented methods","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"        public void setCurrentPredicate(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"        public Predicate\u003cPerson\u003e getCurrentPredicate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"MaYuehan"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"MaYuehan"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"MaYuehan"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"MaYuehan"},"content":"        public Path getClinicFilePath() {","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"MaYuehan"},"content":"        public void setClinicFilePath(Path clinicFilePath) {","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"MaYuehan"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"MaYuehan"},"content":"        public void setClinic(ReadOnlyClinic newData) {","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":157,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":158,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":159,"author":{"gitId":"MaYuehan"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-13"},{"lineNumber":160,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":161,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":162,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":163,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":164,"author":{"gitId":"MaYuehan"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2024-03-13"},{"lineNumber":165,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":166,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":167,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":168,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":169,"author":{"gitId":"MaYuehan"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2024-03-13"},{"lineNumber":170,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":171,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":172,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":173,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"MaYuehan"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2024-03-13"},{"lineNumber":175,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":176,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":178,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":179,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":181,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":182,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":183,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":184,"author":{"gitId":"MaYuehan"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-13"},{"lineNumber":185,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":186,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":187,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":188,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":189,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-13"},{"lineNumber":190,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":191,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":192,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":193,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":194,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesIcExist(String name) {","lastModifiedDate":"2024-03-23"},{"lineNumber":195,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":196,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":197,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":198,"author":{"gitId":"MaYuehan"},"content":"        @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":199,"author":{"gitId":"MaYuehan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":200,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":201,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":202,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":203,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":204,"author":{"gitId":"MaYuehan"},"content":"        public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":205,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":206,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":207,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":208,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":209,"author":{"gitId":"MaYuehan"},"content":"        public List\u003cAppointment\u003e getConflictingAppointments(Appointment appointment) {","lastModifiedDate":"2024-03-28"},{"lineNumber":210,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":211,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":212,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":213,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":214,"author":{"gitId":"Ella-e"},"content":"        public List\u003cAppointment\u003e getConflictingAppointmentsForExistingApt(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-31"},{"lineNumber":215,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":217,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":218,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":219,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":220,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":221,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":222,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":223,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":224,"author":{"gitId":"MaYuehan"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":225,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":226,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":227,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":228,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":229,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":230,"author":{"gitId":"Ella-e"},"content":"        public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":231,"author":{"gitId":"Ella-e"},"content":"            return null;","lastModifiedDate":"2024-03-17"},{"lineNumber":232,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":233,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":234,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":235,"author":{"gitId":"Ella-e"},"content":"        public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":236,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":237,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":238,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":239,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-03-18"},{"lineNumber":240,"author":{"gitId":"SeaHogs"},"content":"         * @param nric","lastModifiedDate":"2024-03-18"},{"lineNumber":241,"author":{"gitId":"SeaHogs"},"content":"         * @param medicalInformation","lastModifiedDate":"2024-03-18"},{"lineNumber":242,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-03-18"},{"lineNumber":243,"author":{"gitId":"SeaHogs"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":244,"author":{"gitId":"SeaHogs"},"content":"        public void updatePersonMedicalInformation(Nric nric, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":245,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":246,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":247,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":248,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":249,"author":{"gitId":"Ella-e"},"content":"        public void updateAppointment(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-30"},{"lineNumber":250,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":251,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":252,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":253,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":254,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":255,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"MaYuehan":207,"Ella-e":38,"SeaHogs":10}},{"path":"src/test/java/vitalconnect/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"    private Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"        Model expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"        // ensures that outOfBoundIndex is still in bounds of clinic list","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClinic().getPersonList().size());","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(targetIndex);","lastModifiedDate":"2019-02-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String expected \u003d DeleteCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expected, deleteCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"javierng2knus":2,"MaYuehan":17,"-":103}},{"path":"src/test/java/vitalconnect/logic/commands/DeleteContactCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"public class DeleteContactCommandTest {","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    private Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"    public void constructor_nullContactInformation_throwsNullPointerException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DeleteContactCommand(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"    public void execute_personNotFind_failure() {","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        assertThrows(CommandException.class, Messages.MESSAGE_PERSON_NOT_FOUND, () -\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"          new DeleteContactCommand(new Nric(\"S2519229Z\")).execute(model));","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"    public void execute_deleteContactInformation_success() throws CommandException {","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        ModelStubHasOnePersonWithNoneEmptyCI modelStub \u003d new ModelStubHasOnePersonWithNoneEmptyCI();","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        Person validPerson \u003d modelStub.findPersonByNric(new Nric(\"S2519229Z\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"        CommandResult commandResult \u003d new DeleteContactCommand(validPerson.getIdentificationInformation().getNric())","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"            .execute(modelStub);","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        assertEquals(DeleteContactCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"            commandResult.getFeedbackToUser());","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"    public void equalsTest() {","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"        Nric nric \u003d new Nric(\"S2519229Z\");","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        DeleteContactCommand command \u003d new DeleteContactCommand(nric);","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        // same object, equal","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"        assertTrue(command.equals(command));","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"        // same nric, same command","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"        assertTrue(command.equals(new DeleteContactCommand(new Nric(\"S2519229Z\"))));","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"        // different type, not same command","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"        assertFalse(command.equals(\"abc\"));","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"        // null, not same command","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"        assertFalse(command.equals(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2024-03-17"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2024-03-17"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"        public void setCurrentPredicate(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":84,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":85,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"Ella-e"},"content":"        public Predicate\u003cPerson\u003e getCurrentPredicate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":91,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":92,"author":{"gitId":"Ella-e"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-17"},{"lineNumber":93,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":94,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":95,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":96,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":97,"author":{"gitId":"Ella-e"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2024-03-17"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":99,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":100,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2024-03-17"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2024-03-17"},{"lineNumber":108,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"        public Path getClinicFilePath() {","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"        public void setClinicFilePath(Path clinicFilePath) {","lastModifiedDate":"2024-03-17"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":121,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":122,"author":{"gitId":"Ella-e"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2024-03-17"},{"lineNumber":123,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":124,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":125,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":126,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":127,"author":{"gitId":"Ella-e"},"content":"        public void setClinic(ReadOnlyClinic newData) {","lastModifiedDate":"2024-03-17"},{"lineNumber":128,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":129,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":130,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":131,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":132,"author":{"gitId":"Ella-e"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-17"},{"lineNumber":133,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":134,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":135,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":136,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":137,"author":{"gitId":"Ella-e"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2024-03-17"},{"lineNumber":138,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":139,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":140,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":141,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":142,"author":{"gitId":"Ella-e"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2024-03-17"},{"lineNumber":143,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":144,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":145,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":146,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":147,"author":{"gitId":"Ella-e"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2024-03-17"},{"lineNumber":148,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":149,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":150,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":151,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":152,"author":{"gitId":"Ella-e"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-17"},{"lineNumber":153,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":154,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":155,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":156,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":157,"author":{"gitId":"Ella-e"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-17"},{"lineNumber":158,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":159,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":160,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":161,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":162,"author":{"gitId":"Ella-e"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-17"},{"lineNumber":163,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":164,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":165,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":166,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":167,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesIcExist(String name) {","lastModifiedDate":"2024-03-23"},{"lineNumber":168,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":169,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":170,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":171,"author":{"gitId":"Ella-e"},"content":"        @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":172,"author":{"gitId":"Ella-e"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-17"},{"lineNumber":173,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":174,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":175,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":176,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":177,"author":{"gitId":"MaYuehan"},"content":"        public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":178,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":179,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":180,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":181,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":182,"author":{"gitId":"MaYuehan"},"content":"        public List\u003cAppointment\u003e getConflictingAppointments(Appointment appointment) {","lastModifiedDate":"2024-03-28"},{"lineNumber":183,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":184,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":185,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":186,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":187,"author":{"gitId":"Ella-e"},"content":"        public List\u003cAppointment\u003e getConflictingAppointmentsForExistingApt(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-31"},{"lineNumber":188,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":189,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":190,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":191,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":192,"author":{"gitId":"Ella-e"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-17"},{"lineNumber":193,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":194,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":195,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":196,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":197,"author":{"gitId":"Ella-e"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-17"},{"lineNumber":198,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":199,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":200,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":201,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":202,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":203,"author":{"gitId":"Ella-e"},"content":"        public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":204,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":205,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":206,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":207,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":208,"author":{"gitId":"Ella-e"},"content":"        public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":209,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":210,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":211,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":212,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-03-18"},{"lineNumber":213,"author":{"gitId":"SeaHogs"},"content":"         * @param nric","lastModifiedDate":"2024-03-18"},{"lineNumber":214,"author":{"gitId":"SeaHogs"},"content":"         * @param medicalInformation","lastModifiedDate":"2024-03-18"},{"lineNumber":215,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-03-18"},{"lineNumber":216,"author":{"gitId":"SeaHogs"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":217,"author":{"gitId":"SeaHogs"},"content":"        public void updatePersonMedicalInformation(Nric nric, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":218,"author":{"gitId":"SeaHogs"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":219,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":220,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":221,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":222,"author":{"gitId":"Ella-e"},"content":"        public void updateAppointment(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-30"},{"lineNumber":223,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":224,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":225,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":226,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":227,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":228,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":229,"author":{"gitId":"Ella-e"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2024-03-17"},{"lineNumber":230,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":231,"author":{"gitId":"Ella-e"},"content":"    private class ModelStubHasOnePersonWithNoneEmptyCI extends ModelStub {","lastModifiedDate":"2024-03-17"},{"lineNumber":232,"author":{"gitId":"Ella-e"},"content":"        final Person person \u003d new PersonBuilder().withEmail(\"abc@email.com\").build();","lastModifiedDate":"2024-03-17"},{"lineNumber":233,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":234,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":235,"author":{"gitId":"Ella-e"},"content":"        public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":236,"author":{"gitId":"Ella-e"},"content":"            return this.person;","lastModifiedDate":"2024-03-17"},{"lineNumber":237,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":238,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":239,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":240,"author":{"gitId":"Ella-e"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-17"},{"lineNumber":241,"author":{"gitId":"Ella-e"},"content":"            return new Clinic();","lastModifiedDate":"2024-03-17"},{"lineNumber":242,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":243,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":244,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":245,"author":{"gitId":"Ella-e"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-17"},{"lineNumber":246,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":247,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":248,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":249,"author":{"gitId":"Ella-e"},"content":"        public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":250,"author":{"gitId":"Ella-e"},"content":"            this.person.setContactInformation(contactInformation);","lastModifiedDate":"2024-03-17"},{"lineNumber":251,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":252,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":253,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"MaYuehan":18,"Ella-e":225,"SeaHogs":10}},{"path":"src/test/java/vitalconnect/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"    private Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    // the following 3 test cases currently does not work, changed to pass gradle test","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"        Model expectedModel \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, model);","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"        Model expectedModel \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, model);","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"MaYuehan"},"content":"        Model expectedModel \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, model);","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"javierng2knus"},"content":"        // edit person in filtered list into a duplicate in clinic","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"javierng2knus"},"content":"        Person personInList \u003d model.getClinic().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"javierng2knus"},"content":"     * but smaller than size of clinic","lastModifiedDate":"2024-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"javierng2knus"},"content":"        // ensures that outOfBoundIndex is still in bounds of clinic list","lastModifiedDate":"2024-03-11"},{"lineNumber":127,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClinic().getPersonList().size());","lastModifiedDate":"2024-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2019-02-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPersonDescriptor\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"javierng2knus":5,"MaYuehan":26,"-":133,"SeaHogs":6}},{"path":"src/test/java/vitalconnect/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"        // different nric -\u003e returns false","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String expected \u003d EditPersonDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"                + editPersonDescriptor.getName().orElse(null) + \", nric\u003d\"","lastModifiedDate":"2024-03-15"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"                + editPersonDescriptor.getNric().orElse(null) + \"}\";","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"javierng2knus":4,"MaYuehan":6,"-":42,"SeaHogs":1}},{"path":"src/test/java/vitalconnect/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"                false, true, CommandResult.Type.SHOW_PERSONS);","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"MaYuehan":7,"-":14}},{"path":"src/test/java/vitalconnect/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.CARL;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"    private Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"keyword\"));","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        FindCommand findCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d FindCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, findCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"MaYuehan":14,"-":78}},{"path":"src/test/java/vitalconnect/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE,","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"                true, false, CommandResult.Type.SHOW_PERSONS);","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"MaYuehan":7,"-":14}},{"path":"src/test/java/vitalconnect/logic/commands/ListAptCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"public class ListAptCommandTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"    public void execute_noAppointmentsInList_showsNoAppointmentsMessage() {","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"        ModelStubEmpty modelStub \u003d new ModelStubEmpty();","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"        ListAptCommand listAptCommand \u003d new ListAptCommand();","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        CommandResult commandResult \u003d listAptCommand.execute(modelStub);","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(\"No appointment is in the list.\", commandResult.getFeedbackToUser());","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"    public void execute_appointmentsInList_showsAppointments() {","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        ModelStubWithAppointments modelStub \u003d new ModelStubWithAppointments();","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"        modelStub.addAppointment(new Appointment(\"John Doe\", \"S1234567D\", LocalDateTime.now(),","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"                LocalDateTime.now().plusDays(1), 1));","lastModifiedDate":"2024-03-30"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"        modelStub.addAppointment(new Appointment(\"Jane Doe\", \"S1234567D\",","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"                LocalDateTime.now().plusDays(1), LocalDateTime.now().plusDays(2), 1));","lastModifiedDate":"2024-03-30"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"        ListAptCommand listAptCommand \u003d new ListAptCommand();","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"        CommandResult commandResult \u003d listAptCommand.execute(modelStub);","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"        // Expected result should contain the appointments added above","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"        String expectedMessage \u003d ListAptCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(expectedMessage, commandResult.getFeedbackToUser());","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"     * A Model stub that has no appointments.","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStubEmpty extends ModelStub {","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"            return FXCollections.observableArrayList();","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"MaYuehan"},"content":"     * A Model stub that contains and allows manipulation of appointments.","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStubWithAppointments extends ModelStub {","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"        final List\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"MaYuehan"},"content":"            appointments.add(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"MaYuehan"},"content":"            return FXCollections.observableArrayList(appointments);","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"MaYuehan"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"Ella-e"},"content":"        public void setCurrentPredicate(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":91,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"Ella-e"},"content":"        public Predicate\u003cPerson\u003e getCurrentPredicate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":93,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":94,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"MaYuehan"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"MaYuehan"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"MaYuehan"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":113,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":115,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":116,"author":{"gitId":"MaYuehan"},"content":"        public Path getClinicFilePath() {","lastModifiedDate":"2024-03-13"},{"lineNumber":117,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"MaYuehan"},"content":"        public void setClinicFilePath(Path clinicFilePath) {","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"MaYuehan"},"content":"        public void setClinic(ReadOnlyClinic newData) {","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"MaYuehan"},"content":"        public ReadOnlyClinic getClinic() {","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"MaYuehan"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"MaYuehan"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"MaYuehan"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":157,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":158,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":159,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":160,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":161,"author":{"gitId":"MaYuehan"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-13"},{"lineNumber":162,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":163,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":164,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":165,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":166,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesPersonExist(String name) {","lastModifiedDate":"2024-03-13"},{"lineNumber":167,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":168,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":169,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":170,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":171,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":172,"author":{"gitId":"MaYuehan"},"content":"        public boolean doesIcExist(String name) {","lastModifiedDate":"2024-03-23"},{"lineNumber":173,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":174,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":175,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":176,"author":{"gitId":"MaYuehan"},"content":"        @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"MaYuehan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":178,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":179,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":181,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-23"},{"lineNumber":182,"author":{"gitId":"MaYuehan"},"content":"        public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-23"},{"lineNumber":183,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":184,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":185,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":186,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":187,"author":{"gitId":"MaYuehan"},"content":"        public List\u003cAppointment\u003e getConflictingAppointments(Appointment appointment) {","lastModifiedDate":"2024-03-28"},{"lineNumber":188,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":189,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":190,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":191,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":192,"author":{"gitId":"Ella-e"},"content":"        public List\u003cAppointment\u003e getConflictingAppointmentsForExistingApt(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-31"},{"lineNumber":193,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":194,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":195,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":196,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":197,"author":{"gitId":"MaYuehan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":198,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":199,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":200,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":201,"author":{"gitId":"MaYuehan"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":202,"author":{"gitId":"MaYuehan"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":203,"author":{"gitId":"MaYuehan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-13"},{"lineNumber":204,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":205,"author":{"gitId":"MaYuehan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":206,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":207,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":208,"author":{"gitId":"Ella-e"},"content":"        public Person findPersonByNric(Nric nric) {","lastModifiedDate":"2024-03-17"},{"lineNumber":209,"author":{"gitId":"Ella-e"},"content":"            return null;","lastModifiedDate":"2024-03-17"},{"lineNumber":210,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":211,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":212,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":213,"author":{"gitId":"Ella-e"},"content":"        public void updatePersonContactInformation(Nric nric, ContactInformation contactInformation) {","lastModifiedDate":"2024-03-17"},{"lineNumber":214,"author":{"gitId":"Ella-e"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":215,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":216,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":217,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-03-18"},{"lineNumber":218,"author":{"gitId":"SeaHogs"},"content":"         * @param nric","lastModifiedDate":"2024-03-18"},{"lineNumber":219,"author":{"gitId":"SeaHogs"},"content":"         * @param medicalInformation","lastModifiedDate":"2024-03-18"},{"lineNumber":220,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-03-18"},{"lineNumber":221,"author":{"gitId":"SeaHogs"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":222,"author":{"gitId":"SeaHogs"},"content":"        public void updatePersonMedicalInformation(Nric nric, MedicalInformation medicalInformation) {","lastModifiedDate":"2024-03-18"},{"lineNumber":223,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":224,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":225,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":226,"author":{"gitId":"Ella-e"},"content":"        @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":227,"author":{"gitId":"Ella-e"},"content":"        public void updateAppointment(Index index, Appointment appointment) {","lastModifiedDate":"2024-03-30"},{"lineNumber":228,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":229,"author":{"gitId":"Ella-e"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":230,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":231,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":232,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":233,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"MaYuehan":190,"Ella-e":34,"SeaHogs":9}},{"path":"src/test/java/vitalconnect/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"        model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"        expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"MaYuehan":11,"-":30}},{"path":"src/test/java/vitalconnect/logic/commands/ListContactCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.ModelManager;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"public class ListContactCommandTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    private Model model;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"    private Model expectedModel;","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    public void setUp() {","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"        model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"        expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new ArrayList\u003c\u003e());","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"MaYuehan":4,"Ella-e":33}},{"path":"src/test/java/vitalconnect/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.AddCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"    //    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"    //    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"    //        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    //","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"    //        // whitespace only preamble","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"    //        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"    //        + NRIC_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"    //","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"    //","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"    //        // multiple tags - all accepted","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"    //        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    //        assertParseSuccess(parser,","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    //                NAME_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"    //                new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"    //    }","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"                + TAG_DESC_FRIEND;","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"        // multiple nric","lastModifiedDate":"2024-03-15"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, NRIC_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"                validExpectedPersonString + NAME_DESC_AMY + NRIC_DESC_AMY","lastModifiedDate":"2024-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                        + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_NRIC));","lastModifiedDate":"2024-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"        // invalid nric","lastModifiedDate":"2024-03-15"},{"lineNumber":70,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, INVALID_NRIC_DESC + validExpectedPersonString,","lastModifiedDate":"2024-03-15"},{"lineNumber":71,"author":{"gitId":"javierng2knus"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"javierng2knus"},"content":"        // invalid nric","lastModifiedDate":"2024-03-15"},{"lineNumber":80,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NRIC_DESC,","lastModifiedDate":"2024-03-15"},{"lineNumber":81,"author":{"gitId":"javierng2knus"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"    //    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"    //    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"    //        // zero tags","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"    //        Person expectedPerson \u003d new PersonBuilder(AMY).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"    //        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY,","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"    //                new AddCommand(expectedPerson));","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"    //    }","lastModifiedDate":"2024-03-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2024-03-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"javierng2knus"},"content":"        // missing nric prefix","lastModifiedDate":"2024-03-15"},{"lineNumber":101,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB,","lastModifiedDate":"2024-03-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_NRIC_BOB,","lastModifiedDate":"2024-03-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"SeaHogs"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"javierng2knus"},"content":"        // invalid nric","lastModifiedDate":"2024-03-15"},{"lineNumber":115,"author":{"gitId":"SeaHogs"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_NRIC_DESC,","lastModifiedDate":"2024-03-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":123,"author":{"gitId":"SeaHogs"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"javierng2knus":21,"MaYuehan":8,"-":62,"SeaHogs":35}},{"path":"src/test/java/vitalconnect/logic/parser/AddContactCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.TypicalPersons.BOB_CONTACT;","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.AddContactCommand;","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"public class AddContactCommandParserTest {","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"    private AddContactCommandParser parser \u003d new AddContactCommandParser();","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB_CONTACT).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"        // whitespace only preamble","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"            + ADDRESS_DESC_BOB, new AddContactCommand(expectedPerson.getIdentificationInformation().getNric(),","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"              expectedPerson.getContactInformation()));","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE);","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"        // missing nric prefix","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB,","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"            expectedMessage);","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"    public void parse_allOptionsMissing_failure() {","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE);","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        // missing nric prefix","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"            expectedMessage);","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        // invalid nric","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        assertParseFailure(parser, INVALID_NRIC_DESC + VALID_EMAIL_BOB,","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"Ella-e"},"content":"            Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"Ella-e"},"content":"        // invalid phone","lastModifiedDate":"2024-03-17"},{"lineNumber":68,"author":{"gitId":"Ella-e"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB","lastModifiedDate":"2024-03-17"},{"lineNumber":69,"author":{"gitId":"Ella-e"},"content":"            + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":70,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":71,"author":{"gitId":"Ella-e"},"content":"        // invalid email","lastModifiedDate":"2024-03-17"},{"lineNumber":72,"author":{"gitId":"Ella-e"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB","lastModifiedDate":"2024-03-17"},{"lineNumber":73,"author":{"gitId":"Ella-e"},"content":"            + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":74,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":75,"author":{"gitId":"Ella-e"},"content":"        // invalid address","lastModifiedDate":"2024-03-17"},{"lineNumber":76,"author":{"gitId":"Ella-e"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB","lastModifiedDate":"2024-03-17"},{"lineNumber":77,"author":{"gitId":"Ella-e"},"content":"            + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":78,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":79,"author":{"gitId":"Ella-e"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2024-03-17"},{"lineNumber":80,"author":{"gitId":"Ella-e"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + INVALID_PHONE_DESC + INVALID_EMAIL_DESC,","lastModifiedDate":"2024-03-17"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"            Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":82,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":83,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"Ella-e":83}},{"path":"src/test/java/vitalconnect/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"        String argsString \u003d \"  some random string /t allergytag with leading and trailing spaces \";","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"MaYuehan":1,"-":148,"SeaHogs":1}},{"path":"src/test/java/vitalconnect/logic/parser/ClinicParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.AddContactCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.ClearCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.CreateAptCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.DeleteAptCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.DeleteCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.DeleteContactCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.ExitCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.FindCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.HelpCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.ListAptCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.ListCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"public class ClinicParserTest {","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"    private final ClinicParser parser \u003d new ClinicParser();","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    //    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"    //    public void parseCommand_add() throws Exception {","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"    //        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"    //        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"    //        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"    //    }","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"    public void parseCommand_createApt() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"        String getPatientIc \u003d \"S1234567D\";","lastModifiedDate":"2024-03-23"},{"lineNumber":112,"author":{"gitId":"MaYuehan"},"content":"        String dateTimeStr \u003d \"02/02/2024 1330\";","lastModifiedDate":"2024-03-13"},{"lineNumber":113,"author":{"gitId":"MaYuehan"},"content":"        String duration \u003d \"2\";","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"MaYuehan"},"content":"        String inputCommand \u003d CreateAptCommand.COMMAND_WORD + \" ic/\" + getPatientIc","lastModifiedDate":"2024-03-28"},{"lineNumber":115,"author":{"gitId":"MaYuehan"},"content":"                + \" s/\" + dateTimeStr + \" d/\" + duration;","lastModifiedDate":"2024-03-29"},{"lineNumber":116,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"        CreateAptCommand expectedCommand \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"            new CreateAptCommand(new Nric(getPatientIc), ParserUtil.parseTime(dateTimeStr),","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"MaYuehan"},"content":"                    ParserUtil.parseDuration(duration));","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"MaYuehan"},"content":"        CreateAptCommand parsedCommand \u003d (CreateAptCommand) parser.parseCommand(inputCommand);","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(expectedCommand.getPatientIc(), parsedCommand.getPatientIc());","lastModifiedDate":"2024-03-23"},{"lineNumber":123,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(expectedCommand.getDateTimeStr(), parsedCommand.getDateTimeStr());","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(expectedCommand.getEndTimeStr(), parsedCommand.getEndTimeStr());","lastModifiedDate":"2024-03-28"},{"lineNumber":125,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"MaYuehan"},"content":"    public void parseCommand_listApt() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"MaYuehan"},"content":"        assertTrue(parser.parseCommand(ListAptCommand.COMMAND_WORD) instanceof ListAptCommand);","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"MaYuehan"},"content":"        assertTrue(parser.parseCommand(ListAptCommand.COMMAND_WORD + \" 3\") instanceof ListAptCommand);","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"    public void parseCommand_deleteApt() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"Ella-e"},"content":"        String input \u003d DeleteAptCommand.COMMAND_WORD + \" 1\";","lastModifiedDate":"2024-03-26"},{"lineNumber":136,"author":{"gitId":"MaYuehan"},"content":"        DeleteAptCommand command \u003d (DeleteAptCommand) parser.parseCommand(input);","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"Ella-e"},"content":"        Index resIndex \u003d command.getIndex();","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"Ella-e"},"content":"        assertEquals(1, resIndex.getOneBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":139,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":141,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":142,"author":{"gitId":"Ella-e"},"content":"    public void parseCommand_addContact() throws ParseException {","lastModifiedDate":"2024-03-18"},{"lineNumber":143,"author":{"gitId":"Ella-e"},"content":"        assertTrue(parser.parseCommand(AddContactCommand.COMMAND_WORD","lastModifiedDate":"2024-03-18"},{"lineNumber":144,"author":{"gitId":"Ella-e"},"content":"            + \" ic/S7898305A p/12345678\") instanceof AddContactCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":145,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":146,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":147,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":148,"author":{"gitId":"Ella-e"},"content":"    public void parseCommand_deleteContact() throws ParseException {","lastModifiedDate":"2024-03-18"},{"lineNumber":149,"author":{"gitId":"Ella-e"},"content":"        assertTrue(parser.parseCommand(DeleteContactCommand.COMMAND_WORD","lastModifiedDate":"2024-03-18"},{"lineNumber":150,"author":{"gitId":"Ella-e"},"content":"            + \" ic/S7898305A\") instanceof DeleteContactCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":151,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"javierng2knus":2,"MaYuehan":51,"Ella-e":20,"-":73,"SeaHogs":6}},{"path":"src/test/java/vitalconnect/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.Command;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput,","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            Command expectedCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"MaYuehan":3,"-":36}},{"path":"src/test/java/vitalconnect/logic/parser/CreateAptCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.CreateAptCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"public class CreateAptCommandParserTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"    private final CreateAptCommandParser parser \u003d new CreateAptCommandParser();","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"    public void parse_validArgs_returnsCreateAptCommand() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"        String getPatientIc \u003d \"S1234567D\";","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"        String dateTimeStr \u003d \"02/02/2024 1330\";","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"        String duration \u003d \"2\";","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"        String userInput \u003d \" ic/\" + getPatientIc + \" s/\" + dateTimeStr + \" d/\" + duration;","lastModifiedDate":"2024-03-29"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"        CreateAptCommand expectedCommand \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"            new CreateAptCommand(new Nric(getPatientIc), ParserUtil.parseTime(dateTimeStr),","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"                    ParserUtil.parseDuration(duration));","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(parser.parse(userInput).getPatientIc(), expectedCommand.getPatientIc());","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(parser.parse(userInput).getDateTimeStr(), expectedCommand.getDateTimeStr());","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(parser.parse(userInput).getEndTimeStr(), expectedCommand.getEndTimeStr());","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    public void parse_missingDateTime_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"        String userInput \u003d \"John Doe\";","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(userInput));","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"    public void parse_missingName_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"        String userInput \u003d \"02/02/2024 1330\";","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(userInput));","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"    public void parse_invalidDateTimeFormat_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"        String ic \u003d \"S1234567D\";","lastModifiedDate":"2024-03-23"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"        String time \u003d \"02-02-2024 1330\";","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"        String userInput \u003d ic + time;","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(userInput));","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"MaYuehan":52,"Ella-e":4}},{"path":"src/test/java/vitalconnect/logic/parser/DeleteAptCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.DeleteAptCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"public class DeleteAptCommandParserTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"    private final DeleteAptCommandParser parser \u003d new DeleteAptCommandParser();","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"    public void parse_validArgs_returnsDeleteAptCommand() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        Index validIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"        String userInput \u003d \"1\";","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"        DeleteAptCommand expectedCommand \u003d new DeleteAptCommand(validIndex);","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(validIndex, expectedCommand.getIndex());","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(parser.parse(userInput).getIndex(), expectedCommand.getIndex());","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"    public void parse_missingIndex_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"        String userInput \u003d \"/name John Doe\";","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(userInput));","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"    public void parse_invalidIndexFormat_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"        String userInput \u003d \"notAnIndex\";","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(userInput));","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"MaYuehan":34,"Ella-e":5}},{"path":"src/test/java/vitalconnect/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.DeleteCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"MaYuehan":6,"-":26}},{"path":"src/test/java/vitalconnect/logic/parser/DeleteContactCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.TypicalPersons.BOB_CONTACT;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.logic.commands.DeleteContactCommand;","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"public class DeleteContactCommandParserTest {","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"    private DeleteContactCommandParser parser \u003d new DeleteContactCommandParser();","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB_CONTACT).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NRIC_DESC_BOB,","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"            new DeleteContactCommand(expectedPerson.getIdentificationInformation().getNric()));","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE);","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"        // missing nric prefix","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB,","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"            expectedMessage);","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"Ella-e":37}},{"path":"src/test/java/vitalconnect/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ALLERGYTAG;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_ALLERGYTAG;","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS); // invalid nric","lastModifiedDate":"2024-03-15"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"        //assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, AllergyTag.MESSAGE_CONSTRAINTS); // invalid allergytag","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"javierng2knus"},"content":"        // invalid name followed by valid nric","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + NRIC_DESC_AMY, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_NRIC_DESC,","lastModifiedDate":"2024-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":85,"author":{"gitId":"javierng2knus"},"content":"        String userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2024-03-15"},{"lineNumber":86,"author":{"gitId":"javierng2knus"},"content":"                + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2024-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"                .withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":98,"author":{"gitId":"javierng2knus"},"content":"        String userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB + NAME_DESC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"javierng2knus"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB)","lastModifiedDate":"2024-03-15"},{"lineNumber":101,"author":{"gitId":"javierng2knus"},"content":"                .withName(VALID_NAME_AMY).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"javierng2knus"},"content":"        // nric","lastModifiedDate":"2024-03-15"},{"lineNumber":117,"author":{"gitId":"javierng2knus"},"content":"        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":118,"author":{"gitId":"javierng2knus"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_AMY).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"SeaHogs"},"content":"        //        // tags","lastModifiedDate":"2024-03-18"},{"lineNumber":123,"author":{"gitId":"SeaHogs"},"content":"        //        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2024-03-18"},{"lineNumber":124,"author":{"gitId":"SeaHogs"},"content":"        //        descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2024-03-18"},{"lineNumber":125,"author":{"gitId":"SeaHogs"},"content":"        //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2024-03-18"},{"lineNumber":126,"author":{"gitId":"SeaHogs"},"content":"        //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // More extensive testing of duplicate parameter detections is done in","lastModifiedDate":"2023-07-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()","lastModifiedDate":"2023-07-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-07-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":136,"author":{"gitId":"javierng2knus"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_BOB + INVALID_NRIC_DESC;","lastModifiedDate":"2024-03-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":138,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, userInput, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-07-14"},{"lineNumber":141,"author":{"gitId":"javierng2knus"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NRIC_DESC + NAME_DESC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":143,"author":{"gitId":"javierng2knus"},"content":"        assertParseFailure(parser, userInput, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":145,"author":{"gitId":"javierng2knus"},"content":"        // multiple valid fields repeated","lastModifiedDate":"2024-03-15"},{"lineNumber":146,"author":{"gitId":"javierng2knus"},"content":"        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_AMY + NRIC_DESC_AMY","lastModifiedDate":"2024-03-15"},{"lineNumber":147,"author":{"gitId":"javierng2knus"},"content":"                + TAG_DESC_FRIEND + NRIC_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2024-03-15"},{"lineNumber":148,"author":{"gitId":"javierng2knus"},"content":"                + NRIC_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2024-03-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":151,"author":{"gitId":"javierng2knus"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-07-14"},{"lineNumber":154,"author":{"gitId":"javierng2knus"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NRIC_DESC + INVALID_NRIC_DESC;","lastModifiedDate":"2024-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":157,"author":{"gitId":"javierng2knus"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"SeaHogs"},"content":"    //    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":161,"author":{"gitId":"SeaHogs"},"content":"    //    public void parse_resetTags_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":162,"author":{"gitId":"SeaHogs"},"content":"    //        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2024-03-18"},{"lineNumber":163,"author":{"gitId":"SeaHogs"},"content":"    //        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2024-03-18"},{"lineNumber":164,"author":{"gitId":"SeaHogs"},"content":"    //","lastModifiedDate":"2024-03-18"},{"lineNumber":165,"author":{"gitId":"SeaHogs"},"content":"    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2024-03-18"},{"lineNumber":166,"author":{"gitId":"SeaHogs"},"content":"    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2024-03-18"},{"lineNumber":167,"author":{"gitId":"SeaHogs"},"content":"    //","lastModifiedDate":"2024-03-18"},{"lineNumber":168,"author":{"gitId":"SeaHogs"},"content":"    //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":169,"author":{"gitId":"SeaHogs"},"content":"    //    }","lastModifiedDate":"2024-03-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"javierng2knus":30,"MaYuehan":19,"-":101,"SeaHogs":20}},{"path":"src/test/java/vitalconnect/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.FindCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"MaYuehan":6,"-":28}},{"path":"src/test/java/vitalconnect/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"    private static final String INVALID_ADDRESS \u003d \" /\";","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"SeaHogs"},"content":"        AllergyTag expectedAllergyTag \u003d new AllergyTag(VALID_TAG_1);","lastModifiedDate":"2024-03-18"},{"lineNumber":164,"author":{"gitId":"SeaHogs"},"content":"        assertEquals(expectedAllergyTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2024-03-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"SeaHogs"},"content":"        AllergyTag expectedAllergyTag \u003d new AllergyTag(VALID_TAG_1);","lastModifiedDate":"2024-03-18"},{"lineNumber":171,"author":{"gitId":"SeaHogs"},"content":"        assertEquals(expectedAllergyTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2024-03-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"SeaHogs"},"content":"        Set\u003cAllergyTag\u003e actualAllergyTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2024-03-18"},{"lineNumber":192,"author":{"gitId":"SeaHogs"},"content":"        Set\u003cAllergyTag\u003e expectedAllergyTagSet \u003d new HashSet\u003cAllergyTag\u003e(Arrays.asList(new AllergyTag(VALID_TAG_1),","lastModifiedDate":"2024-03-18"},{"lineNumber":193,"author":{"gitId":"SeaHogs"},"content":"                new AllergyTag(VALID_TAG_2)));","lastModifiedDate":"2024-03-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"SeaHogs"},"content":"        assertEquals(expectedAllergyTagSet, actualAllergyTagSet);","lastModifiedDate":"2024-03-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"MaYuehan":9,"Ella-e":1,"-":178,"SeaHogs":9}},{"path":"src/test/java/vitalconnect/model/ClinicTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"public class ClinicTest {","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"    private final Clinic clinic \u003d new Clinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(Collections.emptyList(), clinic.getPersonList());","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e clinic.resetData(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"    public void resetData_withValidReadOnlyClinic_replacesData() {","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"        Clinic newData \u003d getTypicalClinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"        clinic.resetData(newData);","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(newData, clinic);","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"        ClinicStub newData \u003d new ClinicStub(newPersons);","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e clinic.resetData(newData));","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e clinic.hasPerson(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"    public void hasPerson_personNotInClinic_returnsFalse() {","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(clinic.hasPerson(ALICE));","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"    public void hasPerson_personInClinic_returnsTrue() {","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"        clinic.addPerson(ALICE);","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(clinic.hasPerson(ALICE));","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"javierng2knus"},"content":"    public void hasPerson_personWithSameIdentityFieldsInClinic_returnsTrue() {","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"javierng2knus"},"content":"        clinic.addPerson(ALICE);","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(clinic.hasPerson(editedAlice));","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e clinic.getPersonList().remove(0));","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"javierng2knus"},"content":"        String expected \u003d Clinic.class.getCanonicalName() + \"{persons\u003d\" + clinic.getPersonList() + \"}\";","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(expected, clinic.toString());","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"javierng2knus"},"content":"     * A stub ReadOnlyClinic whose persons list can violate interface constraints.","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"javierng2knus"},"content":"    private static class ClinicStub implements ReadOnlyClinic {","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"javierng2knus"},"content":"        ClinicStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"javierng2knus":28,"MaYuehan":8,"-":72}},{"path":"src/test/java/vitalconnect/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Height;","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Weight;","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.ClinicBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(new Clinic(), new Clinic(modelManager.getClinic()));","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"        userPrefs.setClinicFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"        userPrefs.setClinicFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"    public void setClinicFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setClinicFilePath(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"javierng2knus"},"content":"    public void setClinicFilePath_validPath_setsClinicFilePath() {","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"        modelManager.setClinicFilePath(path);","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(path, modelManager.getClinicFilePath());","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"javierng2knus"},"content":"    public void hasPerson_personNotInClinic_returnsFalse() {","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"javierng2knus"},"content":"    public void hasPerson_personInClinic_returnsTrue() {","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"MaYuehan"},"content":"    public void addAppointment_appointmentAddedAndSortedList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"MaYuehan"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"MaYuehan"},"content":"        LocalDateTime now \u003d LocalDateTime.now();","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"MaYuehan"},"content":"        Appointment firstAppointment \u003d new Appointment(\"Alice\", \"S1234567D\", now.plusDays(1),","lastModifiedDate":"2024-03-28"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"                now.plusDays(2), 2);","lastModifiedDate":"2024-03-30"},{"lineNumber":114,"author":{"gitId":"MaYuehan"},"content":"        Appointment secondAppointment \u003d new Appointment(\"Bob\", \"S1234568D\", now.plusDays(2),","lastModifiedDate":"2024-03-28"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"                now.plusDays(3), 3);","lastModifiedDate":"2024-03-30"},{"lineNumber":116,"author":{"gitId":"MaYuehan"},"content":"        Appointment thirdAppointment \u003d new Appointment(\"Charlie\", \"S1234569D\", now,","lastModifiedDate":"2024-03-28"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"                now.plusDays(1), 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":118,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"MaYuehan"},"content":"        modelManager.addAppointment(firstAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"MaYuehan"},"content":"        modelManager.addAppointment(secondAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"MaYuehan"},"content":"        modelManager.addAppointment(thirdAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"MaYuehan"},"content":"        ObservableList\u003cAppointment\u003e appointments \u003d modelManager.getFilteredAppointmentList();","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(3, appointments.size());","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(thirdAppointment, appointments.get(0)); // Verify sorting by datetime","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(firstAppointment, appointments.get(1));","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(secondAppointment, appointments.get(2));","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"MaYuehan"},"content":"    public void getFilteredAppointmentList_returnsAllAppointments() {","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"MaYuehan"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"MaYuehan"},"content":"        assertTrue(modelManager.getFilteredAppointmentList().isEmpty());","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"MaYuehan"},"content":"        Appointment appointment \u003d new Appointment(\"Alice\", \"S1234567D\", LocalDateTime.now(),","lastModifiedDate":"2024-03-28"},{"lineNumber":136,"author":{"gitId":"Ella-e"},"content":"                LocalDateTime.now().plusDays(2), 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":137,"author":{"gitId":"MaYuehan"},"content":"        modelManager.addAppointment(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(1, modelManager.getFilteredAppointmentList().size());","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(appointment, modelManager.getFilteredAppointmentList().get(0));","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"MaYuehan"},"content":"    public void deleteAppointment_appointmentDeleted() {","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"MaYuehan"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"MaYuehan"},"content":"        Appointment appointment \u003d new Appointment(\"Alice\",","lastModifiedDate":"2024-03-23"},{"lineNumber":147,"author":{"gitId":"Ella-e"},"content":"                \"S1234567D\", LocalDateTime.now(), LocalDateTime.now().plusDays(1), 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":148,"author":{"gitId":"MaYuehan"},"content":"        modelManager.addAppointment(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(1, modelManager.getFilteredAppointmentList().size());","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"MaYuehan"},"content":"        modelManager.deleteAppointment(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"MaYuehan"},"content":"        assertTrue(modelManager.getFilteredAppointmentList().isEmpty());","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":157,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":158,"author":{"gitId":"MaYuehan"},"content":"    public void personExist_existingAndNonExistingPerson() {","lastModifiedDate":"2024-03-13"},{"lineNumber":159,"author":{"gitId":"MaYuehan"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2024-03-13"},{"lineNumber":160,"author":{"gitId":"MaYuehan"},"content":"        modelManager.addPerson(ALICE); // Assuming ALICE is a predefined Person object","lastModifiedDate":"2024-03-13"},{"lineNumber":161,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":162,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(modelManager.doesPersonExist(ALICE.getIdentificationInformation().getName().fullName));","lastModifiedDate":"2024-03-15"},{"lineNumber":163,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(modelManager.doesPersonExist(\"Non Existing Person\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":164,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":165,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":166,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":167,"author":{"gitId":"Ella-e"},"content":"    public void updatePersonContactInformation_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":168,"author":{"gitId":"Ella-e"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2024-03-18"},{"lineNumber":169,"author":{"gitId":"Ella-e"},"content":"        modelManager.addPerson(ALICE); // Assuming ALICE is a predefined Person object","lastModifiedDate":"2024-03-18"},{"lineNumber":170,"author":{"gitId":"Ella-e"},"content":"        ContactInformation ci \u003d new ContactInformation(new Email(\"email@email.com\"), new Phone(\"\"), new Address(\"\"));","lastModifiedDate":"2024-03-18"},{"lineNumber":171,"author":{"gitId":"Ella-e"},"content":"        modelManager.updatePersonContactInformation(ALICE.getIdentificationInformation().getNric(), ci);","lastModifiedDate":"2024-03-18"},{"lineNumber":172,"author":{"gitId":"Ella-e"},"content":"        assertEquals(ci, modelManager","lastModifiedDate":"2024-03-18"},{"lineNumber":173,"author":{"gitId":"Ella-e"},"content":"            .findPersonByNric(ALICE.getIdentificationInformation().getNric()).getContactInformation());","lastModifiedDate":"2024-03-18"},{"lineNumber":174,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":175,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":176,"author":{"gitId":"SeaHogs"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":177,"author":{"gitId":"SeaHogs"},"content":"    public void updatePersonMedicalInformation_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":178,"author":{"gitId":"SeaHogs"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2024-03-19"},{"lineNumber":179,"author":{"gitId":"SeaHogs"},"content":"        modelManager.addPerson(ALICE); // Assuming ALICE is a predefined Person object","lastModifiedDate":"2024-03-19"},{"lineNumber":180,"author":{"gitId":"SeaHogs"},"content":"        MedicalInformation mi \u003d new MedicalInformation(new Height(\"111\"), new Weight(\"111\"));","lastModifiedDate":"2024-03-19"},{"lineNumber":181,"author":{"gitId":"SeaHogs"},"content":"        modelManager.updatePersonMedicalInformation(ALICE.getIdentificationInformation().getNric(), mi);","lastModifiedDate":"2024-03-19"},{"lineNumber":182,"author":{"gitId":"SeaHogs"},"content":"        assertEquals(mi, modelManager","lastModifiedDate":"2024-03-19"},{"lineNumber":183,"author":{"gitId":"SeaHogs"},"content":"                .findPersonByNric(ALICE.getIdentificationInformation().getNric()).getMedicalInformation());","lastModifiedDate":"2024-03-19"},{"lineNumber":184,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":185,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":188,"author":{"gitId":"javierng2knus"},"content":"        Clinic clinic \u003d new ClinicBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2024-03-11"},{"lineNumber":189,"author":{"gitId":"javierng2knus"},"content":"        Clinic differentClinic \u003d new Clinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":191,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":194,"author":{"gitId":"MaYuehan"},"content":"        modelManager \u003d new ModelManager(clinic, userPrefs, appointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":195,"author":{"gitId":"MaYuehan"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(clinic, userPrefs, appointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":207,"author":{"gitId":"javierng2knus"},"content":"        // different clinic -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":208,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentClinic, userPrefs, appointments)));","lastModifiedDate":"2024-03-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":211,"author":{"gitId":"javierng2knus"},"content":"        String[] keywords \u003d ALICE.getIdentificationInformation().getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2024-03-15"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":213,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(modelManager.equals(new ModelManager(clinic, userPrefs, appointments)));","lastModifiedDate":"2024-03-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"javierng2knus"},"content":"        differentUserPrefs.setClinicFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":221,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(modelManager.equals(new ModelManager(clinic, differentUserPrefs, appointments)));","lastModifiedDate":"2024-03-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"javierng2knus":16,"MaYuehan":72,"Ella-e":19,"-":104,"SeaHogs":12}},{"path":"src/test/java/vitalconnect/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"    public void setClinicFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setClinicFilePath(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"    public void setAppointmentFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2024-03-23"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAppointmentFilePath(null));","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"javierng2knus":2,"MaYuehan":7,"-":17}},{"path":"src/test/java/vitalconnect/model/allergytag/AllergyTagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package vitalconnect.model.allergytag;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"public class AllergyTagTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AllergyTag(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AllergyTag(invalidTagName));","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"        // null allergytag name","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"        assertThrows(NullPointerException.class, () -\u003e AllergyTag.isValidTagName(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"MaYuehan":1,"-":19,"SeaHogs":8}},{"path":"src/test/java/vitalconnect/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"                .getMedicalInformation()","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"                .getAllergyTag()","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"                .remove(0));","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"        // same nric, all other attributes different -\u003e returns true","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"        // different nric, all other attributes same -\u003e returns false","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns true","lastModifiedDate":"2024-03-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2024-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"    public void copyPerson_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"Ella-e"},"content":"        Person p \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"Ella-e"},"content":"        assertEquals(p, p.copyPerson());","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"javierng2knus"},"content":"        // different nric -\u003e returns false","lastModifiedDate":"2024-03-15"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"        String expected \u003d Person.class.getCanonicalName()","lastModifiedDate":"2024-03-15"},{"lineNumber":90,"author":{"gitId":"javierng2knus"},"content":"                + \"{identification\u003d[name\u003d\" + ALICE.getIdentificationInformation().getName()","lastModifiedDate":"2024-03-15"},{"lineNumber":91,"author":{"gitId":"Ella-e"},"content":"                + \", nric\u003d\" + ALICE.getIdentificationInformation().getNric()","lastModifiedDate":"2024-03-17"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"                + \"], contact\u003d\" + ALICE.getContactInformation()","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"SeaHogs"},"content":"                + \", medicalinfo\u003d\" + ALICE.getMedicalInformation().toString() + \"}\";","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"javierng2knus":13,"MaYuehan":7,"Ella-e":7,"-":63,"SeaHogs":6}},{"path":"src/test/java/vitalconnect/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList().toString(), uniquePersonList.toString());","lastModifiedDate":"2019-02-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"javierng2knus":4,"MaYuehan":8,"-":164}},{"path":"src/test/java/vitalconnect/model/person/contactinformation/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.contactinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    public void constructor_noParameter_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        assertEquals(new Address().value, \"\");","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        String invalidAddress \u003d \"/\";","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"        assertFalse(Address.isValidAddress(\"/\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"        assertFalse(Address.isValidAddress(\" /\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d new Address(\"Valid Address\");","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(address.equals(new Address(\"Valid Address\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(address.equals(address));","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(new Address(\"Other Valid Address\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"MaYuehan":2,"Ella-e":9,"-":51}},{"path":"src/test/java/vitalconnect/model/person/contactinformation/ContactInformationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ella-e"},"content":"package vitalconnect.model.person.contactinformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"public class ContactInformationTest {","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"Ella-e"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"Ella-e"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ContactInformation((String) null, null, null));","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    public void constructor_withParameter_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"        Email email \u003d new Email(\"abc@email.com\");","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        Phone phone \u003d new Phone(\"12345678\");","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"        Address address \u003d new Address(\"address\");","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"        ContactInformation ci \u003d new ContactInformation(email, phone, address);","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"        assertEquals(ci.getEmail(), email);","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"Ella-e"},"content":"        assertEquals(ci.getPhone(), phone);","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        assertEquals(ci.getAddress(), address);","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"    public void equals() {","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"        Address address \u003d new Address(\"Valid Address\");","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"        Phone phone \u003d new Phone(\"12345678\");","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"        Email email \u003d new Email(\"email@e.com\");","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"Ella-e"},"content":"        Address differentAddress \u003d new Address(\"Address\");","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"Ella-e"},"content":"        ContactInformation contactInformation \u003d new ContactInformation(email, phone, address);","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"        assertTrue(contactInformation.equals(new ContactInformation(email, phone, address)));","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"        assertTrue(contactInformation.equals(contactInformation));","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"Ella-e"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"Ella-e"},"content":"        assertFalse(contactInformation.equals(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"Ella-e"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"Ella-e"},"content":"        assertFalse(contactInformation.equals(5.0f));","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Ella-e"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"        assertFalse(contactInformation.equals(new ContactInformation(email, phone, differentAddress)));","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"Ella-e":50}},{"path":"src/test/java/vitalconnect/model/person/contactinformation/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.contactinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    public void constructor_noParameter_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        assertEquals(new Email().value, \"\");","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        String invalidEmail \u003d \"abc\";","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Email email \u003d new Email(\"valid@email\");","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(email.equals(new Email(\"valid@email\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(email.equals(email));","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(new Email(\"other.valid@email\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"MaYuehan":2,"Ella-e":7,"-":81}},{"path":"src/test/java/vitalconnect/model/person/contactinformation/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.contactinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"    public void constructor_noParameter_success() {","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"        assertEquals(new Phone().value, \"\");","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        String invalidPhone \u003d \"12\";","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Phone phone \u003d new Phone(\"999\");","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(phone.equals(new Phone(\"999\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(phone.equals(phone));","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(new Phone(\"995\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"MaYuehan":2,"Ella-e":7,"-":55}},{"path":"src/test/java/vitalconnect/model/person/identificationinformation/IdentificationInformationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"javierng2knus"},"content":"package vitalconnect.model.person.identificationinformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"javierng2knus"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":"public class IdentificationInformationTest {","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e new IdentificationInformation(new Name(null), null));","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e new IdentificationInformation(null, new Nric(null)));","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e new IdentificationInformation(new Name(null), new Nric(null)));","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"    public void constructor_invalidIdentificationInformation_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"        String invalidNric \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"        String validName \u003d \"John\";","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"        String validNric \u003d \"S1234567D\";","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new IdentificationInformation(invalidName, invalidNric));","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new IdentificationInformation(invalidName, validNric));","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new IdentificationInformation(validName, invalidNric));","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"    public void isValidIdentificationInformation() {","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"        // null name and nric","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"                     IdentificationInformation.isValidIdentificationInformation(null, null));","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"        String validNric \u003d \"S1234567D\";","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"        String validName \u003d \"John\";","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"        // invalid name and valid nric","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"                    .isValidIdentificationInformation(\"\", validNric)); // empty string","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"                    .isValidIdentificationInformation(\" \", validNric)); // spaces only","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"                    .isValidIdentificationInformation(\"^\", validNric)); // only non-alphanumeric characters","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"                    .isValidIdentificationInformation(\"peter*\", validNric)); // contains non-alphanumeric characters","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"        // valid name and invalid nric","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"javierng2knus"},"content":"                    .isValidIdentificationInformation(validName,","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"javierng2knus"},"content":"                                                    \"S12345678A\")); // improper format","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"                    .isValidIdentificationInformation(validName,","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"                                                    \"S1234567A\")); // contains proper format but fails checksum","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"        // valid name and valid nric","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"javierng2knus"},"content":"                   .isValidIdentificationInformation(\"peter jack\",","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"                                                     \"S1234567D\")); // empty string","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"                   .isValidIdentificationInformation(\"12345\",","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"javierng2knus"},"content":"                                                     \"S1234567D\")); // spaces only","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"                   .isValidIdentificationInformation(\"peter the 2nd\",","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"javierng2knus"},"content":"                                                     \"S1234567D\")); // only non-alphanumeric characters","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"javierng2knus"},"content":"                   .isValidIdentificationInformation(\"Capital Tan\",","lastModifiedDate":"2024-03-17"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"                                                     \"S1234567D\")); // contains non-alphanumeric characters","lastModifiedDate":"2024-03-17"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(IdentificationInformation","lastModifiedDate":"2024-03-17"},{"lineNumber":70,"author":{"gitId":"javierng2knus"},"content":"                   .isValidIdentificationInformation(\"David Roger Jackson Ray Jr 2nd\",","lastModifiedDate":"2024-03-17"},{"lineNumber":71,"author":{"gitId":"javierng2knus"},"content":"                                                     \"S1234567D\")); // contains proper format but fails checksum","lastModifiedDate":"2024-03-17"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":74,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":75,"author":{"gitId":"javierng2knus"},"content":"    public void equals() {","lastModifiedDate":"2024-03-17"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"        IdentificationInformation info1 \u003d new IdentificationInformation(\"Valid Name\",","lastModifiedDate":"2024-03-17"},{"lineNumber":77,"author":{"gitId":"javierng2knus"},"content":"                                                                        \"S1234567D\");","lastModifiedDate":"2024-03-17"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"        IdentificationInformation info2 \u003d new IdentificationInformation(new Name(\"Valid Name\"),","lastModifiedDate":"2024-03-17"},{"lineNumber":79,"author":{"gitId":"javierng2knus"},"content":"                                                                        new Nric(\"S1234567D\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":80,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":81,"author":{"gitId":"javierng2knus"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":82,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(info1.equals(info2));","lastModifiedDate":"2024-03-17"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":84,"author":{"gitId":"javierng2knus"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":85,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(info1.equals(info1));","lastModifiedDate":"2024-03-17"},{"lineNumber":86,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(info2.equals(info2));","lastModifiedDate":"2024-03-17"},{"lineNumber":87,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":88,"author":{"gitId":"javierng2knus"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(info1.equals(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":90,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(info2.equals(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":91,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":92,"author":{"gitId":"javierng2knus"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":93,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(info1.equals(5.0f));","lastModifiedDate":"2024-03-17"},{"lineNumber":94,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(info2.equals(5.0f));","lastModifiedDate":"2024-03-17"},{"lineNumber":95,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":96,"author":{"gitId":"javierng2knus"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":97,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(info1.equals(new IdentificationInformation(new Name(\"Other Valid Name\"),","lastModifiedDate":"2024-03-17"},{"lineNumber":98,"author":{"gitId":"javierng2knus"},"content":"                                                               new Nric(\"S1234568B\"))));","lastModifiedDate":"2024-03-17"},{"lineNumber":99,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(info2.equals(new IdentificationInformation(new Name(\"Other Valid Name\"),","lastModifiedDate":"2024-03-17"},{"lineNumber":100,"author":{"gitId":"javierng2knus"},"content":"                                                               new Nric(\"S1234568B\"))));","lastModifiedDate":"2024-03-17"},{"lineNumber":101,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":102,"author":{"gitId":"javierng2knus"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"javierng2knus":102}},{"path":"src/test/java/vitalconnect/model/person/identificationinformation/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.identificationinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withNric(\"S1234567D\").build()));","lastModifiedDate":"2024-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expected \u003d NameContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":2,"-":81}},{"path":"src/test/java/vitalconnect/model/person/identificationinformation/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.model.person.identificationinformation;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d new Name(\"Valid Name\");","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(new Name(\"Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(name));","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(new Name(\"Other Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"MaYuehan":2,"-":58}},{"path":"src/test/java/vitalconnect/model/person/identificationinformation/NricTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"javierng2knus"},"content":"package vitalconnect.model.person.identificationinformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"javierng2knus"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":"public class NricTest {","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Nric(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"    public void constructor_invalidNric_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"        String invalidNric \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"    public void isValidNric() {","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"        // null nric","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"        // invalid nric","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(Nric.isValidNric(\"\")); // empty string","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(Nric.isValidNric(\" \")); // spaces only","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(Nric.isValidNric(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(Nric.isValidNric(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(Nric.isValidNric(\"S1234567A\")); // contains proper format but fails checksum","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"        // valid nric","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(Nric.isValidNric(\"S1234567D\")); // valid","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"    public void equals() {","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"        Nric nric \u003d new Nric(\"S1234567D\");","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(nric.equals(new Nric(\"S1234567D\")));","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"        assertTrue(nric.equals(nric));","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(nric.equals(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"javierng2knus"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(nric.equals(5.0f));","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(nric.equals(new Nric(\"S1234568B\")));","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"javierng2knus"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"javierng2knus":57}},{"path":"src/test/java/vitalconnect/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"    private static final String INVALID_NRIC \u003d \"911a\";","lastModifiedDate":"2024-03-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"    private static final String INVALID_EMAIL \u003d \"email\";","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    private static final String INVALID_PHONE \u003d \"123\";","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"    private static final String INVALID_ADDRESS \u003d \"ac/\";","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"    private static final String VALID_EMAIL \u003d \"example@email.com\";","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"Ella-e"},"content":"    private static final String VALID_PHONE \u003d \"12345678\";","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"    private static final String VALID_ADDRESS \u003d \"Prince George\u0027s Park Residence\";","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"    private static final String VALID_HEIGHT \u003d \"170\";","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"    private static final String VALID_WEIGHT \u003d \"60\";","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"    private static final String INVALID_HEIGHT \u003d \"170cm\";","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"    private static final String INVALID_WEIGHT \u003d \"60kg\";","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"    private static final List\u003cJsonAdaptedTag\u003e INVALID_ALLERGY \u003d List.of(\"pe@nut\").stream()","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"            .map(JsonAdaptedTag::new).collect(Collectors.toList());","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"Ella-e"},"content":"    private static final ContactInformation VALID_CI \u003d new ContactInformation(new Email(VALID_EMAIL),","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Ella-e"},"content":"        new Phone(VALID_PHONE), new Address(VALID_ADDRESS));","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"    private static final String VALID_NAME \u003d BENSON.getIdentificationInformation().getName().toString();","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"    private static final String VALID_NRIC \u003d BENSON.getIdentificationInformation().getNric().toString();","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_ALLERGY \u003d BENSON.getMedicalInformation().getAllergyTag().stream()","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE, VALID_ADDRESS, VALID_HEIGHT,","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"                    VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_NRIC, VALID_EMAIL,","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"            VALID_PHONE, VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"javierng2knus"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2024-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_NRIC, VALID_EMAIL, VALID_PHONE, VALID_ADDRESS,","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"                        VALID_HEIGHT, VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"javierng2knus"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"javierng2knus"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2024-03-15"},{"lineNumber":81,"author":{"gitId":"Ella-e"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2024-03-17"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"                VALID_HEIGHT, VALID_WEIGHT, VALID_ADDRESS, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2024-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE, VALID_ADDRESS,","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"SeaHogs"},"content":"                        VALID_HEIGHT, VALID_WEIGHT, INVALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":99,"author":{"gitId":"Ella-e"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, null,","lastModifiedDate":"2024-03-18"},{"lineNumber":100,"author":{"gitId":"SeaHogs"},"content":"            VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2024-03-18"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":108,"author":{"gitId":"SeaHogs"},"content":"            new JsonAdaptedPerson(VALID_NAME, INVALID_NRIC, VALID_EMAIL, INVALID_PHONE, VALID_ADDRESS,","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"SeaHogs"},"content":"                    VALID_HEIGHT, VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, null, VALID_PHONE,","lastModifiedDate":"2024-03-18"},{"lineNumber":117,"author":{"gitId":"SeaHogs"},"content":"            VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2024-03-18"},{"lineNumber":119,"author":{"gitId":"Ella-e"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":120,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":121,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":122,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":123,"author":{"gitId":"Ella-e"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":124,"author":{"gitId":"Ella-e"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":125,"author":{"gitId":"SeaHogs"},"content":"            new JsonAdaptedPerson(VALID_NAME, INVALID_NRIC, INVALID_EMAIL, VALID_PHONE, VALID_ADDRESS,","lastModifiedDate":"2024-03-18"},{"lineNumber":126,"author":{"gitId":"SeaHogs"},"content":"                    VALID_HEIGHT, VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":127,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-18"},{"lineNumber":128,"author":{"gitId":"Ella-e"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":129,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":130,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":131,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":132,"author":{"gitId":"Ella-e"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":133,"author":{"gitId":"Ella-e"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2024-03-18"},{"lineNumber":134,"author":{"gitId":"SeaHogs"},"content":"            null, VALID_HEIGHT, VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":135,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2024-03-18"},{"lineNumber":136,"author":{"gitId":"Ella-e"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":137,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":138,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":139,"author":{"gitId":"Ella-e"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":140,"author":{"gitId":"Ella-e"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":141,"author":{"gitId":"Ella-e"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":142,"author":{"gitId":"SeaHogs"},"content":"            new JsonAdaptedPerson(VALID_NAME, INVALID_NRIC, VALID_EMAIL, VALID_PHONE, INVALID_ADDRESS,","lastModifiedDate":"2024-03-18"},{"lineNumber":143,"author":{"gitId":"SeaHogs"},"content":"                    VALID_HEIGHT, VALID_WEIGHT, VALID_ALLERGY);","lastModifiedDate":"2024-03-18"},{"lineNumber":144,"author":{"gitId":"Ella-e"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-18"},{"lineNumber":145,"author":{"gitId":"Ella-e"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":146,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":147,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"javierng2knus":8,"MaYuehan":6,"Ella-e":56,"-":53,"SeaHogs":25}},{"path":"src/test/java/vitalconnect/storage/JsonAppointmentStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-23"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"public class JsonAppointmentStorageTest {","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"    @TempDir","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"    public Path testFolder;","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2024-03-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"    public void readAppointments_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"        JsonAppointmentStorage storage \u003d new JsonAppointmentStorage(null);","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(NullPointerException.class, storage::readAppointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"    public void readAppointments_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2024-03-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"        JsonAppointmentStorage storage \u003d new JsonAppointmentStorage(getTempFilePath(\"NonExistentFile.json\"));","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"        assertFalse(storage.readAppointments().isPresent());","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"    public void readAndSaveAppointments_allInOrder_success() throws Exception {","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"        Path filePath \u003d getTempFilePath(\"TempAppointments.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e original \u003d vitalconnect.testutil.TypicalAppointment.getTypicalAppointments();","lastModifiedDate":"2024-03-23"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"        JsonAppointmentStorage jsonAppointmentStorage \u003d new JsonAppointmentStorage(filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"        // Save in new file and read back","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"        jsonAppointmentStorage.saveAppointments(original, filePath);","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e readBack \u003d jsonAppointmentStorage.readAppointments(filePath).get();","lastModifiedDate":"2024-03-23"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2024-03-23"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":47,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":48,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":49,"author":{"gitId":"MaYuehan"},"content":"    public void saveAppointments_nullAppointments_throwsNullPointerException() {","lastModifiedDate":"2024-03-23"},{"lineNumber":50,"author":{"gitId":"MaYuehan"},"content":"        JsonAppointmentStorage storage \u003d new JsonAppointmentStorage(getTempFilePath(\"SomeFile.json\"));","lastModifiedDate":"2024-03-23"},{"lineNumber":51,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(NullPointerException.class, () -\u003e storage.saveAppointments(null,","lastModifiedDate":"2024-03-23"},{"lineNumber":52,"author":{"gitId":"MaYuehan"},"content":"                getTempFilePath(\"SomeFile.json\")));","lastModifiedDate":"2024-03-23"},{"lineNumber":53,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":55,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"MaYuehan"},"content":"    public void saveAppointments_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2024-03-23"},{"lineNumber":57,"author":{"gitId":"MaYuehan"},"content":"        JsonAppointmentStorage storage \u003d new JsonAppointmentStorage(null);","lastModifiedDate":"2024-03-23"},{"lineNumber":58,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2024-03-23"},{"lineNumber":59,"author":{"gitId":"MaYuehan"},"content":"                storage.saveAppointments(vitalconnect.testutil.TypicalAppointment.getTypicalAppointments(), null));","lastModifiedDate":"2024-03-23"},{"lineNumber":60,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":61,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-23"},{"lineNumber":62,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"MaYuehan":62}},{"path":"src/test/java/vitalconnect/storage/JsonClinicStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"javierng2knus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"javierng2knus"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.HOON;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.IDA;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"javierng2knus"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"public class JsonClinicStorageTest {","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonClinicStorageTest\");","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"    @TempDir","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"    public Path testFolder;","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"    public void readClinic_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e readClinic(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"    private java.util.Optional\u003cReadOnlyClinic\u003e readClinic(String filePath) throws Exception {","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"        return new JsonClinicStorage(Paths.get(filePath)).readClinic(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"javierng2knus"},"content":"                : null;","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"        assertFalse(readClinic(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"javierng2knus"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readClinic(\"notJsonFormatClinic.json\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"javierng2knus"},"content":"    public void readClinic_invalidPersonClinic_throwDataLoadingException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readClinic(\"invalidPersonClinic.json\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"    public void readClinic_invalidAndValidPersonClinic_throwDataLoadingException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readClinic(\"invalidAndValidPersonClinic.json\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"    public void readAndSaveClinic_allInOrder_success() throws Exception {","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"javierng2knus"},"content":"        Path filePath \u003d testFolder.resolve(\"TempClinic.json\");","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"        Clinic original \u003d getTypicalClinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"javierng2knus"},"content":"        JsonClinicStorage jsonClinicStorage \u003d new JsonClinicStorage(filePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"javierng2knus"},"content":"        // Save in new file and read back","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"javierng2knus"},"content":"        jsonClinicStorage.saveClinic(original, filePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"javierng2knus"},"content":"        ReadOnlyClinic readBack \u003d jsonClinicStorage.readClinic(filePath).get();","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(original, new Clinic(readBack));","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"javierng2knus"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"javierng2knus"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"javierng2knus"},"content":"        jsonClinicStorage.saveClinic(original, filePath);","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"        readBack \u003d jsonClinicStorage.readClinic(filePath).get();","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(original, new Clinic(readBack));","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"javierng2knus"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"javierng2knus"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"javierng2knus"},"content":"        jsonClinicStorage.saveClinic(original); // file path not specified","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"javierng2knus"},"content":"        readBack \u003d jsonClinicStorage.readClinic().get(); // file path not specified","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(original, new Clinic(readBack));","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"javierng2knus"},"content":"    public void saveClinic_nullClinic_throwsNullPointerException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveClinic(null, \"SomeFile.json\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":95,"author":{"gitId":"javierng2knus"},"content":"     * Saves {@code clinic} at the specified {@code filePath}.","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"javierng2knus"},"content":"    private void saveClinic(ReadOnlyClinic clinic, String filePath) {","lastModifiedDate":"2024-03-11"},{"lineNumber":98,"author":{"gitId":"javierng2knus"},"content":"        try {","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"javierng2knus"},"content":"            new JsonClinicStorage(Paths.get(filePath))","lastModifiedDate":"2024-03-11"},{"lineNumber":100,"author":{"gitId":"javierng2knus"},"content":"                    .saveClinic(clinic, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2024-03-11"},{"lineNumber":101,"author":{"gitId":"javierng2knus"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"javierng2knus"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"javierng2knus"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":104,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":105,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":106,"author":{"gitId":"javierng2knus"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":107,"author":{"gitId":"javierng2knus"},"content":"    public void saveClinic_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2024-03-11"},{"lineNumber":108,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveClinic(new Clinic(), null));","lastModifiedDate":"2024-03-11"},{"lineNumber":109,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":110,"author":{"gitId":"javierng2knus"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"javierng2knus":101,"MaYuehan":9}},{"path":"src/test/java/vitalconnect/storage/JsonSerializableAppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-23"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-23"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.JsonUtil;","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.TypicalAppointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"public class JsonSerializableAppointmentTest {","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":19,"author":{"gitId":"MaYuehan"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\",","lastModifiedDate":"2024-03-23"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"            \"JsonSerializableAppointmentTest\");","lastModifiedDate":"2024-03-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"    private static final Path TYPICAL_APPOINTMENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAppointments.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"MaYuehan"},"content":"    private static final Path INVALID_APPOINTMENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAppointment.json\");","lastModifiedDate":"2024-03-23"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"MaYuehan"},"content":"    public void toModelType_typicalAppointmentsFile_success() throws Exception {","lastModifiedDate":"2024-03-23"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"        JsonSerializableAppointment dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_APPOINTMENTS_FILE,","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"                JsonSerializableAppointment.class).get();","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e appointmentsFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2024-03-23"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e typicalAppointments \u003d TypicalAppointment.getTypicalAppointments();","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(appointmentsFromFile, typicalAppointments);","lastModifiedDate":"2024-03-23"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"    public void toModelType_invalidAppointmentFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"MaYuehan"},"content":"        JsonSerializableAppointment dataFromFile \u003d JsonUtil.readJsonFile(INVALID_APPOINTMENT_FILE,","lastModifiedDate":"2024-03-23"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"                JsonSerializableAppointment.class).get();","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-23"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"MaYuehan":40}},{"path":"src/test/java/vitalconnect/storage/JsonSerializableClinicTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.util.JsonUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.testutil.TypicalPersons;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"public class JsonSerializableClinicTest {","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableClinicTest\");","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsClinic.json\");","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonClinic.json\");","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonClinic.json\");","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"                JsonSerializableClinic.class).get();","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"        Clinic clinicFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"        Clinic typicalPersonsClinic \u003d TypicalPersons.getTypicalClinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(clinicFromFile, typicalPersonsClinic);","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"                JsonSerializableClinic.class).get();","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"javierng2knus"},"content":"        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"                JsonSerializableClinic.class).get();","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableClinic.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"javierng2knus":15,"MaYuehan":6,"-":26}},{"path":"src/test/java/vitalconnect/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"javierng2knus"},"content":"        userPrefs.setClinicFilePath(Paths.get(\"clinic.json\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataLoadingException, IOException {","lastModifiedDate":"2023-06-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"javierng2knus":1,"MaYuehan":5,"-":117}},{"path":"src/test/java/vitalconnect/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.TypicalPersons.getTypicalClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.GuiSettings;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.ReadOnlyClinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"        JsonClinicStorage clinicStorage \u003d new JsonClinicStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"MaYuehan"},"content":"        JsonAppointmentStorage appointmentStorage \u003d new JsonAppointmentStorage(getTempFilePath(\"appts\"));","lastModifiedDate":"2024-03-23"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"        storageManager \u003d new StorageManager(clinicStorage, userPrefsStorage, appointmentStorage);","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"javierng2knus"},"content":"    public void clinicReadSave() throws Exception {","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"javierng2knus"},"content":"         * {@link JsonClinicStorage} class.","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"javierng2knus"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonClinicStorageTest} class.","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"        Clinic original \u003d getTypicalClinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"javierng2knus"},"content":"        storageManager.saveClinic(original);","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"        ReadOnlyClinic retrieved \u003d storageManager.readClinic().get();","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"        assertEquals(original, new Clinic(retrieved));","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":68,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":69,"author":{"gitId":"MaYuehan"},"content":"    public void appointmentsReadSave() throws Exception {","lastModifiedDate":"2024-03-23"},{"lineNumber":70,"author":{"gitId":"MaYuehan"},"content":"        // Prepare original list of appointments","lastModifiedDate":"2024-03-23"},{"lineNumber":71,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e original \u003d vitalconnect.testutil.TypicalAppointment.getTypicalAppointments();","lastModifiedDate":"2024-03-23"},{"lineNumber":72,"author":{"gitId":"MaYuehan"},"content":"        storageManager.saveAppointments(original);","lastModifiedDate":"2024-03-23"},{"lineNumber":73,"author":{"gitId":"MaYuehan"},"content":"        List\u003cAppointment\u003e retrieved \u003d storageManager.readAppointments().get();","lastModifiedDate":"2024-03-23"},{"lineNumber":74,"author":{"gitId":"MaYuehan"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2024-03-23"},{"lineNumber":75,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":76,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"javierng2knus"},"content":"    public void getClinicFilePath() {","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"javierng2knus"},"content":"        assertNotNull(storageManager.getClinicFilePath());","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":82,"author":{"gitId":"MaYuehan"},"content":"    @Test","lastModifiedDate":"2024-03-23"},{"lineNumber":83,"author":{"gitId":"MaYuehan"},"content":"    public void getAppointmentFilePath() {","lastModifiedDate":"2024-03-23"},{"lineNumber":84,"author":{"gitId":"MaYuehan"},"content":"        assertNotNull(storageManager.getAppointmentFilePath());","lastModifiedDate":"2024-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-23"},{"lineNumber":87,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"javierng2knus":10,"MaYuehan":26,"-":51}},{"path":"src/test/java/vitalconnect/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"MaYuehan":1,"-":33}},{"path":"src/test/java/vitalconnect/testutil/ClinicBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":" * A utility class to help with building Clinic objects.","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"javierng2knus"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"javierng2knus"},"content":" *     {@code Clinic ab \u003d new ClinicBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"javierng2knus"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"javierng2knus"},"content":"public class ClinicBuilder {","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"    private Clinic clinic;","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"javierng2knus"},"content":"    public ClinicBuilder() {","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"javierng2knus"},"content":"        clinic \u003d new Clinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"javierng2knus"},"content":"    public ClinicBuilder(Clinic clinic) {","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"javierng2knus"},"content":"        this.clinic \u003d clinic;","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"javierng2knus"},"content":"     * Adds a new {@code Person} to the {@code Clinic} that we are building.","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"javierng2knus"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"    public ClinicBuilder withPerson(Person person) {","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"javierng2knus"},"content":"        clinic.addPerson(person);","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"        return this;","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"    public Clinic build() {","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"        return clinic;","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"javierng2knus":31,"MaYuehan":3}},{"path":"src/test/java/vitalconnect/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"        descriptor.setName(person.getIdentificationInformation().getName());","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"        descriptor.setNric(person.getIdentificationInformation().getNric());","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"        //descriptor.setTags(person.getTags());","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"    public EditPersonDescriptorBuilder withNric(String nric) {","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"javierng2knus"},"content":"        descriptor.setNric(new Nric(nric));","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"javierng2knus":6,"MaYuehan":4,"-":41,"SeaHogs":1}},{"path":"src/test/java/vitalconnect/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Address;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.ContactInformation;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Email;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"Ella-e"},"content":"import vitalconnect.model.person.contactinformation.Phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.IdentificationInformation;","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.identificationinformation.Name;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"javierng2knus"},"content":"import vitalconnect.model.person.identificationinformation.Nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.AllergyTag;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Height;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.MedicalInformation;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"import vitalconnect.model.person.medicalinformation.Weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.util.SampleDataUtil;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":26,"author":{"gitId":"javierng2knus"},"content":"    public static final String DEFAULT_NRIC \u003d \"S7654321F\";","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"Ella-e"},"content":"    public static final String DEFAULT_EMAIL \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"    public static final String DEFAULT_PHONE \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"Ella-e"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"    public static final String DEFAULT_HEIGHT \u003d \"\";","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    public static final String DEFAULT_WEIGHT \u003d \"\";","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"javierng2knus"},"content":"    private Nric nric;","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"Ella-e"},"content":"    private Email email;","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"Ella-e"},"content":"    private Phone phone;","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"Ella-e"},"content":"    private Address address;","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"    private Height height;","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    private Weight weight;","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    private Set\u003cAllergyTag\u003e allergyTags;","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"javierng2knus"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"Ella-e"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"Ella-e"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        height \u003d new Height(DEFAULT_HEIGHT);","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"        weight \u003d new Weight(DEFAULT_WEIGHT);","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"        allergyTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"javierng2knus"},"content":"        name \u003d personToCopy.getIdentificationInformation().getName();","lastModifiedDate":"2024-03-15"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"        nric \u003d personToCopy.getIdentificationInformation().getNric();","lastModifiedDate":"2024-03-15"},{"lineNumber":62,"author":{"gitId":"Ella-e"},"content":"        email \u003d personToCopy.getContactInformation().getEmail();","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"Ella-e"},"content":"        phone \u003d personToCopy.getContactInformation().getPhone();","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"Ella-e"},"content":"        address \u003d personToCopy.getContactInformation().getAddress();","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"        height \u003d personToCopy.getMedicalInformation().getHeight();","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"        weight \u003d personToCopy.getMedicalInformation().getWeight();","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"        allergyTags \u003d new HashSet\u003c\u003e(personToCopy.getMedicalInformation().getAllergyTag());","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"     * Parses the {@code allergyTags} into a {@code Set\u003cAllergyTag\u003e}","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"     * and set it to the {@code Person} that we are building.","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"        this.allergyTags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"javierng2knus"},"content":"     * Sets the {@code Nric} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"javierng2knus"},"content":"    public PersonBuilder withNric(String nric) {","lastModifiedDate":"2024-03-15"},{"lineNumber":91,"author":{"gitId":"javierng2knus"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2024-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":96,"author":{"gitId":"Ella-e"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-17"},{"lineNumber":97,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":98,"author":{"gitId":"Ella-e"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2024-03-17"},{"lineNumber":99,"author":{"gitId":"Ella-e"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2024-03-17"},{"lineNumber":100,"author":{"gitId":"Ella-e"},"content":"        return this;","lastModifiedDate":"2024-03-17"},{"lineNumber":101,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":102,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":103,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":104,"author":{"gitId":"Ella-e"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-17"},{"lineNumber":105,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":106,"author":{"gitId":"Ella-e"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2024-03-17"},{"lineNumber":107,"author":{"gitId":"Ella-e"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2024-03-17"},{"lineNumber":108,"author":{"gitId":"Ella-e"},"content":"        return this;","lastModifiedDate":"2024-03-17"},{"lineNumber":109,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":110,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"Ella-e"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":114,"author":{"gitId":"Ella-e"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2024-03-17"},{"lineNumber":115,"author":{"gitId":"Ella-e"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2024-03-17"},{"lineNumber":116,"author":{"gitId":"Ella-e"},"content":"        return this;","lastModifiedDate":"2024-03-17"},{"lineNumber":117,"author":{"gitId":"Ella-e"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":118,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":119,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"SeaHogs"},"content":"     * Sets the {@code Height} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-19"},{"lineNumber":121,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":122,"author":{"gitId":"SeaHogs"},"content":"    public PersonBuilder withHeight(String height) {","lastModifiedDate":"2024-03-19"},{"lineNumber":123,"author":{"gitId":"SeaHogs"},"content":"        this.height \u003d new Height(height);","lastModifiedDate":"2024-03-19"},{"lineNumber":124,"author":{"gitId":"SeaHogs"},"content":"        return this;","lastModifiedDate":"2024-03-19"},{"lineNumber":125,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":128,"author":{"gitId":"SeaHogs"},"content":"     * Sets the {@code Weight} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-19"},{"lineNumber":129,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":130,"author":{"gitId":"SeaHogs"},"content":"    public PersonBuilder withWeight(String weight) {","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"SeaHogs"},"content":"        this.weight \u003d new Weight(weight);","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"SeaHogs"},"content":"        return this;","lastModifiedDate":"2024-03-19"},{"lineNumber":133,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":134,"author":{"gitId":"Ella-e"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":135,"author":{"gitId":"Ella-e"},"content":"     * Build a person.","lastModifiedDate":"2024-03-17"},{"lineNumber":136,"author":{"gitId":"Ella-e"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":138,"author":{"gitId":"Ella-e"},"content":"        return new Person(new IdentificationInformation(name, nric),","lastModifiedDate":"2024-03-17"},{"lineNumber":139,"author":{"gitId":"SeaHogs"},"content":"            new ContactInformation(email, phone, address), new MedicalInformation(height, weight, allergyTags));","lastModifiedDate":"2024-03-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"javierng2knus":10,"MaYuehan":4,"Ella-e":44,"-":50,"SeaHogs":34}},{"path":"src/test/java/vitalconnect/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_ALLERGYTAG;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.AddCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"        sb.append(PREFIX_NAME + person.getIdentificationInformation().getName().fullName + \" \");","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"javierng2knus"},"content":"        sb.append(PREFIX_NRIC + person.getIdentificationInformation().getNric().nric + \" \");","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"        person.getMedicalInformation().getAllergyTag().stream().forEach(","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"            s -\u003e sb.append(PREFIX_ALLERGYTAG + s.tagName + \" \")","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"javierng2knus"},"content":"        descriptor.getNric().ifPresent(ic -\u003e sb.append(PREFIX_NRIC).append(ic.nric).append(\" \"));","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"        //        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"        //            Set\u003cAllergyTag\u003e allergyTags \u003d descriptor.getTags().get();","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"        //            if (allergyTags.isEmpty()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        //                sb.append(PREFIX_ALLERGYTAG);","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"        //            } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"        //                allergyTags.forEach(s -\u003e sb.append(PREFIX_ALLERGYTAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"        //            }","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"        //        }","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"javierng2knus":4,"MaYuehan":5,"-":33,"SeaHogs":11}},{"path":"src/test/java/vitalconnect/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":1,"-":71}},{"path":"src/test/java/vitalconnect/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"MaYuehan":4,"-":51}},{"path":"src/test/java/vitalconnect/testutil/TypicalAppointment.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-23"},{"lineNumber":2,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"MaYuehan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Appointment;","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":10,"author":{"gitId":"MaYuehan"},"content":"/**","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"MaYuehan"},"content":" * A utility class containing a list of {@code Appointment} objects to be used in tests.","lastModifiedDate":"2024-03-23"},{"lineNumber":12,"author":{"gitId":"MaYuehan"},"content":" */","lastModifiedDate":"2024-03-23"},{"lineNumber":13,"author":{"gitId":"MaYuehan"},"content":"public class TypicalAppointment {","lastModifiedDate":"2024-03-23"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"    public static final Appointment APPOINTMENT_1 \u003d new Appointment(\"Alice Pauline\", \"S1234567D\",","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"            LocalDateTime.of(2023, 3, 14, 15, 30),","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"Ella-e"},"content":"            LocalDateTime.of(2023, 3, 14, 16, 30), 4);","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"MaYuehan"},"content":"    public static final Appointment APPOINTMENT_2 \u003d new Appointment(\"Benson Meier\", \"S1234568B\",","lastModifiedDate":"2024-03-23"},{"lineNumber":18,"author":{"gitId":"MaYuehan"},"content":"            LocalDateTime.of(2023, 3, 15, 10, 0),","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"Ella-e"},"content":"            LocalDateTime.of(2023, 3, 15, 10, 15), 4);","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"MaYuehan"},"content":"    public static final Appointment APPOINTMENT_3 \u003d new Appointment(\"Carl Kurz\", \"T1234567J\",","lastModifiedDate":"2024-03-23"},{"lineNumber":21,"author":{"gitId":"MaYuehan"},"content":"            LocalDateTime.of(2023, 4, 16, 9, 0),","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"Ella-e"},"content":"            LocalDateTime.of(2023, 4, 16, 9, 15), 4);","lastModifiedDate":"2024-03-30"},{"lineNumber":23,"author":{"gitId":"MaYuehan"},"content":"    public static final Appointment APPOINTMENT_4 \u003d new Appointment(\"Daniel Meier\", \"F1234567N\",","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"MaYuehan"},"content":"            LocalDateTime.of(2023, 4, 17, 14, 45),","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"            LocalDateTime.of(2023, 4, 17, 15, 45), 4);","lastModifiedDate":"2024-03-30"},{"lineNumber":26,"author":{"gitId":"MaYuehan"},"content":"    public static final Appointment APPOINTMENT_5 \u003d new Appointment(\"Elle Meyer\", \"G1234567X\",","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"MaYuehan"},"content":"            LocalDateTime.of(2023, 5, 18, 16, 30),","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"Ella-e"},"content":"            LocalDateTime.of(2023, 5, 18, 16, 45), 4);","lastModifiedDate":"2024-03-30"},{"lineNumber":29,"author":{"gitId":"MaYuehan"},"content":"    public static final Appointment APPOINTMENT_6 \u003d new Appointment(\"Fiona Kunz\", \"M1234567K\",","lastModifiedDate":"2024-03-23"},{"lineNumber":30,"author":{"gitId":"MaYuehan"},"content":"            LocalDateTime.of(2023, 6, 19, 10, 15),","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"Ella-e"},"content":"            LocalDateTime.of(2023, 6, 19, 10, 30), 4);","lastModifiedDate":"2024-03-30"},{"lineNumber":32,"author":{"gitId":"MaYuehan"},"content":"    public static final Appointment APPOINTMENT_7 \u003d new Appointment(\"George Best\", \"F1234560R\",","lastModifiedDate":"2024-03-23"},{"lineNumber":33,"author":{"gitId":"MaYuehan"},"content":"            LocalDateTime.of(2023, 7, 20, 11, 30),","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"Ella-e"},"content":"            LocalDateTime.of(2023, 7, 20, 11, 45), 4);","lastModifiedDate":"2024-03-30"},{"lineNumber":35,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"MaYuehan"},"content":"    private TypicalAppointment() {} // prevents instantiation","lastModifiedDate":"2024-03-23"},{"lineNumber":37,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":38,"author":{"gitId":"MaYuehan"},"content":"    /**","lastModifiedDate":"2024-03-23"},{"lineNumber":39,"author":{"gitId":"MaYuehan"},"content":"     * Returns a list of typical appointments.","lastModifiedDate":"2024-03-23"},{"lineNumber":40,"author":{"gitId":"MaYuehan"},"content":"     */","lastModifiedDate":"2024-03-23"},{"lineNumber":41,"author":{"gitId":"MaYuehan"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"MaYuehan"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(APPOINTMENT_1, APPOINTMENT_2, APPOINTMENT_3, APPOINTMENT_4,","lastModifiedDate":"2024-03-23"},{"lineNumber":43,"author":{"gitId":"MaYuehan"},"content":"                APPOINTMENT_5, APPOINTMENT_6, APPOINTMENT_7));","lastModifiedDate":"2024-03-23"},{"lineNumber":44,"author":{"gitId":"MaYuehan"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":45,"author":{"gitId":"MaYuehan"},"content":"}","lastModifiedDate":"2024-03-23"},{"lineNumber":46,"author":{"gitId":"MaYuehan"},"content":"","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"MaYuehan":39,"Ella-e":7}},{"path":"src/test/java/vitalconnect/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"MaYuehan":2,"-":10}},{"path":"src/test/java/vitalconnect/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.testutil;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"javierng2knus"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-15"},{"lineNumber":9,"author":{"gitId":"Ella-e"},"content":"import static vitalconnect.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.Clinic;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"javierng2knus"},"content":"        .withNric(\"S1234567D\")","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"Ella-e"},"content":"        .withEmail(\"email@e.com\")","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"Ella-e"},"content":"        .withHeight(\"163\")","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"Ella-e"},"content":"        .withWeight(\"50\").build();","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"javierng2knus"},"content":"        .withNric(\"S1234568B\")","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"        .build();","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"javierng2knus"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"javierng2knus"},"content":"        .withNric(\"T1234567J\").build();","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"javierng2knus"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"javierng2knus"},"content":"        .withNric(\"F1234567N\")","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"        .build();","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"javierng2knus"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"javierng2knus"},"content":"        .withNric(\"G1234567X\").build();","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"javierng2knus"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"javierng2knus"},"content":"        .withNric(\"M1234567K\").build();","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"javierng2knus"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"        .withNric(\"F1234560R\").withHeight(\"160\").withWeight(\"160\").withTags(\"peanuts\").build();","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":43,"author":{"gitId":"javierng2knus"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withNric(\"S1234569J\").build();","lastModifiedDate":"2024-03-15"},{"lineNumber":44,"author":{"gitId":"javierng2knus"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withNric(\"S1234560G\").build();","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":50,"author":{"gitId":"Ella-e"},"content":"    public static final Person BOB_CONTACT \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Ella-e"},"content":"        .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Ella-e"},"content":"        .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"Ella-e"},"content":"        .withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"Ella-e"},"content":"        .build();","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"Ella-e"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"javierng2knus"},"content":"     * Returns an {@code Clinic} with all the typical persons.","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"javierng2knus"},"content":"    public static Clinic getTypicalClinic() {","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"javierng2knus"},"content":"        Clinic c \u003d new Clinic();","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":66,"author":{"gitId":"javierng2knus"},"content":"            c.addPerson(person);","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":68,"author":{"gitId":"javierng2knus"},"content":"        return c;","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"javierng2knus"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2024-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"javierng2knus":21,"MaYuehan":5,"Ella-e":12,"-":31,"SeaHogs":5}},{"path":"src/test/java/vitalconnect/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!(other instanceof TestFxmlObject)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        TestFxmlObject otherTestFxmlObject \u003d (TestFxmlObject) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return Objects.equals(text, otherTestFxmlObject.text);","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"MaYuehan":1,"-":44}},{"path":"src/test/java/vitalconnect/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MaYuehan"},"content":"package vitalconnect.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"MaYuehan"},"content":"import static vitalconnect.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"MaYuehan"},"content":"import vitalconnect.MainApp;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"MaYuehan":3,"-":110}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"\u003c?import vitalconnect.ui.TestFxmlObject?\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"MaYuehan":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"MaYuehan"},"content":"\u003cfx:root type\u003d\"vitalconnect.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"MaYuehan":1,"-":5}}]
