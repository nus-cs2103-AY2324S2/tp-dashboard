[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103T-T17-4/tp/graph/badge.svg?token\u003dLPV8FKMOGM)](https://codecov.io/gh/AY2324S2-CS2103T-T16-3/tp)","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"maze508"},"content":"# Gourmet Grid","lastModifiedDate":"2024-03-05"},{"lineNumber":7,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":8,"author":{"gitId":"maze508"},"content":"## Description","lastModifiedDate":"2024-03-05"},{"lineNumber":9,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":10,"author":{"gitId":"maze508"},"content":"* The project simulates an ongoing software project for a desktop application (called _Gourmet Grid_) used for managing contact details.","lastModifiedDate":"2024-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big.","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"maze508"},"content":"* It is named `Gourmet Grid`","lastModifiedDate":"2024-03-05"},{"lineNumber":14,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":15,"author":{"gitId":"maze508"},"content":"## Main Features","lastModifiedDate":"2024-03-05"},{"lineNumber":16,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":17,"author":{"gitId":"maze508"},"content":"#### List All Contacts","lastModifiedDate":"2024-03-05"},{"lineNumber":18,"author":{"gitId":"maze508"},"content":"\u003eFormat: `list`","lastModifiedDate":"2024-03-05"},{"lineNumber":19,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":20,"author":{"gitId":"maze508"},"content":"#### Add New Contacts","lastModifiedDate":"2024-03-05"},{"lineNumber":21,"author":{"gitId":"maze508"},"content":"\u003eFormat: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]`","lastModifiedDate":"2024-03-05"},{"lineNumber":22,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":23,"author":{"gitId":"maze508"},"content":"#### Delete Contacts","lastModifiedDate":"2024-03-05"},{"lineNumber":24,"author":{"gitId":"maze508"},"content":"\u003eFormat: `delete INDEX`","lastModifiedDate":"2024-03-05"},{"lineNumber":25,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":26,"author":{"gitId":"maze508"},"content":"#### Search Contacts By Name","lastModifiedDate":"2024-03-05"},{"lineNumber":27,"author":{"gitId":"maze508"},"content":"\u003eFormat: `find n/NAME`","lastModifiedDate":"2024-03-05"}],"authorContributionMap":{"-":7,"maze508":20}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"gavingoh99"},"content":"### Sun Ruiheng","lastModifiedDate":"2024-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"maze508"},"content":"\u003cimg src\u003d\"images/sun-ruiheng.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"gavingoh99"},"content":"[[github](https://github.com/sun-ruiheng)]","lastModifiedDate":"2024-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"gavingoh99"},"content":"* Role: Developer, Java Expert","lastModifiedDate":"2024-03-05"},{"lineNumber":20,"author":{"gitId":"gavingoh99"},"content":"* Responsibilities: Deliverables and deadlines","lastModifiedDate":"2024-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"gavingoh99"},"content":"### Gavin Goh","lastModifiedDate":"2024-03-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"maze508"},"content":"\u003cimg src\u003d\"images/gavingoh99.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"gavingoh99"},"content":"[[github](http://github.com/gavingoh99)]","lastModifiedDate":"2024-03-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"gavingoh99"},"content":"* Responsibilities: Scheduling and tracking","lastModifiedDate":"2024-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"gavingoh99"},"content":"### Ma Ze Xuan","lastModifiedDate":"2024-03-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"maze508"},"content":"\u003cimg src\u003d\"images/maze508.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"gavingoh99"},"content":"[[github](http://github.com/maze508)]","lastModifiedDate":"2024-03-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"gavingoh99"},"content":"* Responsibilities: Testing","lastModifiedDate":"2024-03-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"gavingoh99"},"content":"### Tan Guan Quan","lastModifiedDate":"2024-03-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"maze508"},"content":"\u003cimg src\u003d\"images/guanquann.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"gavingoh99"},"content":"[[github](http://github.com/guanquann)]","lastModifiedDate":"2024-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"gavingoh99"},"content":"* Responsibilities: Integration","lastModifiedDate":"2024-03-05"}],"authorContributionMap":{"gavingoh99":13,"-":30,"maze508":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"maze508"},"content":"# Gourmet Grid","lastModifiedDate":"2024-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"sun-ruiheng"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"_{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"sun-ruiheng"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"sun-ruiheng"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"sun-ruiheng"},"content":"The **_Architecture Diagram_** given above explains the high-level design of the App.","lastModifiedDate":"2024-03-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"sun-ruiheng"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":40,"author":{"gitId":"sun-ruiheng"},"content":"- At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2024-03-05"},{"lineNumber":41,"author":{"gitId":"sun-ruiheng"},"content":"- At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2024-03-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"sun-ruiheng"},"content":"- [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2024-03-05"},{"lineNumber":46,"author":{"gitId":"sun-ruiheng"},"content":"- [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2024-03-05"},{"lineNumber":47,"author":{"gitId":"sun-ruiheng"},"content":"- [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2024-03-05"},{"lineNumber":48,"author":{"gitId":"sun-ruiheng"},"content":"- [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2024-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"sun-ruiheng"},"content":"The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2024-03-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"sun-ruiheng"},"content":"- defines its _API_ in an `interface` with the same name as the Component.","lastModifiedDate":"2024-03-05"},{"lineNumber":61,"author":{"gitId":"sun-ruiheng"},"content":"- implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2024-03-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"sun-ruiheng"},"content":"- executes user commands using the `Logic` component.","lastModifiedDate":"2024-03-05"},{"lineNumber":82,"author":{"gitId":"sun-ruiheng"},"content":"- listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2024-03-05"},{"lineNumber":83,"author":{"gitId":"sun-ruiheng"},"content":"- keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2024-03-05"},{"lineNumber":84,"author":{"gitId":"sun-ruiheng"},"content":"- depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2024-03-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline continues till the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).\u003cbr\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"   Note that although this is shown as a single step in the diagram above (for simplicity), in the code it can take several interactions (between the command object and the `Model`) to achieve.","lastModifiedDate":"2024-02-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"sun-ruiheng"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":117,"author":{"gitId":"sun-ruiheng"},"content":"- When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2024-03-05"},{"lineNumber":118,"author":{"gitId":"sun-ruiheng"},"content":"- All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2024-03-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":121,"author":{"gitId":"sun-ruiheng"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"sun-ruiheng"},"content":"- stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2024-03-05"},{"lineNumber":129,"author":{"gitId":"sun-ruiheng"},"content":"- stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2024-03-05"},{"lineNumber":130,"author":{"gitId":"sun-ruiheng"},"content":"- stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2024-03-05"},{"lineNumber":131,"author":{"gitId":"sun-ruiheng"},"content":"- does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2024-03-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"sun-ruiheng"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":149,"author":{"gitId":"sun-ruiheng"},"content":"- can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2024-03-05"},{"lineNumber":150,"author":{"gitId":"sun-ruiheng"},"content":"- inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2024-03-05"},{"lineNumber":151,"author":{"gitId":"sun-ruiheng"},"content":"- depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2024-03-05"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"sun-ruiheng"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"sun-ruiheng"},"content":"- `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2024-03-05"},{"lineNumber":170,"author":{"gitId":"sun-ruiheng"},"content":"- `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2024-03-05"},{"lineNumber":171,"author":{"gitId":"sun-ruiheng"},"content":"- `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2024-03-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"The following sequence diagram shows how an undo operation goes through the `Logic` component:","lastModifiedDate":"2024-02-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Logic.puml\" alt\u003d\"UndoSequenceDiagram-Logic\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"Similarly, how an undo operation goes through the `Model` component is shown below:","lastModifiedDate":"2024-02-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Model.puml\" alt\u003d\"UndoSequenceDiagram-Model\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"sun-ruiheng"},"content":"- **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2024-03-05"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"sun-ruiheng"},"content":"  - Pros: Easy to implement.","lastModifiedDate":"2024-03-05"},{"lineNumber":247,"author":{"gitId":"sun-ruiheng"},"content":"  - Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2024-03-05"},{"lineNumber":248,"author":{"gitId":"sun-ruiheng"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":249,"author":{"gitId":"sun-ruiheng"},"content":"- **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2024-03-05"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"sun-ruiheng"},"content":"  - Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2024-03-05"},{"lineNumber":252,"author":{"gitId":"sun-ruiheng"},"content":"  - Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2024-03-05"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"sun-ruiheng"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"sun-ruiheng"},"content":"- [Documentation guide](Documentation.md)","lastModifiedDate":"2024-03-05"},{"lineNumber":265,"author":{"gitId":"sun-ruiheng"},"content":"- [Testing guide](Testing.md)","lastModifiedDate":"2024-03-05"},{"lineNumber":266,"author":{"gitId":"sun-ruiheng"},"content":"- [Logging guide](Logging.md)","lastModifiedDate":"2024-03-05"},{"lineNumber":267,"author":{"gitId":"sun-ruiheng"},"content":"- [Configuration guide](Configuration.md)","lastModifiedDate":"2024-03-05"},{"lineNumber":268,"author":{"gitId":"sun-ruiheng"},"content":"- [DevOps guide](DevOps.md)","lastModifiedDate":"2024-03-05"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"sun-ruiheng"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"sun-ruiheng"},"content":"- regularly receives deliveries of supplies from different suppliers","lastModifiedDate":"2024-03-05"},{"lineNumber":279,"author":{"gitId":"sun-ruiheng"},"content":"- troublesome to make orders when supplies are running low","lastModifiedDate":"2024-03-05"},{"lineNumber":280,"author":{"gitId":"sun-ruiheng"},"content":"- has some favorite and some not great customers","lastModifiedDate":"2024-03-05"},{"lineNumber":281,"author":{"gitId":"sun-ruiheng"},"content":"- has a need to manage a significant number of contacts","lastModifiedDate":"2024-03-05"},{"lineNumber":282,"author":{"gitId":"sun-ruiheng"},"content":"- prefer desktop apps over other types","lastModifiedDate":"2024-03-05"},{"lineNumber":283,"author":{"gitId":"sun-ruiheng"},"content":"- can type fast","lastModifiedDate":"2024-03-05"},{"lineNumber":284,"author":{"gitId":"sun-ruiheng"},"content":"- prefers typing to mouse interactions","lastModifiedDate":"2024-03-05"},{"lineNumber":285,"author":{"gitId":"sun-ruiheng"},"content":"- is reasonably comfortable using CLI apps","lastModifiedDate":"2024-03-05"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"guanquann"},"content":"**Value proposition**:","lastModifiedDate":"2024-03-05"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":289,"author":{"gitId":"sun-ruiheng"},"content":"- Our product is specifically tailored to restaurant owners like Bob who juggle multiple suppliers and customer relationships by streamlining daily delivery management, simplifying tracking supplier schedules and enabling personalised engagement with regulars.","lastModifiedDate":"2024-03-05"},{"lineNumber":290,"author":{"gitId":"sun-ruiheng"},"content":"- Focusing on a small number of stable suppliers, it centralises contacts and smoothens day-to-day tasks.","lastModifiedDate":"2024-03-05"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"| Priority | As a …​                          | I want to …​                                                                                                                                | So that I can…​                                                                                |","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"sun-ruiheng"},"content":"| -------- | -------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |","lastModifiedDate":"2024-03-05"},{"lineNumber":298,"author":{"gitId":"guanquann"},"content":"| `* * *`  | restaurant owner                 | add contacts with detailed information                                                                                                      | better manage relationship with suppliers and customers                                        |","lastModifiedDate":"2024-03-05"},{"lineNumber":299,"author":{"gitId":"guanquann"},"content":"| `* * *`  | restaurant owner                 | immediately see a list of contact                                                                                                           | contact / check on these parties quickly                                                       |","lastModifiedDate":"2024-03-05"},{"lineNumber":300,"author":{"gitId":"guanquann"},"content":"| `* * *`  | restaurant owner                 | search by name                                                                                                                              | quickly find the person I want to contact                                                      |","lastModifiedDate":"2024-03-05"},{"lineNumber":301,"author":{"gitId":"guanquann"},"content":"| `* * *`  | long time user                   | delete contacts                                                                                                                             | keep my address book relevant and clean                                                        |","lastModifiedDate":"2024-03-05"},{"lineNumber":302,"author":{"gitId":"guanquann"},"content":"| `* *`    | potential user exploring the app | see examples with sample data on the app                                                                                                    | easily visualize how the app will look like when handling data that is typical for my use case |","lastModifiedDate":"2024-03-05"},{"lineNumber":303,"author":{"gitId":"guanquann"},"content":"| `* *`    | potential user exploring the app | delete all sample data                                                                                                                      | easily add my own data to a clean slate                                                        |","lastModifiedDate":"2024-03-05"},{"lineNumber":304,"author":{"gitId":"guanquann"},"content":"| `* *`    | long time user                   | edit contact details                                                                                                                        | keep my address book up to date                                                                |","lastModifiedDate":"2024-03-05"},{"lineNumber":305,"author":{"gitId":"guanquann"},"content":"| `* *`    | restaurant owner                 | keep track of temporary contacts                                                                                                            | easily check on the status of my incoming deliveries with the deliverymen responsible          |","lastModifiedDate":"2024-03-05"},{"lineNumber":306,"author":{"gitId":"guanquann"},"content":"| `* *`    | frequent user                    | immediately see a list of important / frequent contacts that I view                                                                         | contact / check on these parties quickly                                                       |","lastModifiedDate":"2024-03-05"},{"lineNumber":307,"author":{"gitId":"guanquann"},"content":"| `* *`    | restaurant owner                 | favourite certain contacts                                                                                                                  | have quicker and more efficient access to contact                                              |","lastModifiedDate":"2024-03-05"},{"lineNumber":308,"author":{"gitId":"guanquann"},"content":"| `* *`    | long time user                   | search by notes or tag to quickly find specific details about customer preferences (i.e allergies) and delivery details (i.e slow delivery) |                                                                                                |","lastModifiedDate":"2024-03-05"},{"lineNumber":309,"author":{"gitId":"guanquann"},"content":"| `* *`    | long time user                   | filter search base on a specific criteria (like vegan supplier) to better plan deliveries                                                   |                                                                                                |","lastModifiedDate":"2024-03-05"},{"lineNumber":310,"author":{"gitId":"guanquann"},"content":"| `*`      | careless user                    | undo my orders/contacts                                                                                                                     | reduces the number of actions I have to take                                                   |","lastModifiedDate":"2024-03-05"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"sun-ruiheng"},"content":"_{More to be added}_","lastModifiedDate":"2024-03-05"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"**Use case: Delete a person**","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"1.  User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"2.  AddressBook shows a list of persons","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"4.  AddressBook deletes the person","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"sun-ruiheng"},"content":"- 2a. The list is empty.","lastModifiedDate":"2024-03-05"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"sun-ruiheng"},"content":"- 3a. The given index is invalid.","lastModifiedDate":"2024-03-05"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"sun-ruiheng"},"content":"  - 3a1. AddressBook shows an error message.","lastModifiedDate":"2024-03-05"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"sun-ruiheng"},"content":"_{More to be added}_","lastModifiedDate":"2024-03-05"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"sun-ruiheng"},"content":"2.  Should be able to hold up to a reasonable number of contacts with their corresponding information reliably without detriment to performance.","lastModifiedDate":"2024-03-05"},{"lineNumber":347,"author":{"gitId":"sun-ruiheng"},"content":"3.  A user with above average typing speed for regular English text should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2024-03-05"},{"lineNumber":348,"author":{"gitId":"sun-ruiheng"},"content":"4.  Should work consistently regardless of environment, such as the settings of the phone running it (within reasonable bounds).","lastModifiedDate":"2024-03-05"},{"lineNumber":349,"author":{"gitId":"sun-ruiheng"},"content":"5.  Users should easily navigate the app with minimal hesitance.","lastModifiedDate":"2024-03-05"},{"lineNumber":350,"author":{"gitId":"sun-ruiheng"},"content":"6.  Should remain functional and fully usable in the event that the user enters unexpected inputs, with appropriate error statement displayed before the app returns to a functional state to continue running.","lastModifiedDate":"2024-03-05"},{"lineNumber":351,"author":{"gitId":"sun-ruiheng"},"content":"7.  Should update automatically or have a good way to manually update in case of time zone changes.","lastModifiedDate":"2024-03-05"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"sun-ruiheng"},"content":"_{More to be added}_","lastModifiedDate":"2024-03-05"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"sun-ruiheng"},"content":"- **Mainstream OS**: Windows, Linux, Unix, MacOS","lastModifiedDate":"2024-03-05"},{"lineNumber":358,"author":{"gitId":"sun-ruiheng"},"content":"- **Reasonable Number of Contacts**: Set to be 100 for now","lastModifiedDate":"2024-03-05"},{"lineNumber":359,"author":{"gitId":"sun-ruiheng"},"content":"- **Hesitance**: Time spent deliberating by user due to uncertainty of UI interactions","lastModifiedDate":"2024-03-05"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"sun-ruiheng"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":369,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":370,"author":{"gitId":"sun-ruiheng"},"content":"testers are expected to do more _exploratory_ testing.","lastModifiedDate":"2024-03-05"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"      Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":400,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":404,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":406,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"guanquann":14,"sun-ruiheng":76,"-":323,"maze508":1}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# AB-3 User Guide","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"AddressBook Level 3 (AB3) is a **desktop app for managing contacts, optimized for use via a  Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. Download the latest `addressbook.jar` from [here](https://github.com/se-edu/addressbook-level3/releases).","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar addressbook.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * `list` : Lists all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2023-01-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * `delete 3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2023-01-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * `clear` : Deletes all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"**Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2023-06-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"**Tip:** A person can have any number of tags (including 0)","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"maze508"},"content":"### Search Contact `find`","lastModifiedDate":"2024-03-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"maze508"},"content":"- Search feature supports search by name and/or tags **ONLY**.","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"maze508"},"content":"- Finds all contacts whose names or tags matches the substring keyword provided.","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"maze508"},"content":"General Format: `find FIELD/ KEYWORD FIELD/ KEYWORD ...`","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"maze508"},"content":"- Where `FIELD` is either `n/` for name or `t/` for tag.","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"maze508"},"content":"- `KEYWORD` is the keyword (**alphabets only**) to search for.","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":125,"author":{"gitId":"maze508"},"content":"#### Search Guidelines","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":127,"author":{"gitId":"maze508"},"content":"* \u0027KEYWORD\u0027 can **ONLY** be alphabets and **CANNOT** contain spaces or be empty.","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/John Doe` will **NOT** work. Try `find n/John n/Doe` instead to represent finding John and Doe","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/` will **NOT** work as \u0027KEYWORD\u0027 cannot be empty.","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/John123` will **NOT** work as \u0027KEYWORD\u0027 cannot contain non-alphabetic characters.","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"maze508"},"content":"* \u0027KEYWORD\u0027 and next \u0027FIELD\u0027 should be separated by a space.","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/John t/friends` will find all instances of John that have the tag friends ","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"maze508"},"content":"  * but `find n/Johnt/tfriends` will instead return an error since it assumes you are searching for \u0027Johnt/tfriends\u0027","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"maze508"},"content":"  * and there should not be non-alphabetic characters in the \u0027KEYWORD\u0027 field.","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"maze508"},"content":"* Multiple of the same \u0027FIELDs\u0027 will be treated as a **Logical AND (\u0026\u0026)**.","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/John n/Doe` will return all instances of John and Doe.","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/Ale n/le` will still return the following example instances [\"Alex Liew\", \"Alexis Lebrun\", \"Alec\"]","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"maze508"},"content":"* \u0027KEYWORD\u0027 should **NOT** be empty and there should be at least one \u0027FIELD\u0027 and \u0027KEYWORD\u0027 pair.","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/ t/` and `find ` will **NOT** work.","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"maze508"},"content":"* There should not be prefixes before the first \u0027FIELD\u0027 and \u0027KEYWORD\u0027 pair. ","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"maze508"},"content":"  * e.g. `find testing123 n/John` will **NOT** work.","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"maze508"},"content":"* The search is case-insensitive. ","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/hans` will match `Hans Niemann` and `Hans Zimmer`","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"maze508"},"content":"* The order of the keywords does not matter. ","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"maze508"},"content":"  * e.g. Results of `find n/Hans n/Bo` will match the results of`find n/Bo n/Hans`","lastModifiedDate":"2024-03-13"},{"lineNumber":157,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":158,"author":{"gitId":"maze508"},"content":"* You can have multiple of the same \u0027FIELD\u0027s. ","lastModifiedDate":"2024-03-13"},{"lineNumber":159,"author":{"gitId":"maze508"},"content":"  * e.g. `find n/J n/Do` will match names with `J` AND `Do`, like `John Doe`","lastModifiedDate":"2024-03-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"maze508"},"content":"* `find n/Joh` returns `john`, `John Doe` and `Johnann Sebastian Bach`","lastModifiedDate":"2024-03-13"},{"lineNumber":164,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":165,"author":{"gitId":"maze508"},"content":"* `find n/alex n/david` returns `Alex Davidson` and `David Alexis`","lastModifiedDate":"2024-03-13"},{"lineNumber":166,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":167,"author":{"gitId":"maze508"},"content":"* `find n/Alex t/friends` returns `Alex Yeoh` who is tagged as a `friend`","lastModifiedDate":"2024-03-13"},{"lineNumber":168,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":169,"author":{"gitId":"maze508"},"content":"* `find n////` returns an error message as the \u0027KEYWORD\u0027 field must consist of alphabets only","lastModifiedDate":"2024-03-13"},{"lineNumber":170,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":171,"author":{"gitId":"maze508"},"content":"* `find n/` or `find t/` or `find n/ t/` returns an error message as the \u0027KEYWORD\u0027 field cannot be empty","lastModifiedDate":"2024-03-13"},{"lineNumber":172,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":173,"author":{"gitId":"maze508"},"content":"* `find` returns an error message as there should be at least one \u0027FIELD\u0027 and \u0027KEYWORD\u0027 pair","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":175,"author":{"gitId":"maze508"},"content":"* `find testing123 n/John` returns an error message as there should not be ","lastModifiedDate":"2024-03-13"},{"lineNumber":176,"author":{"gitId":"maze508"},"content":"      prefixes before the first \u0027FIELD\u0027 and \u0027KEYWORD\u0027 pair","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"guanquann"},"content":"### Adding an order : `addorder`","lastModifiedDate":"2024-03-13"},{"lineNumber":179,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"guanquann"},"content":"Adds an order to a supplier.","lastModifiedDate":"2024-03-13"},{"lineNumber":181,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":182,"author":{"gitId":"guanquann"},"content":"Format: `addorder INDEX d/DATE r/REMARK`","lastModifiedDate":"2024-03-13"},{"lineNumber":183,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":184,"author":{"gitId":"guanquann"},"content":"* Adds an order to the supplier at the specified `INDEX`. The index refers to the index number shown in the displayed supplier list. The index **must be a positive integer, starting from 1** (1, 2, 3, …​)","lastModifiedDate":"2024-03-13"},{"lineNumber":185,"author":{"gitId":"guanquann"},"content":"* The date must be in the format `YYYY-MM-DD`. For example, `2020-12-31`.","lastModifiedDate":"2024-03-13"},{"lineNumber":186,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":187,"author":{"gitId":"guanquann"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":188,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":189,"author":{"gitId":"guanquann"},"content":"**Note:** A person can have any number of orders (including 0)","lastModifiedDate":"2024-03-13"},{"lineNumber":190,"author":{"gitId":"guanquann"},"content":"\u003c/box\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":192,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2024-03-13"},{"lineNumber":193,"author":{"gitId":"guanquann"},"content":"* `addorder 1 d/2020-01-01 r/100 chicken wings`","lastModifiedDate":"2024-03-13"},{"lineNumber":194,"author":{"gitId":"guanquann"},"content":"* `addorder 2 r/ 100 chicken wings d/ 2020-12-31`","lastModifiedDate":"2024-03-13"},{"lineNumber":195,"author":{"gitId":"guanquann"},"content":"* `addorder 3 d/2020-01-01 r/100 chicken wings`","lastModifiedDate":"2024-03-13"},{"lineNumber":196,"author":{"gitId":"guanquann"},"content":"* `addorder d/2020-01-01 r/100 chicken wings` returns an error as the index is not specified","lastModifiedDate":"2024-03-13"},{"lineNumber":197,"author":{"gitId":"guanquann"},"content":"* `addorder r/` or `addorder d/` or `addorder r/ d/` returns an error message as the \u0027KEYWORD\u0027 field cannot be empty","lastModifiedDate":"2024-03-13"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":199,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":231,"author":{"gitId":"-"},"content":"AddressBook data are saved automatically as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-09-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":233,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"**Caution:**","lastModifiedDate":"2023-09-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.  Hence, it is recommended to take a backup of the file before editing it.\u003cbr\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"Furthermore, certain edits can cause the AddressBook to behave in unexpected ways (e.g., if a value entered is outside the acceptable range). Therefore, edit the data file only if you are confident that you can update it correctly.","lastModifiedDate":"2023-09-12"},{"lineNumber":238,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":240,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"guanquann"},"content":"| Action        | Format, Examples                                                                                                                                                      |","lastModifiedDate":"2024-03-13"},{"lineNumber":262,"author":{"gitId":"guanquann"},"content":"|---------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-03-13"},{"lineNumber":263,"author":{"gitId":"guanquann"},"content":"| **Add**       | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` |","lastModifiedDate":"2024-03-13"},{"lineNumber":264,"author":{"gitId":"guanquann"},"content":"| **Clear**     | `clear`                                                                                                                                                               |","lastModifiedDate":"2024-03-13"},{"lineNumber":265,"author":{"gitId":"guanquann"},"content":"| **Delete**    | `delete INDEX`\u003cbr\u003e e.g., `delete 3`                                                                                                                                   |","lastModifiedDate":"2024-03-13"},{"lineNumber":266,"author":{"gitId":"guanquann"},"content":"| **Edit**      | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`                                           |","lastModifiedDate":"2024-03-13"},{"lineNumber":267,"author":{"gitId":"guanquann"},"content":"| **Find**      | `find KEYWORD/ [KEYWORD]`\u003cbr\u003e e.g., `find n/ James n/ T t/ friend t/ rich`                                                                                            |","lastModifiedDate":"2024-03-13"},{"lineNumber":268,"author":{"gitId":"guanquann"},"content":"| **Add Order** | `addorder INDEX d/DATE r/REMARK`\u003cbr\u003e e.g., `addorder 1 d/ 2020-01-01 r/ 100 chicken wings`                                                                            |","lastModifiedDate":"2024-03-13"},{"lineNumber":269,"author":{"gitId":"guanquann"},"content":"| **List**      | `list`                                                                                                                                                                |","lastModifiedDate":"2024-03-13"},{"lineNumber":270,"author":{"gitId":"guanquann"},"content":"| **Help**      | `help`                                                                                                                                                                |","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"guanquann":28,"-":188,"maze508":54}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"maze508"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"maze508"},"content":"     * Returns true if the {@code sentence} contains the {@code query} as a substring, ignoring case.","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"maze508"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"maze508"},"content":"     *       containsSubstringIgnoreCase(\"Alexis Lebrun\", \"Ale\") \u003d\u003d true","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"maze508"},"content":"     *       containsSubstringIgnoreCase(\"Alexis Lebrun\", \"le\") \u003d\u003d true","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"maze508"},"content":"     *       containsSubstringIgnoreCase(\"Alex Yeoh\", \"python\") \u003d\u003d false","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"maze508"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"maze508"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"maze508"},"content":"     * @param query cannot be null, cannot be empty","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"maze508"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"maze508"},"content":"    public static boolean containsSubstringIgnoreCase(String sentence, String query) {","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"maze508"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"maze508"},"content":"        requireNonNull(query);","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"maze508"},"content":"        String preppedQuery \u003d query.trim();","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"maze508"},"content":"        checkArgument(!preppedQuery.isEmpty(), \"Query parameter cannot be empty\");","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"maze508"},"content":"        return sentence.toLowerCase().contains(preppedQuery.toLowerCase());","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":68,"maze508":20}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":21,"author":{"gitId":"maze508"},"content":"    public static final String MESSAGE_ALPHABET_ONLY \u003d \"Value for %1$s must consist of alphabets only.\";","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"maze508"},"content":"    public static final String MESSAGE_CANNOT_BE_EMPTY \u003d \"Keyword Value of FIELD %1$s cannot be empty.\";","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        builder.append(person.getName())","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .append(person.getPhone())","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .append(person.getAddress())","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .append(\"; Tags: \");","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        person.getTags().forEach(builder::append);","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"        builder.append(\"; Orders: \");","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"        person.getOrders().forEach(builder::append);","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"guanquann":2,"-":51,"maze508":3}},{"path":"src/main/java/seedu/address/logic/commands/AddOrderCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import java.util.List;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"public class AddOrderCommand extends Command {","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"    public static final String COMMAND_WORD \u003d \"addorder\";","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New order added: %1$s\";","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"            + \": Adds an order to the person identified \"","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"            + \"by the index number used in the last person listing.\\n\"","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"            + \"d/ [DATE] r/ [REMARK] \\n\"","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"            + \"d/ 2024-01-01 r/ 100 chicken wings.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"    private final Index index;","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"    private final Date arrivalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"    private final String remark;","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"     * Creates an AddOrderCommand to add the specified {@code Person}","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"    public AddOrderCommand(Index index, Date arrivalDate, String remark) {","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"        requireNonNull(index);","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"        requireNonNull(arrivalDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"        requireNonNull(remark);","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"        this.arrivalDate \u003d arrivalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"        Person person \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"guanquann"},"content":"        // TODO","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"guanquann"},"content":"        person.addOrder(this.arrivalDate, this.remark);","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"guanquann"},"content":"        model.setPerson(person, person);","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"guanquann"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"guanquann"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(person)));","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"guanquann"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"guanquann"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"guanquann"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"guanquann"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"guanquann"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"guanquann"},"content":"        if (!(other instanceof AddOrderCommand)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"guanquann"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand otherAddOrderCommand \u003d (AddOrderCommand) other;","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"guanquann"},"content":"        return index.equals(otherAddOrderCommand.index)","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"guanquann"},"content":"                \u0026\u0026 arrivalDate.equals(otherAddOrderCommand.arrivalDate)","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"guanquann"},"content":"                \u0026\u0026 remark.equals(otherAddOrderCommand.remark);","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"guanquann"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"guanquann"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"guanquann"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"guanquann"},"content":"                .add(\"index\", index)","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"guanquann"},"content":"                .add(\"arrivalDate\", arrivalDate)","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"guanquann"},"content":"                .add(\"remark\", remark)","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"guanquann"},"content":"                .toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":92,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":92}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Order;","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"guanquann"},"content":"        ArrayList\u003cOrder\u003e updatedOrders \u003d personToEdit.getOrders();","lastModifiedDate":"2024-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"guanquann"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,","lastModifiedDate":"2024-03-12"},{"lineNumber":108,"author":{"gitId":"guanquann"},"content":"                updatedOrders);","lastModifiedDate":"2024-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":211,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPersonDescriptor.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(tags, otherEditPersonDescriptor.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                    .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":246,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"guanquann":5,"-":241}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"maze508"},"content":"import seedu.address.model.person.NameAndTagContainsKeywordsPredicate;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"maze508"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"maze508"},"content":"            + \"Parameters: TYPE/KEYWORD TYPE/KEYWORD ... \\n\"","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"maze508"},"content":"            + \"Where TYPE can be n/ or t/ to specify name or tag respectively.\\n\"","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"maze508"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/alice n/bob t/friends t/owesMoney \\n\"","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"maze508"},"content":"            + \"Please Refer to User Guide for more details.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"maze508"},"content":"    private final NameAndTagContainsKeywordsPredicate predicate;","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"maze508"},"content":"    public FindCommand(NameAndTagContainsKeywordsPredicate predicate) {","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return predicate.equals(otherFindCommand.predicate);","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"-":52,"maze508":8}},{"path":"src/main/java/seedu/address/logic/parser/AddOrderCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.commands.AddOrderCommand;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":" * Parses input arguments and creates a new AddOrderCommand object","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"     * Parses the given {@code String} of arguments in the context of the AddOrderCommand","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"     * and returns an AddOrderCommand object for execution.","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"    public AddOrderCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_REMARK);","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_DATE, PREFIX_REMARK)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"        Index index;","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"                    AddOrderCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_DATE, PREFIX_REMARK);","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"        Date arrivalDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).get();","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"        return new AddOrderCommand(index, arrivalDate, remark);","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":48}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.commands.AddOrderCommand;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"guanquann"},"content":"        case AddOrderCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"guanquann"},"content":"            return new AddOrderCommandParser().parse(arguments);","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"guanquann":4,"-":86}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-07-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Throws a {@code ParseException} if any of the prefixes given in {@code prefixes} appeared more than","lastModifiedDate":"2023-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * once among the arguments.","lastModifiedDate":"2023-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void verifyNoDuplicatePrefixesFor(Prefix... prefixes) throws ParseException {","lastModifiedDate":"2023-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Prefix[] duplicatedPrefixes \u003d Stream.of(prefixes).distinct()","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .filter(prefix -\u003e argMultimap.containsKey(prefix) \u0026\u0026 argMultimap.get(prefix).size() \u003e 1)","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .toArray(Prefix[]::new);","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (duplicatedPrefixes.length \u003e 0) {","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new ParseException(Messages.getErrorMessageForDuplicatePrefixes(duplicatedPrefixes));","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"maze508"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"maze508"},"content":"     * Throws a {@code ParseException} if any of the keywords in the prefixes given in {@code prefixes} are empty.","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"maze508"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"maze508"},"content":"    public void verifyNonEmptyKeywordValues(Prefix... prefixes) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"maze508"},"content":"        for (Prefix prefix : prefixes) {","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"maze508"},"content":"            if (argMultimap.containsKey(prefix) \u0026\u0026 argMultimap.get(prefix).stream().anyMatch(String::isEmpty)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"maze508"},"content":"                throw new ParseException(String.format(Messages.MESSAGE_CANNOT_BE_EMPTY, prefix));","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"maze508"},"content":"            }","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"maze508"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"maze508"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"maze508"},"content":"     * Throws a {@code ParseException} if any of the keywords in the prefixes given in {@code prefixes}","lastModifiedDate":"2024-03-12"},{"lineNumber":92,"author":{"gitId":"maze508"},"content":"     * are not alphabets.","lastModifiedDate":"2024-03-12"},{"lineNumber":93,"author":{"gitId":"maze508"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":94,"author":{"gitId":"maze508"},"content":"    public void verifyAllValuesAlpha(Prefix... prefixes) throws ParseException {","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"maze508"},"content":"        for (Prefix prefix : prefixes) {","lastModifiedDate":"2024-03-12"},{"lineNumber":96,"author":{"gitId":"maze508"},"content":"            List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2024-03-12"},{"lineNumber":97,"author":{"gitId":"maze508"},"content":"            checkValuesAlpha(values, prefix);","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"maze508"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":99,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":100,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"maze508"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"maze508"},"content":"     * Throws a {@code ParseException} if any of the characters in the prefixes given in {@code prefixes}","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"maze508"},"content":"     * are not alphabets.","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"maze508"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"maze508"},"content":"    private void checkValuesAlpha(List\u003cString\u003e values, Prefix prefix) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"maze508"},"content":"        if (values.stream().anyMatch(value -\u003e !value.matches(\"^[a-zA-Z]+$\"))) {","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"maze508"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_ALPHABET_ONLY, prefix.getPrefix()));","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"maze508"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":109,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":110,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"guanquann"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-13"},{"lineNumber":113,"author":{"gitId":"guanquann"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":115,"author":{"gitId":"guanquann"},"content":"    public boolean arePrefixesPresent(Prefix... prefixes) {","lastModifiedDate":"2024-03-13"},{"lineNumber":116,"author":{"gitId":"guanquann"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e getValue(prefix).isPresent());","lastModifiedDate":"2024-03-13"},{"lineNumber":117,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"guanquann":8,"-":78,"maze508":32}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"guanquann":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"maze508"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"maze508"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"maze508"},"content":"import java.util.List;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"maze508"},"content":"import seedu.address.model.person.NameAndTagContainsKeywordsPredicate;","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"maze508"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"maze508"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"maze508"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"maze508"},"content":"        // Ensure no preamble exists.","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"maze508"},"content":"        if (!argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"maze508"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"maze508"},"content":"        // Check for non-empty Keywords after all Prefixes","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"maze508"},"content":"        argMultimap.verifyNonEmptyKeywordValues(PREFIX_NAME, PREFIX_TAG);","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"maze508"},"content":"        // Ensure all keywords are alphabets","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"maze508"},"content":"        argMultimap.verifyAllValuesAlpha(PREFIX_NAME, PREFIX_TAG);","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":40,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e nameKeywords \u003d argMultimap.getAllValues(PREFIX_NAME);","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e tagKeywords \u003d argMultimap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"maze508"},"content":"        // Ensure that at least one name or tag keyword is provided","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"maze508"},"content":"        if (nameKeywords.isEmpty() \u0026\u0026 tagKeywords.isEmpty()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"maze508"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"maze508"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"maze508"},"content":"        return new FindCommand(new NameAndTagContainsKeywordsPredicate(nameKeywords, tagKeywords));","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"-":26,"maze508":26}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":100,"author":{"gitId":"guanquann"},"content":"     * Parses a {@code String date} into an {@code Date}.","lastModifiedDate":"2024-03-12"},{"lineNumber":101,"author":{"gitId":"guanquann"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-12"},{"lineNumber":102,"author":{"gitId":"guanquann"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":103,"author":{"gitId":"guanquann"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2024-03-12"},{"lineNumber":104,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":105,"author":{"gitId":"guanquann"},"content":"    public static Date parseDate(String date) throws ParseException {","lastModifiedDate":"2024-03-12"},{"lineNumber":106,"author":{"gitId":"guanquann"},"content":"        requireNonNull(date);","lastModifiedDate":"2024-03-12"},{"lineNumber":107,"author":{"gitId":"guanquann"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2024-03-12"},{"lineNumber":108,"author":{"gitId":"guanquann"},"content":"        if (!Date.isValidDate(trimmedDate)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":109,"author":{"gitId":"guanquann"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-12"},{"lineNumber":110,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":111,"author":{"gitId":"guanquann"},"content":"        return new Date(trimmedDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":112,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":113,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"guanquann":16,"-":124}},{"path":"src/main/java/seedu/address/model/order/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.model.order;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":" * Represents a date of an order in the address book.","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"public class Date {","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Date format should be YYYY-MM-DD, and it should not be blank\";","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"    public final LocalDate date;","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"     * Constructs an {@code Date}.","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"     * @param date a valid date string.","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"    public Date(String date) {","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"        requireNonNull(date);","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"        this.date \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"    public static boolean isValidDate(String test) {","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"        try {","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"            LocalDate.parse(test, DATE_TIME_FORMATTER);","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"        return date.toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"        if (!(other instanceof Date)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"guanquann"},"content":"        Date otherDate \u003d (Date) other;","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"guanquann"},"content":"        return date.equals(otherDate.date);","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"guanquann"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"guanquann"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"guanquann"},"content":"        return date.hashCode();","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":69}},{"path":"src/main/java/seedu/address/model/order/Order.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.model.order;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":" * Represents an Order in the address book.","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"public class Order {","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"    private final Date arrivalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"    private final String remark;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"    private final String status;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"     * Constructs a {@code Order}.","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"     * @param arrivalDate a valid date of the order.","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"     * @param remark a valid remark of the order.","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"    public Order(Date arrivalDate, String remark) {","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"        requireNonNull(arrivalDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"        requireNonNull(remark);","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"        this.arrivalDate \u003d arrivalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"        this.status \u003d \"Pending\";","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"     * Constructs a {@code Order}.","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"     * @param arrivalDate a valid date of the order.","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"     * @param remark a valid remark of the order.","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"     * @param status a valid status of the order.","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"    public Order(Date arrivalDate, String remark, String status) {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"        requireNonNull(arrivalDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"        requireNonNull(remark);","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"        this.arrivalDate \u003d arrivalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"        this.status \u003d status;","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"    public Date getDate() {","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"        return arrivalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"    public String getRemark() {","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"        return remark;","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"    public String getStatus() {","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"        return status;","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"guanquann"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"guanquann"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"guanquann"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"guanquann"},"content":"        if (!(other instanceof Order)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"guanquann"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"guanquann"},"content":"        Order otherOrder \u003d (Order) other;","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"guanquann"},"content":"        return arrivalDate.equals(otherOrder.arrivalDate) \u0026\u0026 remark.equals(otherOrder.remark)","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"guanquann"},"content":"                \u0026\u0026 status.equals(otherOrder.status);","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"guanquann"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"guanquann"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"guanquann"},"content":"        return arrivalDate.hashCode() + remark.hashCode() + status.hashCode();","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"guanquann"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"guanquann"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"guanquann"},"content":"        return String.format(\"[%s (by: %s, status: %s)]\", remark, arrivalDate, status);","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":84}},{"path":"src/main/java/seedu/address/model/person/NameAndTagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"maze508"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"maze508"},"content":"import java.util.List;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"maze508"},"content":"import java.util.Objects;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"maze508"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"maze508"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"maze508"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"maze508"},"content":" * Tests that a {@code Person}\u0027s {@code Name} and {@code Tag} matches any of the keywords given.","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"maze508"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"maze508"},"content":"public class NameAndTagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"maze508"},"content":"    private final List\u003cString\u003e nameKeywords;","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"maze508"},"content":"    private final List\u003cString\u003e tagKeywords;","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"maze508"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"maze508"},"content":"     * Constructor for NameAndTagContainsKeywordsPredicate.","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"maze508"},"content":"     * @param nameKeywords List of name keywords to search for.","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"maze508"},"content":"     * @param tagKeywords List of tag keywords to search for.","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"maze508"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"maze508"},"content":"    public NameAndTagContainsKeywordsPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e tagKeywords) {","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"maze508"},"content":"        this.nameKeywords \u003d nameKeywords;","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"maze508"},"content":"        this.tagKeywords \u003d tagKeywords;","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"maze508"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"maze508"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"maze508"},"content":"        boolean matchesName \u003d nameKeywords.stream()","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"maze508"},"content":"                .allMatch(keyword -\u003e StringUtil.containsSubstringIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"maze508"},"content":"        boolean matchesTags \u003d tagKeywords.stream()","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"maze508"},"content":"                .allMatch(keyword -\u003e person.getTags().stream()","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"maze508"},"content":"                        .anyMatch(tag -\u003e StringUtil.containsSubstringIgnoreCase(tag.tagName, keyword)));","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"maze508"},"content":"        return matchesName \u0026\u0026 matchesTags;","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"maze508"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"maze508"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"maze508"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"maze508"},"content":"            return true;","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"maze508"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"maze508"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"maze508"},"content":"        if (!(other instanceof NameAndTagContainsKeywordsPredicate)) {","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"maze508"},"content":"            return false;","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"maze508"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate that \u003d (NameAndTagContainsKeywordsPredicate) other;","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"maze508"},"content":"        return Objects.equals(nameKeywords, that.nameKeywords)","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"maze508"},"content":"                \u0026\u0026 Objects.equals(tagKeywords, that.tagKeywords);","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"maze508"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"maze508"},"content":"    public String toString() {","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"maze508"},"content":"        return \"NameAndTagContainsKeywordsPredicate{\"","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"maze508"},"content":"                + \"nameKeywords\u003d\" + nameKeywords","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"maze508"},"content":"                + \", tagKeywords\u003d\" + tagKeywords","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"maze508"},"content":"                + \u0027}\u0027;","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"maze508"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"maze508":60}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Order;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"    private final ArrayList\u003cOrder\u003e orders;","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"        this.orders \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"     * This constructor is used to create a person with orders.","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"                  ArrayList\u003cOrder\u003e orders) {","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"        this.address \u003d address;","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"guanquann"},"content":"        this.orders \u003d orders;","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"guanquann"},"content":"     * Returns an order list","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"guanquann"},"content":"     * @param arrivalDate the expected date of the order received","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"guanquann"},"content":"     * @param remark the remark of the order","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"guanquann"},"content":"    public void addOrder(Date arrivalDate, String remark) {","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"guanquann"},"content":"        Order order \u003d new Order(arrivalDate, remark);","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"guanquann"},"content":"        orders.add(order);","lastModifiedDate":"2024-03-14"},{"lineNumber":93,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":94,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"guanquann"},"content":"    public ArrayList\u003cOrder\u003e getOrders() {","lastModifiedDate":"2024-03-14"},{"lineNumber":96,"author":{"gitId":"guanquann"},"content":"        return orders;","lastModifiedDate":"2024-03-14"},{"lineNumber":97,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 address.equals(otherPerson.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                \u0026\u0026 tags.equals(otherPerson.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"guanquann"},"content":"        return Objects.hash(name, phone, email, address, tags, orders);","lastModifiedDate":"2024-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":149,"author":{"gitId":"guanquann"},"content":"                .add(\"orders\", orders)","lastModifiedDate":"2024-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"guanquann":37,"-":116}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedOrder.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Order;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":" * Jackson-friendly version of {@link Order}.","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"class JsonAdaptedOrder {","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"    private final String arrivalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"    private final String remark;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"    private final String status;","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"     * Constructs a {@code JsonAdaptedOrder} with the given {@code order}.","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"    @JsonCreator","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"    public JsonAdaptedOrder(@JsonProperty(\"arrivalDate\") String arrivalDate,","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"                            @JsonProperty(\"remark\") String remark,","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"                            @JsonProperty(\"status\") String status) {","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"        this.arrivalDate \u003d arrivalDate;","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"        this.status \u003d status;","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"     * Converts a given {@code Order} into this class for Jackson use.","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"    public JsonAdaptedOrder(Order source) {","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"        this.arrivalDate \u003d source.getDate().toString();","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"        this.remark \u003d source.getRemark();","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"        this.status \u003d source.getStatus();","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"     * Converts this Jackson-friendly adapted order object into the model\u0027s {@code Order} object.","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted order.","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"    public Order toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"        if (arrivalDate \u003d\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\"));","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"        if (remark \u003d\u003d null) {","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Remark\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"        if (status \u003d\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Status\"));","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"guanquann"},"content":"        final Date modelDate \u003d new Date(arrivalDate);","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"guanquann"},"content":"        return new Order(modelDate, remark);","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":64}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Order;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-09"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"    private final List\u003cJsonAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"            @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags, @JsonProperty(\"orders\") List\u003cJsonAdaptedOrder\u003e orders) {","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-01-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-01-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"        if (orders !\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"            this.orders.addAll(orders);","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-01-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"guanquann"},"content":"        orders.addAll(source.getOrders().stream()","lastModifiedDate":"2024-03-14"},{"lineNumber":66,"author":{"gitId":"guanquann"},"content":"                .map(JsonAdaptedOrder::new)","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"guanquann"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-01-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"guanquann"},"content":"        final List\u003cOrder\u003e personOrders \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"guanquann"},"content":"        for (JsonAdaptedOrder order : orders) {","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"guanquann"},"content":"            personOrders.add(order.toModelType());","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"guanquann"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":120,"author":{"gitId":"guanquann"},"content":"        final ArrayList\u003cOrder\u003e modelOrders \u003d new ArrayList\u003c\u003e(personOrders);","lastModifiedDate":"2024-03-12"},{"lineNumber":121,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":122,"author":{"gitId":"guanquann"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelOrders);","lastModifiedDate":"2024-03-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"guanquann":18,"-":107}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"    private Label orders;","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"    @FXML","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"        orders.setText(person.getOrders().size() + \" orders\");","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"guanquann":3,"-":59}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"      \u003cLabel fx:id\u003d\"orders\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orders\" /\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"guanquann":1,"-":36}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"maze508"},"content":"    //---------------- Tests for containsSubstringIgnoreCase --------------------------------------","lastModifiedDate":"2024-03-12"},{"lineNumber":127,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":128,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":129,"author":{"gitId":"maze508"},"content":"    public void containsSubstringIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2024-03-12"},{"lineNumber":130,"author":{"gitId":"maze508"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsSubstringIgnoreCase(null, \"abc\"));","lastModifiedDate":"2024-03-12"},{"lineNumber":131,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":132,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":133,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":134,"author":{"gitId":"maze508"},"content":"    public void containsSubstringIgnoreCase_nullQuery_throwsNullPointerException() {","lastModifiedDate":"2024-03-12"},{"lineNumber":135,"author":{"gitId":"maze508"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":136,"author":{"gitId":"maze508"},"content":"                StringUtil.containsSubstringIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2024-03-12"},{"lineNumber":137,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":138,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":139,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":140,"author":{"gitId":"maze508"},"content":"    public void containsSubstringIgnoreCase_emptyQuery_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-12"},{"lineNumber":141,"author":{"gitId":"maze508"},"content":"        assertThrows(IllegalArgumentException.class, \"Query parameter cannot be empty\", ()","lastModifiedDate":"2024-03-12"},{"lineNumber":142,"author":{"gitId":"maze508"},"content":"                -\u003e StringUtil.containsSubstringIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2024-03-12"},{"lineNumber":143,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":144,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":145,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":146,"author":{"gitId":"maze508"},"content":"    public void containsSubstringIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2024-03-12"},{"lineNumber":147,"author":{"gitId":"maze508"},"content":"        // Matches as a substring","lastModifiedDate":"2024-03-12"},{"lineNumber":148,"author":{"gitId":"maze508"},"content":"        assertTrue(StringUtil.containsSubstringIgnoreCase(\"Alexander Hamilton\", \"Alex\")); // Prefix match","lastModifiedDate":"2024-03-12"},{"lineNumber":149,"author":{"gitId":"maze508"},"content":"        assertTrue(StringUtil.containsSubstringIgnoreCase(\"Theresa May\", \"ere\")); // Substring match","lastModifiedDate":"2024-03-12"},{"lineNumber":150,"author":{"gitId":"maze508"},"content":"        assertTrue(StringUtil.containsSubstringIgnoreCase(\"Barack Obama\", \"ack o\")); // Across words","lastModifiedDate":"2024-03-12"},{"lineNumber":151,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":152,"author":{"gitId":"maze508"},"content":"        // No match","lastModifiedDate":"2024-03-12"},{"lineNumber":153,"author":{"gitId":"maze508"},"content":"        assertFalse(StringUtil.containsSubstringIgnoreCase(\"\", \"abc\")); // Empty sentence","lastModifiedDate":"2024-03-12"},{"lineNumber":154,"author":{"gitId":"maze508"},"content":"        assertFalse(StringUtil.containsSubstringIgnoreCase(\"    \", \"abc\")); // Spaces in sentence","lastModifiedDate":"2024-03-12"},{"lineNumber":155,"author":{"gitId":"maze508"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":156,"author":{"gitId":"maze508"},"content":"                StringUtil.containsSubstringIgnoreCase(\"some sentence\", \"\")); // Empty query","lastModifiedDate":"2024-03-12"},{"lineNumber":157,"author":{"gitId":"maze508"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":158,"author":{"gitId":"maze508"},"content":"                StringUtil.containsSubstringIgnoreCase(\"another sentence\", \"  \")); // Space query","lastModifiedDate":"2024-03-12"},{"lineNumber":159,"author":{"gitId":"maze508"},"content":"        assertFalse(StringUtil.containsSubstringIgnoreCase(\"Theresa May\",","lastModifiedDate":"2024-03-12"},{"lineNumber":160,"author":{"gitId":"maze508"},"content":"                \"Theresa  May\")); // Double spaces in query","lastModifiedDate":"2024-03-12"},{"lineNumber":161,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":162,"author":{"gitId":"maze508"},"content":"        // Case-insensitive match","lastModifiedDate":"2024-03-12"},{"lineNumber":163,"author":{"gitId":"maze508"},"content":"        assertTrue(StringUtil.containsSubstringIgnoreCase(\"alexander hamilton\", \"Alex\"));","lastModifiedDate":"2024-03-12"},{"lineNumber":164,"author":{"gitId":"maze508"},"content":"        assertTrue(StringUtil.containsSubstringIgnoreCase(\"Alexander HAMILTON\", \"alex\"));","lastModifiedDate":"2024-03-12"},{"lineNumber":165,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":166,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"-":143,"maze508":41}},{"path":"src/test/java/seedu/address/logic/commands/AddOrderCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"import java.util.List;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Order;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"public class AddOrderCommandTest {","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"    private static final Date DATE_STUB \u003d new Date(\"2020-01-01\");","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"    private static final String REMARK_STUB \u003d \"100 chicken wings\";","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"    private static final ArrayList\u003cOrder\u003e ORDERS_STUB \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"            List.of(new Order(new Date(\"2020-01-01\"), \"100 chicken wings\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"    public void constructor_nullOrder_throwsNullPointerException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddOrderCommand(null, DATE_STUB, REMARK_STUB));","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddOrderCommand(Index.fromOneBased(1),","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"                null, REMARK_STUB));","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddOrderCommand(Index.fromOneBased(1),","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"                DATE_STUB, null));","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddOrderCommand(null, null, null));","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"    public void execute_addOrder_success() {","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson).withOrders(ORDERS_STUB).build();","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand addOrderCommand \u003d new AddOrderCommand(INDEX_FIRST_PERSON, DATE_STUB, REMARK_STUB);","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"        String expectedMessage \u003d String.format(AddOrderCommand.MESSAGE_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"        assertCommandSuccess(addOrderCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"guanquann"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"guanquann"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand addOrderCommand \u003d new AddOrderCommand(outOfBoundIndex, DATE_STUB, REMARK_STUB);","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"guanquann"},"content":"        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX, () -\u003e","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"guanquann"},"content":"                addOrderCommand.execute(model));","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"guanquann"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand addOrderCommand \u003d new AddOrderCommand(INDEX_FIRST_PERSON, DATE_STUB, REMARK_STUB);","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"guanquann"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"guanquann"},"content":"        assert (addOrderCommand.equals(addOrderCommand));","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"guanquann"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand addOrderCommandCopy \u003d new AddOrderCommand(INDEX_FIRST_PERSON, DATE_STUB, REMARK_STUB);","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"guanquann"},"content":"        assert (addOrderCommand.equals(addOrderCommandCopy));","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"guanquann"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"guanquann"},"content":"        assert (!addOrderCommand.equals(1));","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"guanquann"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"guanquann"},"content":"        assert (!addOrderCommand.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"guanquann"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2024-03-14"},{"lineNumber":84,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand differentOrderCommand \u003d new AddOrderCommand(Index.fromOneBased(2), DATE_STUB, REMARK_STUB);","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"guanquann"},"content":"        assert (!addOrderCommand.equals(differentOrderCommand));","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":87,"author":{"gitId":"guanquann"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2024-03-14"},{"lineNumber":88,"author":{"gitId":"guanquann"},"content":"        differentOrderCommand \u003d new AddOrderCommand(INDEX_FIRST_PERSON, new Date(\"2020-01-02\"), REMARK_STUB);","lastModifiedDate":"2024-03-14"},{"lineNumber":89,"author":{"gitId":"guanquann"},"content":"        assert (!addOrderCommand.equals(differentOrderCommand));","lastModifiedDate":"2024-03-14"},{"lineNumber":90,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":91,"author":{"gitId":"guanquann"},"content":"        // different remark -\u003e returns false","lastModifiedDate":"2024-03-14"},{"lineNumber":92,"author":{"gitId":"guanquann"},"content":"        differentOrderCommand \u003d new AddOrderCommand(INDEX_FIRST_PERSON, DATE_STUB, \"200 chicken wings\");","lastModifiedDate":"2024-03-14"},{"lineNumber":93,"author":{"gitId":"guanquann"},"content":"        assert (!addOrderCommand.equals(differentOrderCommand));","lastModifiedDate":"2024-03-14"},{"lineNumber":94,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"guanquann"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand addOrderCommand \u003d new AddOrderCommand(INDEX_FIRST_PERSON, DATE_STUB, REMARK_STUB);","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"guanquann"},"content":"        String expected \u003d AddOrderCommand.class.getCanonicalName() + \"{index\u003d\" + INDEX_FIRST_PERSON","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"guanquann"},"content":"                + \", arrivalDate\u003d\" + DATE_STUB + \", remark\u003d\" + REMARK_STUB + \"}\";","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"guanquann"},"content":"        assertEquals(expected, addOrderCommand.toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":104}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(1), editedPerson);","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2019-02-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPersonDescriptor\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"guanquann":2,"-":182}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"maze508"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"maze508"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"maze508"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"maze508"},"content":"import java.util.List;","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"maze508"},"content":"import seedu.address.model.person.NameAndTagContainsKeywordsPredicate;","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e firstKeywordsList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e secondKeywordsList \u003d Collections.singletonList(\"second\");","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e emptyList \u003d Collections.emptyList();","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(firstKeywordsList, emptyList);","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(secondKeywordsList, emptyList);","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"maze508"},"content":"    public void execute_tagMatches_multiplePersonsFound() {","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"maze508"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d preparePredicate(\"\", \"friends\");","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"maze508"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"maze508"},"content":"    public void execute_nameAndTagMatches_singlePersonFound() {","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"maze508"},"content":"        // Assuming only ELLE has a \"colleague\" tag","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"maze508"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d preparePredicate(\"Alice\", \"friends\");","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"maze508"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"maze508"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"maze508"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"maze508"},"content":"        assertEquals(Collections.singletonList(ALICE), model.getFilteredPersonList());","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"maze508"},"content":"    public void execute_noMatches_noPersonFound() {","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"maze508"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d preparePredicate(\"Nonexistent\",","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"maze508"},"content":"                \"NonexistentTag\");","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"maze508"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d preparePredicate(\"Alice\", \"friend\");","lastModifiedDate":"2024-03-11"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        FindCommand findCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2019-02-23"},{"lineNumber":99,"author":{"gitId":"maze508"},"content":"        String expectedString \u003d \"seedu.address.logic.commands.FindCommand{predicate\u003d\"","lastModifiedDate":"2024-03-11"},{"lineNumber":100,"author":{"gitId":"maze508"},"content":"                + \"NameAndTagContainsKeywordsPredicate{nameKeywords\u003d[Alice], tagKeywords\u003d[friend]}}\";","lastModifiedDate":"2024-03-11"},{"lineNumber":101,"author":{"gitId":"maze508"},"content":"        assertEquals(expectedString, findCommand.toString());","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":107,"author":{"gitId":"maze508"},"content":"    private NameAndTagContainsKeywordsPredicate preparePredicate(String nameInput, String tagInput) {","lastModifiedDate":"2024-03-11"},{"lineNumber":108,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e nameKeywords \u003d nameInput.isEmpty() ? Collections.emptyList()","lastModifiedDate":"2024-03-11"},{"lineNumber":109,"author":{"gitId":"maze508"},"content":"                : Arrays.asList(nameInput.split(\"\\\\s+\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":110,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e tagKeywords \u003d tagInput.isEmpty() ? Collections.emptyList()","lastModifiedDate":"2024-03-11"},{"lineNumber":111,"author":{"gitId":"maze508"},"content":"                : Arrays.asList(tagInput.split(\"\\\\s+\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":112,"author":{"gitId":"maze508"},"content":"        return new NameAndTagContainsKeywordsPredicate(nameKeywords, tagKeywords);","lastModifiedDate":"2024-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":70,"maze508":44}},{"path":"src/test/java/seedu/address/logic/parser/AddOrderCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.commands.AddOrderCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"public class AddOrderCommandParserTest {","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"    private static final String NON_EMPTY_DATE \u003d \"2020-01-01\";","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"    private static final String NON_EMPTY_REMARK \u003d \"100 chicken wings\";","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE);","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"    private AddOrderCommandParser parser \u003d new AddOrderCommandParser();","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_DATE + NON_EMPTY_DATE + \" \"","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"                + PREFIX_REMARK + NON_EMPTY_REMARK;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand expectedCommand \u003d new AddOrderCommand(INDEX_FIRST_PERSON, new Date(NON_EMPTY_DATE),","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"                NON_EMPTY_REMARK);","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"        // no index specified","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"        String userInput \u003d PREFIX_DATE + NON_EMPTY_DATE + \" \" + PREFIX_REMARK + NON_EMPTY_REMARK;","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"        // no field specified","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"        // no index and no field specified","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"        // negative index","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, \"-5\" + \" \" + PREFIX_DATE + NON_EMPTY_DATE + \" \"","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"                + PREFIX_REMARK + NON_EMPTY_REMARK, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"        // zero index","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"guanquann"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"guanquann"},"content":"    public void parse_missingDateField_failure() {","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"guanquann"},"content":"        // no parameters","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, AddOrderCommand.COMMAND_WORD, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"guanquann"},"content":"        // no index","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"guanquann"},"content":"        assertParseFailure(parser, AddOrderCommand.COMMAND_WORD + \" \" + PREFIX_DATE + NON_EMPTY_DATE,","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"guanquann"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":71}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"import seedu.address.logic.commands.AddOrderCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"maze508"},"content":"import seedu.address.model.person.NameAndTagContainsKeywordsPredicate;","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"guanquann"},"content":"    public void parseCommand_addOrder() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"guanquann"},"content":"        AddOrderCommand command \u003d (AddOrderCommand) parser.parseCommand(AddOrderCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"guanquann"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + \" d/2020-01-01 r/100 chicken wings\");","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"guanquann"},"content":"        assertEquals(new AddOrderCommand(INDEX_FIRST_PERSON, new Date(\"2020-01-01\"), \"100 chicken wings\"), command);","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"foo\", \"bar\");","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e tagKeywords \u003d Arrays.asList(\"friend\", \"colleague\");","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"maze508"},"content":"                FindCommand.COMMAND_WORD + \" n/ \" + String.join(\" n/ \", nameKeywords)","lastModifiedDate":"2024-03-12"},{"lineNumber":85,"author":{"gitId":"maze508"},"content":"                        + \" t/ \" + String.join(\" t/ \", tagKeywords));","lastModifiedDate":"2024-03-12"},{"lineNumber":86,"author":{"gitId":"maze508"},"content":"        assertEquals(new FindCommand(new NameAndTagContainsKeywordsPredicate(nameKeywords, tagKeywords)), command);","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"guanquann":9,"-":96,"maze508":6}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"maze508"},"content":"import static seedu.address.logic.Messages.MESSAGE_ALPHABET_ONLY;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"maze508"},"content":"import static seedu.address.logic.Messages.MESSAGE_CANNOT_BE_EMPTY;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"maze508"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"maze508"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"maze508"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"maze508"},"content":"import seedu.address.model.person.NameAndTagContainsKeywordsPredicate;","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":29,"author":{"gitId":"maze508"},"content":"        // Single name keyword","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"maze508"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice\",","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"maze508"},"content":"                new FindCommand(new NameAndTagContainsKeywordsPredicate(Collections.singletonList(\"Alice\"),","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"maze508"},"content":"                        Collections.emptyList())));","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"maze508"},"content":"        // Multiple name keywords","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"maze508"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice \" + PREFIX_NAME + \"Bob\",","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"maze508"},"content":"                new FindCommand(new NameAndTagContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"),","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"maze508"},"content":"                        Collections.emptyList())));","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"maze508"},"content":"        // Single tag keyword","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"maze508"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_TAG + \"friend\",","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"maze508"},"content":"                new FindCommand(new NameAndTagContainsKeywordsPredicate(Collections.emptyList(),","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"maze508"},"content":"                        Collections.singletonList(\"friend\"))));","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"maze508"},"content":"        // Multiple tag keywords","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"maze508"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_TAG + \"friend \" + PREFIX_TAG + \"colleague\",","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"maze508"},"content":"                new FindCommand(new NameAndTagContainsKeywordsPredicate(Collections.emptyList(),","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"maze508"},"content":"                        Arrays.asList(\"friend\", \"colleague\"))));","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"maze508"},"content":"        // Combined name and tag keywords","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"maze508"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice \" + PREFIX_TAG + \"friend\",","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"maze508"},"content":"                new FindCommand(new NameAndTagContainsKeywordsPredicate(Collections.singletonList(\"Alice\"),","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"maze508"},"content":"                        Collections.singletonList(\"friend\"))));","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"maze508"},"content":"    public void parse_nonAlphabeticNameKeyword_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"maze508"},"content":"        assertParseFailure(parser, \" n/Alice1\", String.format(MESSAGE_ALPHABET_ONLY, PREFIX_NAME));","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"maze508"},"content":"    public void parse_nonAlphabeticTagKeyword_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"maze508"},"content":"        assertParseFailure(parser, \" t/friend1\", String.format(MESSAGE_ALPHABET_ONLY, PREFIX_TAG));","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"maze508"},"content":"    public void parse_emptyNameKeyword_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"maze508"},"content":"        assertParseFailure(parser, \" \" + PREFIX_NAME + \" \",","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"maze508"},"content":"                String.format(MESSAGE_CANNOT_BE_EMPTY, PREFIX_NAME));","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"maze508"},"content":"    public void parse_emptyTagKeyword_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"maze508"},"content":"        assertParseFailure(parser, \" \" + PREFIX_TAG + \" \",","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"maze508"},"content":"                String.format(MESSAGE_CANNOT_BE_EMPTY, PREFIX_TAG));","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"maze508"},"content":"    public void parse_noFieldsProvided_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"maze508"},"content":"        // No name or tag provided","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"maze508"},"content":"        assertParseFailure(parser, \"  \",","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"maze508"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"maze508"},"content":"    public void parse_preamblePresent_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"maze508"},"content":"        // Preamble before valid prefixes","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"maze508"},"content":"        assertParseFailure(parser, \"RandomText \" + PREFIX_NAME + \"Alice\",","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"maze508"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"-":26,"maze508":64}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":197,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":198,"author":{"gitId":"guanquann"},"content":"    public void parseDate_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":199,"author":{"gitId":"guanquann"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":200,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":201,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":202,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":203,"author":{"gitId":"guanquann"},"content":"    public void parseDate_invalidValue_throwsParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":204,"author":{"gitId":"guanquann"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(\"2020-13-01\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":205,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":206,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":207,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":208,"author":{"gitId":"guanquann"},"content":"    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":209,"author":{"gitId":"guanquann"},"content":"        assertEquals(ParserUtil.parseDate(\"2020-01-01\").toString(), \"2020-01-01\");","lastModifiedDate":"2024-03-13"},{"lineNumber":210,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":211,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":212,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":213,"author":{"gitId":"guanquann"},"content":"    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":214,"author":{"gitId":"guanquann"},"content":"        assertEquals(ParserUtil.parseDate(WHITESPACE + \"2020-01-01\" + WHITESPACE).toString(), \"2020-01-01\");","lastModifiedDate":"2024-03-13"},{"lineNumber":215,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"guanquann":20,"-":196}},{"path":"src/test/java/seedu/address/model/order/DateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.model.order;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"public class DateTest {","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"    private static final String VALID_DATE \u003d \"2020-01-01\";","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Date(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"2020-99-99\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"        Date date \u003d new Date(VALID_DATE);","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"        assertTrue(date.equals(date));","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"        Date dateCopy \u003d new Date(date.toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"        assertTrue(date.equals(dateCopy));","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"        assertFalse(date.equals(1));","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"        assertFalse(date.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"        // different Date -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"        Date differentDate \u003d new Date(\"2020-01-02\");","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"        assertFalse(date.equals(differentDate));","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"    public void hashcode() {","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"        Date date \u003d new Date(\"2020-01-01\");","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"        // same date -\u003e returns same hashcode","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"        assertEquals(date.hashCode(), new Date(\"2020-01-01\").hashCode());","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"        // different date -\u003e returns different hashcode","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"        assertNotEquals(date.hashCode(), new Date(\"2020-05-01\").hashCode());","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":56}},{"path":"src/test/java/seedu/address/model/order/OrderTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.model.order;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"public class OrderTest {","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"    private static final String VALID_DATE \u003d \"2020-01-01\";","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"    private static final String VALID_REMARK \u003d \"100 chicken wings\";","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"    private static final String INVALID_DATE \u003d \"2020-99-99\";","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Order(null, null));","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Order(new Date(INVALID_DATE), VALID_REMARK));","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"    public void constructor_order_success() {","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"        Order order \u003d new Order(new Date(VALID_DATE), VALID_REMARK);","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"        assertEquals(VALID_DATE, order.getDate().toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"        assertEquals(VALID_REMARK, order.getRemark());","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"        assertEquals(\"Pending\", order.getStatus());","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"        Order orderWithStatus \u003d new Order(new Date(VALID_DATE), VALID_REMARK, \"Delivered\");","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"        assertEquals(VALID_DATE, orderWithStatus.getDate().toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"        assertEquals(VALID_REMARK, orderWithStatus.getRemark());","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"        assertEquals(\"Delivered\", orderWithStatus.getStatus());","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"        Order order \u003d new Order(new Date(VALID_DATE), VALID_REMARK);","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"guanquann"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"guanquann"},"content":"        assertTrue(order.equals(order));","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"guanquann"},"content":"        Order orderCopy \u003d new Order(order.getDate(), order.getRemark(), order.getStatus());","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"guanquann"},"content":"        assertTrue(order.equals(orderCopy));","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"guanquann"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"guanquann"},"content":"        assertFalse(order.equals(1));","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"        assertFalse(order.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"guanquann"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"guanquann"},"content":"        Order differentOrder \u003d new Order(order.getDate(), \"200 chicken wings\");","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"guanquann"},"content":"        assertFalse(order.equals(differentOrder));","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"guanquann"},"content":"        // different remark -\u003e returns false","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"guanquann"},"content":"        differentOrder \u003d new Order(new Date(\"2010-01-01\"), order.getRemark());","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"guanquann"},"content":"        assertFalse(order.equals(differentOrder));","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"guanquann"},"content":"        // different status -\u003e returns false","lastModifiedDate":"2024-03-14"},{"lineNumber":66,"author":{"gitId":"guanquann"},"content":"        differentOrder \u003d new Order(order.getDate(), order.getRemark(), \"Delivered\");","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"guanquann"},"content":"        assertFalse(order.equals(differentOrder));","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"guanquann"},"content":"    public void hashcode() {","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"guanquann"},"content":"        Order order \u003d new Order(new Date(VALID_DATE), VALID_REMARK);","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"guanquann"},"content":"        // same order -\u003e returns same hashcode","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"guanquann"},"content":"        assertEquals(order.hashCode(), new Order(new Date(VALID_DATE), VALID_REMARK).hashCode());","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"guanquann"},"content":"        // different date -\u003e returns different hashcode","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"guanquann"},"content":"        assertNotEquals(order.hashCode(), new Order(new Date(\"2022-01-01\"), VALID_REMARK).hashCode());","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"guanquann"},"content":"        // different remark -\u003e returns different hashcode","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"guanquann"},"content":"        assertNotEquals(order.hashCode(), new Order(new Date(VALID_DATE), \"20 chicken wings\").hashCode());","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":83}},{"path":"src/test/java/seedu/address/model/person/NameAndTagContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"maze508"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"maze508"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"maze508"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"maze508"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"maze508"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"maze508"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"maze508"},"content":"import java.util.List;","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"maze508"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"maze508"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"maze508"},"content":"public class NameAndTagContainsKeywordsPredicateTest {","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"maze508"},"content":"    public void equals() {","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e firstPredicateNameKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e secondPredicateNameKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e firstPredicateTagKeywordList \u003d Collections.singletonList(\"tag1\");","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e secondPredicateTagKeywordList \u003d Arrays.asList(\"tag2\", \"tag3\");","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(firstPredicateNameKeywordList, firstPredicateTagKeywordList);","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(secondPredicateNameKeywordList, secondPredicateTagKeywordList);","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"maze508"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"maze508"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"maze508"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(firstPredicateNameKeywordList, firstPredicateTagKeywordList);","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"maze508"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"maze508"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"maze508"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"maze508"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"maze508"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"maze508"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"maze508"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate thirdPredicate \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(Collections.emptyList(), Arrays.asList(\"firstTag\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate fourthPredicate \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(Collections.emptyList(), Arrays.asList(\"secondTag\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"maze508"},"content":"        // Different tagKeywords should not be equal","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"maze508"},"content":"        assertFalse(thirdPredicate.equals(fourthPredicate));","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate fifthPredicate \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(Arrays.asList(\"Jamus\"), Collections.emptyList());","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate sixthPredicate \u003d","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"maze508"},"content":"                new NameAndTagContainsKeywordsPredicate(Arrays.asList(\"Jamuses\"), Collections.emptyList());","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"maze508"},"content":"        // Different tagKeywords should not be equal","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"maze508"},"content":"        assertFalse(fifthPredicate.equals(sixthPredicate));","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"maze508"},"content":"    public void test_nameAndTagContainsKeywords_returnsTrue() {","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"maze508"},"content":"        // Both name and tag match","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d new NameAndTagContainsKeywordsPredicate(Arrays.asList(\"Alice\"),","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"maze508"},"content":"                Arrays.asList(\"friend\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"maze508"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withTags(\"friend\").build()));","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"maze508"},"content":"        // Only name matches","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"maze508"},"content":"        predicate \u003d new NameAndTagContainsKeywordsPredicate(Arrays.asList(\"Alice\"), Collections.emptyList());","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"maze508"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"maze508"},"content":"        // Only tag matches","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"maze508"},"content":"        predicate \u003d new NameAndTagContainsKeywordsPredicate(Collections.emptyList(), Arrays.asList(\"friend\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"maze508"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Bob\").withTags(\"friend\").build()));","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"maze508"},"content":"    public void test_nameAndTagDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"maze508"},"content":"        // Neither name nor tag match","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d new NameAndTagContainsKeywordsPredicate(","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"maze508"},"content":"                Arrays.asList(\"Nonexistent\"), Arrays.asList(\"nonexistentTag\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"maze508"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friend\").build()));","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"maze508"},"content":"    public void test_nameContainsKeywordsButTagDoesNot_returnsFalse() {","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"maze508"},"content":"        // Name matches, tag does not match","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d new NameAndTagContainsKeywordsPredicate(Arrays.asList(\"Alice\"),","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"maze508"},"content":"                Arrays.asList(\"nonexistentTag\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"maze508"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withTags(\"friend\").build()));","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":95,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"maze508"},"content":"    public void test_tagContainsKeywordsButNameDoesNot_returnsFalse() {","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"maze508"},"content":"        // Tag matches, name does not match","lastModifiedDate":"2024-03-11"},{"lineNumber":98,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d new NameAndTagContainsKeywordsPredicate(","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"maze508"},"content":"                Arrays.asList(\"Nonexistent\"), Arrays.asList(\"friend\"));","lastModifiedDate":"2024-03-11"},{"lineNumber":100,"author":{"gitId":"maze508"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Bob\").withTags(\"friend\").build()));","lastModifiedDate":"2024-03-11"},{"lineNumber":101,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"maze508"},"content":"    @Test","lastModifiedDate":"2024-03-11"},{"lineNumber":104,"author":{"gitId":"maze508"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-11"},{"lineNumber":105,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e nameKeywords \u003d List.of(\"nameKeyword\");","lastModifiedDate":"2024-03-11"},{"lineNumber":106,"author":{"gitId":"maze508"},"content":"        List\u003cString\u003e tagKeywords \u003d List.of(\"tagKeyword\");","lastModifiedDate":"2024-03-11"},{"lineNumber":107,"author":{"gitId":"maze508"},"content":"        NameAndTagContainsKeywordsPredicate predicate \u003d new NameAndTagContainsKeywordsPredicate(nameKeywords,","lastModifiedDate":"2024-03-11"},{"lineNumber":108,"author":{"gitId":"maze508"},"content":"                tagKeywords);","lastModifiedDate":"2024-03-11"},{"lineNumber":109,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":110,"author":{"gitId":"maze508"},"content":"        String expected \u003d \"NameAndTagContainsKeywordsPredicate{\"","lastModifiedDate":"2024-03-11"},{"lineNumber":111,"author":{"gitId":"maze508"},"content":"                + \"nameKeywords\u003d\" + nameKeywords","lastModifiedDate":"2024-03-11"},{"lineNumber":112,"author":{"gitId":"maze508"},"content":"                + \", tagKeywords\u003d\" + tagKeywords","lastModifiedDate":"2024-03-11"},{"lineNumber":113,"author":{"gitId":"maze508"},"content":"                + \u0027}\u0027;","lastModifiedDate":"2024-03-11"},{"lineNumber":114,"author":{"gitId":"maze508"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2024-03-11"},{"lineNumber":115,"author":{"gitId":"maze508"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":116,"author":{"gitId":"maze508"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"maze508":116}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String expected \u003d Person.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"guanquann"},"content":"                + \", email\u003d\" + ALICE.getEmail() + \", address\u003d\" + ALICE.getAddress() + \", tags\u003d\" + ALICE.getTags()","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"guanquann"},"content":"                + \", orders\u003d\" + ALICE.getOrders() + \"}\";","lastModifiedDate":"2024-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":101,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"guanquann"},"content":"    public void hashcode() {","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"guanquann"},"content":"        Person person \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"guanquann"},"content":"        // same person -\u003e returns same hashcode","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"guanquann"},"content":"        assertEquals(person.hashCode(), new PersonBuilder(ALICE).build().hashCode());","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"guanquann"},"content":"        // different person -\u003e returns different hashcode","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"guanquann"},"content":"        assertNotEquals(person.hashCode(), new PersonBuilder(BOB).build().hashCode());","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"guanquann":14,"-":98}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedOrderTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanquann"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"guanquann"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"guanquann"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"guanquann"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Date;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Order;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"guanquann"},"content":"public class JsonAdaptedOrderTest {","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"guanquann"},"content":"    private static final Order ORDER \u003d new Order(new Date(\"2020-01-01\"), \"100 chicken wings\");","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"guanquann"},"content":"    private static final String VALID_DATE_STRING \u003d \"2020-01-01\";","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"guanquann"},"content":"    private static final String VALID_REMARK \u003d \"100 chicken wings\";","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"guanquann"},"content":"    private static final String VALID_STATUS \u003d \"Pending\";","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"guanquann"},"content":"    public void toModelType_validOrderDetails_returnsOrder() throws IllegalValueException {","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"guanquann"},"content":"        JsonAdaptedOrder jsonAdaptedOrder \u003d new JsonAdaptedOrder(VALID_DATE_STRING, VALID_REMARK, VALID_STATUS);","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"guanquann"},"content":"        Order order \u003d jsonAdaptedOrder.toModelType();","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"guanquann"},"content":"        assertEquals(ORDER, order);","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"guanquann"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"guanquann"},"content":"        JsonAdaptedOrder jsonAdaptedOrder \u003d new JsonAdaptedOrder(null, VALID_REMARK, VALID_STATUS);","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"guanquann"},"content":"        assertThrows(IllegalValueException.class, jsonAdaptedOrder::toModelType);","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"guanquann"},"content":"    public void toModelType_nullRemark_throwsIllegalValueException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"        JsonAdaptedOrder jsonAdaptedOrder \u003d new JsonAdaptedOrder(VALID_DATE_STRING, null, VALID_STATUS);","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"        assertThrows(IllegalValueException.class, jsonAdaptedOrder::toModelType);","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"guanquann"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"guanquann"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"guanquann"},"content":"        JsonAdaptedOrder jsonAdaptedOrder \u003d new JsonAdaptedOrder(VALID_DATE_STRING, VALID_REMARK, null);","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"guanquann"},"content":"        assertThrows(IllegalValueException.class, jsonAdaptedOrder::toModelType);","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"guanquann"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"guanquann":43}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"guanquann"},"content":"    private static final List\u003cJsonAdaptedOrder\u003e VALID_ORDERS \u003d BENSON.getOrders().stream()","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"guanquann"},"content":"            .map(JsonAdaptedOrder::new)","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"guanquann"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"guanquann"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"guanquann"},"content":"                VALID_TAGS, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"guanquann"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"guanquann"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"guanquann"},"content":"                VALID_TAGS, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"guanquann"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"guanquann"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"guanquann"},"content":"                VALID_TAGS, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"guanquann"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"guanquann"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2024-03-12"},{"lineNumber":103,"author":{"gitId":"guanquann"},"content":"                VALID_TAGS, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"guanquann"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_ORDERS);","lastModifiedDate":"2024-03-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"guanquann":16,"-":101}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"guanquann"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"guanquann"},"content":"import seedu.address.model.order.Order;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"guanquann"},"content":"    private ArrayList\u003cOrder\u003e orders;","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"guanquann"},"content":"        orders \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"guanquann"},"content":"        orders \u003d new ArrayList\u003c\u003e(personToCopy.getOrders());","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"guanquann"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"guanquann"},"content":"     * Set the {@code ArrayList\u003cOrder\u003e} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"guanquann"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"guanquann"},"content":"    public PersonBuilder withOrders(ArrayList\u003cOrder\u003e orders) {","lastModifiedDate":"2024-03-14"},{"lineNumber":101,"author":{"gitId":"guanquann"},"content":"        this.orders \u003d orders;","lastModifiedDate":"2024-03-14"},{"lineNumber":102,"author":{"gitId":"guanquann"},"content":"        return this;","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"guanquann"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"guanquann"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":106,"author":{"gitId":"guanquann"},"content":"        return new Person(name, phone, email, address, tags, orders);","lastModifiedDate":"2024-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"guanquann":14,"-":95}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":58,"author":{"gitId":"maze508"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"-":76,"maze508":1}}]
