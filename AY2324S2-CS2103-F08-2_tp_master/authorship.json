[{"path":".github/ISSUE_TEMPLATE/bug_report.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"---","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"name: Bug report","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"about: Create a report to help us improve","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"title: \u0027\u0027","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"labels: \u0027\u0027","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"---","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"**Describe the bug**","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"A clear and concise description of what the bug is.","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"**To Reproduce**","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"Steps to reproduce the behavior:","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"1. Go to \u0027...\u0027","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"2. Click on \u0027....\u0027","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"3. Scroll down to \u0027....\u0027","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"4. See error","lastModifiedDate":"2024-02-26"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"**Expected behavior**","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"A clear and concise description of what you expected to happen.","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"**Screenshots**","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"If applicable, add screenshots to help explain your problem.","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"**Additional context**","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"Add any other context about the problem here.","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"tankh99":27}},{"path":".github/ISSUE_TEMPLATE/user-story.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"---","lastModifiedDate":"2024-03-06"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"name: User story","lastModifiedDate":"2024-03-06"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"about: User story","lastModifiedDate":"2024-03-06"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"title: \"As a\"","lastModifiedDate":"2024-03-06"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"labels: \u0027\u0027","lastModifiedDate":"2024-03-06"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2024-03-06"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"---","lastModifiedDate":"2024-03-06"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"...so that","lastModifiedDate":"2024-03-06"}],"authorContributionMap":{"tankh99":10}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103-F08-2/tp/graph/badge.svg?token\u003dPBBJNYE8U5)](https://codecov.io/gh/AY2324S2-CS2103-F08-2/tp)","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"[![CI Status](https://github.com/AY2324S2-CS2103-F08-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103-F08-2/tp/actions)","lastModifiedDate":"2024-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"* This is our **CogniCare application**. pu\u003cbr\u003e","lastModifiedDate":"2024-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"  * allows counsellors to create contacts in the CogniCare application","lastModifiedDate":"2024-03-08"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"  * allows counsellors to track his student\u0027s mental health progress","lastModifiedDate":"2024-03-08"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"* The project is an ongoing software project for a desktop application (called _CongiCare_) which is used for managing student contact details.","lastModifiedDate":"2024-03-08"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base.","lastModifiedDate":"2024-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"* We hope that the application will help all SoC students to achieve better mental health, and counsellors to spend more time to help students instead of wasting time on administrative work by helping them keep track of student information.","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"Jerome-j":7,"tankh99":2,"-":6}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-03-15"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-03-15"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"run {","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"    archiveFileName \u003d \u0027cognicare.jar\u0027","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Jerome-j":4,"vnnamng":3,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"### Jerome Chua","lastModifiedDate":"2024-03-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"\u003cimg src\u003d\"images/jerome-j.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"[[github](http://github.com/Jerome-j)] [[portfolio](team/jerome-j.md)]","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"* Responsibilities: Integration","lastModifiedDate":"2024-03-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"### Nguyen Xuan Nam","lastModifiedDate":"2024-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"\u003cimg src\u003d\"images/vnnamng.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"[[github](http://github.com/vnnamng)] [[portfolio](team/vnnamng.md)]","lastModifiedDate":"2024-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"* Responsibilities: Integration","lastModifiedDate":"2024-03-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"### Caitlyn Tang","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"\u003cimg src\u003d\"images/caitlyntang.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"[[github](http://github.com/caitlyntang)]","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"[[portfolio](team/caitlyntang.md)]","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"### Tan Khang Hou","lastModifiedDate":"2024-03-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"\u003cimg src\u003d\"images/tankh99.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"[[github](http://github.com/tankh99)]","lastModifiedDate":"2024-03-05"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"[[portfolio](team/tankh99.md)]","lastModifiedDate":"2024-03-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"* Responsibilities: Code quality","lastModifiedDate":"2024-03-05"}],"authorContributionMap":{"caitlyntang":4,"Jerome-j":5,"tankh99":5,"vnnamng":3,"-":31}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"DevOps guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# DevOps guide","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c!-- -------------------------------------------------------------------------------------------------------------------- --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Build automation","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks.","lastModifiedDate":"2020-05-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`","lastModifiedDate":"2020-05-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`.","lastModifiedDate":"2020-05-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it.","lastModifiedDate":"2020-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base.","lastModifiedDate":"2020-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.","lastModifiedDate":"2023-01-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests","lastModifiedDate":"2020-05-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests","lastModifiedDate":"2020-05-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"## Continuous integration (CI)","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Code coverage","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. When CI runs, it will generate code coverage data (based on the tests run by CI) and upload that data to the CodeCov website, which in turn can provide you more info about the coverage of your tests.","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"However, because Codecov is known to run into intermittent problems (e.g., report upload fails) due to issues on the Codecov service side, the CI is configured to pass even if the Codecov task failed. Therefore, developers are advised to check the code coverage levels periodically and take corrective actions if the coverage level falls below desired levels.","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"To enable Codecov for forks of this project, follow the steps given in [this se-edu guide](https://se-education.org/guides/tutorials/codecov.html).","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"### Repository-wide checks","lastModifiedDate":"2020-07-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements.","lastModifiedDate":"2020-07-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:","lastModifiedDate":"2020-07-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`","lastModifiedDate":"2020-07-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console.","lastModifiedDate":"2020-07-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"**If adding new checks:**","lastModifiedDate":"2020-07-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest.","lastModifiedDate":"2020-07-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`","lastModifiedDate":"2020-07-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN.","lastModifiedDate":"2020-07-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory.","lastModifiedDate":"2020-07-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error.","lastModifiedDate":"2020-07-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur.","lastModifiedDate":"2020-07-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"## Making a release","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"Here are the steps to create a new release.","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/java/seedu/address/MainApp.java).","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadowJar`).","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created.","lastModifiedDate":"2020-05-26"}],"authorContributionMap":{"tankh99":1,"-":81}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"# CogniCare Developer Guide","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"## About CogniCare","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"As the job climate is worsening, more and more students become afflicted with mental health conditions due to not being able to find a job. This results in an increased workload from a larger number of patients to manage and appointments to schedule. CogniCare is a patient management system, designed to take care of SoC students who suffer from various mental health issues and concerns due to being unable to find internships or jobs.","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"CogniCare takes care of the load of many tedious tasks such as identifying today\u0027s appointments and measuring a patient\u0027s satisfication progress levels over a period of time, until they are finally ready for discharge.","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2024-04-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2024-04-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2024-04-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"* depends on some classes in the `Model` component, as it displays `Patient` object residing in the `Model`.","lastModifiedDate":"2024-04-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"**API** : [`Logic.java`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2024-04-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline continues till the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"tankh99"},"content":"1. When `Logic` is called upon to execute a command, the command is passed to a `CommandParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2024-04-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"tankh99"},"content":"2. The command can communicate with the `Model` when it is executed (e.g. to delete a patient).\u003cbr\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"tankh99"},"content":"3. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2024-04-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"tankh99"},"content":"* When called upon to parse a user command, the `CommandParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `CommandParser` returns back as a `Command` object.","lastModifiedDate":"2024-04-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"tankh99"},"content":"**API** : [`Model.java`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2024-04-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"tankh99"},"content":"**API** : [`Storage.java`](https://github.com/AY2324S2-CS2103-F08-2/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2024-04-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":137,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"vnnamng"},"content":"### Appointment","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"vnnamng"},"content":"#### Implementation","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"vnnamng"},"content":"##### Appointment Classes","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"vnnamng"},"content":"Appointment is a new feature that was added to the app. It is a new entity that is related to a `Patient`. An `Appointment` object has the following attributes:","lastModifiedDate":"2024-03-26"},{"lineNumber":155,"author":{"gitId":"vnnamng"},"content":"- Appointment ID","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"vnnamng"},"content":"- Appointment Date Time","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"vnnamng"},"content":"- Patient ID","lastModifiedDate":"2024-03-26"},{"lineNumber":158,"author":{"gitId":"vnnamng"},"content":"- Attended Status","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"vnnamng"},"content":"- Appointment Description","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"vnnamng"},"content":"Appointment ID is a unique identifier for each appointment. It is generated by the system when a new appointment is created.","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"vnnamng"},"content":"The Appointment Date Time is the date and time of the appointment.","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"vnnamng"},"content":"The Patient ID is the unique identifier of the patient that the appointment is related to.","lastModifiedDate":"2024-03-26"},{"lineNumber":166,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"vnnamng"},"content":"The Attended Status is a boolean value that indicates whether the patient has attended the appointment.","lastModifiedDate":"2024-03-26"},{"lineNumber":168,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"vnnamng"},"content":"The Appointment Description is a String that describes the appointment.","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"vnnamng"},"content":"##### Appointment Storage","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"vnnamng"},"content":"Appointment are stored in the `Model` component as `AppointmentList` which contains `UniqueAppointmentList` object that is parallel similar to `PatientList` storing `UniquePatientList`. ","lastModifiedDate":"2024-03-26"},{"lineNumber":173,"author":{"gitId":"vnnamng"},"content":"The `Model` component provides methods to add, delete, and retrieve appointments from `AppointmentList`","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"vnnamng"},"content":"![Appointment Storage](images/StorageClassDiagram.png)","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"vnnamng"},"content":"Appointment List are saved under a separate file `appointments.json` in the data folder, apart from the `patients.json` file that stores the `patientList` data.","lastModifiedDate":"2024-03-26"},{"lineNumber":178,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"vnnamng"},"content":"#### Design Considerations","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"Jerome-j"},"content":"**Aspect: Patient ID**","lastModifiedDate":"2024-03-26"},{"lineNumber":182,"author":{"gitId":"Jerome-j"},"content":"- In any system that manages individual records, it is critical to ensure that we are able to distinguish between entities (which are patients) in our case.","lastModifiedDate":"2024-03-26"},{"lineNumber":183,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":184,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":185,"author":{"gitId":"Jerome-j"},"content":"- **Alternative 1: Using Integer ID as the primary key (Current Approach)**","lastModifiedDate":"2024-03-26"},{"lineNumber":186,"author":{"gitId":"Jerome-j"},"content":"  - We needed some method to ensure that the patient was unique. The primary solution implemented involves a running integer identifier - and is saved together with each patient. The identifier serves as the primary key for the patient object, similar to how a unique ID in a database ensure each record\u0027s uniqueness.","lastModifiedDate":"2024-03-26"},{"lineNumber":187,"author":{"gitId":"Jerome-j"},"content":"  - This was different to how the AB3 application was originally designed - where the ID followed the natural ordering of the elements in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":188,"author":{"gitId":"Jerome-j"},"content":"  - Pros","lastModifiedDate":"2024-03-26"},{"lineNumber":189,"author":{"gitId":"Jerome-j"},"content":"    - Extremely user-friendly for counsellor as ID is never changed. ","lastModifiedDate":"2024-03-26"},{"lineNumber":190,"author":{"gitId":"Jerome-j"},"content":"      - Potentially patient can even be issued a member card starting that patient ID.","lastModifiedDate":"2024-03-26"},{"lineNumber":191,"author":{"gitId":"Jerome-j"},"content":"  - Cons","lastModifiedDate":"2024-03-26"},{"lineNumber":192,"author":{"gitId":"Jerome-j"},"content":"    - Difficult to implement.","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"Jerome-j"},"content":"    - There will be \"holes\" in the sequential ID when records are deleted.","lastModifiedDate":"2024-03-26"},{"lineNumber":194,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":195,"author":{"gitId":"Jerome-j"},"content":"- **Alternative 2: Using Name as the primary key**","lastModifiedDate":"2024-03-26"},{"lineNumber":196,"author":{"gitId":"Jerome-j"},"content":"  - This approach was quickly deemed unsuitable due to the high probability of name duplication. While names are an important identifier, there is a great risk of collision (i.e. Jack Tan vs Jack Tan Ah Kou). While this method is sufficient for a non-mission critical address book, our CogniCare application must try to reduce the likeliness of errors occurring.","lastModifiedDate":"2024-03-26"},{"lineNumber":197,"author":{"gitId":"Jerome-j"},"content":"  - Pros","lastModifiedDate":"2024-03-26"},{"lineNumber":198,"author":{"gitId":"Jerome-j"},"content":"    - Extremely user friendly","lastModifiedDate":"2024-03-26"},{"lineNumber":199,"author":{"gitId":"Jerome-j"},"content":"  - Cons","lastModifiedDate":"2024-03-26"},{"lineNumber":200,"author":{"gitId":"Jerome-j"},"content":"    - Commands will be extremely long; and difficult to type.","lastModifiedDate":"2024-03-26"},{"lineNumber":201,"author":{"gitId":"Jerome-j"},"content":"    - Counsellor will need to remember exactly how the full name is spelt.","lastModifiedDate":"2024-03-26"},{"lineNumber":202,"author":{"gitId":"Jerome-j"},"content":"    - May select the wrong patient (i.e. Jack Tan vs Jack Tan Ah Kou).","lastModifiedDate":"2024-03-26"},{"lineNumber":203,"author":{"gitId":"Jerome-j"},"content":"    ","lastModifiedDate":"2024-03-26"},{"lineNumber":204,"author":{"gitId":"Jerome-j"},"content":"- **Alternative 3: Using Natural Ordering of the names in CogniCare application (AB3 approach)**","lastModifiedDate":"2024-03-26"},{"lineNumber":205,"author":{"gitId":"Jerome-j"},"content":"  - As we initially strived for a design where the patientId was used like a Foreign Key in the Appointments object, the ID changing would mean that the data integrity for Appointments class would be compromised","lastModifiedDate":"2024-03-26"},{"lineNumber":206,"author":{"gitId":"Jerome-j"},"content":"  - Pros","lastModifiedDate":"2024-03-26"},{"lineNumber":207,"author":{"gitId":"Jerome-j"},"content":"    - Easy to implement","lastModifiedDate":"2024-03-26"},{"lineNumber":208,"author":{"gitId":"Jerome-j"},"content":"  - Cons","lastModifiedDate":"2024-03-26"},{"lineNumber":209,"author":{"gitId":"Jerome-j"},"content":"    - Data Integrity of Appointments will be compromised","lastModifiedDate":"2024-03-26"},{"lineNumber":210,"author":{"gitId":"Jerome-j"},"content":"    - Every time a patient is deleted, the subsequent IDs will be coalesced.","lastModifiedDate":"2024-03-26"},{"lineNumber":211,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":212,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":213,"author":{"gitId":"Jerome-j"},"content":"**Aspect: Search query with AND constraint**","lastModifiedDate":"2024-03-26"},{"lineNumber":214,"author":{"gitId":"Jerome-j"},"content":"### Finding Contact by different parameters.","lastModifiedDate":"2024-04-01"},{"lineNumber":215,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":216,"author":{"gitId":"Jerome-j"},"content":"\u003cpuml src\u003d\"diagrams/FindPatientSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2024-04-01"},{"lineNumber":217,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":218,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":219,"author":{"gitId":"Jerome-j"},"content":"In enhancing the search functionality within CogniCare, the implementation of an AND constraint for search queries was paramount. This feature allows counsellors to refine search criteria, leading to more precise and relevant search results. For example, counsellors can search for a patient using a combination of (partial name AND partial phone number AND partial email address). Only parameter is required, the others are optional.","lastModifiedDate":"2024-03-26"},{"lineNumber":220,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":221,"author":{"gitId":"Jerome-j"},"content":"This enhancement was driven for the need of:","lastModifiedDate":"2024-03-26"},{"lineNumber":222,"author":{"gitId":"Jerome-j"},"content":"1. Improved Search Accuracy: By allowing multiple criteria to be specified, counsellors can narrow down search results to the most relevant patients (as the SoC cohort is quite large).","lastModifiedDate":"2024-03-26"},{"lineNumber":223,"author":{"gitId":"Jerome-j"},"content":"2. Efficiency: Enables quicker access to patient records by reducing the time spent sifting through irrelevant patient information.","lastModifiedDate":"2024-03-26"},{"lineNumber":224,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":225,"author":{"gitId":"Jerome-j"},"content":"**Single Criterion Search (AB3 Approach)**: The original AB3 approach of allowing search based on a single criterion was found to be too limiting for the different needs of patient management in CogniCare.","lastModifiedDate":"2024-03-26"},{"lineNumber":226,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":227,"author":{"gitId":"Jerome-j"},"content":"**Search Query with OR Constraint:** While also considered, this approach was determined to potentially yield too broad of a search result, undermining the efficiency desired in retrieving patient record.","lastModifiedDate":"2024-03-26"},{"lineNumber":228,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":229,"author":{"gitId":"vnnamng"},"content":"**Aspect: Appointment ID**","lastModifiedDate":"2024-03-25"},{"lineNumber":230,"author":{"gitId":"vnnamng"},"content":"- **Alternative 1 (current choice):** Generate auto-increasing fixed appointment ID when creating a new appointment. Fail commands that attempt to set the appointment ID still increase the appointment ID.","lastModifiedDate":"2024-03-25"},{"lineNumber":231,"author":{"gitId":"vnnamng"},"content":"  - Pros: ","lastModifiedDate":"2024-03-25"},{"lineNumber":232,"author":{"gitId":"vnnamng"},"content":"    - Easier to implement.","lastModifiedDate":"2024-03-25"},{"lineNumber":233,"author":{"gitId":"vnnamng"},"content":"    - This is the implementation that take inspires from DBMS auto-increment.","lastModifiedDate":"2024-03-25"},{"lineNumber":234,"author":{"gitId":"vnnamng"},"content":"    - Consistency in appointment ID.","lastModifiedDate":"2024-03-25"},{"lineNumber":235,"author":{"gitId":"vnnamng"},"content":"    - Easier to store as a separate file for appointments storage.","lastModifiedDate":"2024-03-25"},{"lineNumber":236,"author":{"gitId":"vnnamng"},"content":"  - Cons: Confusion for users who expect appointment ID to increase one by one.","lastModifiedDate":"2024-03-25"},{"lineNumber":237,"author":{"gitId":"vnnamng"},"content":"  - Mitigation: Ensure that the appointment ID is unique.","lastModifiedDate":"2024-03-25"},{"lineNumber":238,"author":{"gitId":"vnnamng"},"content":"  ","lastModifiedDate":"2024-03-25"},{"lineNumber":239,"author":{"gitId":"vnnamng"},"content":"- **Alternative 2 (AB3 choice):** No fixed appointment ID. AppointmentID is relative to the Appointment view.","lastModifiedDate":"2024-03-25"},{"lineNumber":240,"author":{"gitId":"vnnamng"},"content":"  - Pros: More flexible for users.","lastModifiedDate":"2024-03-25"},{"lineNumber":241,"author":{"gitId":"vnnamng"},"content":"  - Cons: More complex to implement. May lead to inconsistencies between appointments.","lastModifiedDate":"2024-03-25"},{"lineNumber":242,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":243,"author":{"gitId":"vnnamng"},"content":"**Aspect: Where to store appointments locally**","lastModifiedDate":"2024-03-25"},{"lineNumber":244,"author":{"gitId":"vnnamng"},"content":"- **Alternative 1 (current choice):** Store appointments in a separate file.","lastModifiedDate":"2024-03-25"},{"lineNumber":245,"author":{"gitId":"vnnamng"},"content":"  - Pros: Easier to manage appointments separately from patients.","lastModifiedDate":"2024-03-26"},{"lineNumber":246,"author":{"gitId":"vnnamng"},"content":"  - Cons: ","lastModifiedDate":"2024-03-25"},{"lineNumber":247,"author":{"gitId":"vnnamng"},"content":"    - More complex to manage two separate files.","lastModifiedDate":"2024-03-25"},{"lineNumber":248,"author":{"gitId":"vnnamng"},"content":"    - Time complexity to carry out command with appointments as it has to read the whole list of appointments.","lastModifiedDate":"2024-03-25"},{"lineNumber":249,"author":{"gitId":"vnnamng"},"content":"  - Risks: May lead to inconsistencies between the two files in regard to ids.","lastModifiedDate":"2024-03-25"},{"lineNumber":250,"author":{"gitId":"vnnamng"},"content":"  - Mitigation: Ensure that both files are updated together.","lastModifiedDate":"2024-03-25"},{"lineNumber":251,"author":{"gitId":"vnnamng"},"content":"  ","lastModifiedDate":"2024-03-25"},{"lineNumber":252,"author":{"gitId":"vnnamng"},"content":"- **Alternative 2:** Store appointments as a field in the `Patient` class. Hence, all appointments data will be stored in the same file as the `patientList`.","lastModifiedDate":"2024-03-26"},{"lineNumber":253,"author":{"gitId":"vnnamng"},"content":"  - Pros: Easier to manage a single file.","lastModifiedDate":"2024-03-25"},{"lineNumber":254,"author":{"gitId":"vnnamng"},"content":"  - Cons: ","lastModifiedDate":"2024-03-25"},{"lineNumber":255,"author":{"gitId":"vnnamng"},"content":"    - May lead to a more complex data structure.","lastModifiedDate":"2024-03-25"},{"lineNumber":256,"author":{"gitId":"vnnamng"},"content":"    - Delete a patient will cascade delete all appointments.","lastModifiedDate":"2024-03-25"},{"lineNumber":257,"author":{"gitId":"vnnamng"},"content":"  - Risks: May lead to performance issues when reading/writing data.","lastModifiedDate":"2024-03-25"},{"lineNumber":258,"author":{"gitId":"vnnamng"},"content":"  - Mitigation: Optimize the data structure for reading/writing data.","lastModifiedDate":"2024-03-25"},{"lineNumber":259,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":260,"author":{"gitId":"vnnamng"},"content":"**Aspect: How to store appointments**","lastModifiedDate":"2024-03-25"},{"lineNumber":261,"author":{"gitId":"vnnamng"},"content":"- **Alternative 1 (current choice):** Store appointments as a `AppointmentList` in `Model`.","lastModifiedDate":"2024-03-25"},{"lineNumber":262,"author":{"gitId":"vnnamng"},"content":"  - Pros: ","lastModifiedDate":"2024-03-25"},{"lineNumber":263,"author":{"gitId":"vnnamng"},"content":"    - Easier to design since it is similar to `patientList` implementation.","lastModifiedDate":"2024-03-26"},{"lineNumber":264,"author":{"gitId":"vnnamng"},"content":"    - If we want to add more Object for Model, this will be the default implementation","lastModifiedDate":"2024-03-25"},{"lineNumber":265,"author":{"gitId":"vnnamng"},"content":"  - Cons:","lastModifiedDate":"2024-03-25"},{"lineNumber":266,"author":{"gitId":"vnnamng"},"content":"    - Adding extra layer of OOP abstraction.","lastModifiedDate":"2024-03-25"},{"lineNumber":267,"author":{"gitId":"vnnamng"},"content":"    - May lead to performance issues when reading/writing data (more prone to crashing issues).","lastModifiedDate":"2024-03-25"},{"lineNumber":268,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":269,"author":{"gitId":"vnnamng"},"content":"- **Alternative 2:** Store appointments as a list of `Appointment` objects in `patientList`.","lastModifiedDate":"2024-03-26"},{"lineNumber":270,"author":{"gitId":"vnnamng"},"content":"  - Pros: Easier to manage appointments as a list.","lastModifiedDate":"2024-03-25"},{"lineNumber":271,"author":{"gitId":"vnnamng"},"content":"  - Cons: ","lastModifiedDate":"2024-03-25"},{"lineNumber":272,"author":{"gitId":"vnnamng"},"content":"    - Reduce in OOP-ness of the code","lastModifiedDate":"2024-03-25"},{"lineNumber":273,"author":{"gitId":"vnnamng"},"content":"    - Hard to scale up, as need to change the whole code base.","lastModifiedDate":"2024-03-25"},{"lineNumber":274,"author":{"gitId":"vnnamng"},"content":"    ","lastModifiedDate":"2024-03-25"},{"lineNumber":275,"author":{"gitId":"Jerome-j"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":276,"author":{"gitId":"tankh99"},"content":"### Command History","lastModifiedDate":"2024-03-24"},{"lineNumber":277,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":278,"author":{"gitId":"tankh99"},"content":"Command history is a feature that aims to improve the user experience for experienced users by allowing them to quickly","lastModifiedDate":"2024-03-24"},{"lineNumber":279,"author":{"gitId":"tankh99"},"content":"navigate through their history of commands to make minor changes. Many features were inspired from macOS\u0027s Bash shell","lastModifiedDate":"2024-03-25"},{"lineNumber":280,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":281,"author":{"gitId":"tankh99"},"content":"**Implementation**","lastModifiedDate":"2024-03-24"},{"lineNumber":282,"author":{"gitId":"tankh99"},"content":"An array list was used to store the history of commands and an index to indicate which command is the history currently ","lastModifiedDate":"2024-03-24"},{"lineNumber":283,"author":{"gitId":"tankh99"},"content":"at. ","lastModifiedDate":"2024-03-24"},{"lineNumber":284,"author":{"gitId":"tankh99"},"content":"- The list is initialised to have an empty string as the initial element","lastModifiedDate":"2024-03-24"},{"lineNumber":285,"author":{"gitId":"tankh99"},"content":"- The current command index defaults to 0","lastModifiedDate":"2024-03-24"},{"lineNumber":286,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":287,"author":{"gitId":"tankh99"},"content":"There are a few methods used to interact with the command history","lastModifiedDate":"2024-03-24"},{"lineNumber":288,"author":{"gitId":"tankh99"},"content":"1. getCurrentCommand()","lastModifiedDate":"2024-03-24"},{"lineNumber":289,"author":{"gitId":"tankh99"},"content":"   1. Gets the command at the current command index","lastModifiedDate":"2024-03-24"},{"lineNumber":290,"author":{"gitId":"tankh99"},"content":"2. undo()","lastModifiedDate":"2024-03-24"},{"lineNumber":291,"author":{"gitId":"tankh99"},"content":"   1. Decrements the current command index by 1","lastModifiedDate":"2024-03-24"},{"lineNumber":292,"author":{"gitId":"tankh99"},"content":"   2. If the current command index is already 0, it will play a Boop sound to indicate that there is ","lastModifiedDate":"2024-03-24"},{"lineNumber":293,"author":{"gitId":"tankh99"},"content":"are no more commands left to undo","lastModifiedDate":"2024-03-24"},{"lineNumber":294,"author":{"gitId":"tankh99"},"content":"3. redo()","lastModifiedDate":"2024-03-24"},{"lineNumber":295,"author":{"gitId":"tankh99"},"content":"   1. Increments the current command index by 1","lastModifiedDate":"2024-03-24"},{"lineNumber":296,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":297,"author":{"gitId":"tankh99"},"content":"Below shows expected behaviour of the command history from a series of actions. ","lastModifiedDate":"2024-03-24"},{"lineNumber":298,"author":{"gitId":"tankh99"},"content":"- blue underline - denotes where the command index","lastModifiedDate":"2024-03-24"},{"lineNumber":299,"author":{"gitId":"tankh99"},"content":"is pointing at.","lastModifiedDate":"2024-03-24"},{"lineNumber":300,"author":{"gitId":"tankh99"},"content":"- initial - the initial state of the command history","lastModifiedDate":"2024-03-24"},{"lineNumber":301,"author":{"gitId":"tankh99"},"content":"- exec - when any command is executed","lastModifiedDate":"2024-03-24"},{"lineNumber":302,"author":{"gitId":"tankh99"},"content":"- undo - decrements the index","lastModifiedDate":"2024-03-24"},{"lineNumber":303,"author":{"gitId":"tankh99"},"content":"- redo - increments the index","lastModifiedDate":"2024-03-24"},{"lineNumber":304,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":305,"author":{"gitId":"tankh99"},"content":"\u003cimg ","lastModifiedDate":"2024-04-10"},{"lineNumber":306,"author":{"gitId":"tankh99"},"content":"  src\u003d\"images/command-history/command-history-illustration.jpeg\" ","lastModifiedDate":"2024-04-10"},{"lineNumber":307,"author":{"gitId":"tankh99"},"content":"  alt\u003d\"Command history illustration/\"","lastModifiedDate":"2024-04-10"},{"lineNumber":308,"author":{"gitId":"tankh99"},"content":"  width\u003d480\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":309,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":310,"author":{"gitId":"tankh99"},"content":"**Rationale for implementation**","lastModifiedDate":"2024-03-24"},{"lineNumber":311,"author":{"gitId":"tankh99"},"content":"There are a few key features that this module aims to implement","lastModifiedDate":"2024-03-24"},{"lineNumber":312,"author":{"gitId":"tankh99"},"content":"1. Improved user experience for experienced users","lastModifiedDate":"2024-03-24"},{"lineNumber":313,"author":{"gitId":"tankh99"},"content":"   1. Allow users to modify their past commands in a predictable way","lastModifiedDate":"2024-03-26"},{"lineNumber":314,"author":{"gitId":"tankh99"},"content":"   2. Allow users to easily compare past commands in case of mistakes by pressing up and down","lastModifiedDate":"2024-03-24"},{"lineNumber":315,"author":{"gitId":"tankh99"},"content":"2. Mimicking bash shell features","lastModifiedDate":"2024-03-24"},{"lineNumber":316,"author":{"gitId":"tankh99"},"content":"   1. Playing a sound to indicate that there are no more commands left to undo","lastModifiedDate":"2024-03-24"},{"lineNumber":317,"author":{"gitId":"tankh99"},"content":"   2. Empty the input box when there are no more commands left to redo","lastModifiedDate":"2024-03-24"},{"lineNumber":318,"author":{"gitId":"tankh99"},"content":"3. Default empty string in list","lastModifiedDate":"2024-03-24"},{"lineNumber":319,"author":{"gitId":"tankh99"},"content":"   1. This aims to model what the command history actually looks like. By doing this, this makes the logic much more straightforward as we don\u0027t need to constantly check to return empty string or not","lastModifiedDate":"2024-03-26"},{"lineNumber":320,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":321,"author":{"gitId":"tankh99"},"content":"**Alternatives considered**","lastModifiedDate":"2024-03-24"},{"lineNumber":322,"author":{"gitId":"tankh99"},"content":"1. 2 stacks, one undo and one redo were used at first. However, this had the drawback of not being able to remember commands after undoing and writing a new command.","lastModifiedDate":"2024-03-26"},{"lineNumber":323,"author":{"gitId":"tankh99"},"content":"2. undo() and redo() both returned the previous and next command respectively - This had a flaw in which the logic of handling the command index became unnecessarily complex as we had to worry about when we incremented/decremented an index. This also made it harder to test the functionality","lastModifiedDate":"2024-03-26"},{"lineNumber":324,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":325,"author":{"gitId":"caitlyntang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":326,"author":{"gitId":"caitlyntang"},"content":"### Add Appointment Feature","lastModifiedDate":"2024-03-26"},{"lineNumber":327,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":328,"author":{"gitId":"caitlyntang"},"content":"The add appointment feature allows users to create a new appointment and insert them into the application.","lastModifiedDate":"2024-03-26"},{"lineNumber":329,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":330,"author":{"gitId":"caitlyntang"},"content":"**Implementation**","lastModifiedDate":"2024-03-26"},{"lineNumber":331,"author":{"gitId":"caitlyntang"},"content":"An observable list was used to store the list of appointments.","lastModifiedDate":"2024-03-26"},{"lineNumber":332,"author":{"gitId":"caitlyntang"},"content":"- The list is initialised as an empty list of type appointments in the beginning.","lastModifiedDate":"2024-03-26"},{"lineNumber":333,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":334,"author":{"gitId":"caitlyntang"},"content":"There are a few methods used to interact with the add appointment command.","lastModifiedDate":"2024-03-26"},{"lineNumber":335,"author":{"gitId":"caitlyntang"},"content":"1. AddAppointmentCommand","lastModifiedDate":"2024-03-26"},{"lineNumber":336,"author":{"gitId":"caitlyntang"},"content":"   1. Defines add appointment command key word and other error messages.","lastModifiedDate":"2024-03-26"},{"lineNumber":337,"author":{"gitId":"caitlyntang"},"content":"   2. Validates the results of the AddAppointmentCommandParser#parse()","lastModifiedDate":"2024-03-26"},{"lineNumber":338,"author":{"gitId":"caitlyntang"},"content":"2. AddAppointmentCommandParser#parse()","lastModifiedDate":"2024-03-26"},{"lineNumber":339,"author":{"gitId":"caitlyntang"},"content":"   1. Parses the add appointment commands, ensuring that all required parameters are present.","lastModifiedDate":"2024-03-26"},{"lineNumber":340,"author":{"gitId":"caitlyntang"},"content":"   2. Returns AddAppointmentCommand","lastModifiedDate":"2024-03-26"},{"lineNumber":341,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":342,"author":{"gitId":"caitlyntang"},"content":"**Rationale for implementation**","lastModifiedDate":"2024-03-26"},{"lineNumber":343,"author":{"gitId":"caitlyntang"},"content":"There are a few key features that this module aims to implement","lastModifiedDate":"2024-03-26"},{"lineNumber":344,"author":{"gitId":"caitlyntang"},"content":"1. Allow users to add new appointments to keep track of all past and upcoming appointments.","lastModifiedDate":"2024-03-26"},{"lineNumber":345,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":346,"author":{"gitId":"caitlyntang"},"content":"**Alternatives considered**","lastModifiedDate":"2024-03-26"},{"lineNumber":347,"author":{"gitId":"caitlyntang"},"content":"1. Using an array list instead of an observable list. However, the GUI was not able to accurately reflect the new appointment list when new appointments were added.","lastModifiedDate":"2024-03-26"},{"lineNumber":348,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":349,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":350,"author":{"gitId":"vnnamng"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-04-01"},{"lineNumber":351,"author":{"gitId":"vnnamng"},"content":"### Filter Appointment Feature","lastModifiedDate":"2024-04-01"},{"lineNumber":352,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":353,"author":{"gitId":"vnnamng"},"content":"The filter appointment feature allows users to filter appointments based on the date and time of the appointment.","lastModifiedDate":"2024-04-01"},{"lineNumber":354,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":355,"author":{"gitId":"vnnamng"},"content":"**Implementation**","lastModifiedDate":"2024-04-01"},{"lineNumber":356,"author":{"gitId":"vnnamng"},"content":"A predicate was used to filter the list of appointments based on the date and time of the appointment.","lastModifiedDate":"2024-04-01"},{"lineNumber":357,"author":{"gitId":"vnnamng"},"content":"Criteria for filtering appointments:","lastModifiedDate":"2024-04-01"},{"lineNumber":358,"author":{"gitId":"vnnamng"},"content":"- `StartDateTime` the appointment is before or at (\u003c\u003d) the specific `startDateTime` of the predicate","lastModifiedDate":"2024-04-01"},{"lineNumber":359,"author":{"gitId":"vnnamng"},"content":"- `EndDateTime` the appointment is after or at (\u003e\u003d) the specific `endDateTime` of the predicate","lastModifiedDate":"2024-04-01"},{"lineNumber":360,"author":{"gitId":"vnnamng"},"content":"  There are a few methods used to interact with the filter appointment command.","lastModifiedDate":"2024-04-01"},{"lineNumber":361,"author":{"gitId":"vnnamng"},"content":"1. `FilterAppointmentCommand`","lastModifiedDate":"2024-04-01"},{"lineNumber":362,"author":{"gitId":"vnnamng"},"content":"   1. Defines filter appointment command key word and other error messages.","lastModifiedDate":"2024-04-01"},{"lineNumber":363,"author":{"gitId":"vnnamng"},"content":"   2. Validates the results of the `FilterAppointmentCommandParser#parse()`","lastModifiedDate":"2024-04-01"},{"lineNumber":364,"author":{"gitId":"vnnamng"},"content":"2. `FilterAppointmentCommandParser#parse()`","lastModifiedDate":"2024-04-01"},{"lineNumber":365,"author":{"gitId":"vnnamng"},"content":"   1. Parses the filter appointment commands, ensuring that all required parameters are present.","lastModifiedDate":"2024-04-01"},{"lineNumber":366,"author":{"gitId":"vnnamng"},"content":"   2. Check if the start date and time is before the end date and time.","lastModifiedDate":"2024-04-01"},{"lineNumber":367,"author":{"gitId":"vnnamng"},"content":"   3. Returns FilterAppointmentCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":368,"author":{"gitId":"vnnamng"},"content":"3. `ParserUtil#parseDateTime()`","lastModifiedDate":"2024-04-01"},{"lineNumber":369,"author":{"gitId":"vnnamng"},"content":"   1. Parses the date and time of the appointment, ensuring correct format","lastModifiedDate":"2024-04-01"},{"lineNumber":370,"author":{"gitId":"vnnamng"},"content":"4. `ParserUtil#parseEndDateTime()` and `ParserUtil#parseStartDateTime()`","lastModifiedDate":"2024-04-01"},{"lineNumber":371,"author":{"gitId":"vnnamng"},"content":"   1. Parses the start and end date and time of the appointment, ensuring correct format from calling `ParserUtil#parseDateTime()`","lastModifiedDate":"2024-04-01"},{"lineNumber":372,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":373,"author":{"gitId":"vnnamng"},"content":"**Rationale for implementation**","lastModifiedDate":"2024-04-01"},{"lineNumber":374,"author":{"gitId":"vnnamng"},"content":"There are a few key features that this module aims to implement","lastModifiedDate":"2024-04-01"},{"lineNumber":375,"author":{"gitId":"vnnamng"},"content":"1. Allow users to filter appointments based on the date and time of the appointment.","lastModifiedDate":"2024-04-01"},{"lineNumber":376,"author":{"gitId":"vnnamng"},"content":"2. Ensure that the start date and time is before the end date and time.","lastModifiedDate":"2024-04-01"},{"lineNumber":377,"author":{"gitId":"vnnamng"},"content":"3. Ensure that the date and time of the appointment is in the correct format.","lastModifiedDate":"2024-04-01"},{"lineNumber":378,"author":{"gitId":"vnnamng"},"content":"4. Ensure that the date and time of the appointment is correctly parsed.","lastModifiedDate":"2024-04-01"},{"lineNumber":379,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":380,"author":{"gitId":"vnnamng"},"content":"**Alternatives considered**","lastModifiedDate":"2024-04-01"},{"lineNumber":381,"author":{"gitId":"vnnamng"},"content":"1. Smarter filtering based on the date and time of the appointment. However, this was not implemented as it was not necessary for the current scope of the project.","lastModifiedDate":"2024-04-01"},{"lineNumber":382,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":383,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"Jerome-j"},"content":"Step 2. The user executes `delete 5` command to delete the 5th patient in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2024-03-26"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"Jerome-j"},"content":"Step 3. The user executes `add n/David …​` to add a new patient. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2024-03-26"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":413,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"Jerome-j"},"content":"Step 4. The user now decides that adding the patient was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2024-03-26"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":418,"author":{"gitId":"tankh99"},"content":"a","lastModifiedDate":"2024-03-24"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":420,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":423,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"The following sequence diagram shows how an undo operation goes through the `Logic` component:","lastModifiedDate":"2024-02-09"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Logic.puml\" alt\u003d\"UndoSequenceDiagram-Logic\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":435,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"Similarly, how an undo operation goes through the `Model` component is shown below:","lastModifiedDate":"2024-02-09"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":439,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Model.puml\" alt\u003d\"UndoSequenceDiagram-Model\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":441,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":444,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":445,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"Jerome-j"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the patient being deleted).","lastModifiedDate":"2024-03-26"},{"lineNumber":472,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"Jerome-j"},"content":"## Create a new Patient","lastModifiedDate":"2024-04-01"},{"lineNumber":482,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":483,"author":{"gitId":"Jerome-j"},"content":"`AddPatientCommandParser` obtains the values that correspond to the prefixes such as `/p`, `/n`, `/e`, and `/a` which represent phone, name, email address, and alias accordingly.","lastModifiedDate":"2024-04-01"},{"lineNumber":484,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":485,"author":{"gitId":"Jerome-j"},"content":"This class ensures that","lastModifiedDate":"2024-04-01"},{"lineNumber":486,"author":{"gitId":"Jerome-j"},"content":"* The data stored must contain the name, phone, and email address corresponding to their respective format.","lastModifiedDate":"2024-04-01"},{"lineNumber":487,"author":{"gitId":"Jerome-j"},"content":"* Values that are corresponding to each tag are valid.","lastModifiedDate":"2024-04-01"},{"lineNumber":488,"author":{"gitId":"Jerome-j"},"content":"* There can be multiple aliases (`a/`), but `p/`, `n/`, `e/` may only appear once.","lastModifiedDate":"2024-04-01"},{"lineNumber":489,"author":{"gitId":"Jerome-j"},"content":"* A unique Id is created for each patient. This ID is strictly increasing and remains tagged to the patient (and does not change its order even if other records prior get deleted).","lastModifiedDate":"2024-04-01"},{"lineNumber":490,"author":{"gitId":"Jerome-j"},"content":"* Names are also used as a primary key (meaning no 2 users of the same name may be added to the CogniCare application) regardless of case sensitivity and whitespace, i.e. \"JEROME CHUA\" and \"jErOmE    CHuA\" are treated the same.","lastModifiedDate":"2024-04-01"},{"lineNumber":491,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":492,"author":{"gitId":"Jerome-j"},"content":"If the constraints are violated, `AddPatientCommandParser` will throw a `ParseException` and log the invalid parameter passed into the function.","lastModifiedDate":"2024-04-01"},{"lineNumber":493,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":494,"author":{"gitId":"Jerome-j"},"content":"Otherwise, if the process is successful, a new `Patient` object will be created to add the patient to the CongiCare application.","lastModifiedDate":"2024-04-01"},{"lineNumber":495,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":496,"author":{"gitId":"Jerome-j"},"content":"We have considered these alternatives:","lastModifiedDate":"2024-04-01"},{"lineNumber":497,"author":{"gitId":"Jerome-j"},"content":"* Using the natural order of the list as the index of the Person. This is sub-optimal as holes in the records may lead to unexpected behaviour when handling the appointments. For example, consider a list with 3 patients. If the second patient is deleted, then the 3rd patient becomes the 2nd patient. This will be confusing for the user. Therefore, we sought to seek a solution to ensure that the studentId always remains unique.","lastModifiedDate":"2024-04-01"},{"lineNumber":498,"author":{"gitId":"Jerome-j"},"content":"* Completely re-writing AB3\u0027s addressbook. This is not practical as our functionalities and use-case is similar to the use case of the AB3 application.","lastModifiedDate":"2024-04-01"},{"lineNumber":499,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":500,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":501,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":502,"author":{"gitId":"Jerome-j"},"content":"## Editing a current Patient","lastModifiedDate":"2024-04-01"},{"lineNumber":503,"author":{"gitId":"Jerome-j"},"content":"`EditPatientCommandParser` obtains the patient index and the values that correspond to the prefixes such as `/p`, `/n`, `/e`, and `/a` which represent phone, name, email address, and alias accordingly.","lastModifiedDate":"2024-04-01"},{"lineNumber":504,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":505,"author":{"gitId":"Jerome-j"},"content":"* There can be multiple aliases (`\\a`), but `/p`, `/n`, `/e` may only appear once.","lastModifiedDate":"2024-04-01"},{"lineNumber":506,"author":{"gitId":"Jerome-j"},"content":"* The patient index is based on the unique ID that is tagged to each patient, and is not the natural ordering of the list.","lastModifiedDate":"2024-04-01"},{"lineNumber":507,"author":{"gitId":"Jerome-j"},"content":"* The edited fields are required to have the same validation as creating a new patient.","lastModifiedDate":"2024-04-01"},{"lineNumber":508,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":509,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":510,"author":{"gitId":"Jerome-j"},"content":"If the constraints are violated, `EditPatientCommandParser` will throw a `ParseException` due to invalid patient ID or invalid parameter being parsed.","lastModifiedDate":"2024-04-01"},{"lineNumber":511,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":512,"author":{"gitId":"Jerome-j"},"content":"Otherwise, if the process is successful, the current `Patient` object corresponding to the respective ID will be updated with the editedInformation.","lastModifiedDate":"2024-04-01"},{"lineNumber":513,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":514,"author":{"gitId":"Jerome-j"},"content":"We have considered these alternatives:","lastModifiedDate":"2024-04-01"},{"lineNumber":515,"author":{"gitId":"Jerome-j"},"content":"* Using the name as the primary key instead of the patient ID - may lead to unexpected deletes as there could be a case where the counselor has two patients of the similar name \"Tan Ah Kow\" and \"Tan Ah\". Suppose the counselor wants to delete \"Tan Ah\", and not \"Tan Ah Kou\" - in this case, the wrong record will be deleted by accident. Using an integer value as the identifier would eliminate this problem and will also makes it much easier for the user to input the commands.","lastModifiedDate":"2024-04-01"},{"lineNumber":516,"author":{"gitId":"Jerome-j"},"content":"  * Therefore the workflow would be to search for the respective patient for the respective index via the `queryp` command before editing it.","lastModifiedDate":"2024-04-01"},{"lineNumber":517,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":518,"author":{"gitId":"Jerome-j"},"content":"## Deleting an existing patient","lastModifiedDate":"2024-04-01"},{"lineNumber":519,"author":{"gitId":"Jerome-j"},"content":"`DeletePatientCommandParser` obtains the patient index that is to be deleted.","lastModifiedDate":"2024-04-01"},{"lineNumber":520,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":521,"author":{"gitId":"Jerome-j"},"content":"* The patient index is based on the unique ID that is tagged to each individual patient and is not the natural ordering of the list.","lastModifiedDate":"2024-04-01"},{"lineNumber":522,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":523,"author":{"gitId":"Jerome-j"},"content":"If the constraints are violated, `DeletePatientCommandParser` will throw a `ParseException` due to an invalid patient ID passed.","lastModifiedDate":"2024-04-01"},{"lineNumber":524,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":525,"author":{"gitId":"Jerome-j"},"content":"Otherwise, if the process is successful, the current `Patient` object corresponding to the respective ID will be updated with the deleted patient information containing the phone, email, and respective alias information.","lastModifiedDate":"2024-04-01"},{"lineNumber":526,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":527,"author":{"gitId":"Jerome-j"},"content":"We have considered these alternatives:","lastModifiedDate":"2024-04-01"},{"lineNumber":528,"author":{"gitId":"Jerome-j"},"content":"* A confirmation dialog when deleting the patients. We decided to not go with this approach as this drastically reduces the speed which the user makes use of the application.","lastModifiedDate":"2024-04-01"},{"lineNumber":529,"author":{"gitId":"Jerome-j"},"content":"* Deleting the student using the natural order of the list may also result in unintended deletions.","lastModifiedDate":"2024-04-01"},{"lineNumber":530,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":531,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":532,"author":{"gitId":"Jerome-j"},"content":"## Querying for Patients","lastModifiedDate":"2024-04-01"},{"lineNumber":533,"author":{"gitId":"Jerome-j"},"content":"`ListPatientCommandParser` obtains the values that correspond to the criteria such as `/p`, `/n`, `/e` and `/a` which represent phone, name, email address, and alias(es) accordingly, and combined with an AND logic.","lastModifiedDate":"2024-04-01"},{"lineNumber":534,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":535,"author":{"gitId":"Jerome-j"},"content":"The command for this operation is `queryp` with at least one or zero parameters. If no parameters (or at least one invalid parameter is passed into the command), the `queryp` command returns all the information of the patients (that is applied without any filters/predicates).","lastModifiedDate":"2024-04-01"},{"lineNumber":536,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":537,"author":{"gitId":"Jerome-j"},"content":"The `ListPatientCommandParser` first checks for the presence of empty arguments / no prefix being specified. If this criterion is true, then all the patient is returned as normal. As such this class does not throw any exceptions, but just returns all the data in the CogniCare application.","lastModifiedDate":"2024-04-01"},{"lineNumber":538,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":539,"author":{"gitId":"Jerome-j"},"content":"Otherwise, each of the search terms will be applied to each of the respective fields of the CogniCare application in a case-insensitive format.","lastModifiedDate":"2024-04-01"},{"lineNumber":540,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":541,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":542,"author":{"gitId":"Jerome-j"},"content":"We have considered these alternatives:","lastModifiedDate":"2024-04-01"},{"lineNumber":543,"author":{"gitId":"Jerome-j"},"content":"- User-Forgiveness _versus_ Strict Error Handling: Returning an error message where the command is correct, but illegal parameters are being supplied, then an error message is displayed. We decided against this approach because this will reduce the \"user friendliness\" of the application as the user would then have the consult the manual / read the error message to resolve the error.","lastModifiedDate":"2024-04-01"},{"lineNumber":544,"author":{"gitId":"Jerome-j"},"content":"- Creating a \"do-it-all\" predicate for the `Patient` class will be less repetitive code as compared to the current approach (`EmailContainsKeywordPredicate.java`, `NameContainsKeywordPredicate.java`, `PhoneContainsKeywordPredicate.java`, `TagContainsKeywordPredicate.java`) which requires more (repetitive code) as compared to making a class such as `StudentContainsKeywordPredicate.java` which would be easier to code - but harder to test and extend in future. Not to mention, this will also increase the difficulty in writing unit tests.","lastModifiedDate":"2024-04-01"},{"lineNumber":545,"author":{"gitId":"Jerome-j"},"content":"- Using `AND` logic for combining predicates, instead of `OR` predicate - the reason was that since the values already supported partial word matching (i.e. Searching for `coco` in the String `Coconut` will result in the row being returned). As such, using the `OR` logic will lead to too many rows being returned and therefore confusing to the user.","lastModifiedDate":"2024-04-01"},{"lineNumber":546,"author":{"gitId":"Jerome-j"},"content":"- Using case-insensitive search: the use of case-insensitive search terms for parameters matching provides a more seamless and more user-friendly experience.","lastModifiedDate":"2024-04-01"},{"lineNumber":547,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":552,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":553,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":554,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":555,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":565,"author":{"gitId":"tankh99"},"content":"This product is for staff at SoC Center for Future Graduates (CFG), and is specifically targeted towards Buck Seng, our target audience. This product aims to help make managing his patients easier","lastModifiedDate":"2024-04-10"},{"lineNumber":566,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":567,"author":{"gitId":"tankh99"},"content":"The following further describes our user","lastModifiedDate":"2024-04-10"},{"lineNumber":568,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":569,"author":{"gitId":"Jerome-j"},"content":"* has a need to manage a significant number of contacts due to the large number of students requiring counselling services","lastModifiedDate":"2024-03-05"},{"lineNumber":570,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":573,"author":{"gitId":"tankh99"},"content":"* is technically competent","lastModifiedDate":"2024-04-10"},{"lineNumber":574,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"Jerome-j"},"content":"* only a single user","lastModifiedDate":"2024-03-05"},{"lineNumber":576,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"tankh99"},"content":"**Value proposition**: ","lastModifiedDate":"2024-04-10"},{"lineNumber":578,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":579,"author":{"gitId":"tankh99"},"content":"CogniCare provides a comprehensive set of features that help streamline especially tedious tasks such as:","lastModifiedDate":"2024-04-10"},{"lineNumber":580,"author":{"gitId":"tankh99"},"content":"1. Looking up what appointments are there in a given time period to clear up the schedule","lastModifiedDate":"2024-04-10"},{"lineNumber":581,"author":{"gitId":"tankh99"},"content":"2. Report patient satisfaction levels over a given time period","lastModifiedDate":"2024-04-10"},{"lineNumber":582,"author":{"gitId":"tankh99"},"content":"3. Updating a patient\u0027s data across all their appointments. E.g. Updating a person\u0027s phone number or removing the patient and their associated appointments from UI","lastModifiedDate":"2024-04-10"},{"lineNumber":583,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"tankh99"},"content":"Furthermore, CogniCare\u0027s operations are specialised for technically competent users who type fast, which matches Buck Seng\u0027s description.","lastModifiedDate":"2024-04-10"},{"lineNumber":585,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":587,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"Jerome-j"},"content":"Priorities: High (must have) - `* * * *`, Medium (nice to have) - `* * *`, Low (unlikely to have) - `* *`, Not essential (implement only if got time) - ` * `","lastModifiedDate":"2024-03-05"},{"lineNumber":589,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":590,"author":{"gitId":"-"},"content":"| Priority  | As a …​          | I want to …​                                              | So that I can…​                                                                                            |","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"vnnamng"},"content":"|-----------|------------------|-----------------------------------------------------------|------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-03-07"},{"lineNumber":592,"author":{"gitId":"Jerome-j"},"content":"| `* * * *` | Counsellor       | create new patients                                       | store their data for future sessions.                                                                      |","lastModifiedDate":"2024-03-05"},{"lineNumber":593,"author":{"gitId":"Jerome-j"},"content":"| `* * * *` | Counsellor       | view patient data                                         | view their contact information and contact them.                                                           |","lastModifiedDate":"2024-03-05"},{"lineNumber":594,"author":{"gitId":"Jerome-j"},"content":"| `* * * *` | Counsellor       | delete patient data at a given index                      | discharge the patient.                                                                                     |","lastModifiedDate":"2024-03-05"},{"lineNumber":595,"author":{"gitId":"Jerome-j"},"content":"| `* * * *` | Counsellor       | search for a patient                                      | quickly access and review patient status.                                                                  |","lastModifiedDate":"2024-03-05"},{"lineNumber":596,"author":{"gitId":"Jerome-j"},"content":"| `* * * *` | Counsellor       | list patient at the given index                           | quickly access patients that come regularly.                                                               |","lastModifiedDate":"2024-03-05"},{"lineNumber":597,"author":{"gitId":"caitlyntang"},"content":"| `* * * *` | Counsellor       | schedule appointments                                     | avoid scheduling overlapping appointments with other patients.                                             |","lastModifiedDate":"2024-03-07"},{"lineNumber":598,"author":{"gitId":"caitlyntang"},"content":"| `* * * *` | Counsellor       | delete an appointment for a specific patient              | appointments can be changed in cases of cancellation.                                                      |","lastModifiedDate":"2024-03-07"},{"lineNumber":599,"author":{"gitId":"caitlyntang"},"content":"| `* * * *` | Counsellor       | view one appointment for a specified patient              | quickly find and review the appointment notes.                                                             |","lastModifiedDate":"2024-03-07"},{"lineNumber":600,"author":{"gitId":"tankh99"},"content":"| `* * * *` | Counsellor       | view all appointments for a specified patient             | quickly view all appointments related to a student without having to remember the appointment ID or dates. |","lastModifiedDate":"2024-03-07"},{"lineNumber":601,"author":{"gitId":"vnnamng"},"content":"| `* * * *` | Counsellor       | view patient case logs                                    | understand where I left off with the patient last time.                                                    |","lastModifiedDate":"2024-03-07"},{"lineNumber":602,"author":{"gitId":"vnnamng"},"content":"| `* * * *` | Counsellor       | create patient logs                                       | note down what I went through with the patient during the session.                                         |","lastModifiedDate":"2024-03-07"},{"lineNumber":603,"author":{"gitId":"vnnamng"},"content":"| `* * * *` | Counsellor       | update counselling sessions                               | fix mistakes for a prior counselling session.                                                              |","lastModifiedDate":"2024-03-07"},{"lineNumber":604,"author":{"gitId":"Jerome-j"},"content":"| `* * *`   | Counsellor       | to categorise / tag my patients                           | patients with more serious issues can be attended to first.                                                |","lastModifiedDate":"2024-03-05"},{"lineNumber":605,"author":{"gitId":"caitlyntang"},"content":"| `* * * `  | Counsellor       | know how many patients I am seeing in a week              | better manage my own time and emotions.                                                                    |","lastModifiedDate":"2024-03-07"},{"lineNumber":606,"author":{"gitId":"tankh99"},"content":"| `* * *`   | Counsellor       | know what mistakes I make when creating patients          | easily understand how to rectify my mistakes                                                               |","lastModifiedDate":"2024-03-07"},{"lineNumber":607,"author":{"gitId":"tankh99"},"content":"| `* * *`   | Counsellor       | know know what mistakes I make when creating appointments | easily understand how to rectify my mistakes                                                               |","lastModifiedDate":"2024-03-07"},{"lineNumber":608,"author":{"gitId":"caitlyntang"},"content":"| `* * *`   | Counsellor       | be able to mark whether a patient attended a session      | properly document patients’ attendance                                                                     |","lastModifiedDate":"2024-03-07"},{"lineNumber":609,"author":{"gitId":"Jerome-j"},"content":"| `* * *`   | New User         | have a help function                                      | so that I know how to use the application.                                                                 |","lastModifiedDate":"2024-03-05"},{"lineNumber":610,"author":{"gitId":"Jerome-j"},"content":"| `* *`     | Counsellor       | sort patients based on their priority tag                 | more serious patients can be attended first.                                                               |","lastModifiedDate":"2024-03-05"},{"lineNumber":611,"author":{"gitId":"tankh99"},"content":"| `* *`     | Experienced User | navigate through my history of written commands           | avoid retyping a command just to make minor modifications to a previous command.                           |","lastModifiedDate":"2024-03-07"},{"lineNumber":612,"author":{"gitId":"tankh99"},"content":"| `*`       | Experienced User | mass delete patient data                                  | patient data is not compromised.                                                                           |","lastModifiedDate":"2024-03-07"},{"lineNumber":613,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":615,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":616,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":617,"author":{"gitId":"Jerome-j"},"content":"(For all use cases below, the **System** is the `CogniCare` application and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2024-03-05"},{"lineNumber":618,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":619,"author":{"gitId":"Jerome-j"},"content":"**Use case: Add a Patient**","lastModifiedDate":"2024-03-26"},{"lineNumber":620,"author":{"gitId":"Jerome-j"},"content":"1. User enters command to add a patient with all mandatory information (Name, Email, Phone Number). Associated with is optional.","lastModifiedDate":"2024-03-26"},{"lineNumber":621,"author":{"gitId":"Jerome-j"},"content":"2. CogniCare validates the information are valid.","lastModifiedDate":"2024-03-26"},{"lineNumber":622,"author":{"gitId":"Jerome-j"},"content":"3. CogniCare saves the new patient information.","lastModifiedDate":"2024-03-26"},{"lineNumber":623,"author":{"gitId":"Jerome-j"},"content":"4. CogniCare displays a success message confirming that the new patient has been added.","lastModifiedDate":"2024-03-26"},{"lineNumber":624,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":625,"author":{"gitId":"Jerome-j"},"content":"**Extensions**","lastModifiedDate":"2024-03-26"},{"lineNumber":626,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":627,"author":{"gitId":"Jerome-j"},"content":"* 1a. Required fields are left blank, or fields do not meet the specified format.","lastModifiedDate":"2024-03-26"},{"lineNumber":628,"author":{"gitId":"Jerome-j"},"content":"  * 1ai. CogniCare displays error message associated with the relevant missing field (i.e. Phone number error message for missing phone number field)","lastModifiedDate":"2024-03-26"},{"lineNumber":629,"author":{"gitId":"Jerome-j"},"content":"    Use case ends","lastModifiedDate":"2024-03-26"},{"lineNumber":630,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":631,"author":{"gitId":"Jerome-j"},"content":"* 2a. Required fields are invalid (i.e. Phone Number does not meet SG format)","lastModifiedDate":"2024-03-26"},{"lineNumber":632,"author":{"gitId":"Jerome-j"},"content":"  * 2ai. CogniCare displays error message associated with the relevant erroneous field (i.e. Phone number error message for invalid phone number field)","lastModifiedDate":"2024-03-26"},{"lineNumber":633,"author":{"gitId":"Jerome-j"},"content":"    Use case ends","lastModifiedDate":"2024-03-26"},{"lineNumber":634,"author":{"gitId":"Jerome-j"},"content":"  ","lastModifiedDate":"2024-03-26"},{"lineNumber":635,"author":{"gitId":"Jerome-j"},"content":"* 2b. Patient with the same name (regardless of case sensitivity and whitespace) already exists.","lastModifiedDate":"2024-03-26"},{"lineNumber":636,"author":{"gitId":"Jerome-j"},"content":"  * 2bi. CogniCare alerts the user about the duplicate name and prevents the addition.","lastModifiedDate":"2024-03-26"},{"lineNumber":637,"author":{"gitId":"Jerome-j"},"content":"  Use case ends.","lastModifiedDate":"2024-03-26"},{"lineNumber":638,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":639,"author":{"gitId":"Jerome-j"},"content":"**Use Case: Edit a Patient**","lastModifiedDate":"2024-03-26"},{"lineNumber":640,"author":{"gitId":"Jerome-j"},"content":"\u003cpuml src\u003d\"diagrams/EditPatientSequenceDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2024-04-01"},{"lineNumber":641,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":642,"author":{"gitId":"Jerome-j"},"content":"1. User enters command to add a patient with required index and data field to be edited.","lastModifiedDate":"2024-03-26"},{"lineNumber":643,"author":{"gitId":"Jerome-j"},"content":"2. CogniCare displays a success message confirming the patient\u0027s details have been updated.","lastModifiedDate":"2024-03-26"},{"lineNumber":644,"author":{"gitId":"Jerome-j"},"content":"Use case ends.","lastModifiedDate":"2024-03-26"},{"lineNumber":645,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":646,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":647,"author":{"gitId":"Jerome-j"},"content":"**Extensions**","lastModifiedDate":"2024-03-26"},{"lineNumber":648,"author":{"gitId":"Jerome-j"},"content":"* 1a. The patient identifier does not match any patient in the system.","lastModifiedDate":"2024-03-26"},{"lineNumber":649,"author":{"gitId":"Jerome-j"},"content":"  * 1a1. CogniCare displays an error message that the patient was not found.","lastModifiedDate":"2024-03-26"},{"lineNumber":650,"author":{"gitId":"Jerome-j"},"content":"  Use case ends.","lastModifiedDate":"2024-03-26"},{"lineNumber":651,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":652,"author":{"gitId":"Jerome-j"},"content":"* 2a. Required data fields are left blank or data is in the incorrect format.","lastModifiedDate":"2024-03-26"},{"lineNumber":653,"author":{"gitId":"Jerome-j"},"content":"  * 2a1. CogniCare displays an error message indicating what needs to be corrected or filled in, including the specific requirements for the phone number and email format.","lastModifiedDate":"2024-03-26"},{"lineNumber":654,"author":{"gitId":"Jerome-j"},"content":"  Use case ends.","lastModifiedDate":"2024-03-26"},{"lineNumber":655,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":656,"author":{"gitId":"Jerome-j"},"content":"* **Use case: List all / Search for patients meeting selected criteria / criterion**","lastModifiedDate":"2024-03-26"},{"lineNumber":657,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":658,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":660,"author":{"gitId":"Jerome-j"},"content":"1.  User requests to list patients using the specified constraints","lastModifiedDate":"2024-03-26"},{"lineNumber":661,"author":{"gitId":"Jerome-j"},"content":"2.  CogniCare shows a list of patients that meets the criteria","lastModifiedDate":"2024-03-26"},{"lineNumber":662,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":663,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":664,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":665,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":666,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"Jerome-j"},"content":"* 1a. The query has no parameters specified.","lastModifiedDate":"2024-03-26"},{"lineNumber":668,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":669,"author":{"gitId":"Jerome-j"},"content":"    * 1a2. CogniCare returns all information about all patient (returns the entire AddressBook).","lastModifiedDate":"2024-03-26"},{"lineNumber":670,"author":{"gitId":"Jerome-j"},"content":"    ","lastModifiedDate":"2024-03-05"},{"lineNumber":671,"author":{"gitId":"Jerome-j"},"content":"    Use case ends.","lastModifiedDate":"2024-03-26"},{"lineNumber":672,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":673,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":674,"author":{"gitId":"Jerome-j"},"content":"* 1b. The query has no parameter value specified.","lastModifiedDate":"2024-03-26"},{"lineNumber":675,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":676,"author":{"gitId":"Jerome-j"},"content":"    * 1a1. CogniCare shows an error message.","lastModifiedDate":"2024-03-26"},{"lineNumber":677,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":678,"author":{"gitId":"Jerome-j"},"content":"  Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":679,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":680,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":681,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":682,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":683,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":684,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":685,"author":{"gitId":"Jerome-j"},"content":"**Use case: Delete a patient**","lastModifiedDate":"2024-03-26"},{"lineNumber":686,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":687,"author":{"gitId":"Jerome-j"},"content":"**MSS**","lastModifiedDate":"2024-03-05"},{"lineNumber":688,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":689,"author":{"gitId":"Jerome-j"},"content":"1.  User requests to delete a patient at the given index.","lastModifiedDate":"2024-03-05"},{"lineNumber":690,"author":{"gitId":"Jerome-j"},"content":"2.  CogniCare deletes the patient.","lastModifiedDate":"2024-03-26"},{"lineNumber":691,"author":{"gitId":"Jerome-j"},"content":"3.  CogniCare displays a successful message stating that the deletion was successful and displays information of deleted patient.","lastModifiedDate":"2024-03-26"},{"lineNumber":692,"author":{"gitId":"Jerome-j"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":693,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":694,"author":{"gitId":"Jerome-j"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":695,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":696,"author":{"gitId":"Jerome-j"},"content":"* 1a. The query has missing Id parameter.","lastModifiedDate":"2024-03-26"},{"lineNumber":697,"author":{"gitId":"Jerome-j"},"content":"    * 1a1. CogniCare displays an error message that the index is invalid. (No deletion is done)","lastModifiedDate":"2024-03-26"},{"lineNumber":698,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":699,"author":{"gitId":"Jerome-j"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":700,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":701,"author":{"gitId":"Jerome-j"},"content":" 1b. The patient index is invalid. ","lastModifiedDate":"2024-03-26"},{"lineNumber":702,"author":{"gitId":"Jerome-j"},"content":"    * 1a1. CogniCare displays an error message that the index is invalid. (No deletion is done)","lastModifiedDate":"2024-03-26"},{"lineNumber":703,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":704,"author":{"gitId":"Jerome-j"},"content":"  Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":705,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":706,"author":{"gitId":"caitlyntang"},"content":"**Use case: Search for an appointment of a specific student**","lastModifiedDate":"2024-03-07"},{"lineNumber":707,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":708,"author":{"gitId":"caitlyntang"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":709,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":710,"author":{"gitId":"caitlyntang"},"content":"1. User searches for specific student.","lastModifiedDate":"2024-03-07"},{"lineNumber":711,"author":{"gitId":"caitlyntang"},"content":"2. CogniCare shows a list of students that meet the criteria.","lastModifiedDate":"2024-03-07"},{"lineNumber":712,"author":{"gitId":"caitlyntang"},"content":"3. User requests to list all appointments at the given the student index.","lastModifiedDate":"2024-03-07"},{"lineNumber":713,"author":{"gitId":"caitlyntang"},"content":"4. CogniCare shows a list of appointments that meet the criteria.","lastModifiedDate":"2024-03-07"},{"lineNumber":714,"author":{"gitId":"caitlyntang"},"content":"5. User requests to find an appointment at the given student and appointment.","lastModifiedDate":"2024-03-07"},{"lineNumber":715,"author":{"gitId":"caitlyntang"},"content":"6. CogniCare shows the appointment that meets the criteria.","lastModifiedDate":"2024-03-07"},{"lineNumber":716,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":717,"author":{"gitId":"caitlyntang"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":718,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":719,"author":{"gitId":"caitlyntang"},"content":"**Extensions**","lastModifiedDate":"2024-03-07"},{"lineNumber":720,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":721,"author":{"gitId":"caitlyntang"},"content":"* 1a. The query has missing parameters","lastModifiedDate":"2024-03-07"},{"lineNumber":722,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":723,"author":{"gitId":"caitlyntang"},"content":"    * 1a1. CogniCare shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":724,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":725,"author":{"gitId":"caitlyntang"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":726,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":727,"author":{"gitId":"caitlyntang"},"content":"* 2a. The list of students is empty.","lastModifiedDate":"2024-03-07"},{"lineNumber":728,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":729,"author":{"gitId":"caitlyntang"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":730,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":731,"author":{"gitId":"caitlyntang"},"content":"* 3a. The query has missing parameters","lastModifiedDate":"2024-03-07"},{"lineNumber":732,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":733,"author":{"gitId":"caitlyntang"},"content":"    * 3a1. CogniCare shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":734,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":735,"author":{"gitId":"caitlyntang"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":736,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":737,"author":{"gitId":"caitlyntang"},"content":"* 4a. The list of appointments is empty.","lastModifiedDate":"2024-03-07"},{"lineNumber":738,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":739,"author":{"gitId":"caitlyntang"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":740,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":741,"author":{"gitId":"caitlyntang"},"content":"* 5a. The query has missing parameters","lastModifiedDate":"2024-03-07"},{"lineNumber":742,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":743,"author":{"gitId":"caitlyntang"},"content":"    * 5a1. CogniCare shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":744,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":745,"author":{"gitId":"caitlyntang"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":746,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":747,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":748,"author":{"gitId":"caitlyntang"},"content":"**Use case: Delete an appointment for a specific student**","lastModifiedDate":"2024-03-07"},{"lineNumber":749,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":750,"author":{"gitId":"caitlyntang"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":751,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":752,"author":{"gitId":"caitlyntang"},"content":"1. User requests to delete an appointment at the given student and appointment index. ","lastModifiedDate":"2024-03-07"},{"lineNumber":753,"author":{"gitId":"caitlyntang"},"content":"2. CogniCare displays the appointment information prior to deletion, and confirms with the user prior to deletion.","lastModifiedDate":"2024-03-07"},{"lineNumber":754,"author":{"gitId":"caitlyntang"},"content":"3. CogniCare deletes the appointment.","lastModifiedDate":"2024-03-07"},{"lineNumber":755,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":756,"author":{"gitId":"caitlyntang"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":757,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":758,"author":{"gitId":"caitlyntang"},"content":"**Extensions**","lastModifiedDate":"2024-03-07"},{"lineNumber":759,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":760,"author":{"gitId":"caitlyntang"},"content":"* 1a. The query has missing parameters","lastModifiedDate":"2024-03-07"},{"lineNumber":761,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":762,"author":{"gitId":"caitlyntang"},"content":"    * 1a1. CogniCare shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":763,"author":{"gitId":"caitlyntang"},"content":"    ","lastModifiedDate":"2024-03-07"},{"lineNumber":764,"author":{"gitId":"caitlyntang"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":765,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":766,"author":{"gitId":"caitlyntang"},"content":"* 2a. User does not want to delete.","lastModifiedDate":"2024-03-07"},{"lineNumber":767,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":768,"author":{"gitId":"caitlyntang"},"content":"    * 2a1. CogniCare shows an error message that the user cancelled the delete operation.","lastModifiedDate":"2024-03-07"},{"lineNumber":769,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":770,"author":{"gitId":"caitlyntang"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":771,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":772,"author":{"gitId":"vnnamng"},"content":"**Use case: View all appointments of a specific patient**","lastModifiedDate":"2024-04-09"},{"lineNumber":773,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":774,"author":{"gitId":"vnnamng"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":775,"author":{"gitId":"vnnamng"},"content":"1. User retrieve the patient index or name of the specific student.","lastModifiedDate":"2024-04-09"},{"lineNumber":776,"author":{"gitId":"vnnamng"},"content":"2. User requests to list all appointments at the given student index.","lastModifiedDate":"2024-04-09"},{"lineNumber":777,"author":{"gitId":"vnnamng"},"content":"3. CogniCare shows a list of appointments that meet the criteria.","lastModifiedDate":"2024-04-09"},{"lineNumber":778,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":779,"author":{"gitId":"vnnamng"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":780,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":781,"author":{"gitId":"vnnamng"},"content":"**Extensions**","lastModifiedDate":"2024-03-07"},{"lineNumber":782,"author":{"gitId":"vnnamng"},"content":"* 1a. The query has missing parameters","lastModifiedDate":"2024-03-07"},{"lineNumber":783,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":784,"author":{"gitId":"vnnamng"},"content":"    * 1a1. CogniCare shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":785,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":786,"author":{"gitId":"vnnamng"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":787,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":788,"author":{"gitId":"vnnamng"},"content":"* 1b. The list of students is empty.","lastModifiedDate":"2024-04-09"},{"lineNumber":789,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":790,"author":{"gitId":"vnnamng"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":791,"author":{"gitId":"vnnamng"},"content":"* 2a. The patient index is invalid. ","lastModifiedDate":"2024-04-09"},{"lineNumber":792,"author":{"gitId":"vnnamng"},"content":"    * 2a1. CogniCare displays an error message that the index is invalid. ","lastModifiedDate":"2024-04-09"},{"lineNumber":793,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":794,"author":{"gitId":"vnnamng"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":795,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":796,"author":{"gitId":"vnnamng"},"content":"* 3a. The list of appointments is empty.","lastModifiedDate":"2024-04-09"},{"lineNumber":797,"author":{"gitId":"vnnamng"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":798,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":799,"author":{"gitId":"vnnamng"},"content":"**Use case: Filter appointment in a date time range**","lastModifiedDate":"2024-04-09"},{"lineNumber":800,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":801,"author":{"gitId":"vnnamng"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":802,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":803,"author":{"gitId":"vnnamng"},"content":"1. User requests to filter appointments based on the date and time range.","lastModifiedDate":"2024-04-09"},{"lineNumber":804,"author":{"gitId":"vnnamng"},"content":"2. CogniCare shows a list of appointments that meet the criteria and success messages.","lastModifiedDate":"2024-04-09"},{"lineNumber":805,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":806,"author":{"gitId":"vnnamng"},"content":"   Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":807,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":808,"author":{"gitId":"vnnamng"},"content":"**Extensions**","lastModifiedDate":"2024-03-07"},{"lineNumber":809,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":810,"author":{"gitId":"vnnamng"},"content":"* 1a. The query has missing parameters","lastModifiedDate":"2024-03-07"},{"lineNumber":811,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":812,"author":{"gitId":"vnnamng"},"content":"    * 1a1. CogniCare shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":813,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":814,"author":{"gitId":"vnnamng"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":815,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":816,"author":{"gitId":"vnnamng"},"content":"* 2a. The list of appointments is empty.","lastModifiedDate":"2024-04-09"},{"lineNumber":817,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":818,"author":{"gitId":"vnnamng"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":819,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":820,"author":{"gitId":"vnnamng"},"content":"* 3a. The query has incorrect parameters","lastModifiedDate":"2024-04-09"},{"lineNumber":821,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":822,"author":{"gitId":"vnnamng"},"content":"    * 3a1. CogniCare shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":823,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":824,"author":{"gitId":"vnnamng"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":825,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":826,"author":{"gitId":"vnnamng"},"content":"* 4a. The query has missing parameters","lastModifiedDate":"2024-04-09"},{"lineNumber":827,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":828,"author":{"gitId":"vnnamng"},"content":"    * 4a1. CogniCare shows all appointments.","lastModifiedDate":"2024-04-09"},{"lineNumber":829,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":830,"author":{"gitId":"vnnamng"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":831,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":832,"author":{"gitId":"tankh99"},"content":"**Use case: Getting the previous command entered**","lastModifiedDate":"2024-03-24"},{"lineNumber":833,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":834,"author":{"gitId":"tankh99"},"content":"**MSS**","lastModifiedDate":"2024-03-24"},{"lineNumber":835,"author":{"gitId":"tankh99"},"content":"1. User types in and executes any command.","lastModifiedDate":"2024-03-24"},{"lineNumber":836,"author":{"gitId":"tankh99"},"content":"2. User presses the Up arrow key to view his last command","lastModifiedDate":"2024-03-24"},{"lineNumber":837,"author":{"gitId":"tankh99"},"content":"3. User modifies his last command","lastModifiedDate":"2024-03-24"},{"lineNumber":838,"author":{"gitId":"tankh99"},"content":"4. User executes the modified command","lastModifiedDate":"2024-03-24"},{"lineNumber":839,"author":{"gitId":"tankh99"},"content":"5. User presses the Up arrow key and sees his last modified command ","lastModifiedDate":"2024-03-24"},{"lineNumber":840,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":841,"author":{"gitId":"tankh99"},"content":"   Use case ends.","lastModifiedDate":"2024-03-24"},{"lineNumber":842,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":843,"author":{"gitId":"tankh99"},"content":"**Extension**","lastModifiedDate":"2024-03-24"},{"lineNumber":844,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":845,"author":{"gitId":"tankh99"},"content":"* 3a. User modifies the command, and without executing it, presses the Down arrow key, followed by the Up arrow key","lastModifiedDate":"2024-03-24"},{"lineNumber":846,"author":{"gitId":"tankh99"},"content":"    * 4a1. The command before modification is shown because the modified command was not executed","lastModifiedDate":"2024-03-24"},{"lineNumber":847,"author":{"gitId":"tankh99"},"content":"* *a. User presses the Up arrow key when there is no previous command","lastModifiedDate":"2024-03-24"},{"lineNumber":848,"author":{"gitId":"tankh99"},"content":"    * *a1. A sound is played indicating that there is no previous command","lastModifiedDate":"2024-03-24"},{"lineNumber":849,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":850,"author":{"gitId":"tankh99"},"content":"    Use case ends.","lastModifiedDate":"2024-03-24"},{"lineNumber":851,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":852,"author":{"gitId":"tankh99"},"content":"**Use case: Getting the next command entered**","lastModifiedDate":"2024-03-24"},{"lineNumber":853,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":854,"author":{"gitId":"tankh99"},"content":"**MSS**","lastModifiedDate":"2024-03-24"},{"lineNumber":855,"author":{"gitId":"tankh99"},"content":"1. User types in and executes any 2 commands.","lastModifiedDate":"2024-03-24"},{"lineNumber":856,"author":{"gitId":"tankh99"},"content":"2. User presses the Up arrow key twice to view his first command","lastModifiedDate":"2024-03-24"},{"lineNumber":857,"author":{"gitId":"tankh99"},"content":"3. User presses the Down arrow key to view his second command","lastModifiedDate":"2024-03-24"},{"lineNumber":858,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":859,"author":{"gitId":"tankh99"},"content":"   Use case ends.","lastModifiedDate":"2024-03-24"},{"lineNumber":860,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":861,"author":{"gitId":"tankh99"},"content":"**Extension**","lastModifiedDate":"2024-03-24"},{"lineNumber":862,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":863,"author":{"gitId":"tankh99"},"content":"* *a. User presses the Down arrow key when there is no next command","lastModifiedDate":"2024-03-24"},{"lineNumber":864,"author":{"gitId":"tankh99"},"content":"    * *b1. An empty string is returned","lastModifiedDate":"2024-03-24"},{"lineNumber":865,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":866,"author":{"gitId":"tankh99"},"content":"  Use case ends.","lastModifiedDate":"2024-03-24"},{"lineNumber":867,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":868,"author":{"gitId":"tankh99"},"content":"**Use case: Comparing between 2 commands in history**","lastModifiedDate":"2024-03-24"},{"lineNumber":869,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":870,"author":{"gitId":"tankh99"},"content":"**MSS**","lastModifiedDate":"2024-03-24"},{"lineNumber":871,"author":{"gitId":"tankh99"},"content":"1. User types in and executes any 2 commands.","lastModifiedDate":"2024-03-24"},{"lineNumber":872,"author":{"gitId":"tankh99"},"content":"2. User presses the Up arrow key twice to view his first command","lastModifiedDate":"2024-03-24"},{"lineNumber":873,"author":{"gitId":"tankh99"},"content":"3. User then presses the Down arrow key to view his second command","lastModifiedDate":"2024-03-24"},{"lineNumber":874,"author":{"gitId":"tankh99"},"content":"4. User alternates the Up and Down arrow key to compare between both commands","lastModifiedDate":"2024-03-24"},{"lineNumber":875,"author":{"gitId":"tankh99"},"content":"5. User chooses a command to modify and execute","lastModifiedDate":"2024-03-24"},{"lineNumber":876,"author":{"gitId":"tankh99"},"content":"6. User presses the Up button and sees his last modified command","lastModifiedDate":"2024-03-24"},{"lineNumber":877,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":878,"author":{"gitId":"tankh99"},"content":"   Use case ends.","lastModifiedDate":"2024-03-24"},{"lineNumber":879,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":880,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":881,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":882,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":883,"author":{"gitId":"Jerome-j"},"content":"2.  Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2024-03-26"},{"lineNumber":884,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":885,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":886,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":887,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":888,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":889,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":890,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":891,"author":{"gitId":"Jerome-j"},"content":"* **Mainstream OS**: Windows, Linux, Unix, macOS","lastModifiedDate":"2024-03-05"},{"lineNumber":892,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":893,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":894,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":895,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":896,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":897,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":898,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":899,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":900,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":901,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":902,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":903,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":904,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":905,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":906,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":907,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":908,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":909,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":910,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":911,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":912,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":913,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":914,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":915,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":916,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":917,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":918,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":919,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":920,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":921,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":922,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":923,"author":{"gitId":"Jerome-j"},"content":"### Deleting a patient","lastModifiedDate":"2024-03-26"},{"lineNumber":924,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":925,"author":{"gitId":"Jerome-j"},"content":"1. Deleting a patient while all patients are being shown","lastModifiedDate":"2024-03-26"},{"lineNumber":926,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":927,"author":{"gitId":"Jerome-j"},"content":"   1. Prerequisites: List all patients using the `list` command. Multiple patients in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":928,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":929,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":930,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":931,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":932,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":933,"author":{"gitId":"Jerome-j"},"content":"      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2024-03-26"},{"lineNumber":934,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":935,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":936,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":937,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":938,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":939,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":940,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":941,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":942,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":943,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":944,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":945,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":946,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":947,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":948,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":949,"author":{"gitId":"Jerome-j"},"content":"6.0. Manual Testing","lastModifiedDate":"2024-04-01"},{"lineNumber":950,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":951,"author":{"gitId":"Jerome-j"},"content":"## 6.1. Launch and Shutdown","lastModifiedDate":"2024-04-01"},{"lineNumber":952,"author":{"gitId":"Jerome-j"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2024-04-01"},{"lineNumber":953,"author":{"gitId":"Jerome-j"},"content":"  1. If you are on macOS on an Apple Silicon System, we recommend that you follow the guide on [CS2103 Course website](https://nus-cs2103-ay2324s2.github.io/website/admin/programmingLanguages.html#programming-language) using the Zulu version `zulu11.50.19-ca-fx-jdk11.0.12-macosx_aarch64.dmg`","lastModifiedDate":"2024-04-01"},{"lineNumber":954,"author":{"gitId":"Jerome-j"},"content":"  2. If you are on Windows / Intel architecture, most versions of Java 11 should work.","lastModifiedDate":"2024-04-01"},{"lineNumber":955,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":956,"author":{"gitId":"Jerome-j"},"content":"2. Download the latest `cognicare.jar` from [here](https://github.com/AY2324S2-CS2103-F08-2/tp/releases).","lastModifiedDate":"2024-04-01"},{"lineNumber":957,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":958,"author":{"gitId":"Jerome-j"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your CogniCare application.","lastModifiedDate":"2024-04-01"},{"lineNumber":959,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":960,"author":{"gitId":"Jerome-j"},"content":"4. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar cognicare.jar` command to run the application.\u003cbr\u003e  ","lastModifiedDate":"2024-04-01"},{"lineNumber":961,"author":{"gitId":"Jerome-j"},"content":"   **Expected**: A GUI containing the sample patient list the below should appear in a few seconds. Note that the app contains some sample data. You may need to re-scale the window size to suit your computer display.","lastModifiedDate":"2024-04-01"},{"lineNumber":962,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":963,"author":{"gitId":"Jerome-j"},"content":"## 6.2 List all students (without any parameters)","lastModifiedDate":"2024-04-01"},{"lineNumber":964,"author":{"gitId":"Jerome-j"},"content":"Pre-requisite:","lastModifiedDate":"2024-04-01"},{"lineNumber":965,"author":{"gitId":"Jerome-j"},"content":"- There is at least one (\"1\") patient stored in the CogniCare application.","lastModifiedDate":"2024-04-01"},{"lineNumber":966,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":967,"author":{"gitId":"Jerome-j"},"content":"Command: `queryp`","lastModifiedDate":"2024-04-01"},{"lineNumber":968,"author":{"gitId":"Jerome-j"},"content":"- The patient information in CogniCare will be shown in the item ListView.","lastModifiedDate":"2024-04-01"},{"lineNumber":969,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":970,"author":{"gitId":"Jerome-j"},"content":"Expected Output:","lastModifiedDate":"2024-04-01"},{"lineNumber":971,"author":{"gitId":"Jerome-j"},"content":"- All the patient information will be displayed in the ListView.","lastModifiedDate":"2024-04-01"},{"lineNumber":972,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":973,"author":{"gitId":"Jerome-j"},"content":"Expected Output in the Command Output Box:","lastModifiedDate":"2024-04-01"},{"lineNumber":974,"author":{"gitId":"Jerome-j"},"content":"- `Listed all persons`","lastModifiedDate":"2024-04-01"},{"lineNumber":975,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":976,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":977,"author":{"gitId":"Jerome-j"},"content":"\u003e [!TIP]","lastModifiedDate":"2024-04-01"},{"lineNumber":978,"author":{"gitId":"Jerome-j"},"content":"\u003e If there are no patients stored in the Application, then an empty ListView will be displayed.","lastModifiedDate":"2024-04-01"},{"lineNumber":979,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":980,"author":{"gitId":"Jerome-j"},"content":"## 6.3 List all students meeting the selected (one or more) criteria","lastModifiedDate":"2024-04-01"},{"lineNumber":981,"author":{"gitId":"Jerome-j"},"content":"Pre-requisite:","lastModifiedDate":"2024-04-01"},{"lineNumber":982,"author":{"gitId":"Jerome-j"},"content":"- There is at least one (\"1\") patient stored in the CogniCare application meeting the requested criterion / criteria.","lastModifiedDate":"2024-04-01"},{"lineNumber":983,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":984,"author":{"gitId":"Jerome-j"},"content":"Command: `queryp n/Jerome p/123 `","lastModifiedDate":"2024-04-01"},{"lineNumber":985,"author":{"gitId":"Jerome-j"},"content":"- The patient information meeting the criteria specified in CogniCare will be displayed in the item ListView.","lastModifiedDate":"2024-04-01"},{"lineNumber":986,"author":{"gitId":"Jerome-j"},"content":"- You may specify zero or one of each parameters","lastModifiedDate":"2024-04-01"},{"lineNumber":987,"author":{"gitId":"Jerome-j"},"content":"  - `p/`: phone number","lastModifiedDate":"2024-04-01"},{"lineNumber":988,"author":{"gitId":"Jerome-j"},"content":"  - `n/`: name","lastModifiedDate":"2024-04-01"},{"lineNumber":989,"author":{"gitId":"Jerome-j"},"content":"  - `e/`: email address","lastModifiedDate":"2024-04-01"},{"lineNumber":990,"author":{"gitId":"Jerome-j"},"content":"- You may specify zero or many this parameter:","lastModifiedDate":"2024-04-01"},{"lineNumber":991,"author":{"gitId":"Jerome-j"},"content":"  - `a/`: `associated with` tag","lastModifiedDate":"2024-04-01"},{"lineNumber":992,"author":{"gitId":"Jerome-j"},"content":"    - Consider the use-case as such, `queryp a/depression`","lastModifiedDate":"2024-04-01"},{"lineNumber":993,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":994,"author":{"gitId":"Jerome-j"},"content":"Expected Output:","lastModifiedDate":"2024-04-01"},{"lineNumber":995,"author":{"gitId":"Jerome-j"},"content":"- All the patient information with their respective patientId will be displayed in the ListView.","lastModifiedDate":"2024-04-01"},{"lineNumber":996,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":997,"author":{"gitId":"Jerome-j"},"content":"Expected Output in the Command Output Box:","lastModifiedDate":"2024-04-01"},{"lineNumber":998,"author":{"gitId":"Jerome-j"},"content":"- `Listed all persons`","lastModifiedDate":"2024-04-01"},{"lineNumber":999,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1000,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1001,"author":{"gitId":"Jerome-j"},"content":"\u003e [!TIP]","lastModifiedDate":"2024-04-01"},{"lineNumber":1002,"author":{"gitId":"Jerome-j"},"content":"\u003e If there are no patients stored in the Application, or if there are no data that meets the required criteria,  an empty ListView will be displayed","lastModifiedDate":"2024-04-01"},{"lineNumber":1003,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1004,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1005,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1006,"author":{"gitId":"Jerome-j"},"content":"## 6.3 Adding a new patient","lastModifiedDate":"2024-04-01"},{"lineNumber":1007,"author":{"gitId":"Jerome-j"},"content":"Pre-requisite:","lastModifiedDate":"2024-04-01"},{"lineNumber":1008,"author":{"gitId":"Jerome-j"},"content":"- There does not exists another patient with the same name (regardless of capitalisation) and spacing, i.e. the names \"Jerome Chua\" and \"jEROmE       CHuA\" are considered the same name.","lastModifiedDate":"2024-04-01"},{"lineNumber":1009,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1010,"author":{"gitId":"Jerome-j"},"content":"Command: `patient n/John Doe p/98765432 e/johnd@example.com a/Johnny a/owesMoney `","lastModifiedDate":"2024-04-01"},{"lineNumber":1011,"author":{"gitId":"Jerome-j"},"content":"- You must specify exactly one of each parameters (in the correct format)","lastModifiedDate":"2024-04-01"},{"lineNumber":1012,"author":{"gitId":"Jerome-j"},"content":"  - `p/`: phone number","lastModifiedDate":"2024-04-01"},{"lineNumber":1013,"author":{"gitId":"Jerome-j"},"content":"  - `n/`: name","lastModifiedDate":"2024-04-01"},{"lineNumber":1014,"author":{"gitId":"Jerome-j"},"content":"  - `e/`: email address","lastModifiedDate":"2024-04-01"},{"lineNumber":1015,"author":{"gitId":"Jerome-j"},"content":"- You may specify zero or many of this parameter:","lastModifiedDate":"2024-04-01"},{"lineNumber":1016,"author":{"gitId":"Jerome-j"},"content":"  - `a/`: `associated with` tag","lastModifiedDate":"2024-04-01"},{"lineNumber":1017,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1018,"author":{"gitId":"Jerome-j"},"content":"Expected Output:","lastModifiedDate":"2024-04-01"},{"lineNumber":1019,"author":{"gitId":"Jerome-j"},"content":"- The newly created patient will have an increased index (as compared to the last created one)","lastModifiedDate":"2024-04-01"},{"lineNumber":1020,"author":{"gitId":"Jerome-j"},"content":"-  The `ListView` will be updated with the latest patient data.","lastModifiedDate":"2024-04-01"},{"lineNumber":1021,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1022,"author":{"gitId":"Jerome-j"},"content":"Expected Output in the Command Output Box:","lastModifiedDate":"2024-04-01"},{"lineNumber":1023,"author":{"gitId":"Jerome-j"},"content":"- `New student added: John Doe; Phone: 98765432; Email: johnd@example.com; Associated with: [owesMoney][Johnny]`","lastModifiedDate":"2024-04-01"},{"lineNumber":1024,"author":{"gitId":"Jerome-j"},"content":"- A message echo-ing the information that you have just entered.","lastModifiedDate":"2024-04-01"},{"lineNumber":1025,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1026,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1027,"author":{"gitId":"Jerome-j"},"content":"## 6.4 Editing a currently created patient","lastModifiedDate":"2024-04-01"},{"lineNumber":1028,"author":{"gitId":"Jerome-j"},"content":"Pre-requisite:","lastModifiedDate":"2024-04-01"},{"lineNumber":1029,"author":{"gitId":"Jerome-j"},"content":"- You know the index (`patientId`) of the person that you are trying to edit.","lastModifiedDate":"2024-04-01"},{"lineNumber":1030,"author":{"gitId":"Jerome-j"},"content":"- There is exactly one (\"1\") patient stored in the CogniCare application","lastModifiedDate":"2024-04-01"},{"lineNumber":1031,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1032,"author":{"gitId":"Jerome-j"},"content":"Command: `edit 26 n/Jerome Chua`","lastModifiedDate":"2024-04-01"},{"lineNumber":1033,"author":{"gitId":"Jerome-j"},"content":"- You must specify exactly at least one of these parameters (in the correct format)","lastModifiedDate":"2024-04-01"},{"lineNumber":1034,"author":{"gitId":"Jerome-j"},"content":"  - `/p`: phone number","lastModifiedDate":"2024-04-01"},{"lineNumber":1035,"author":{"gitId":"Jerome-j"},"content":"    - It must match the validation logic also.","lastModifiedDate":"2024-04-01"},{"lineNumber":1036,"author":{"gitId":"Jerome-j"},"content":"  - `/n`: name","lastModifiedDate":"2024-04-01"},{"lineNumber":1037,"author":{"gitId":"Jerome-j"},"content":"    - The edited name must not be an existing entry in the CogniCare application. See the Section above for the validation logic.","lastModifiedDate":"2024-04-01"},{"lineNumber":1038,"author":{"gitId":"Jerome-j"},"content":"  - `/e`: email address","lastModifiedDate":"2024-04-01"},{"lineNumber":1039,"author":{"gitId":"Jerome-j"},"content":"    - It must match validation logic too","lastModifiedDate":"2024-04-01"},{"lineNumber":1040,"author":{"gitId":"Jerome-j"},"content":"  - `/a`: `associated with` the tag","lastModifiedDate":"2024-04-01"},{"lineNumber":1041,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1042,"author":{"gitId":"Jerome-j"},"content":"Expected Output:","lastModifiedDate":"2024-04-01"},{"lineNumber":1043,"author":{"gitId":"Jerome-j"},"content":"-  The `ListView` will be updated with the latest patient data.","lastModifiedDate":"2024-04-01"},{"lineNumber":1044,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1045,"author":{"gitId":"Jerome-j"},"content":"Expected Output in the CommandBox: `Edited Person: Bernice Yu; Phone: 91234567; Email: johndoe@example.com; Associated with: [jobless][anxiety]`","lastModifiedDate":"2024-04-01"},{"lineNumber":1046,"author":{"gitId":"Jerome-j"},"content":"-  The `ListView` will be updated with the latest patient data.","lastModifiedDate":"2024-04-01"},{"lineNumber":1047,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1048,"author":{"gitId":"Jerome-j"},"content":"\u003e [!TIP]","lastModifiedDate":"2024-04-01"},{"lineNumber":1049,"author":{"gitId":"Jerome-j"},"content":"\u003e The student identifier that is commonly referred to in this article refers to the student id that is permanently tagged to each student, and is not the index of the natural ordering in the list.","lastModifiedDate":"2024-04-01"},{"lineNumber":1050,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1051,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1052,"author":{"gitId":"Jerome-j"},"content":"## 6.5 Deleting an existing patient","lastModifiedDate":"2024-04-01"},{"lineNumber":1053,"author":{"gitId":"Jerome-j"},"content":"Pre-requisite:","lastModifiedDate":"2024-04-01"},{"lineNumber":1054,"author":{"gitId":"Jerome-j"},"content":"- You know the index (`patientId`) of the person that you are trying to delete.","lastModifiedDate":"2024-04-01"},{"lineNumber":1055,"author":{"gitId":"Jerome-j"},"content":"- There is at exactly one (\"1\") patient stored in the CogniCare application","lastModifiedDate":"2024-04-01"},{"lineNumber":1056,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1057,"author":{"gitId":"Jerome-j"},"content":"Command: `delete 26`","lastModifiedDate":"2024-04-01"},{"lineNumber":1058,"author":{"gitId":"Jerome-j"},"content":"- You must specify exactly the patient identifier that exists.","lastModifiedDate":"2024-04-01"},{"lineNumber":1059,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1060,"author":{"gitId":"Jerome-j"},"content":"Expected Output:","lastModifiedDate":"2024-04-01"},{"lineNumber":1061,"author":{"gitId":"Jerome-j"},"content":"-  The `ListView` will be updated with the latest patient data.","lastModifiedDate":"2024-04-01"},{"lineNumber":1062,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1063,"author":{"gitId":"Jerome-j"},"content":"Expected Output in the CommandBox: `Deleted Patient: Grace Lim; Phone: 83456789; Email: gracelim@outlook.com; Associated with: [anxiety][stress]`","lastModifiedDate":"2024-04-01"},{"lineNumber":1064,"author":{"gitId":"Jerome-j"},"content":"-  The `ListView` will be updated with the latest patient data (which removes the deleted patient).","lastModifiedDate":"2024-04-01"},{"lineNumber":1065,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1066,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1067,"author":{"gitId":"Jerome-j"},"content":"## 7. Planned Future Enhancements (Beyond `v1.4`)","lastModifiedDate":"2024-04-01"},{"lineNumber":1068,"author":{"gitId":"Jerome-j"},"content":"This section describes the potential enhancements that could be improved in future editions of the application.","lastModifiedDate":"2024-04-01"},{"lineNumber":1069,"author":{"gitId":"Jerome-j"},"content":"* Adding the ability to allow the counselor to secure the application - via a PIN Code feature, and encryption of the JSON file so that data loss does not result in the leakage of highly confidential medical data.","lastModifiedDate":"2024-04-01"},{"lineNumber":1070,"author":{"gitId":"Jerome-j"},"content":"* Enhancing the graphical user interface to make it more user-friendly, i.e. more usage of the mouse as compared to the keyboard.","lastModifiedDate":"2024-04-01"},{"lineNumber":1071,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1072,"author":{"gitId":"Jerome-j"},"content":"## 8. Learning Outcomes","lastModifiedDate":"2024-04-01"},{"lineNumber":1073,"author":{"gitId":"Jerome-j"},"content":"The implementation of the CogniCare application was an extremely challenging endeavour - as we needed to morph and reshape the AB3 application in a team-based setting. The transformation process involved significant alternations and enhancements to reach the new requirements of the application.","lastModifiedDate":"2024-04-01"},{"lineNumber":1074,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":1075,"author":{"gitId":"Jerome-j"},"content":"The team-based setting also exposed us to various crucial skills such as improving our working styles to achieve a high level of collaboration. Skillsets that are crucial to a Software Engineer such as reviewing Pull Requests (PRs), and providing and receiving feedback from peers are also learned in the course of the project.","lastModifiedDate":"2024-04-01"},{"lineNumber":1076,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1077,"author":{"gitId":"tankh99"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2024-04-10"},{"lineNumber":1078,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1079,"author":{"gitId":"tankh99"},"content":"## **Acknowledgements**","lastModifiedDate":"2024-04-10"},{"lineNumber":1080,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1081,"author":{"gitId":"tankh99"},"content":"Code base adapted from [Address Book Level-3](https://github.com/nus-cs2103-AY2324S2/tp)","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"caitlyntang":94,"Jerome-j":339,"tankh99":134,"vnnamng":174,"-":340}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# CogniCare User Guide","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"CogniCare is a **desktop app for managing all patients, optimized for use via a Command Line Interface** (CLI) while still retaining all the benefits of a Graphical User Interface (GUI). If you can type fast, CogniCare can get your patient management tasks done faster than other traditional GUI apps.","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"    1. If you are on macOS on an Apple Silicon System, we recommend that you follow the guide on [CS2103 Course website](https://nus-cs2103-ay2324s2.github.io/website/admin/programmingLanguages.html#programming-language) using the Zulu version `zulu11.50.19-ca-fx-jdk11.0.12-macosx_aarch64.dmg`","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"2. Download the latest `cognicare.jar` from [here](https://github.com/AY2324S2-CS2103-F08-2/tp/releases).","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your CogniCare application.","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"4. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar cognicare.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"    * `queryp` : Lists all patients that are stored in CogniCare.","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"    * `addp n/Jerome Chua p/98765432 e/jerome@example.com a/depressed` : Adds a contact named `Jerome Chua` to the Address Book who is associated with having depression.","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"    * `deletep 903` : Deletes the patient that has the id of 903 (This is different from the natural ordering of the list).","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"    * `adda pid/1 sd/2022-12-12 12:00 ed/2022-12-12 13:00 att/true s/5 ad/This is a dummy appointment` : Adds an appointment for patient index 1 to the address book from 12pm to 1pm on 12 December 2022.","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"   ","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"    * `querya` : Lists all appointments that are stored in CogniCare.","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"    * `querya pid/2` : List all appointments belonging to patient index 2 that are stored in CogniCare.","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"   ","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"    * `edita 1 pid/3` : Changes appointment index 1 with the patient id 3.","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"    * `deleteappointment 900` : Deletes the appointment that has the id of 900 (This is different from the natural ordering of the list).","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"    * `clear` : Deletes all patient information from the CogniCare application.","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"**Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"  e.g. in `addp n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"  e.g. `n/NAME [a/AFFLIATED_WITH]` can be used as `n/Jerome a/depression` or as `n/Jerome`.","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  e.g. `[a/AFFLIATED_WITH]…​` can be used as ` ` (i.e. 0 times), `a/depressed`, `a/jobless a/sad` etc.","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"* If you are using a PDF version of this document, please be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  \u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"Jerome-j"},"content":"### Adding a patient: `addp`","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"Jerome-j"},"content":"Adds a patient to the address book.","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"Jerome-j"},"content":"Format: `adda n/NAME p/PHONE_NUMBER e/EMAIL [a/AFFLIATED_WITH]…​`","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"Jerome-j"},"content":"The following image shows when command is valid:","lastModifiedDate":"2024-04-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":99,"author":{"gitId":"Jerome-j"},"content":"The image below shows a successful addition of patient.","lastModifiedDate":"2024-04-04"},{"lineNumber":100,"author":{"gitId":"Jerome-j"},"content":"![Add patient success](images/patients/2a_Add_patient_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":101,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":102,"author":{"gitId":"Jerome-j"},"content":"The image below a failure of adding student due to missing phone tag.","lastModifiedDate":"2024-04-04"},{"lineNumber":103,"author":{"gitId":"Jerome-j"},"content":"![Add patient failure](images/patients/2bi_Cannot_Add_Patient_Missing_Phone_Tag_failure.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":104,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":105,"author":{"gitId":"Jerome-j"},"content":"The image below a failure of adding student due to duplicate email tag.","lastModifiedDate":"2024-04-04"},{"lineNumber":106,"author":{"gitId":"Jerome-j"},"content":"![Add patient failure](images/patients/2bii_Cannot_Add_Patient_Duplicate_Email_Tag_failure.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":107,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":108,"author":{"gitId":"tankh99"},"content":"**Validation**:","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"tankh99"},"content":"1. NAME","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"tankh99"},"content":"    1. No duplicate names are allowed. Names are lowercased and trimmed before duplicate comparison","lastModifiedDate":"2024-03-21"},{"lineNumber":111,"author":{"gitId":"tankh99"},"content":"2. PHONE_NUMBER","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"tankh99"},"content":"    1. Should be exactly 3 or 8 digits long","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"tankh99"},"content":"    2. Should start with 6, 8 or 9. (We ignore 3 since those are numbers that people wouldn\u0027t normally have)","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"Jerome-j"},"content":"    3. Note: This simplistic  validation allows for weird numbers like 666, but we allow this anyway since comprehensive number validating is too technically complex","lastModifiedDate":"2024-04-04"},{"lineNumber":115,"author":{"gitId":"tankh99"},"content":"3. EMAIL","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"tankh99"},"content":"    1. Should be a valid email address with the form `local-part@domain` where domain is at least 2 letters long","lastModifiedDate":"2024-03-21"},{"lineNumber":117,"author":{"gitId":"tankh99"},"content":"    2. All emails are stored in lowercase by default","lastModifiedDate":"2024-03-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"Jerome-j"},"content":"**Tip:** A patient can have any number of affiliations (including 0)","lastModifiedDate":"2024-03-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"Jerome-j"},"content":"* `addp n/Jerome Chua p/98765432 e/jerome@example.com a/depression`","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"Jerome-j"},"content":"* `addp n/Davinci Lim p/98731122 e/betsycrowe@example.com a/sad a/anxiety`","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"Jerome-j"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":130,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"tankh99"},"content":"**Tip:** Once the patient is created, the patient identifier `pid` will be permanently tagged to a patient,","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"Jerome-j"},"content":"and is not coalesced when other entries are deleted.","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"Jerome-j"},"content":"This is similar to SQL database behaviour where the auto-increment primary key goes on to the next value even if the transaction has failed. [Read more](https://stackoverflow.com/questions/10108593/mysql-autoincrement-value-increases-even-when-insertion-fails-due-to-error)","lastModifiedDate":"2024-04-04"},{"lineNumber":134,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"Jerome-j"},"content":"This means that if the CogniCare application initially contained of the items","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"Jerome-j"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":137,"author":{"gitId":"Jerome-j"},"content":"1. Caitlyn","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"Jerome-j"},"content":"2. Khang Hou","lastModifiedDate":"2024-03-20"},{"lineNumber":139,"author":{"gitId":"Jerome-j"},"content":"3. Jerome","lastModifiedDate":"2024-03-20"},{"lineNumber":140,"author":{"gitId":"Jerome-j"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"tankh99"},"content":"When Khang Hou is deleted, the patient ids are as below:","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"Jerome-j"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":145,"author":{"gitId":"Jerome-j"},"content":"1. Caitlyn","lastModifiedDate":"2024-03-20"},{"lineNumber":146,"author":{"gitId":"Jerome-j"},"content":"3. Jerome","lastModifiedDate":"2024-03-20"},{"lineNumber":147,"author":{"gitId":"Jerome-j"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":148,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"Jerome-j"},"content":"\u003c/box\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"Jerome-j"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":153,"author":{"gitId":"tankh99"},"content":"**Second Tip:** You may not add two patients with the same name even if they are in different case (i.e. \"DAVINCI    Lim\" vs \"Davinci Lim\").","lastModifiedDate":"2024-04-02"},{"lineNumber":154,"author":{"gitId":"Jerome-j"},"content":"\u003c/box\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":155,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":156,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":157,"author":{"gitId":"Jerome-j"},"content":"### Listing all patients : `queryp`","lastModifiedDate":"2024-04-03"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":159,"author":{"gitId":"tankh99"},"content":"Shows a list of all patients in the address book.","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":161,"author":{"gitId":"Jerome-j"},"content":"The image shows the successful `queryp` command","lastModifiedDate":"2024-04-04"},{"lineNumber":162,"author":{"gitId":"Jerome-j"},"content":"![Query patient without parameters](images/patients/3c_Query_with_no_parameters_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"Jerome-j"},"content":"### Listing selected patients that meets specified criterion / criteria : `queryp`","lastModifiedDate":"2024-04-03"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"tankh99"},"content":"Shows a list of all patients in the address book that matches _ALL_ the conditions that are specified.","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":168,"author":{"gitId":"Jerome-j"},"content":"Format: `queryp [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] …​`","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":170,"author":{"gitId":"Jerome-j"},"content":"The image shows the successful `queryp` command with all parameters specified.","lastModifiedDate":"2024-04-04"},{"lineNumber":171,"author":{"gitId":"Jerome-j"},"content":"![Query patients with all parameters](images/patients/3a_Query_with_all_parameters_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":174,"author":{"gitId":"Jerome-j"},"content":"For example: to find all the \"Jerome\" that are stored in the CogniCare application, the user may use the command","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"Jerome-j"},"content":"Format: `queryp n/Jerome …​`","lastModifiedDate":"2024-04-03"},{"lineNumber":176,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":177,"author":{"gitId":"Jerome-j"},"content":"The image shows the successful `queryp` command with only one parameter (name) specified.","lastModifiedDate":"2024-04-04"},{"lineNumber":178,"author":{"gitId":"Jerome-j"},"content":"![Add patient success](images/patients/3b_Query_with_name_only_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":179,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":180,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":181,"author":{"gitId":"Jerome-j"},"content":"For example: to find all the \"Jerome\"s that are stored in the CogniCare application, have a phone number that contains 987, and email using outlook, the user may use the command","lastModifiedDate":"2024-04-04"},{"lineNumber":182,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":183,"author":{"gitId":"Jerome-j"},"content":"Format: `queryp n/Jerome p/987 e/example.com ​`","lastModifiedDate":"2024-04-03"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"Jerome-j"},"content":"## Viewing statistics of tagged information","lastModifiedDate":"2024-04-04"},{"lineNumber":187,"author":{"gitId":"Jerome-j"},"content":"The image shows the (top 10) most popular tags sorted by how many patients with that respective tag.","lastModifiedDate":"2024-04-04"},{"lineNumber":188,"author":{"gitId":"Jerome-j"},"content":"Note that the command was entered to demonstrate that the count for the anxiety tag is the same as the ones in the CogniCare application.","lastModifiedDate":"2024-04-04"},{"lineNumber":189,"author":{"gitId":"Jerome-j"},"content":"![Viewing tags statistics](images/patients/3e_Query_via_tags-same_count_as_summary_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":190,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":191,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":192,"author":{"gitId":"Jerome-j"},"content":"### Editing a patient : `editp`","lastModifiedDate":"2024-04-03"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"Jerome-j"},"content":"Edits an existing patient in the address book.","lastModifiedDate":"2024-03-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"Jerome-j"},"content":"Format: `editp PATIENT_ID [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [a/AFFLIATED_WITH]…​`","lastModifiedDate":"2024-04-03"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"Jerome-j"},"content":"* Edits the patient at the specified `addp_ID`. The index refers to the index number shown in the displayed patient list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2024-04-03"},{"lineNumber":199,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"Jerome-j"},"content":"* When editing tags, the existing tags of the patient will be removed; i.e. adding of tags is not cumulative.","lastModifiedDate":"2024-03-26"},{"lineNumber":202,"author":{"gitId":"Jerome-j"},"content":"* The `patientId` will not be changed when you edit an individual\u0027s information.","lastModifiedDate":"2024-04-04"},{"lineNumber":203,"author":{"gitId":"Jerome-j"},"content":"* You can remove all the patient’s tags by typing `a/` without","lastModifiedDate":"2024-03-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"Jerome-j"},"content":"*  `editp 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2024-04-03"},{"lineNumber":208,"author":{"gitId":"Jerome-j"},"content":"*  `editp 2 n/Betsy Crower a/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2024-04-03"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":210,"author":{"gitId":"Jerome-j"},"content":"The image belows shows a successful message of an edit patient command.","lastModifiedDate":"2024-04-04"},{"lineNumber":211,"author":{"gitId":"Jerome-j"},"content":"![Edit patient success](images/patients/4a_Edit_student_name_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":213,"author":{"gitId":"Jerome-j"},"content":"The image belows shows a failed message of an edit patient command (when an invalid index is specified).","lastModifiedDate":"2024-04-04"},{"lineNumber":214,"author":{"gitId":"Jerome-j"},"content":"![Edit patient success](images/patients/4b_Edit_invalid_index_failure.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":216,"author":{"gitId":"Jerome-j"},"content":"The image belows shows a failed message of an edit patient command (when no index is specified).","lastModifiedDate":"2024-04-04"},{"lineNumber":217,"author":{"gitId":"Jerome-j"},"content":"![Edit patient success](images/patients/4c_Edit_missing_index_failure.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"Jerome-j"},"content":"### Deleting a patient : `deletep`","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"tankh99"},"content":"Deletes the specified patient from the address book from the specified patient index.","lastModifiedDate":"2024-04-02"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"Jerome-j"},"content":"The image belows shows a successful message of a delete patient command (when no index is specified).","lastModifiedDate":"2024-04-04"},{"lineNumber":225,"author":{"gitId":"Jerome-j"},"content":"![Delete patient success](images/patients/4d_Delete_patient_successful.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":226,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":227,"author":{"gitId":"Jerome-j"},"content":"The output failed message of a delete patient command (when no index or invalid index is specified) is similar to when the edit command fails.","lastModifiedDate":"2024-04-04"},{"lineNumber":228,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":229,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":230,"author":{"gitId":"Jerome-j"},"content":"Format: `deletep INDEX`","lastModifiedDate":"2024-04-03"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"Jerome-j"},"content":"* Deletes the patient at the specified `INDEX`.","lastModifiedDate":"2024-03-26"},{"lineNumber":233,"author":{"gitId":"Jerome-j"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2024-03-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"Jerome-j"},"content":"* `list` followed by `deletep 90` deletes the patient with the patientId of 90 in the address book.","lastModifiedDate":"2024-04-03"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"caitlyntang"},"content":"### Adding an appointment: `adda`","lastModifiedDate":"2024-04-03"},{"lineNumber":240,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":241,"author":{"gitId":"caitlyntang"},"content":"Adds an appointment to the address book.","lastModifiedDate":"2024-03-21"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":243,"author":{"gitId":"caitlyntang"},"content":"Format: `adda pid/PATIENT_ID sd/START_DATE_TIME ed/END_DATE_TIME [att/ATTEND] [s/SCORE] [ad/APPOINTMENT_DESCRIPTION]`","lastModifiedDate":"2024-04-03"},{"lineNumber":244,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":245,"author":{"gitId":"caitlyntang"},"content":"* Format of date time is yyyy-MM-dd HH:mm.","lastModifiedDate":"2024-03-21"},{"lineNumber":246,"author":{"gitId":"tankh99"},"content":"* Once the patient is created, the appointment identifier `aid` will be permanently tagged to an appointment, and is not coalesced when other entries are deleted.","lastModifiedDate":"2024-04-02"},{"lineNumber":247,"author":{"gitId":"tankh99"},"content":"* You may not add two appointments with the same date and time even if they are for different patients.","lastModifiedDate":"2024-04-02"},{"lineNumber":248,"author":{"gitId":"tankh99"},"content":"* SCORE refers to the rating that the patient gives at the end of each appointment. This score represents their satisfaction levels. The higher satisfaction level, the more likely they are to be discharged","lastModifiedDate":"2024-04-10"},{"lineNumber":249,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":250,"author":{"gitId":"caitlyntang"},"content":"Examples:","lastModifiedDate":"2024-03-21"},{"lineNumber":251,"author":{"gitId":"caitlyntang"},"content":"* `appointment pid/1 d/2022-12-12 12:00`","lastModifiedDate":"2024-03-21"},{"lineNumber":252,"author":{"gitId":"caitlyntang"},"content":"* `appointment pid/1 d/2022-12-12 13:00 att/false`","lastModifiedDate":"2024-03-21"},{"lineNumber":253,"author":{"gitId":"caitlyntang"},"content":"* `appointment pid/1 d/2022-12-12 14:00 att/true ad/Patient attended the appointment.`","lastModifiedDate":"2024-03-21"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":255,"author":{"gitId":"caitlyntang"},"content":"The screenshot below shows a successful operation:","lastModifiedDate":"2024-04-03"},{"lineNumber":256,"author":{"gitId":"caitlyntang"},"content":"![add-success.png](images%2Fappointments%2Fadd-success.png)","lastModifiedDate":"2024-04-03"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":258,"author":{"gitId":"caitlyntang"},"content":"The screenshot below shows a failed operation due to another appointment being scheduled for the same date and time:","lastModifiedDate":"2024-04-03"},{"lineNumber":259,"author":{"gitId":"caitlyntang"},"content":"![add-invalid.png](images%2Fappointments%2Fadd-invalid.png)","lastModifiedDate":"2024-04-03"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":261,"author":{"gitId":"tankh99"},"content":"**Validation**:","lastModifiedDate":"2024-03-21"},{"lineNumber":262,"author":{"gitId":"tankh99"},"content":"1. PATIENT_ID","lastModifiedDate":"2024-03-21"},{"lineNumber":263,"author":{"gitId":"caitlyntang"},"content":"   1. No non-existing patient IDs are allowed. Checks are made against the patient list","lastModifiedDate":"2024-04-03"},{"lineNumber":264,"author":{"gitId":"tankh99"},"content":"   2. Patient ID given must exist in the current patient list.","lastModifiedDate":"2024-03-21"},{"lineNumber":265,"author":{"gitId":"tankh99"},"content":"   3. Patient ID must be a positive integer.","lastModifiedDate":"2024-03-21"},{"lineNumber":266,"author":{"gitId":"tankh99"},"content":"2. DATE_TIME","lastModifiedDate":"2024-03-21"},{"lineNumber":267,"author":{"gitId":"tankh99"},"content":"   1. No two appointments can share the exact same date and time, even if they differ by other attributes like different patient IDs","lastModifiedDate":"2024-03-21"},{"lineNumber":268,"author":{"gitId":"caitlyntang"},"content":"   2. The start date and time cannot be before the end date and time.","lastModifiedDate":"2024-04-03"},{"lineNumber":269,"author":{"gitId":"tankh99"},"content":"3. ATTEND","lastModifiedDate":"2024-03-21"},{"lineNumber":270,"author":{"gitId":"tankh99"},"content":"   1. Must be either `true` or `false` (case-insensitive)","lastModifiedDate":"2024-03-21"},{"lineNumber":271,"author":{"gitId":"caitlyntang"},"content":"4. SCORE","lastModifiedDate":"2024-04-03"},{"lineNumber":272,"author":{"gitId":"caitlyntang"},"content":"   1. The score must be between 1 and 5 (inclusive).","lastModifiedDate":"2024-04-03"},{"lineNumber":273,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":274,"author":{"gitId":"caitlyntang"},"content":"### Listing all appointments: `querya`","lastModifiedDate":"2024-04-03"},{"lineNumber":275,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":276,"author":{"gitId":"vnnamng"},"content":"Shows a list of all appointments in CogniCare. Can be filtered by multiple criteria.","lastModifiedDate":"2024-04-03"},{"lineNumber":277,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":278,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":279,"author":{"gitId":"caitlyntang"},"content":"Format: `querya [pid/PATIENT_ID] [n/PATIENT_NAME] [aid/APPOINTMENT_ID]`","lastModifiedDate":"2024-04-03"},{"lineNumber":280,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":281,"author":{"gitId":"tankh99"},"content":"Examples:","lastModifiedDate":"2024-03-21"},{"lineNumber":282,"author":{"gitId":"caitlyntang"},"content":"* `querya` shows all appointments in the address book.","lastModifiedDate":"2024-04-03"},{"lineNumber":283,"author":{"gitId":"caitlyntang"},"content":"* `querya pid/1` shows all appointments for the patient with the patientId of 1 in the address book.","lastModifiedDate":"2024-04-03"},{"lineNumber":284,"author":{"gitId":"caitlyntang"},"content":"* `querya aid/90` shows the appointment with the appointmentId of 90 in the address book.","lastModifiedDate":"2024-04-03"},{"lineNumber":285,"author":{"gitId":"caitlyntang"},"content":"* `querya n/Jer` shows all appointments whose patient\u0027s name contains \"Jer\" in the address book.","lastModifiedDate":"2024-04-03"},{"lineNumber":286,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":287,"author":{"gitId":"caitlyntang"},"content":"The screenshot below show a successful query of all appointments:","lastModifiedDate":"2024-04-03"},{"lineNumber":288,"author":{"gitId":"caitlyntang"},"content":"![5a_Query_appointment_no-parameter_success.png](images%2Fappointments%2F5a_Query_appointment_no-parameter_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":289,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":290,"author":{"gitId":"caitlyntang"},"content":"The screenshot below show a successful query of appointments using patient id:","lastModifiedDate":"2024-04-03"},{"lineNumber":291,"author":{"gitId":"caitlyntang"},"content":"![5b_Query_appointment_with_pid_success.png](images%2Fappointments%2F5b_Query_appointment_with_pid_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":292,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":293,"author":{"gitId":"vnnamng"},"content":"### Filter appointments by date time: `filter`","lastModifiedDate":"2024-04-04"},{"lineNumber":294,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":295,"author":{"gitId":"vnnamng"},"content":"Show list of appointments in a specific date time range. This includes the appointments that starts or ends in the date time range or appointments that starts before and ends after the date time range.","lastModifiedDate":"2024-04-03"},{"lineNumber":296,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":297,"author":{"gitId":"vnnamng"},"content":"Format: `filter [sd/START_DATETIME] [ed/END_DATETIME]`","lastModifiedDate":"2024-04-04"},{"lineNumber":298,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":299,"author":{"gitId":"vnnamng"},"content":"Both `START_DATETIME` and `END_DATETIME` are optional. If only `START_DATETIME` is provided, all appointments that starts on or after the `START_DATETIME` will be shown. If only `END_DATETIME` is provided, all appointments that ends on or before the `END_DATETIME` will be shown.","lastModifiedDate":"2024-04-04"},{"lineNumber":300,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":301,"author":{"gitId":"vnnamng"},"content":"Examples:","lastModifiedDate":"2024-04-03"},{"lineNumber":302,"author":{"gitId":"vnnamng"},"content":"* `filter sd/2022-12-12 12:00 ed/2022-12-12 14:00` shows all appointments starts or ends in the date time range of 12pm to 2pm on 12 December 2022. Any appointments that starts before 12pm and ends after 2pm will also be shown.","lastModifiedDate":"2024-04-04"},{"lineNumber":303,"author":{"gitId":"vnnamng"},"content":"* `filter sd/2022-12-12 12:00` shows all appointments that starts on or after 12pm on 12 December 2022.","lastModifiedDate":"2024-04-04"},{"lineNumber":304,"author":{"gitId":"vnnamng"},"content":"* `filter ed/2022-12-12 14:00` shows all appointments that ends on or before 2pm on 12 December 2022.","lastModifiedDate":"2024-04-04"},{"lineNumber":305,"author":{"gitId":"vnnamng"},"content":"* `filter` shows all appointments in the address book.","lastModifiedDate":"2024-04-04"},{"lineNumber":306,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":307,"author":{"gitId":"vnnamng"},"content":"**Validation**:","lastModifiedDate":"2024-04-03"},{"lineNumber":308,"author":{"gitId":"vnnamng"},"content":"1. START_DATETIME and END_DATETIME","lastModifiedDate":"2024-04-03"},{"lineNumber":309,"author":{"gitId":"vnnamng"},"content":"   1. Must be in the format of yyyy-MM-dd HH:mm.","lastModifiedDate":"2024-04-03"},{"lineNumber":310,"author":{"gitId":"vnnamng"},"content":"   2. END_DATETIME must be after START_DATETIME.","lastModifiedDate":"2024-04-03"},{"lineNumber":311,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":312,"author":{"gitId":"vnnamng"},"content":"The screenshot below show a successful filter appointments using both date time range:","lastModifiedDate":"2024-04-04"},{"lineNumber":313,"author":{"gitId":"Jerome-j"},"content":"![Filter patient with start and end date](images/appointments/filter/7a_Filter_appointment_start_end_success-nam.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":314,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":315,"author":{"gitId":"Jerome-j"},"content":"The screenshots below show a successful filter appointments using one date time range:","lastModifiedDate":"2024-04-04"},{"lineNumber":316,"author":{"gitId":"Jerome-j"},"content":"![Filter patient with start](images/appointments/filter/7b_Filter_appointment_start_success-nam.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":317,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":318,"author":{"gitId":"Jerome-j"},"content":"![Filter patient with end](images/appointments/filter/7c_Filter_appointment_end_success-nam.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":319,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":320,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":321,"author":{"gitId":"vnnamng"},"content":"The screenshot below show a unsuccessful filter appointments due to invalid date time range:","lastModifiedDate":"2024-04-04"},{"lineNumber":322,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":323,"author":{"gitId":"Jerome-j"},"content":"![Filter patient failure](images/appointments/filter/7d_Filter_appointment_start_later_than_end_fail-nam.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":324,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":325,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":326,"author":{"gitId":"caitlyntang"},"content":"### Editing an appointments: `edita`","lastModifiedDate":"2024-04-03"},{"lineNumber":327,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":328,"author":{"gitId":"caitlyntang"},"content":"Edits an appointment in CogniCare using the specified appointment index.","lastModifiedDate":"2024-04-03"},{"lineNumber":329,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":330,"author":{"gitId":"caitlyntang"},"content":"Format: `edita APPOINTMENT_INDEX [pid/PATIENT_ID] [sd/START_DATE_TIME] [ed/END_DATE_TIME] [att/ATTEND] [s/SCORE] [ad/APPOINTMENT_DESCTIPTION]`","lastModifiedDate":"2024-04-03"},{"lineNumber":331,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":332,"author":{"gitId":"caitlyntang"},"content":"* Edits the appointment at the specified `APPOINTMENT_ID`. The index refers to the index number shown in the displayed appointment list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2024-04-03"},{"lineNumber":333,"author":{"gitId":"caitlyntang"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2024-04-03"},{"lineNumber":334,"author":{"gitId":"caitlyntang"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2024-04-03"},{"lineNumber":335,"author":{"gitId":"caitlyntang"},"content":"* The `APPOINTMENT_ID` will not be changed when you edit an appointment\u0027s information.","lastModifiedDate":"2024-04-03"},{"lineNumber":336,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":337,"author":{"gitId":"tankh99"},"content":"Examples:","lastModifiedDate":"2024-03-21"},{"lineNumber":338,"author":{"gitId":"caitlyntang"},"content":"* `edita 1 pid/1` edits the appointment with appointment index 1 with patient id 2.","lastModifiedDate":"2024-04-03"},{"lineNumber":339,"author":{"gitId":"caitlyntang"},"content":"* `edita 1 sd/2024-04-01 10:00` edits the start date and time of the appointment with appointment index 1 to 10am, 1 April 2024.","lastModifiedDate":"2024-04-03"},{"lineNumber":340,"author":{"gitId":"caitlyntang"},"content":"* `edita 1 att/true` edits the attended status of the appointment with appointment index 1 to true.","lastModifiedDate":"2024-04-03"},{"lineNumber":341,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":342,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":343,"author":{"gitId":"caitlyntang"},"content":"### Deleting an appointment : `deletea`","lastModifiedDate":"2024-04-03"},{"lineNumber":344,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":345,"author":{"gitId":"caitlyntang"},"content":"Deletes the specified appointment from the address book using the specified appointment index.","lastModifiedDate":"2024-03-21"},{"lineNumber":346,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":347,"author":{"gitId":"caitlyntang"},"content":"Format: `deletea INDEX`","lastModifiedDate":"2024-04-03"},{"lineNumber":348,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":349,"author":{"gitId":"caitlyntang"},"content":"* Deletes the appointment at the specified `INDEX`.","lastModifiedDate":"2024-03-21"},{"lineNumber":350,"author":{"gitId":"caitlyntang"},"content":"* The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2024-03-21"},{"lineNumber":351,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2024-03-21"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":353,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2024-03-21"},{"lineNumber":354,"author":{"gitId":"caitlyntang"},"content":"* `querya` followed by `deletea 90` deletes the appointment with the appointmentId of 90 in the address book.","lastModifiedDate":"2024-04-03"},{"lineNumber":355,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":356,"author":{"gitId":"caitlyntang"},"content":"The screenshot below show a successful operation:","lastModifiedDate":"2024-04-03"},{"lineNumber":357,"author":{"gitId":"caitlyntang"},"content":"![6a_Delete_appointment_success.png](images%2Fappointments%2F6a_Delete_appointment_success.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":358,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":359,"author":{"gitId":"caitlyntang"},"content":"The screenshot below show a failed operation due to invalid appointment index:","lastModifiedDate":"2024-04-03"},{"lineNumber":360,"author":{"gitId":"caitlyntang"},"content":"![6b_Delete_appointment_failure.png](images%2Fappointments%2F6b_Delete_appointment_failure.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":361,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":362,"author":{"gitId":"tankh99"},"content":"### Reporting Patient Feedback Statistics: `reportf`","lastModifiedDate":"2024-04-03"},{"lineNumber":363,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":364,"author":{"gitId":"tankh99"},"content":"Shows the average feedback score per patient for all appointments given a specified date range.","lastModifiedDate":"2024-04-03"},{"lineNumber":365,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":366,"author":{"gitId":"tankh99"},"content":"Format: `reportf [sd/DATE] [ed/DATE]`","lastModifiedDate":"2024-04-03"},{"lineNumber":367,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":368,"author":{"gitId":"tankh99"},"content":"- Note that`sd/` and `ed/` expect dates and not datetimes","lastModifiedDate":"2024-04-03"},{"lineNumber":369,"author":{"gitId":"tankh99"},"content":"- By default, if either `/sd` or `/ed` are left blank, their values will default to the minimum and maximum datetimes respectively","lastModifiedDate":"2024-04-03"},{"lineNumber":370,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":371,"author":{"gitId":"tankh99"},"content":"**Examples**","lastModifiedDate":"2024-04-03"},{"lineNumber":372,"author":{"gitId":"tankh99"},"content":"1. `reportf` - Generates a report using all appointments","lastModifiedDate":"2024-04-04"},{"lineNumber":373,"author":{"gitId":"tankh99"},"content":"![alt text](\u003cimages/reportf/0a_reportf.png\u003e)","lastModifiedDate":"2024-04-04"},{"lineNumber":374,"author":{"gitId":"tankh99"},"content":"1. `reportf sd/2024-02-18` - Generates a report with all appointments that start from 18 Feb 2024","lastModifiedDate":"2024-04-04"},{"lineNumber":375,"author":{"gitId":"tankh99"},"content":"![alt text](\u003cimages/reportf/0b_reportf_withsd.png\u003e)","lastModifiedDate":"2024-04-04"},{"lineNumber":376,"author":{"gitId":"tankh99"},"content":"1. `reportf ed/2024-02-20` - Generates a report with all appointments that end before 20 Feb 2024","lastModifiedDate":"2024-04-04"},{"lineNumber":377,"author":{"gitId":"tankh99"},"content":"![alt text](\u003cimages/reportf/0c_reportf_ed.png\u003e)","lastModifiedDate":"2024-04-04"},{"lineNumber":378,"author":{"gitId":"tankh99"},"content":"1. `reportf sd/2024-02-18 ed/2024-02-20` - Generates a report with all appointments that start from 18 Feb 2024 and end before 20 Feb 2024.","lastModifiedDate":"2024-04-04"},{"lineNumber":379,"author":{"gitId":"tankh99"},"content":"![alt text](\u003cimages/reportf/0d_reportf_sd_ed.png\u003e)","lastModifiedDate":"2024-04-04"},{"lineNumber":380,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":381,"author":{"gitId":"tankh99"},"content":"**Notes**","lastModifiedDate":"2024-04-03"},{"lineNumber":382,"author":{"gitId":"tankh99"},"content":"1. When filtering using `reportf`, the appointments list is also filtered. This is intended behaviour because the patient feedback report data is entirely dependent on the Patient and Appointment lists.","lastModifiedDate":"2024-04-04"},{"lineNumber":383,"author":{"gitId":"tankh99"},"content":"2. `reportf` allows for loose date ranges. E.g. there is an appointment from 18 Feb to 20 Feb 2024. Calling `reportf sd/2024-02-19 ed/2024-02-21` will include this report.","lastModifiedDate":"2024-04-03"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":385,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"Clears all entries from the CogniCare application.","lastModifiedDate":"2024-03-20"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"Jerome-j"},"content":"CogniCare data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2024-04-04"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":403,"author":{"gitId":"Jerome-j"},"content":"CogniCare data is saved automatically as a JSON file `[JAR file location]/data/patientList.json` and `[JAR file location]/data/appointmentList.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":405,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":407,"author":{"gitId":"-"},"content":"**Caution:**","lastModifiedDate":"2023-09-12"},{"lineNumber":408,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, CogniCare will discard all data and start with an empty data file at the next run.  Hence, it is recommended to take a backup of the file before editing it.\u003cbr\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":409,"author":{"gitId":"-"},"content":"Furthermore, certain edits can cause the CogniCare to behave in unexpected ways (e.g., if a value entered is outside the acceptable range). Therefore, edit the data file only if you are confident that you can update it correctly.","lastModifiedDate":"2024-03-20"},{"lineNumber":410,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":412,"author":{"gitId":"tankh99"},"content":"### Navigating through history of commands","lastModifiedDate":"2024-03-21"},{"lineNumber":413,"author":{"gitId":"tankh99"},"content":"Press UP or DOWN to navigate your history of written commands. ","lastModifiedDate":"2024-03-21"},{"lineNumber":414,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":415,"author":{"gitId":"tankh99"},"content":"UP - Goes to the previous command in the history","lastModifiedDate":"2024-03-21"},{"lineNumber":416,"author":{"gitId":"tankh99"},"content":"DOWN - Goes to the next command in the history","lastModifiedDate":"2024-03-21"},{"lineNumber":417,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":418,"author":{"gitId":"tankh99"},"content":"Note: Upon reaching the start of the history, pressing UP further will play a sound to indicate this fact","lastModifiedDate":"2024-03-21"},{"lineNumber":419,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":420,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":425,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":426,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CogniCare home folder.","lastModifiedDate":"2024-03-20"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":437,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":439,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":441,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"Jerome-j"},"content":"| Action                                                | Format, Examples                                                                                                                                                                                                   |","lastModifiedDate":"2024-03-20"},{"lineNumber":444,"author":{"gitId":"tankh99"},"content":"|-------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-04-10"},{"lineNumber":445,"author":{"gitId":"Jerome-j"},"content":"| **Add a patient**                                     | `addp n/NAME p/PHONE_NUMBER e/EMAIL [a/AFFLIATED_WITH]…​` \u003cbr\u003e e.g., `addp n/Jerome Chua p/98765432 e/jerome@example.com a/depression` or `addp n/Davinci Lim p/98731122 e/betsycrowe@example.com a/sad a/anxiety` |","lastModifiedDate":"2024-04-03"},{"lineNumber":446,"author":{"gitId":"tankh99"},"content":"| **Query patients**                                    | `queryp [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] …​`\u003cbr\u003e e.g., `queryp n/Jerome p/987 e/example.com​`                                                                                                                   |","lastModifiedDate":"2024-04-10"},{"lineNumber":447,"author":{"gitId":"tankh99"},"content":"| **Delete patient**                                    | `deletep PATIENT_ID`\u003cbr\u003e e.g., `deletep 3`                                                                                                                                                                         |","lastModifiedDate":"2024-04-10"},{"lineNumber":448,"author":{"gitId":"tankh99"},"content":"| **Edit patient**                                      | `editp PATIENT_ID [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/AFFLIATED_WITH]…​`editp 1 p/91234567 e/johndoe@example.com`                                                                                               |","lastModifiedDate":"2024-04-10"},{"lineNumber":449,"author":{"gitId":"Jerome-j"},"content":"| **Add an appointment**                                | `adda pid/PATIENT_ID d/DATE_TIME [att/ATTEND] [ad/APPOINTMENT_DESCRIPTION]`                                                                                                                                        |","lastModifiedDate":"2024-04-04"},{"lineNumber":450,"author":{"gitId":"Jerome-j"},"content":"| **Query appointments**                                | `querya [pid/PATIENT_ID] [n/PATIENT_NAME] [aid/APPOINTMENT_ID]`                                                                                                                                                    |","lastModifiedDate":"2024-04-04"},{"lineNumber":451,"author":{"gitId":"Jerome-j"},"content":"| **Delete an appointment**                             | `deletep aid/APPOINTMENT_ID`                                                                                                                                                                                       |","lastModifiedDate":"2024-04-03"},{"lineNumber":452,"author":{"gitId":"tankh99"},"content":"| **Report patient feedback**                           | `reportf [sd/DATE] [ed/[DATE]]`                                                                                                                                                                                    |","lastModifiedDate":"2024-04-10"},{"lineNumber":453,"author":{"gitId":"Jerome-j"},"content":"| **Help**                                              | `help`                                                                                                                                                                                                             |","lastModifiedDate":"2024-03-20"},{"lineNumber":454,"author":{"gitId":"tankh99"},"content":"| **Delete all entries from the CogniCare application** | `clear`                                                                                                                                                                                                            |","lastModifiedDate":"2024-04-10"},{"lineNumber":455,"author":{"gitId":"tankh99"},"content":"| **Exit Application**                                  | `exit`                                                                                                                                                                                                             |","lastModifiedDate":"2024-04-10"},{"lineNumber":456,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"caitlyntang":70,"Jerome-j":120,"tankh99":74,"vnnamng":24,"-":168}},{"path":"docs/_markbind/layouts/default.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003chead-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003clink rel\u003d\"stylesheet\" href\u003d\"{{baseUrl}}/stylesheets/main.css\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c/head-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cheader sticky\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003cnavbar type\u003d\"dark\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003ca slot\u003d\"brand\" href\u003d\"{{baseUrl}}/index.html\" title\u003d\"Home\" class\u003d\"navbar-brand\"\u003eCogniCare\u003c/a\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/index.html\" class\u003d\"nav-link\"\u003eHome\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/UserGuide.html\" class\u003d\"nav-link\"\u003eUser Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/DeveloperGuide.html\" class\u003d\"nav-link\"\u003eDeveloper Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/AboutUs.html\" class\u003d\"nav-link\"\u003eAbout Us\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    \u003cli\u003e\u003ca href\u003d\"https://github.com/AY2324S2-CS2103-F08-2/tp\" target\u003d\"_blank\" class\u003d\"nav-link\"\u003e\u003cmd\u003e:fab-github:\u003c/md\u003e\u003c/a\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cli slot\u003d\"right\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cform class\u003d\"navbar-form\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003csearchbar :data\u003d\"searchData\" placeholder\u003d\"Search\" :on-hit\u003d\"searchCallback\" menu-align-right\u003e\u003c/searchbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003c/form\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/navbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003c/header\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"flex-body\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"site-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"site-nav-top\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"fw-bold mb-2\" style\u003d\"font-size: 1.25rem;\"\u003eSite Map\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003csite-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* [Home]({{ baseUrl }}/index.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* [User Guide]({{ baseUrl }}/UserGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * [Quick Start]({{ baseUrl }}/UserGuide.html#quick-start)","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * [Features]({{ baseUrl }}/UserGuide.html#features)","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * [FAQ]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  * [Command Summary]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* [Developer Guide]({{ baseUrl }}/DeveloperGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  * [Acknowledgements]({{ baseUrl }}/DeveloperGuide.html#acknowledgements)","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * [Setting Up]({{ baseUrl }}/DeveloperGuide.html#setting-up-getting-started)","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * [Design]({{ baseUrl }}/DeveloperGuide.html#design)","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * [Implementation]({{ baseUrl }}/DeveloperGuide.html#implementation)","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * [Documentation, logging, testing, configuration, dev-ops]({{ baseUrl }}/DeveloperGuide.html#documentation-logging-testing-configuration-dev-ops)","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * [Appendix: Requirements]({{ baseUrl }}/DeveloperGuide.html#appendix-requirements)","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  * [Appendix: Instructions for manual testing]({{ baseUrl }}/DeveloperGuide.html#appendix-instructions-for-manual-testing)","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Tutorials","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * [Tracing code]({{ baseUrl }}/tutorials/TracingCode.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  * [Adding a command]({{ baseUrl }}/tutorials/AddRemark.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  * [Removing Fields]({{ baseUrl }}/tutorials/RemovingFields.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [About Us]({{ baseUrl }}/AboutUs.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u003c/site-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  \u003cdiv id\u003d\"content-wrapper\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    {{ content }}","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"page-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u003cpage-nav /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003cscroll-top-button\u003e\u003c/scroll-top-button\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003cfooter\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u003c!-- Support MarkBind by including a link to us on your landing page! --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"text-center\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    \u003csmall\u003e[\u003cmd\u003e**Powered by**\u003c/md\u003e \u003cimg src\u003d\"https://markbind.org/favicon.ico\" width\u003d\"30\"\u003e {{MarkBind}}, generated on {{timestamp}}]\u003c/small\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/footer\u003e","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"tankh99":1,"-":66}},{"path":"docs/diagrams/ArchitectureDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include \u003coffice/Concepts/globe_internet\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"!include \u003coffice/Concepts/documents\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"!include \u003coffice/Users/user\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package \" \"\u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    Class UI UI_COLOR","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    Class Logic LOGIC_COLOR","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    Class Storage STORAGE_COLOR","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    Class Model MODEL_COLOR","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    Class MainApp #grey","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    Class MainWindow #grey","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    Class Parser LOGIC_COLOR_T2","lastModifiedDate":"2024-04-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class \"\u003c$documents\u003e\" as File UI_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"MainApp -[#grey]-\u003e UI","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"UI -right[#grey]-\u003e MainWindow","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"UI -down[#green]-\u003e Logic","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"Storage -[STORAGE_COLOR].\u003e Model","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"Storage .right[STORAGE_COLOR].\u003eFile","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"\u0027 Command .right[LOGIC_COLOR_T2]-\u003e Model","lastModifiedDate":"2024-04-06"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"Parser -right[LOGIC_COLOR_T2]-\u003e Model","lastModifiedDate":"2024-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Logic -down[#blue]-\u003e Model","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"Logic -right[#blue]-\u003e Storage","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"Logic -down[#blue]-\u003e Parser","lastModifiedDate":"2024-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"User ..\u003e MainApp","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"tankh99":14,"-":21}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"logic -[LOGIC_COLOR]\u003e model : deletePatient(p)","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Jerome-j":1,"-":38}},{"path":"docs/diagrams/BetterModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"CogniCare *-right-\u003e \"1\" UniquePatientList","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"CogniCare *-right-\u003e \"1\" UniqueTagList","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"UniqueAliasList -[hidden]down- UniquePatientList","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"UniqueAliasList -[hidden]down- UniquePatientList","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"UniqueAliasList -right-\u003e \"*\" Tag","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"UniquePatientList -right-\u003e Patient","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"Patient -up-\u003e \"0 .. *\" Tag","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"Patient \"1\" *--\u003e \"1\" Name","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"Patient \"1\" *--\u003e \"1\" Phone","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"Patient *--\u003e \"Email Address\"","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"Patient \"0\" *--\u003e \"1\" studentId","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Jerome-j":9,"-":14}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"participant \":CommandParser\" as CommandParser LOGIC_COLOR","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"participant \"m:Model\" as Model MODEL_COLOR","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"[-\u003e LogicManager : execute(\"deletep 1\")","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"LogicManager -\u003e CommandParser : parseCommand(\"deletep 1\")","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"activate CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"create DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"CommandParser -\u003e DeleteCommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"DeleteCommandParser --\u003e CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"CommandParser -\u003e DeleteCommandParser : parse(\"1\")","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"create DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser :","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"DeleteCommandParser --\u003e CommandParser : d","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"DeleteCommandParser -[hidden]-\u003e CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"CommandParser --\u003e LogicManager : d","lastModifiedDate":"2024-04-10"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"deactivate CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute(m)","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"DeleteCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"DeleteCommand -\u003e Model : getFilteredAppointmentList()","lastModifiedDate":"2024-04-10"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"DeleteCommand -\u003e Model : getIdTracker()","lastModifiedDate":"2024-04-10"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"Model --\u003e DeleteCommand: current running ID","lastModifiedDate":"2024-04-10"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"DeleteCommand -\u003e Model : deletePerson(1)","lastModifiedDate":"2024-04-10"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"Model --\u003e DeleteCommand: Optional.of(personToDelete)","lastModifiedDate":"2024-04-10"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"DeleteCommand -\u003e Model : deleteAppointment()","lastModifiedDate":"2024-04-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : r","lastModifiedDate":"2024-02-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Jerome-j":1,"tankh99":17,"-":56}},{"path":"docs/diagrams/EditAppointmentSequenceDiagra.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"@startuml","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"!include style.puml","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"participant \":PatientListParser\" as PatientListParser LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"participant \":EditAppointmentCommandParser\" as EditAppointmentCommandParser LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"participant \"ead:EditAppointmentDescriptor\" as EditAppointmentDescriptor LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"participant \"e:EditAppointmentCommand\" as EditAppointmentCommand LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"end box","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"participant \"m:Model\" as Model MODEL_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"end box","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"[-\u003e LogicManager : execute(\"edita pid/1 aid/1 \\nsd/2020-01-01 12:00 ed/2020-01-01 13:00\")","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"activate LogicManager","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"LogicManager -\u003e PatientListParser : parseCommand(\"edita pid/1 aid/1\" + arguments)","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"activate PatientListParser","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"create EditAppointmentCommandParser","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"PatientListParser -\u003e EditAppointmentCommandParser","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"activate EditAppointmentCommandParser","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"EditAppointmentCommandParser --\u003e PatientListParser","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"deactivate EditAppointmentCommandParser","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"PatientListParser -\u003e EditAppointmentCommandParser : parse(arguments)","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"activate EditAppointmentCommandParser","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"create EditAppointmentDescriptor","lastModifiedDate":"2024-04-09"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"note right of EditAppointmentDescriptor : Methods in EditPersonDescriptor such as setName and\\n setPhone may be used to create a defensive copy \\nof the patient that is to be updated.","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"EditAppointmentCommandParser -\u003e EditAppointmentDescriptor : new EditPersonDescriptor()","lastModifiedDate":"2024-04-09"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"activate EditAppointmentDescriptor","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"EditAppointmentDescriptor -\u003e EditAppointmentCommandParser : ead","lastModifiedDate":"2024-04-09"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"deactivate EditAppointmentDescriptor","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"create EditAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"EditAppointmentCommandParser -\u003e EditAppointmentCommand : new EditAppointmentCommand(appointment index, editPersonDescriptor)","lastModifiedDate":"2024-04-09"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"activate EditAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"EditAppointmentCommand --\u003e EditAppointmentCommandParser","lastModifiedDate":"2024-04-09"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"deactivate EditAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"EditAppointmentCommandParser --\u003e PatientListParser : e","lastModifiedDate":"2024-04-09"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"deactivate EditAppointmentCommandParser","lastModifiedDate":"2024-04-09"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"PatientListParser --\u003e LogicManager : e","lastModifiedDate":"2024-04-09"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"deactivate PatientListParser","lastModifiedDate":"2024-04-09"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"LogicManager -\u003e EditAppointmentCommand : execute","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"activate EditAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"EditAppointmentCommand -\u003e Model : updateFilterAppointmentList","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"activate Model","lastModifiedDate":"2024-04-09"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"Model --\u003e EditAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"deactivate Model","lastModifiedDate":"2024-04-09"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"EditAppointmentCommand -\u003e CommandResult: new CommandResult()","lastModifiedDate":"2024-04-09"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"activate CommandResult","lastModifiedDate":"2024-04-09"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"CommandResult --\u003e EditAppointmentCommand: r","lastModifiedDate":"2024-04-09"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"deactivate CommandResult","lastModifiedDate":"2024-04-09"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"EditAppointmentCommand --\u003e LogicManager : r","lastModifiedDate":"2024-04-09"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"deactivate EditAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"[\u003c--LogicManager : command successful","lastModifiedDate":"2024-04-09"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"deactivate LogicManager","lastModifiedDate":"2024-04-09"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"@enduml","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"vnnamng":72}},{"path":"docs/diagrams/EditPatientSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"@startuml","lastModifiedDate":"2024-04-01"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"!include style.puml","lastModifiedDate":"2024-04-01"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-04-01"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"participant \":CommandParser\" as CommandParser LOGIC_COLOR","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"participant \":EditPatientCommandParser\" as EditPatientCommandParser LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"participant \":EditPersonDescriptor\" as EditPersonDescriptor LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"participant \":EditPatientCommand\" as EditPatientCommand LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"end box","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"participant \"m:Model\" as Model MODEL_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"end box","lastModifiedDate":"2024-04-01"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"[-\u003e LogicManager : execute(\"edit\"p + \"studentId\" + \" n/Jerome p/123 e/gmail.com a/depression\")","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"activate LogicManager","lastModifiedDate":"2024-04-01"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"LogicManager -\u003e CommandParser : parseCommand(\"editp\" + \"studentId\" + arguments)","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"activate CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"create EditPatientCommandParser","lastModifiedDate":"2024-04-01"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"CommandParser -\u003e EditPatientCommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"activate EditPatientCommandParser","lastModifiedDate":"2024-04-01"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"EditPatientCommandParser --\u003e CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"deactivate EditPatientCommandParser","lastModifiedDate":"2024-04-01"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"CommandParser -\u003e EditPatientCommandParser : parse(arguments)","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"activate EditPatientCommandParser","lastModifiedDate":"2024-04-01"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"create EditPersonDescriptor","lastModifiedDate":"2024-04-01"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"note right of EditPersonDescriptor : Methods in EditPersonDescriptor such as setName and\\n setPhone may be used to create a defensive copy \\nof the patient that is to be updated.","lastModifiedDate":"2024-04-01"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"EditPatientCommandParser -\u003e EditPersonDescriptor : new EditPersonDescriptor()","lastModifiedDate":"2024-04-01"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"activate EditPersonDescriptor","lastModifiedDate":"2024-04-01"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"EditPersonDescriptor -\u003e EditPatientCommandParser : setup with parsed attributes","lastModifiedDate":"2024-04-01"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"deactivate EditPersonDescriptor","lastModifiedDate":"2024-04-01"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"\u0027 Now, passing EditPersonDescriptor and studentIndex to EditPatientCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"create EditPatientCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"EditPatientCommandParser -\u003e EditPatientCommand : new EditPatientCommand(studentIndex, editPersonDescriptor)","lastModifiedDate":"2024-04-01"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"activate EditPatientCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"EditPatientCommand --\u003e EditPatientCommandParser","lastModifiedDate":"2024-04-01"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"deactivate EditPatientCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"EditPatientCommandParser --\u003e CommandParser : return","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"deactivate EditPatientCommandParser","lastModifiedDate":"2024-04-01"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"CommandParser --\u003e LogicManager : d","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"deactivate CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"LogicManager -\u003e EditPatientCommand : execute","lastModifiedDate":"2024-04-01"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"activate EditPatientCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"EditPatientCommand -\u003e Model : updateFilteredPersonList","lastModifiedDate":"2024-04-01"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"activate Model","lastModifiedDate":"2024-04-01"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"Model --\u003e EditPatientCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"deactivate Model","lastModifiedDate":"2024-04-01"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"EditPatientCommand --\u003e LogicManager : command success","lastModifiedDate":"2024-04-01"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"deactivate EditPatientCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"destroy EditPatientCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":68,"author":{"gitId":"Jerome-j"},"content":"[\u003c--LogicManager : command successful","lastModifiedDate":"2024-04-01"},{"lineNumber":69,"author":{"gitId":"Jerome-j"},"content":"deactivate LogicManager","lastModifiedDate":"2024-04-01"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"@enduml","lastModifiedDate":"2024-04-01"}],"authorContributionMap":{"Jerome-j":60,"tankh99":9,"vnnamng":1}},{"path":"docs/diagrams/FilterAppointmentSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"@startuml","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"!include style.puml","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"participant \":PatientListParser\" as PatientListParser LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"participant \":FilterAppointmentParser\" as FilterAppointmentParser LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"participant \"pre:FilterAppointmentPredicate\" as FilterAppointmentPredicate LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"participant \"f:FilterAppointmentCommand\" as FilterAppointmentCommand LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"end box","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"participant \"m:Model\" as Model MODEL_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"end box","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"[-\u003e LogicManager : execute(\"filter sd/2021-10-10 10:10 \\n ed/2021-10-10 11:10\")","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"activate LogicManager","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"LogicManager -\u003e PatientListParser : parse(\"filter sd/2021-10-10 10:10 \\ned/2021-10-10 11:10\")","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"activate PatientListParser","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"create FilterAppointmentParser","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"PatientListParser -\u003e FilterAppointmentParser","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"activate FilterAppointmentParser","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentParser --\u003e PatientListParser","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"deactivate FilterAppointmentParser","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"PatientListParser -\u003e FilterAppointmentParser : parse(arguments)","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"activate FilterAppointmentParser","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"create FilterAppointmentPredicate","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentParser -\u003e FilterAppointmentPredicate: new FilterAppointmentPredicate()","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"activate FilterAppointmentPredicate","lastModifiedDate":"2024-04-09"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentPredicate --\u003e FilterAppointmentParser: pre","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"deactivate FilterAppointmentPredicate","lastModifiedDate":"2024-04-09"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"create FilterAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentParser -\u003e FilterAppointmentCommand: new FilterAppointmentCommand()","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"activate FilterAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentCommand --\u003e FilterAppointmentParser: f","lastModifiedDate":"2024-04-09"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"deactivate FilterAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentParser --\u003e PatientListParser : f","lastModifiedDate":"2024-04-09"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"deactivate FilterAppointmentParser","lastModifiedDate":"2024-04-09"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"destroy FilterAppointmentParser","lastModifiedDate":"2024-04-09"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"PatientListParser --\u003e LogicManager : f","lastModifiedDate":"2024-04-09"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"deactivate PatientListParser","lastModifiedDate":"2024-04-09"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"LogicManager -\u003e FilterAppointmentCommand : execute","lastModifiedDate":"2024-04-09"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"activate FilterAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentCommand -\u003e FilterAppointmentCommand: check valid datetime","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentCommand -\u003e Model : updateFilteredAppointmentList(pre)","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"activate Model","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"Model --\u003e FilterAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"deactivate Model","lastModifiedDate":"2024-04-09"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentCommand -\u003e CommandResult : new CommandResult()","lastModifiedDate":"2024-04-09"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"activate CommandResult","lastModifiedDate":"2024-04-09"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"CommandResult --\u003e FilterAppointmentCommand: r","lastModifiedDate":"2024-04-09"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"deactivate CommandResult","lastModifiedDate":"2024-04-09"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentCommand -\u003e Model: getFilteredAppointmentList().size()","lastModifiedDate":"2024-04-09"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"activate Model","lastModifiedDate":"2024-04-09"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"Model --\u003e FilterAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"deactivate Model","lastModifiedDate":"2024-04-09"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"FilterAppointmentCommand --\u003e LogicManager : r","lastModifiedDate":"2024-04-09"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"deactivate FilterAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"destroy FilterAppointmentCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"[\u003c-- LogicManager : successfully filter appointment","lastModifiedDate":"2024-04-09"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"@enduml","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"vnnamng":74}},{"path":"docs/diagrams/FindPatientSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"@startuml","lastModifiedDate":"2024-04-01"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"!include style.puml","lastModifiedDate":"2024-04-01"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-04-01"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"participant \":CommandParser\" as CommandParser LOGIC_COLOR","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"participant \":ListCommandPatientParser\" as ListCommandPatientParser LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"participant \":ListCommandPatient\" as ListCommandPatient LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"end box","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2024-04-01"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"participant \"m:Model\" as Model MODEL_COLOR","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"end box","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"[-\u003e LogicManager : execute(\"queryp\" + \" n/Jerome p/123 e/gmail.com a/depression\")","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"activate LogicManager","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"LogicManager -\u003e CommandParser : parseCommand(\"queryp\" + arguments)","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"activate CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"create ListCommandPatientParser","lastModifiedDate":"2024-04-01"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"CommandParser -\u003e ListCommandPatientParser","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"activate ListCommandPatientParser","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"ListCommandPatientParser --\u003e CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"deactivate ListCommandPatientParser","lastModifiedDate":"2024-04-01"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"CommandParser -\u003e ListCommandPatientParser : parse(arguments)","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"activate ListCommandPatientParser","lastModifiedDate":"2024-04-01"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"create ListCommandPatient","lastModifiedDate":"2024-04-01"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"ListCommandPatientParser -\u003e ListCommandPatient :  new ListCommandPatient(combinedPredicate) with AND logic","lastModifiedDate":"2024-04-01"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"note right of ListCommandPatientParser : Details of how predicates are combined \\nare simplified for the sake of diagramming.","lastModifiedDate":"2024-04-01"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"activate ListCommandPatient","lastModifiedDate":"2024-04-01"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"ListCommandPatient --\u003e ListCommandPatientParser :","lastModifiedDate":"2024-04-01"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"deactivate ListCommandPatient","lastModifiedDate":"2024-04-01"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"ListCommandPatientParser --\u003e CommandParser : d","lastModifiedDate":"2024-04-10"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"deactivate ListCommandPatientParser","lastModifiedDate":"2024-04-01"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2024-04-01"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"ListCommandPatientParser -[hidden]-\u003e CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"destroy ListCommandPatientParser","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"CommandParser --\u003e LogicManager : d","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"deactivate CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"LogicManager -\u003e ListCommandPatient : execute(m)","lastModifiedDate":"2024-04-01"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"activate ListCommandPatient","lastModifiedDate":"2024-04-01"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"ListCommandPatient -\u003e Model : updateFilteredPersonList(combinedPredicate)","lastModifiedDate":"2024-04-01"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"activate Model","lastModifiedDate":"2024-04-01"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"Model --\u003e ListCommandPatient","lastModifiedDate":"2024-04-01"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"deactivate Model","lastModifiedDate":"2024-04-01"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"ListCommandPatient --\u003e LogicManager : command success","lastModifiedDate":"2024-04-01"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"deactivate ListCommandPatient","lastModifiedDate":"2024-04-01"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"[\u003c--LogicManager : command successful","lastModifiedDate":"2024-04-01"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"deactivate LogicManager","lastModifiedDate":"2024-04-01"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"@enduml","lastModifiedDate":"2024-04-01"}],"authorContributionMap":{"Jerome-j":57,"tankh99":10}},{"path":"docs/diagrams/HelpCommandSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"@startuml","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"!include style.puml","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"participant \":PatientListParser\" as PatientListParser LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"participant \"h:HelpCommand\" as HelpCommand LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"end box","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"[-\u003e LogicManager: execute(\"help\")","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"activate LogicManager","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"LogicManager -\u003e PatientListParser: parse(\"help\")","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"activate PatientListParser","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"create HelpCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"PatientListParser -\u003e HelpCommand: new HelpCommand()","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"activate HelpCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"HelpCommand --\u003e PatientListParser: h","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"deactivate HelpCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"LogicManager \u003c-- PatientListParser: h","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"deactivate PatientListParser","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"LogicManager -\u003e HelpCommand: execute()","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"activate HelpCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"create CommandResult","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"HelpCommand -\u003e CommandResult: new CommandResult()","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"activate CommandResult","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"CommandResult --\u003e HelpCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"deactivate CommandResult","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"HelpCommand --\u003e LogicManager: r","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"deactivate HelpCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"destroy HelpCommand","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"[\u003c- LogicManager: Execute Command Successfully","lastModifiedDate":"2024-04-09"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"deactivate LogicManager","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"@enduml","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"vnnamng":36}},{"path":"docs/diagrams/ListPatientCommandDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"@startuml","lastModifiedDate":"2024-04-01"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"!theme plain","lastModifiedDate":"2024-04-01"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"class ListPatientCommandParser {","lastModifiedDate":"2024-04-01"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"    +parse(args : String) : ListCommand","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"class ArgumentMultimap {","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"class ArgumentTokenizer {","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"    +tokenize(args : String, vararg prefixes : Prefix) : ArgumentMultimap","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"class ParserUtil {","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    +hasAtLeastOnePrefixPresent(argMultimap : ArgumentMultimap, vararg prefixes : Prefix) : boolean","lastModifiedDate":"2024-04-01"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"class ListCommand {","lastModifiedDate":"2024-04-01"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"    -predicate : Predicate\u003cPatient\u003e","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"class NameContainsKeywordsPredicate {","lastModifiedDate":"2024-04-01"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"class PhoneContainsKeywordsPredicate {","lastModifiedDate":"2024-04-01"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"class EmailContainsKeywordPredicate {","lastModifiedDate":"2024-04-01"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"class TagContainsKeywordPredicate {","lastModifiedDate":"2024-04-01"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-01"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"ListPatientCommandParser --\u003e ArgumentTokenizer : uses","lastModifiedDate":"2024-04-01"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"ListPatientCommandParser --\u003e ArgumentMultimap : uses","lastModifiedDate":"2024-04-01"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"ListPatientCommandParser --\u003e ParserUtil : uses","lastModifiedDate":"2024-04-01"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"ListPatientCommandParser --\u003e ListCommand : creates","lastModifiedDate":"2024-04-01"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"ListPatientCommandParser --\u003e NameContainsKeywordsPredicate : creates","lastModifiedDate":"2024-04-01"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"ListPatientCommandParser --\u003e PhoneContainsKeywordsPredicate : creates","lastModifiedDate":"2024-04-01"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"ListPatientCommandParser --\u003e EmailContainsKeywordPredicate : creates","lastModifiedDate":"2024-04-01"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"ListPatientCommandParser --\u003e TagContainsKeywordPredicate : creates","lastModifiedDate":"2024-04-01"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"note right of ListPatientCommandParser : Parses input arguments\\nto create a new ListCommand object","lastModifiedDate":"2024-04-01"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"note right of ArgumentTokenizer : Tokenizes the arguments\\nbased on provided prefixes","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"note right of ParserUtil : Checks if at least\\none prefix is present","lastModifiedDate":"2024-04-01"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"note right of ListCommand : Command to list patients\\nbased on predicates","lastModifiedDate":"2024-04-01"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"@enduml","lastModifiedDate":"2024-04-01"}],"authorContributionMap":{"Jerome-j":49}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Logic as LogicPackage {","lastModifiedDate":"2023-07-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"\u0027 package \"Parser Classes\" as ParserClasses{","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"\u0027 }","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"Class CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nLogic\" as Logic","lastModifiedDate":"2022-01-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"package Model {","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"package Storage {","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"LogicManager .up.|\u003e Logic","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"LogicManager -down-\u003e\"1\" \"CommandParser\"","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"LogicManager .down.\u003e Command : \u003c\u003ccall\u003e\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"LogicManager --\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Storage --[hidden] Model","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Command .[hidden]up.\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"Command .right.\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"note right of XYZCommand: XYZCommand \u003d A concrete command, \\ne.g. AddCommand, FindCommand","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult : \u003c\u003ccreate\u003e\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"tankh99":7,"-":40}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model as ModelPackage \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-07-27"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyPatientList\" as ReadOnlyPatientList","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyAppointmentList\" as ReadOnlyAppointmentList","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"Class PatientList","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"Class Patient","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"Class UniquePersonList","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"Class UniqueAppointmentList","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"Class Appointment","lastModifiedDate":"2024-03-22"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"Class AppointmentList","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"Class DateTimeField","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"Class StartDateTime","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"Class EndDateTime","lastModifiedDate":"2024-04-01"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"Class AppointmentDescription","lastModifiedDate":"2024-04-01"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"Class PatientId","lastModifiedDate":"2024-04-01"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"Class FeedbackScore","lastModifiedDate":"2024-04-01"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"Class HasAttended","lastModifiedDate":"2024-04-01"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Class I #FFFFFF","lastModifiedDate":"2023-07-27"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"Class F #FFFFFF","lastModifiedDate":"2024-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"PatientList .up.|\u003e ReadOnlyPatientList","lastModifiedDate":"2024-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"AppointmentList .up.|\u003e ReadOnlyAppointmentList","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"Model .right.\u003e ReadOnlyPatientList","lastModifiedDate":"2024-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAppointmentList","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2024-04-09"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"ModelManager -down-\u003e \"1\" PatientList","lastModifiedDate":"2024-04-09"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"ModelManager -down-\u003e \"1\" AppointmentList","lastModifiedDate":"2024-04-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"PatientList *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2024-04-01"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"UniquePersonList -down-\u003e \"~* contains\" Patient","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"Patient *--\u003e \"1\" Name","lastModifiedDate":"2024-04-09"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"Patient *--\u003e \"1\" Phone","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"Patient *--\u003e \"1\" Email","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"Patient *--\u003e \"*\" Tag","lastModifiedDate":"2024-04-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"AppointmentList *-down-\u003e \"1\" UniqueAppointmentList","lastModifiedDate":"2024-04-09"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"UniqueAppointmentList -down-\u003e \"*\" Appointment","lastModifiedDate":"2024-04-09"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"Appointment *--\u003e \"1\" StartDateTime","lastModifiedDate":"2024-04-09"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"Appointment *--\u003e \"1\" EndDateTime","lastModifiedDate":"2024-04-09"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"StartDateTime -down-|\u003e DateTimeField","lastModifiedDate":"2024-04-09"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"EndDateTime -down-|\u003e DateTimeField","lastModifiedDate":"2024-04-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"Appointment *--\u003e \"1\" AppointmentDescription","lastModifiedDate":"2024-04-09"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"Appointment *--\u003e \"1\" PatientId","lastModifiedDate":"2024-04-09"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"Appointment *--\u003e \"0..1\" FeedbackScore","lastModifiedDate":"2024-04-09"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"Appointment *--\u003e \"1\" HasAttended","lastModifiedDate":"2024-04-09"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"Patient -[hidden]up--\u003e I","lastModifiedDate":"2024-04-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"UniquePersonList -[hidden]right-\u003e I","lastModifiedDate":"2023-07-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"Phone -[hidden]right-\u003e Email","lastModifiedDate":"2024-04-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"ModelManager ..\u003e \"filters/sorts\" Patient","lastModifiedDate":"2024-04-09"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"ModelManager ..\u003e \"filters/sorts\" Appointment","lastModifiedDate":"2024-04-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"tankh99":22,"vnnamng":27,"-":34}},{"path":"docs/diagrams/ParserClasses.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2021-07-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2021-07-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-07-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2021-07-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2021-07-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"package \"Parser classes\"{","lastModifiedDate":"2021-07-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nParser\" as Parser","lastModifiedDate":"2022-01-03"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"Class CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"HiddenOutside ..\u003e CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"CommandParser .down.\u003e XYZCommandParser: \u003c\u003ccreate\u003e\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : \u003c\u003ccreate\u003e\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"CommandParser ..\u003e Command : \u003c\u003cuse\u003e\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"XYZCommandParser .up.|\u003e Parser","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2021-07-31"}],"authorContributionMap":{"tankh99":4,"-":34}},{"path":"docs/diagrams/PatientFeedbackReportClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"!include style.puml","lastModifiedDate":"2024-04-06"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"show members","lastModifiedDate":"2024-04-06"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"hide circle","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"skinparam Class {","lastModifiedDate":"2024-04-06"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"    FontColor #000000","lastModifiedDate":"2024-04-06"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    BorderColor #000000","lastModifiedDate":"2024-04-06"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    StereotypeFontColor #000000","lastModifiedDate":"2024-04-06"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-06"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"title Patient Feedback Report Data Flow","lastModifiedDate":"2024-04-06"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"class PatientFeedbackReportList {","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    +generateReportList()","lastModifiedDate":"2024-04-06"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    +getList()","lastModifiedDate":"2024-04-06"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"class PatientFeedbackReport {","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    +getPatientId()","lastModifiedDate":"2024-04-06"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    +getPatientName()","lastModifiedDate":"2024-04-06"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    +getAvgFeedbackScore()","lastModifiedDate":"2024-04-06"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"class Patient {","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    +getName(): Name","lastModifiedDate":"2024-04-06"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"class Appointment {","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    +getFeedbackScore(): Integer","lastModifiedDate":"2024-04-06"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"class Model {","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    +updateFilteredAppointmentList()","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    +getPatientFeedbackReportList()","lastModifiedDate":"2024-04-06"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"class Logic {","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    +getPatientFeedbackReportList()","lastModifiedDate":"2024-04-06"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"class ListPanel {","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"PatientFeedbackReport --\u003e\"1\" Patient : contains","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"PatientFeedbackReport --\u003e\"*\" Appointment : contains","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"PatientFeedbackReportList --\u003e\"*\" PatientFeedbackReport","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"Model --\u003e\"1\" PatientFeedbackReportList","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"Logic --\u003e\"1\" Model","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"ListPanel -[dashed]-\u003e\"*\" PatientFeedbackReport","lastModifiedDate":"2024-04-06"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"ListPanel --\u003e \"1\" Logic","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"tankh99":60}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage as StoragePackage {","lastModifiedDate":"2023-07-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"\u0027 package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"\u0027 Class \"\u003c\u003cinterface\u003e\u003e\\nUserPrefsStorage\" as UserPrefsStorage","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"\u0027 Class JsonUserPrefsStorage","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"\u0027 }","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"package \"PatientList Storage\" #F4F6F6{","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nPatientListStorage\" as PatientListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"Class JsonPatientListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"Class JsonSerializablePatientList","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"Class JsonAdaptedPatient","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"package \"AppointmentList Storage\" #F4F6F6{","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nAppointmentListStorage\" as AppointmentListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"Class JsonSerializableAppointmentList","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"Class JsonAdaptedAppointment","lastModifiedDate":"2024-04-01"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"Class JsonAppointmentListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"\u0027 StorageManager -down-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"StorageManager -left-\u003e \"1\" PatientListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"StorageManager -right-\u003e \"1\" AppointmentListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"\u0027 Storage --|\u003e UserPrefsStorage","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"Storage --|\u003e PatientListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"Storage --|\u003e AppointmentListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"\u0027 JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"JsonPatientListStorage .up.|\u003e PatientListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"JsonPatientListStorage ..\u003e JsonSerializablePatientList","lastModifiedDate":"2024-04-01"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"JsonSerializablePatientList --\u003e \"*\" JsonAdaptedPatient","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"JsonAdaptedPatient --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"JsonAppointmentListStorage .up.|\u003e AppointmentListStorage","lastModifiedDate":"2024-04-01"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"JsonAppointmentListStorage ..\u003e JsonSerializableAppointmentList","lastModifiedDate":"2024-04-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"JsonSerializableAppointmentList --\u003e \"*\" JsonAdaptedAppointment","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"tankh99":10,"vnnamng":18,"-":25}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUi\" as Ui","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"Class ListPanel","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"Class AppointmentCard","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"Class PatientFeedbackReportCard","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"Class CommandHistory","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"MainWindow *-down-\u003e \"1\" ListPanel","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"ListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"ListPanel -down-\u003e \"*\" AppointmentCard","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"ListPanel -down-\u003e \"*\" PatientFeedbackReportCard","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"ListPanel --|\u003e UiPart","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"PersonCard --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"AppointmentCard --|\u003e UiPart","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"PatientFeedbackReportCard --|\u003e UiPart","lastModifiedDate":"2024-04-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"PersonCard ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"AppointmentCard ..\u003e Model","lastModifiedDate":"2024-04-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"CommandBox --\u003e\"1\" CommandHistory","lastModifiedDate":"2024-04-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"ListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2024-04-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"tankh99":14,"-":55}},{"path":"docs/diagrams/UndoSequenceDiagram-Logic.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"participant \":CommandParser\" as CommandParser LOGIC_COLOR","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(undo)","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"LogicManager -\u003e CommandParser : parseCommand(undo)","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"activate CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"create UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"CommandParser -\u003e UndoCommand","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"activate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"UndoCommand --\u003e CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"deactivate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"CommandParser --\u003e LogicManager : u","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"deactivate CommandParser","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"LogicManager -\u003e UndoCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"activate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"UndoCommand -\u003e Model : undoAddressBook()","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Model --\u003e UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"UndoCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"deactivate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"UndoCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"destroy UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"tankh99":7,"-":39}},{"path":"docs/diagrams/command-history/CommandHistoryRedoActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"@startuml","lastModifiedDate":"2024-04-06"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":":User presses down;","lastModifiedDate":"2024-04-06"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"if () then ([has next command])","lastModifiedDate":"2024-04-06"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"    :Increment command index;","lastModifiedDate":"2024-04-06"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"else ([else])","lastModifiedDate":"2024-04-06"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"endif","lastModifiedDate":"2024-04-06"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":":Get current command;","lastModifiedDate":"2024-04-06"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"stop","lastModifiedDate":"2024-04-06"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"@enduml","lastModifiedDate":"2024-04-06"}],"authorContributionMap":{"tankh99":11}},{"path":"docs/diagrams/command-history/CommandHistorySequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"@startuml","lastModifiedDate":"2024-04-06"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"!include \u003coffice/Users/user\u003e","lastModifiedDate":"2024-04-06"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"!include ../style.puml","lastModifiedDate":"2024-04-06"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-04-06"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"title Command history user flow","lastModifiedDate":"2024-04-06"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"box Command History LOGIC_COLOR_T1","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"Participant \"\u003c$user\u003e\" as user MODEL_COLOR_T2","lastModifiedDate":"2024-04-06"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"Participant \":CommandBox\" as cmdBox LOGIC_COLOR","lastModifiedDate":"2024-04-06"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"Participant \"commandHistory:CommandHistory\" as cmdHist LOGIC_COLOR","lastModifiedDate":"2024-04-06"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"\u0027 Participant \":AudioUtil\" as audio LOGIC_COLOR","lastModifiedDate":"2024-04-06"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"end box","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"user -\u003e cmdBox: user enters a command","lastModifiedDate":"2024-04-06"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"activate cmdBox","lastModifiedDate":"2024-04-06"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"cmdBox -\u003e cmdHist: addCommandToHistory(string)","lastModifiedDate":"2024-04-06"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"cmdHist --\u003e cmdBox --","lastModifiedDate":"2024-04-06"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"deactivate cmdBox","lastModifiedDate":"2024-04-06"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"user -\u003e cmdBox: user presses up arrow","lastModifiedDate":"2024-04-06"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"activate cmdBox","lastModifiedDate":"2024-04-06"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"cmdBox -\u003e cmdHist: undo()","lastModifiedDate":"2024-04-06"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"cmdBox -\u003e cmdHist: getCurrentCommand()","lastModifiedDate":"2024-04-06"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"cmdBox --\u003e user --: previous command","lastModifiedDate":"2024-04-06"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"user -\u003e cmdBox: user presses down arrow","lastModifiedDate":"2024-04-06"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"activate cmdBox","lastModifiedDate":"2024-04-06"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"cmdBox -\u003e cmdHist: redo()","lastModifiedDate":"2024-04-06"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"cmdBox -\u003e cmdHist: getCurrentCommand()","lastModifiedDate":"2024-04-06"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"cmdBox --\u003e user --: next command","lastModifiedDate":"2024-04-06"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"user -\u003e cmdBox: user presses down arrow","lastModifiedDate":"2024-04-06"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"activate cmdBox","lastModifiedDate":"2024-04-06"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"cmdBox -\u003e cmdHist: redo()","lastModifiedDate":"2024-04-06"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"cmdBox -\u003e cmdHist: getCurrentCommand()","lastModifiedDate":"2024-04-06"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"cmdBox --\u003e user --: empty string","lastModifiedDate":"2024-04-06"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"@enduml","lastModifiedDate":"2024-04-06"}],"authorContributionMap":{"tankh99":41}},{"path":"docs/diagrams/command-history/CommandHistoryUndoActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"@startuml","lastModifiedDate":"2024-04-06"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":":User presses up;","lastModifiedDate":"2024-04-06"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"if () then ([has previous command])","lastModifiedDate":"2024-04-06"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"    :Decrement command index;","lastModifiedDate":"2024-04-06"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"else ([else])","lastModifiedDate":"2024-04-06"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"    :Play sound;","lastModifiedDate":"2024-04-06"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"endif","lastModifiedDate":"2024-04-06"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":":Get current command;","lastModifiedDate":"2024-04-06"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"stop","lastModifiedDate":"2024-04-06"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"@enduml","lastModifiedDate":"2024-04-06"}],"authorContributionMap":{"tankh99":12}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"Participant \":CommandParser\" as abp LOGIC_COLOR","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"Participant \":EditPatientCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ecp -\u003e ec ++: index, editPersonDescriptor","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"tankh99":2,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"# CogniCare","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"[![CI Status](https://github.com/AY2324S2-CS2103-F08-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103-F08-2/tp/actions)","lastModifiedDate":"2024-03-06"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103-F08-2/tp/graph/badge.svg?token\u003dPBBJNYE8U5)](https://codecov.io/gh/AY2324S2-CS2103-F08-2/tp)","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"**CogniCare is a desktop application for managing all the students that you are currently handling.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2024-03-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"* If you are interested in using CogniCare, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2024-03-01"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"* If you are interested about developing CogniCare, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2024-03-01"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"}],"authorContributionMap":{"Jerome-j":7,"tankh99":1,"-":15}},{"path":"docs/team/caitlyntang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"---","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"  layout: default.md","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"  title: \"Caitlyn\u0027s Project Portfolio Page\"","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"---","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"### Caitlyn\u0027s Project Portfolio Page","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"* **Project management**:","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"* **Documentation**:","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"  * User Guide:","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"  * Developer Guide:","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"* **Community**:","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"* **Tools**:","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"caitlyntang":46}},{"path":"docs/team/jerome-j.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"---","lastModifiedDate":"2024-03-01"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"  layout: default.md","lastModifiedDate":"2024-03-01"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"  title: \"Jerome-j\u0027s Project Portfolio Page\"","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"---","lastModifiedDate":"2024-03-01"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"### Jerome-j\u0027s Project Portfolio Page","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2024-03-01"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2024-03-01"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2024-03-01"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-01"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2024-03-01"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2024-03-01"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"* **Project management**:","lastModifiedDate":"2024-03-01"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2024-03-01"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2024-03-01"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2024-03-01"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2024-03-01"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"* **Documentation**:","lastModifiedDate":"2024-03-01"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"    * User Guide:","lastModifiedDate":"2024-03-01"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2024-03-01"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2024-03-01"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"    * Developer Guide:","lastModifiedDate":"2024-03-01"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2024-03-01"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"* **Community**:","lastModifiedDate":"2024-03-01"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2024-03-01"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2024-03-01"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2024-03-01"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2024-03-01"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"* **Tools**:","lastModifiedDate":"2024-03-01"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2024-03-01"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2024-03-01"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2024-03-01"}],"authorContributionMap":{"Jerome-j":46}},{"path":"docs/team/tankh99.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"  layout: default.md","lastModifiedDate":"2024-03-05"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"  title: \"Khang Hou\u0027s Project Portfolio Page\"","lastModifiedDate":"2024-03-05"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"---","lastModifiedDate":"2024-03-05"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"### Khang Hou\u0027s Project Portfolio Page","lastModifiedDate":"2024-03-05"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2024-03-05"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-05"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2024-03-05"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2024-03-05"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2024-03-05"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-05"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-05"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2024-03-05"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2024-03-05"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"* **Project management**:","lastModifiedDate":"2024-03-05"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2024-03-05"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2024-03-05"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2024-03-05"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2024-03-05"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"* **Documentation**:","lastModifiedDate":"2024-03-05"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"  * User Guide:","lastModifiedDate":"2024-03-05"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2024-03-05"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2024-03-05"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"  * Developer Guide:","lastModifiedDate":"2024-03-05"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2024-03-05"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"* **Community**:","lastModifiedDate":"2024-03-05"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2024-03-05"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2024-03-05"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2024-03-05"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2024-03-05"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"* **Tools**:","lastModifiedDate":"2024-03-05"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2024-03-05"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2024-03-05"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2024-03-05"}],"authorContributionMap":{"tankh99":46}},{"path":"docs/team/vnnamng.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"---","lastModifiedDate":"2024-03-06"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"  layout: default.md","lastModifiedDate":"2024-03-06"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"  title: \"vnnamng\u0027s Project Portfolio Page\"","lastModifiedDate":"2024-03-06"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"---","lastModifiedDate":"2024-03-06"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"### vnnamng\u0027s Project Portfolio Page","lastModifiedDate":"2024-03-06"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2024-03-06"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-06"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2024-03-06"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2024-03-06"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2024-03-06"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2024-03-06"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2024-03-06"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2024-03-06"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"* **Project management**:","lastModifiedDate":"2024-03-06"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2024-03-06"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2024-03-06"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2024-03-06"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2024-03-06"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"* **Documentation**:","lastModifiedDate":"2024-03-06"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"  * User Guide:","lastModifiedDate":"2024-03-06"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2024-03-06"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2024-03-06"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"  * Developer Guide:","lastModifiedDate":"2024-03-06"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2024-03-06"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"* **Community**:","lastModifiedDate":"2024-03-06"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2024-03-06"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2024-03-06"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2024-03-06"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2024-03-06"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"* **Tools**:","lastModifiedDate":"2024-03-06"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2024-03-06"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2024-03-06"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2024-03-06"}],"authorContributionMap":{"vnnamng":46}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Tutorial: Adding a command","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":" * Changes the remark of an existing patient in the address book.","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `CommandParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"You can refer to the changes in this [diff](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2024-04-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/add-remark/RemarkClass.puml\" alt\u003d\"The relationship between RemarkCommand and Command\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"            + \": Edits the remark of the patient identified \"","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"            + \"by the index number used in the last patient listing. \"","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"Jerome-j"},"content":"     * @param index of the patient in the filtered patient list to edit the remark","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"Jerome-j"},"content":"     * @param remark of the patient to be updated to","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"tankh99"},"content":"Your code should look something like [this](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2024-04-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/add-remark/ParserClass.puml\" alt\u003d\"The relationship between Parser and RemarkCommandParser\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"tankh99"},"content":"Don’t forget to update `CommandParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2024-04-10"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"tankh99"},"content":"[here](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2024-04-10"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"Jerome-j"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of patient data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the patient’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a patient.","lastModifiedDate":"2024-03-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"Jerome-j"},"content":"Create a new `Remark` in `seedu.address.model.patient`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2024-03-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"tankh99"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2024-04-10"},{"lineNumber":236,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"Jerome-j"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each patient.","lastModifiedDate":"2024-03-26"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"tankh99"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2024-04-10"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"tankh99"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2024-04-10"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2023-09-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"tankh99"},"content":"Refer to [this commit](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2024-04-10"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2023-09-12"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"tankh99"},"content":"Check out [this commit](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2024-04-10"},{"lineNumber":304,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"tankh99"},"content":"Just add [this one line of code!](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2024-04-10"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"Jerome-j"},"content":"public PersonCard(Person patient, int displayedIndex) {","lastModifiedDate":"2024-03-26"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"Jerome-j"},"content":"    remark.setText(patient.getRemark().value);","lastModifiedDate":"2024-03-26"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"Jerome-j"},"content":"        Person patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":348,"author":{"gitId":"Jerome-j"},"content":"        Person editedPatient \u003d new Person(","lastModifiedDate":"2024-03-26"},{"lineNumber":349,"author":{"gitId":"Jerome-j"},"content":"                patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),","lastModifiedDate":"2024-03-26"},{"lineNumber":350,"author":{"gitId":"Jerome-j"},"content":"                patientToEdit.getAddress(), remark, patientToEdit.getTags());","lastModifiedDate":"2024-03-26"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"Jerome-j"},"content":"        model.setPerson(patientToEdit, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"Jerome-j"},"content":"        return new CommandResult(generateSuccessMessage(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":361,"author":{"gitId":"Jerome-j"},"content":"     * {@code patientToEdit}.","lastModifiedDate":"2024-03-26"},{"lineNumber":362,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"Jerome-j"},"content":"    private String generateSuccessMessage(Person patientToEdit) {","lastModifiedDate":"2024-03-26"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"Jerome-j"},"content":"        return String.format(message, patientToEdit);","lastModifiedDate":"2024-03-26"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"tankh99"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2024-04-10"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":379,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"tankh99"},"content":"You should end up with a test that looks something like [this](https://github.com/AY2324S2-CS2103-F08-2/tp/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2024-04-10"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":402,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"Jerome-j":19,"tankh99":13,"-":370}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Tutorial: Removing Fields","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"success\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003c!-- {:toc} --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.patient.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   \u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"Jerome-j"},"content":"  \"patients\": [ {","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Jerome-j":2,"-":113}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Tutorial: Tracing code","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c!-- {:toc} --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ArchitectureDiagram.puml\" alt\u003d\"ArchitectureDiagram\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.address.logic.Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"A quick look at the `seedu.address.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ComponentManagers.puml\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"**Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"   ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"tankh99"},"content":"        Command command \u003d CommandParser.parseCommand(commandText);","lastModifiedDate":"2024-04-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"tankh99"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `CommandParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2024-04-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"   \u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2023-09-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   \u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"   \u003cpuml src\u003d\"../diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    \u003cpuml src\u003d\"../diagrams/tracing/LogicSequenceDiagram.puml\" alt\u003d\"Tracing an `edit` command through the Logic component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"   ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"Jerome-j"},"content":"       Person patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":199,"author":{"gitId":"Jerome-j"},"content":"       Person editedPatient \u003d createEditedPerson(patientToEdit, editPersonDescriptor);","lastModifiedDate":"2024-03-26"},{"lineNumber":200,"author":{"gitId":"Jerome-j"},"content":"       if (!patientToEdit.isSamePerson(editedPatient) \u0026\u0026 model.hasPerson(editedPatient)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"Jerome-j"},"content":"       model.setPerson(patientToEdit, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"Jerome-j"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"Jerome-j"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the patient data.","lastModifiedDate":"2024-03-26"},{"lineNumber":211,"author":{"gitId":"Jerome-j"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ patients.\u003cbr\u003e","lastModifiedDate":"2024-03-26"},{"lineNumber":212,"author":{"gitId":"Jerome-j"},"content":"     FYI, The \u0027filtered list\u0027 is the list of patients resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the patients so that the user can see the edited patient along with all other patients. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2024-03-26"},{"lineNumber":213,"author":{"gitId":"Jerome-j"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of patients is being tracked.","lastModifiedDate":"2024-03-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     \u003cpuml src\u003d\"../diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":215,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    \u003cpuml src\u003d\"../diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"   \u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"   **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2023-09-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"   \u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"1. As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"Jerome-j"},"content":"        patients.addAll(","lastModifiedDate":"2024-03-26"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":255,"author":{"gitId":"-"},"content":"   \u003cpuml src\u003d\"../diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":272,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Jerome-j":10,"tankh99":2,"-":299}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"import seedu.address.storage.AppointmentListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"import seedu.address.storage.JsonAppointmentListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"import seedu.address.storage.JsonPatientListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"import seedu.address.storage.PatientListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 2, true);","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PatientList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2023-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"        PatientListStorage patientListStorage \u003d new JsonPatientListStorage(userPrefs.getPatientListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"        AppointmentListStorage appointmentListStorage \u003d","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"                new JsonAppointmentListStorage(userPrefs.getAppointmentListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"        storage \u003d new StorageManager(patientListStorage, appointmentListStorage, userPrefsStorage);","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"Jerome-j"},"content":"        // TODO: Probably can inject the tracking of ID here","lastModifiedDate":"2024-03-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        logger.info(\"Using data file : \" + storage.getPatientListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"        Optional\u003cReadOnlyPatientList\u003e patientListOptional;","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"        ReadOnlyPatientList initialData;","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"            patientListOptional \u003d storage.readPatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"            if (!patientListOptional.isPresent()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"                logger.info(\"Creating a new data file \" + storage.getPatientListFilePath()","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"                        + \" populated with a sample PatientList.\");","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"            initialData \u003d patientListOptional.orElseGet(SampleDataUtil::getSamplePatientList);","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":95,"author":{"gitId":"vnnamng"},"content":"            logger.warning(\"Data file at \" + storage.getPatientListFilePath() + \" could not be loaded.\"","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"vnnamng"},"content":"                    + \" Will be starting with an empty PatientList.\");","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"            initialData \u003d new PatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"vnnamng"},"content":"        Optional\u003cReadOnlyAppointmentList\u003e appointmentListOptional;","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"        ReadOnlyAppointmentList initialAppointmentListData;","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"vnnamng"},"content":"        try {","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"vnnamng"},"content":"            appointmentListOptional \u003d storage.readAppointmentList();","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"            if (!appointmentListOptional.isPresent()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"vnnamng"},"content":"                logger.info(\"Creating a new data file \" + storage.getAppointmentListFilePath()","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"vnnamng"},"content":"                        + \" populated with a sample AppointmentList.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":107,"author":{"gitId":"vnnamng"},"content":"            }","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"vnnamng"},"content":"            initialAppointmentListData \u003d appointmentListOptional.orElseGet(SampleDataUtil::getSampleAppointmentList);","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"vnnamng"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2024-03-19"},{"lineNumber":110,"author":{"gitId":"vnnamng"},"content":"            logger.warning(\"Data file at \" + storage.getAppointmentListFilePath() + \" could not be loaded.\"","lastModifiedDate":"2024-03-19"},{"lineNumber":111,"author":{"gitId":"vnnamng"},"content":"                    + \" Will be starting with an empty AppointmentList.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":112,"author":{"gitId":"vnnamng"},"content":"            initialAppointmentListData \u003d new AppointmentList();","lastModifiedDate":"2024-03-19"},{"lineNumber":113,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":114,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"vnnamng"},"content":"        return new ModelManager(initialData, initialAppointmentListData, userPrefs);","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);","lastModifiedDate":"2023-05-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                    + \" Using default config properties.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                    + \" Using default preferences.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"vnnamng"},"content":"        logger.info(\"Starting PatientList \" + MainApp.VERSION);","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jerome-j":1,"vnnamng":41,"-":166}},{"path":"src/main/java/seedu/address/commons/core/CommandHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.AudioUtil;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" * An abstraction for command history operations like viewing the previous and next command in history.","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":" * Offers a similar experience to navigating through history of commands in a shell terminal.","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"public class CommandHistory {","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    private final List\u003cString\u003e commandHistory;","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    private int currentCommandIndex \u003d -1;","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     * Initializes the command history with an empty string as the first command.","lastModifiedDate":"2024-03-24"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    public CommandHistory() {","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        commandHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        commandHistory.add(\"\"); // Add an empty string to the history by default.","lastModifiedDate":"2024-03-24"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"     * Adds a command to the command history and sets the command index to the end of the list","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"     * @param commandText Text to add to the history","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    public void addCommandToHistory(String commandText) {","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        commandHistory.set(commandHistory.size() - 1, commandText);","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        commandHistory.add(\"\");","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        currentCommandIndex \u003d commandHistory.size() - 1;","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     * Gets the command at the current index in the history","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"     * @return Current command","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"    public String getCurrentCommand() {","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        return commandHistory.get(currentCommandIndex);","lastModifiedDate":"2024-03-24"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"     * Returns the previous command in the history and decrements the current command index.","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"     * If there are no more commands to iterate through, it will play an error sound.","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"    public void undo() {","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        if (currentCommandIndex \u003e 0) {","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"            currentCommandIndex--;","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"            // We have reached the start of the command history, no more commands to iterate through!","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"            AudioUtil.playAudio(AudioUtil.ERROR_SOUND);","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"     * Returns the next command in history and increments the current command index.","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"     * Returns an empty string if the currentCommandIndex is at the end of the history.","lastModifiedDate":"2024-03-25"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"    public void redo() {","lastModifiedDate":"2024-03-24"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        // Ensure that index is NOT out of bounds as well","lastModifiedDate":"2024-03-24"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"        if (currentCommandIndex \u003e\u003d 0 \u0026\u0026 currentCommandIndex \u003c commandHistory.size() - 1) {","lastModifiedDate":"2024-03-24"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"            currentCommandIndex++;","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"tankh99":67}},{"path":"src/main/java/seedu/address/commons/util/AudioUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.File;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import javafx.scene.media.Media;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import javafx.scene.media.MediaPlayer;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":" * Contains auto-specific code","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"public class AudioUtil {","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    public static final String ERROR_SOUND \u003d \"assets/boop.mp3\";","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"     * Plays an audio given a file path. Note that there is a slight delay due to having to load up the media player","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"     * @param audioPath File path to the audio file to play. Note that directory starts from project root","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    public static void playAudio(String audioPath) {","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"        Media media \u003d new Media(new File(audioPath).toURI().toString());","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        MediaPlayer mediaPlayer \u003d new MediaPlayer(media);","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        mediaPlayer.play();","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"tankh99":23}},{"path":"src/main/java/seedu/address/commons/util/DateUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-25"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-30"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-25"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":" * Helper functions for parsing and formatting dates","lastModifiedDate":"2024-03-25"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-25"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"public class DateUtil {","lastModifiedDate":"2024-03-25"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    public static final String DATE_INPUT_FORMAT \u003d \"uuuu-MM-dd\";","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    public static final String DATETIME_INPUT_FORMAT \u003d \"uuuu-MM-dd HH:mm\";","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    public static final String DATETIME_DISPLAY_FORMAT \u003d \"dd MMM yyyy, hh:mm a\";","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    public static final String DATE_DISPLAY_FORMAT \u003d \"dd MMM yyyy\";","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * Parses a LocalDate object from a string","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @return Parsed date time from String, or if unable to parse, returns null","lastModifiedDate":"2024-03-30"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"            */","lastModifiedDate":"2024-03-30"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public static LocalDate parseDate(String date) {","lastModifiedDate":"2024-03-30"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2024-03-30"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-03-30"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"            LocalDate parsedDate \u003d LocalDate.parse(","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"                date,","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"                DateTimeFormatter.ofPattern(DATE_INPUT_FORMAT).withResolverStyle(ResolverStyle.STRICT)","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            );","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            return parsedDate;","lastModifiedDate":"2024-03-30"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        } catch (DateTimeException ex) {","lastModifiedDate":"2024-03-30"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-03-30"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-30"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"     * Parses a LocalDateTime object from a string","lastModifiedDate":"2024-03-30"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"     * @return Parsed date time from String, or if unable to parse, returns null","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    public static LocalDateTime parseDateTime(String dateTime) {","lastModifiedDate":"2024-03-25"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"            return LocalDateTime.parse(","lastModifiedDate":"2024-04-10"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"                dateTime,","lastModifiedDate":"2024-04-10"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"                DateTimeFormatter.ofPattern(DATETIME_INPUT_FORMAT).withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        } catch (DateTimeException ex) {","lastModifiedDate":"2024-03-25"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-03-25"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"     * Formats a LocalDateTime object into a string for display","lastModifiedDate":"2024-03-25"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"     * @return The formatted date time string if successful, or null if unable to format","lastModifiedDate":"2024-03-25"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    public static String formatDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2024-03-25"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"            return dateTime.format(","lastModifiedDate":"2024-04-10"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"                DateTimeFormatter.ofPattern(DATETIME_DISPLAY_FORMAT).withResolverStyle(ResolverStyle.STRICT)","lastModifiedDate":"2024-04-10"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"            );","lastModifiedDate":"2024-04-10"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"        } catch (DateTimeException ex) {","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-03-25"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"     * Formats a LocalDateTime object into a string for display","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"     * @return The formatted date time string if successful, or null if unable to format","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"    public static String formatDate(LocalDate dateTime) {","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"            return dateTime.format(","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"                DateTimeFormatter.ofPattern(DATE_DISPLAY_FORMAT).withResolverStyle(ResolverStyle.STRICT)","lastModifiedDate":"2024-04-10"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"            );","lastModifiedDate":"2024-04-10"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"        } catch (DateTimeException ex) {","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-25"}],"authorContributionMap":{"tankh99":87}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"     * Returns true if the {@code sentence} contains the partial {@code word}.","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"     * Ignores case, but a partial word match is required.","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"     * Returns true if the word is empty.","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2024-03-15"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2024-03-15"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2024-03-15"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true","lastModifiedDate":"2024-03-15"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2024-03-15"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"     * @param word     cannot be null, can be empty (but will return true)","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"    public static boolean containsStringIgnoreCase(String sentence, String word) {","lastModifiedDate":"2024-03-03"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2024-03-03"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"        requireNonNull(word);","lastModifiedDate":"2024-03-03"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"        return sentence.toLowerCase().contains(word.toLowerCase());","lastModifiedDate":"2024-03-03"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":79,"author":{"gitId":"Jerome-j"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"tankh99"},"content":"     * Trims whitesapce on both inside and outside the string. E.g. \"  Tom     Dick \" -\u003e \"Tom Dick\"","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"tankh99"},"content":"     * @param input Input to trim","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"tankh99"},"content":"     * @return Trimmed input","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"tankh99"},"content":"    public static String trimWhitespace(String input) {","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"tankh99"},"content":"        requireNonNull(input);","lastModifiedDate":"2024-03-18"},{"lineNumber":100,"author":{"gitId":"tankh99"},"content":"        // Remove leading and trailing whitespace","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"tankh99"},"content":"        input \u003d input.trim();","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"tankh99"},"content":"        // Replace multiple whitespaces with a single space","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"tankh99"},"content":"        input \u003d input.replaceAll(\"\\\\s+\", \" \");","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"tankh99"},"content":"        return input;","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jerome-j":24,"tankh99":14,"-":68}},{"path":"src/main/java/seedu/address/commons/util/UiUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":" * This class contains JavaFX-specific tasks","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"public class UiUtil {","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     * Creates a keyboard shortcut","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * @param region Obtained by calling getRoot() inside JavaFX code","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * @param keyCode The specific key code you want to use as a shortcut","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @param func The function to execute upon triggering","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public static void setShortcut(Region region, KeyCode keyCode, Consumer\u003cKeyEvent\u003e func) {","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        region.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"            if (event.getCode() \u003d\u003d keyCode) {","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"                event.consume(); // This stops the event from doing what it would otherwise do without this function","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"                func.accept(event);","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"            }","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     * Sets the text of an input. This abstracts away the logic of setting the position caret manually","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     * @param textInput Text input to modify","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"     * @param text Text to set","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    public static void setText(TextInputControl textInput, String text) {","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        textInput.setText(text);","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        textInput.positionCaret(text.length());","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"tankh99":41}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"     * Returns the PatientList.","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"     * @see seedu.address.model.Model#getPatientList()","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    ReadOnlyPatientList getPatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"    ObservableList\u003cPatient\u003e getFilteredPersonList();","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"     * Returns an unmodifiable view of the filtered list of appointments","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"    ObservableList\u003cPatientFeedbackReport\u003e getPatientFeedbackReportList();","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"caitlyntang":6,"Jerome-j":2,"tankh99":3,"vnnamng":5,"-":43}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.parser.CommandParser;","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-06-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    private final CommandParser commandParser;","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        commandParser \u003d new CommandParser(","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"                this.model.getPatientList().getPersonList(),","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                this.model.getAppointmentList().getAppointmentList()","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        Command command \u003d commandParser.parseCommand(commandText);","lastModifiedDate":"2024-04-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"            storage.savePatientList(model.getPatientList());","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"            storage.saveAppointmentList(model.getAppointmentList());","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"    public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"        return model.getPatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        return model.getPatientListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":96,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":97,"author":{"gitId":"caitlyntang"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-18"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":100,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"tankh99"},"content":"    public ObservableList\u003cPatientFeedbackReport\u003e getPatientFeedbackReportList() {","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"tankh99"},"content":"        return model.getPatientFeedbackReportList();","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"caitlyntang":6,"Jerome-j":2,"tankh99":11,"vnnamng":8,"-":78}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_APPOINTMENTS_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PATIENT_ID \u003d \"No such patient with id %1$d exists\";","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    public static final String MESSAGE_INVALID_DATE \u003d \"Invalid date format. \"","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"            + \"Please use the format yyyy-MM-dd\";","lastModifiedDate":"2024-03-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_DATE_TIME \u003d \"Invalid date time format. \"","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"Please use the format yyyy-MM-dd HH:mm\";","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DATETIME_IN_THE_PAST \u003d","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \"Date and time cannot be in the past\";","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"    public static final String MESSAGE_INVALID_START_END_DATETIME \u003d \"Start datetime must be before end datetime\";","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"    public static String format(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"        builder.append(patient.getName())","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"                .append(patient.getPhone())","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"                .append(patient.getEmail())","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"                .append(\"; Associated with: \");","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"        patient.getTags().forEach(builder::append);","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"     * Formats the {@code appointment} for display to the user.","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"    public static String formatAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"        builder.append(appointment.getAppointmentId())","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"                .append(\"; StudentId: \")","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"                .append(appointment.getPatientId())","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"                .append(\"; Start: \")","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"                .append(DateUtil.formatDateTime(appointment.getStartDateTime().getDateTimeValue()))","lastModifiedDate":"2024-04-10"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"                .append(\"; End: \")","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"                .append(DateUtil.formatDateTime(appointment.getEndDateTime().getDateTimeValue()))","lastModifiedDate":"2024-04-10"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"                .append(\"; Attend: \")","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"                .append(appointment.getAttendedStatus())","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"                .append(\"; Score: \")","lastModifiedDate":"2024-04-04"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"                .append(appointment.getFeedbackScore())","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"                .append(\"; Description: \")","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"                .append((appointment.getAppointmentDescription()));","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"        return builder.toString();","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"caitlyntang":20,"Jerome-j":7,"tankh99":6,"vnnamng":3,"-":49}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_START_END_DATETIME;","lastModifiedDate":"2024-04-01"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION;","lastModifiedDate":"2024-03-25"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTEND;","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;","lastModifiedDate":"2024-04-01"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK_SCORE;","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_ID;","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":" * Adds an appointment to CogniCare\u0027s appointment list.","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"public class AddAppointmentCommand extends Command {","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    public static final String COMMAND_WORD \u003d \"adda\";","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to CogniCare. \"","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"            + \"Parameters: \"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"            + PREFIX_PATIENT_ID + \"PATIENT_ID \"","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"            + PREFIX_START_DATETIME + \"START_DATETIME \"","lastModifiedDate":"2024-04-01"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"            + PREFIX_END_DATETIME + \"END_DATETIME \"","lastModifiedDate":"2024-04-01"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"            + PREFIX_ATTEND + \"ATTEND \"","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            + PREFIX_FEEDBACK_SCORE + \"FEEDBACK_SCORE \"","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"            + PREFIX_APPOINTMENT_DESCRIPTION + \"APPOINTMENT DESCRIPTION\\n\"","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"            + PREFIX_PATIENT_ID + \"1 \"","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"            + PREFIX_START_DATETIME + \"2024-03-18 09:00 \"","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"            + PREFIX_END_DATETIME + \"2024-03-18 10:00 \"","lastModifiedDate":"2024-04-01"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"            + PREFIX_ATTEND + \"false \"","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"            + PREFIX_FEEDBACK_SCORE + \"5 \"","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"            + PREFIX_APPOINTMENT_DESCRIPTION + \"This is a new appointment\";","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"            \"This appointment already exists in the appointment list\";","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"    private final Appointment toAdd;","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"     * Creates an AddAppointmentCommand to add the specified {@code Appointment}","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"    public AddAppointmentCommand(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"        toAdd \u003d appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"        if (model.hasAppointment(toAdd)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"        if (toAdd.isStartDateTimeAfterEndDateTime()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"            throw new CommandException(MESSAGE_INVALID_START_END_DATETIME);","lastModifiedDate":"2024-04-01"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"        model.addAppointment(toAdd);","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.formatAppointment(toAdd)));","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        if (!(other instanceof AddAppointmentCommand)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"            return false;","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"        AddAppointmentCommand otherAddAppointmentCommand \u003d (AddAppointmentCommand) other;","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"        return toAdd.equals(otherAddAppointmentCommand.toAdd);","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":88,"author":{"gitId":"caitlyntang"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2024-03-18"},{"lineNumber":91,"author":{"gitId":"caitlyntang"},"content":"                .toString();","lastModifiedDate":"2024-03-18"},{"lineNumber":92,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":74,"tankh99":9,"vnnamng":10}},{"path":"src/main/java/seedu/address/logic/commands/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"public class AddPatientCommand extends Command {","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"    public static final String COMMAND_WORD \u003d \"addp\";","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the address book. \"","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"            + \"[\" + PREFIX_ALIAS + \"ASSOCIATED WITH]...\\n\"","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_ALIAS + \"depression \"","lastModifiedDate":"2024-04-01"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_ALIAS + \"sadness\";","lastModifiedDate":"2024-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in the CogniCare address book\";","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"    private final Patient toAdd;","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    public AddPatientCommand(Patient patient) {","lastModifiedDate":"2024-04-01"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        requireNonNull(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"        assert model !\u003d null : \"Model should not be null.\";","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":68,"author":{"gitId":"Jerome-j"},"content":"        if (!(other instanceof AddPatientCommand)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"        AddPatientCommand otherAddPatientCommand \u003d (AddPatientCommand) other;","lastModifiedDate":"2024-04-01"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"        return toAdd.equals(otherAddPatientCommand.toAdd);","lastModifiedDate":"2024-04-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"caitlyntang":1,"Jerome-j":17,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All the data in CogniCare has been cleared!\";","lastModifiedDate":"2024-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"        assert model !\u003d null : \"Model should not be null.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"        model.setPatientList(new PatientList());","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"        model.setAppointmentList(new AppointmentList());","lastModifiedDate":"2024-03-30"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":6,"vnnamng":2,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import java.util.List;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":" * Deletes an appointment identified using its appointment id.","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"public class DeleteAppointmentCommand extends Command {","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"    public static final String COMMAND_WORD \u003d \"deletea\";","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"            + \": Deletes the appointment identified by its appointment id.\\n\"","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"    private final Index targetAppointmentIndex;","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"    public DeleteAppointmentCommand(Index targetAppointmentIndex) {","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"        this.targetAppointmentIndex \u003d targetAppointmentIndex;","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"        if (targetAppointmentIndex.getZeroBased() \u003e\u003d Appointment.getIdTracker()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"        // We try to find the appointment based on the given appointmentId.","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"        Optional\u003cAppointment\u003e appointmentToDelete \u003d lastShownList.stream()","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"                .filter(appointment -\u003e appointment.getAppointmentId() \u003d\u003d targetAppointmentIndex.getOneBased())","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"                .findFirst();","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"        if (appointmentToDelete.isPresent()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"            // Delete the appointment if it was successfully found.","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"            model.deleteAppointment(appointmentToDelete.get());","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"                    Messages.formatAppointment(appointmentToDelete.get())));","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"        } else {","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"            // Otherwise we just throw an error.","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"        if (!(other instanceof DeleteAppointmentCommand)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"            return false;","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"        DeleteAppointmentCommand otherAppointmentDeleteCommand \u003d (DeleteAppointmentCommand) other;","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"        return targetAppointmentIndex.equals(otherAppointmentDeleteCommand.targetAppointmentIndex);","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"                .add(\"targetAppointmentIndex\", targetAppointmentIndex)","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"                .toString();","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"caitlyntang":83}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-04-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"    public static final String COMMAND_WORD \u003d \"deletep\";","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patients list.\\n\"","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Patient: %1$s\";","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        List\u003c Appointment\u003e lastShownAppointmentList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2024-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        //  TODO: We possibly don\u0027t have to check for this anymore. It either exists or does not.","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d Patient.getIdTracker()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"        // We try to find the person based on the given studentId.","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"        Optional\u003cPatient\u003e personToDelete \u003d lastShownList.stream()","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"                .filter(person -\u003e person.getSid() \u003d\u003d targetIndex.getOneBased())","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"                .findFirst();","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        List\u003cAppointment\u003e appointmentToDelete \u003d lastShownAppointmentList.stream()","lastModifiedDate":"2024-04-01"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"                .filter(appointment -\u003e appointment.getPatientId().patientId \u003d\u003d targetIndex.getOneBased())","lastModifiedDate":"2024-04-01"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2024-04-01"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"        if (personToDelete.isPresent()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"            // Delete the person if it was successfully found.","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"            model.deletePerson(personToDelete.get());","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"            for (Appointment appointment : appointmentToDelete) {","lastModifiedDate":"2024-04-01"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"                model.deleteAppointment(appointment);","lastModifiedDate":"2024-04-01"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"                    Messages.format(personToDelete.get())));","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"        } else {","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"            // Otherwise we just throw an error.","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!(other instanceof DeleteCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return targetIndex.equals(otherDeleteCommand.targetIndex);","lastModifiedDate":"2023-07-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":23,"vnnamng":10,"-":61}},{"path":"src/main/java/seedu/address/logic/commands/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_START_END_DATETIME;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTEND;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK_SCORE;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_ID;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import java.util.List;","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import java.util.Objects;","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"import java.util.Optional;","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentDescription;","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.FeedbackScore;","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.HasAttended;","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.PatientId;","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.util.RelationshipUtil;","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":" * Edits the details of an existing appointment in the address book.","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"public class EditAppointmentCommand extends Command {","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"    public static final String COMMAND_WORD \u003d \"edita\";","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment identified \"","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"            + \"by the index number used in the displayed appointment list. \"","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"            + \"[\" + PREFIX_PATIENT_ID + \"PATIENT_ID] \"","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"            + \"[\" + PREFIX_START_DATETIME + \"START_DATE_TIME] \"","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"            + \"[\" + PREFIX_END_DATETIME + \"END_DATE_TIME] \"","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"            + \"[\" + PREFIX_ATTEND + \"ATTEND] \"","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"            + \"[\" + PREFIX_FEEDBACK_SCORE + \"FEEDBACK_SCORE] \"","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"            + \"[\" + PREFIX_APPOINTMENT_DESCRIPTION + \"APPOINTMENT_DESCRIPTION]\\n\"","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"            + PREFIX_ATTEND + \"true \"","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"            + PREFIX_FEEDBACK_SCORE + \"5\";","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book.\";","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"    private final Index index;","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"    private final EditAppointmentCommand.EditAppointmentDescriptor editAppointmentDescriptor;","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"     * @param index                of the appointment in the filtered appointment list to edit","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"     * @param editAppointmentDescriptor details to edit the appointment with","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentCommand(Index index,","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"                                  EditAppointmentCommand.EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(index);","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(editAppointmentDescriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"        this.editAppointmentDescriptor \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"                new EditAppointmentCommand.EditAppointmentDescriptor(editAppointmentDescriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        // We try to find the appointment based on the given appointmentId.","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"        Optional\u003cAppointment\u003e appointmentToEdit \u003d lastShownList.stream()","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"                .filter(appointment -\u003e appointment.getAppointmentId() \u003d\u003d index.getOneBased())","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"                .findFirst();","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"        if (appointmentToEdit.isPresent()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"            Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit.get(), editAppointmentDescriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"caitlyntang"},"content":"            // Checks if the new appointment is the same as the unedited appointment.","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"            if (!appointmentToEdit.get().isSameAppointment(editedAppointment)","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"                    \u0026\u0026 model.hasAppointment(editedAppointment)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"caitlyntang"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"caitlyntang"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"caitlyntang"},"content":"            if (editedAppointment.isStartDateTimeAfterEndDateTime()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"                throw new CommandException(MESSAGE_INVALID_START_END_DATETIME);","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"caitlyntang"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"caitlyntang"},"content":"            if (RelationshipUtil.isAppointmentDateTimeAlreadyTaken(","lastModifiedDate":"2024-04-04"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"                    appointmentToEdit.get(), editedAppointment, lastShownList)) {","lastModifiedDate":"2024-04-04"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"                throw new CommandException(Appointment.MESSAGE_DATETIME_ALREADY_TAKEN);","lastModifiedDate":"2024-04-04"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"            model.setAppointment(appointmentToEdit.get(), editedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"caitlyntang"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"caitlyntang"},"content":"                    Messages.formatAppointment(editedAppointment)));","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":107,"author":{"gitId":"caitlyntang"},"content":"        } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"caitlyntang"},"content":"            // This means that the appointment was not found.","lastModifiedDate":"2024-04-02"},{"lineNumber":109,"author":{"gitId":"caitlyntang"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"caitlyntang"},"content":"     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"caitlyntang"},"content":"     * edited with {@code editAppointmentDescriptor}.","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"caitlyntang"},"content":"    private static Appointment createEditedAppointment(","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"caitlyntang"},"content":"            Appointment appointmentToEdit, EditAppointmentCommand.EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"caitlyntang"},"content":"        assert appointmentToEdit !\u003d null;","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"caitlyntang"},"content":"        int appointmentId \u003d appointmentToEdit.getAppointmentId();","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"caitlyntang"},"content":"        PatientId patientId \u003d editAppointmentDescriptor.getPatientId().orElse(appointmentToEdit.getPatientId());","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"caitlyntang"},"content":"        StartDateTime startDateTime \u003d editAppointmentDescriptor.getStartDateTime()","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"caitlyntang"},"content":"                .orElse(appointmentToEdit.getStartDateTime());","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"caitlyntang"},"content":"        EndDateTime endDateTime \u003d editAppointmentDescriptor.getEndDateTime().orElse(appointmentToEdit.getEndDateTime());","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"caitlyntang"},"content":"        HasAttended hasAttended \u003d editAppointmentDescriptor.getHasAttended()","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"caitlyntang"},"content":"                .orElse(appointmentToEdit.getAttendedStatus());","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"caitlyntang"},"content":"        FeedbackScore feedbackScore \u003d editAppointmentDescriptor.getFeedbackScore()","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"caitlyntang"},"content":"                .orElse(appointmentToEdit.getFeedbackScore());","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"caitlyntang"},"content":"        AppointmentDescription appointmentDescription \u003d editAppointmentDescriptor.getAppointmentDescription()","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"caitlyntang"},"content":"                .orElse(appointmentToEdit.getAppointmentDescription());","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"caitlyntang"},"content":"        return new Appointment(appointmentId, startDateTime, endDateTime, patientId, appointmentDescription,","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"caitlyntang"},"content":"                hasAttended, feedbackScore);","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"caitlyntang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"caitlyntang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-04-02"},{"lineNumber":142,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"caitlyntang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"caitlyntang"},"content":"        if (!(other instanceof EditAppointmentCommand)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"caitlyntang"},"content":"            return false;","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand otherEditCommand \u003d (EditAppointmentCommand) other;","lastModifiedDate":"2024-04-02"},{"lineNumber":150,"author":{"gitId":"caitlyntang"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"caitlyntang"},"content":"                \u0026\u0026 editAppointmentDescriptor.equals(otherEditCommand.editAppointmentDescriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":152,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":153,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":154,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":155,"author":{"gitId":"caitlyntang"},"content":"    public String toString() {","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"caitlyntang"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"caitlyntang"},"content":"                .add(\"index\", index)","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"caitlyntang"},"content":"                .add(\"editAppointmentDescriptor\", editAppointmentDescriptor)","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"caitlyntang"},"content":"                .toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"caitlyntang"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"caitlyntang"},"content":"     * corresponding field value of the appointment.","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":166,"author":{"gitId":"caitlyntang"},"content":"    public static class EditAppointmentDescriptor {","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"caitlyntang"},"content":"        private int appointmentId;","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"caitlyntang"},"content":"        private PatientId patientId;","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"caitlyntang"},"content":"        private StartDateTime startDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"caitlyntang"},"content":"        private EndDateTime endDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":171,"author":{"gitId":"caitlyntang"},"content":"        private HasAttended hasAttended;","lastModifiedDate":"2024-04-02"},{"lineNumber":172,"author":{"gitId":"caitlyntang"},"content":"        private FeedbackScore feedbackScore;","lastModifiedDate":"2024-04-02"},{"lineNumber":173,"author":{"gitId":"caitlyntang"},"content":"        private AppointmentDescription appointmentDescription;","lastModifiedDate":"2024-04-02"},{"lineNumber":174,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":175,"author":{"gitId":"caitlyntang"},"content":"        public EditAppointmentDescriptor() {","lastModifiedDate":"2024-04-02"},{"lineNumber":176,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":177,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":178,"author":{"gitId":"caitlyntang"},"content":"        /**","lastModifiedDate":"2024-04-02"},{"lineNumber":179,"author":{"gitId":"caitlyntang"},"content":"         * Copy constructor.","lastModifiedDate":"2024-04-02"},{"lineNumber":180,"author":{"gitId":"caitlyntang"},"content":"         */","lastModifiedDate":"2024-04-02"},{"lineNumber":181,"author":{"gitId":"caitlyntang"},"content":"        public EditAppointmentDescriptor(EditAppointmentCommand.EditAppointmentDescriptor toCopy) {","lastModifiedDate":"2024-04-02"},{"lineNumber":182,"author":{"gitId":"caitlyntang"},"content":"            setAppointmentId(toCopy.appointmentId);","lastModifiedDate":"2024-04-02"},{"lineNumber":183,"author":{"gitId":"caitlyntang"},"content":"            setPatientId(toCopy.patientId);","lastModifiedDate":"2024-04-02"},{"lineNumber":184,"author":{"gitId":"caitlyntang"},"content":"            setStartDateTime(toCopy.startDateTime);","lastModifiedDate":"2024-04-02"},{"lineNumber":185,"author":{"gitId":"caitlyntang"},"content":"            setEndDateTime(toCopy.endDateTime);","lastModifiedDate":"2024-04-02"},{"lineNumber":186,"author":{"gitId":"caitlyntang"},"content":"            setHasAttended(toCopy.hasAttended);","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"caitlyntang"},"content":"            setFeedbackScore(toCopy.feedbackScore);","lastModifiedDate":"2024-04-02"},{"lineNumber":188,"author":{"gitId":"caitlyntang"},"content":"            setAppointmentDescription(toCopy.appointmentDescription);","lastModifiedDate":"2024-04-02"},{"lineNumber":189,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":190,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":191,"author":{"gitId":"caitlyntang"},"content":"        /**","lastModifiedDate":"2024-04-02"},{"lineNumber":192,"author":{"gitId":"caitlyntang"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2024-04-02"},{"lineNumber":193,"author":{"gitId":"caitlyntang"},"content":"         */","lastModifiedDate":"2024-04-02"},{"lineNumber":194,"author":{"gitId":"caitlyntang"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2024-04-02"},{"lineNumber":195,"author":{"gitId":"caitlyntang"},"content":"            return CollectionUtil.isAnyNonNull(patientId, startDateTime, endDateTime, hasAttended,","lastModifiedDate":"2024-04-02"},{"lineNumber":196,"author":{"gitId":"caitlyntang"},"content":"                    feedbackScore, appointmentDescription);","lastModifiedDate":"2024-04-02"},{"lineNumber":197,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":198,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":199,"author":{"gitId":"caitlyntang"},"content":"        public void setPatientId(PatientId patientId) {","lastModifiedDate":"2024-04-02"},{"lineNumber":200,"author":{"gitId":"caitlyntang"},"content":"            this.patientId \u003d patientId;","lastModifiedDate":"2024-04-02"},{"lineNumber":201,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":202,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":203,"author":{"gitId":"caitlyntang"},"content":"        public Optional\u003cPatientId\u003e getPatientId() {","lastModifiedDate":"2024-04-02"},{"lineNumber":204,"author":{"gitId":"caitlyntang"},"content":"            return Optional.ofNullable(patientId);","lastModifiedDate":"2024-04-02"},{"lineNumber":205,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":206,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":207,"author":{"gitId":"caitlyntang"},"content":"        public void setStartDateTime(StartDateTime startDateTime) {","lastModifiedDate":"2024-04-02"},{"lineNumber":208,"author":{"gitId":"caitlyntang"},"content":"            this.startDateTime \u003d startDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":209,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":210,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":211,"author":{"gitId":"caitlyntang"},"content":"        public Optional\u003cStartDateTime\u003e getStartDateTime() {","lastModifiedDate":"2024-04-02"},{"lineNumber":212,"author":{"gitId":"caitlyntang"},"content":"            return Optional.ofNullable(startDateTime);","lastModifiedDate":"2024-04-02"},{"lineNumber":213,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":214,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":215,"author":{"gitId":"caitlyntang"},"content":"        public void setEndDateTime(EndDateTime endDateTime) {","lastModifiedDate":"2024-04-02"},{"lineNumber":216,"author":{"gitId":"caitlyntang"},"content":"            this.endDateTime \u003d endDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":217,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":218,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":219,"author":{"gitId":"caitlyntang"},"content":"        public Optional\u003cEndDateTime\u003e getEndDateTime() {","lastModifiedDate":"2024-04-02"},{"lineNumber":220,"author":{"gitId":"caitlyntang"},"content":"            return Optional.ofNullable(endDateTime);","lastModifiedDate":"2024-04-02"},{"lineNumber":221,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":222,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":223,"author":{"gitId":"caitlyntang"},"content":"        public void setHasAttended(HasAttended hasAttended) {","lastModifiedDate":"2024-04-02"},{"lineNumber":224,"author":{"gitId":"caitlyntang"},"content":"            this.hasAttended \u003d hasAttended;","lastModifiedDate":"2024-04-02"},{"lineNumber":225,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":226,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":227,"author":{"gitId":"caitlyntang"},"content":"        public Optional\u003cHasAttended\u003e getHasAttended() {","lastModifiedDate":"2024-04-02"},{"lineNumber":228,"author":{"gitId":"caitlyntang"},"content":"            return Optional.ofNullable(hasAttended);","lastModifiedDate":"2024-04-02"},{"lineNumber":229,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":230,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":231,"author":{"gitId":"caitlyntang"},"content":"        public void setFeedbackScore(FeedbackScore feedbackScore) {","lastModifiedDate":"2024-04-02"},{"lineNumber":232,"author":{"gitId":"caitlyntang"},"content":"            this.feedbackScore \u003d feedbackScore;","lastModifiedDate":"2024-04-02"},{"lineNumber":233,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":234,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":235,"author":{"gitId":"caitlyntang"},"content":"        public Optional\u003cFeedbackScore\u003e getFeedbackScore() {","lastModifiedDate":"2024-04-02"},{"lineNumber":236,"author":{"gitId":"caitlyntang"},"content":"            return Optional.ofNullable(feedbackScore);","lastModifiedDate":"2024-04-02"},{"lineNumber":237,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":238,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":239,"author":{"gitId":"caitlyntang"},"content":"        public void setAppointmentDescription(AppointmentDescription appointmentDescription) {","lastModifiedDate":"2024-04-02"},{"lineNumber":240,"author":{"gitId":"caitlyntang"},"content":"            this.appointmentDescription \u003d appointmentDescription;","lastModifiedDate":"2024-04-02"},{"lineNumber":241,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":242,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":243,"author":{"gitId":"caitlyntang"},"content":"        public Optional\u003cAppointmentDescription\u003e getAppointmentDescription() {","lastModifiedDate":"2024-04-02"},{"lineNumber":244,"author":{"gitId":"caitlyntang"},"content":"            return Optional.ofNullable(appointmentDescription);","lastModifiedDate":"2024-04-02"},{"lineNumber":245,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":246,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":247,"author":{"gitId":"caitlyntang"},"content":"        public void setAppointmentId(int appointmentId) {","lastModifiedDate":"2024-04-02"},{"lineNumber":248,"author":{"gitId":"caitlyntang"},"content":"            this.appointmentId \u003d appointmentId;","lastModifiedDate":"2024-04-02"},{"lineNumber":249,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":250,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":251,"author":{"gitId":"caitlyntang"},"content":"        public Optional\u003cInteger\u003e getAppointmentId() {","lastModifiedDate":"2024-04-02"},{"lineNumber":252,"author":{"gitId":"caitlyntang"},"content":"            return Optional.of(Integer.valueOf(appointmentId));","lastModifiedDate":"2024-04-02"},{"lineNumber":253,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":254,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":255,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":256,"author":{"gitId":"caitlyntang"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2024-04-02"},{"lineNumber":257,"author":{"gitId":"caitlyntang"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-02"},{"lineNumber":258,"author":{"gitId":"caitlyntang"},"content":"                return true;","lastModifiedDate":"2024-04-02"},{"lineNumber":259,"author":{"gitId":"caitlyntang"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":260,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":261,"author":{"gitId":"caitlyntang"},"content":"            // instanceof handles nulls","lastModifiedDate":"2024-04-02"},{"lineNumber":262,"author":{"gitId":"caitlyntang"},"content":"            if (!(other instanceof EditAppointmentCommand.EditAppointmentDescriptor)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":263,"author":{"gitId":"caitlyntang"},"content":"                return false;","lastModifiedDate":"2024-04-02"},{"lineNumber":264,"author":{"gitId":"caitlyntang"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":265,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":266,"author":{"gitId":"caitlyntang"},"content":"            EditAppointmentCommand.EditAppointmentDescriptor otherEditAppointmentDescriptor \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":267,"author":{"gitId":"caitlyntang"},"content":"                    (EditAppointmentCommand.EditAppointmentDescriptor) other;","lastModifiedDate":"2024-04-02"},{"lineNumber":268,"author":{"gitId":"caitlyntang"},"content":"            return appointmentId \u003d\u003d otherEditAppointmentDescriptor.appointmentId","lastModifiedDate":"2024-04-02"},{"lineNumber":269,"author":{"gitId":"caitlyntang"},"content":"                    \u0026\u0026 Objects.equals(patientId, otherEditAppointmentDescriptor.patientId)","lastModifiedDate":"2024-04-02"},{"lineNumber":270,"author":{"gitId":"caitlyntang"},"content":"                    \u0026\u0026 Objects.equals(startDateTime, otherEditAppointmentDescriptor.startDateTime)","lastModifiedDate":"2024-04-02"},{"lineNumber":271,"author":{"gitId":"caitlyntang"},"content":"                    \u0026\u0026 Objects.equals(endDateTime, otherEditAppointmentDescriptor.endDateTime)","lastModifiedDate":"2024-04-02"},{"lineNumber":272,"author":{"gitId":"caitlyntang"},"content":"                    \u0026\u0026 Objects.equals(hasAttended, otherEditAppointmentDescriptor.hasAttended)","lastModifiedDate":"2024-04-02"},{"lineNumber":273,"author":{"gitId":"caitlyntang"},"content":"                    \u0026\u0026 Objects.equals(feedbackScore, otherEditAppointmentDescriptor.feedbackScore)","lastModifiedDate":"2024-04-02"},{"lineNumber":274,"author":{"gitId":"caitlyntang"},"content":"                    \u0026\u0026 Objects.equals(appointmentDescription, otherEditAppointmentDescriptor.appointmentDescription);","lastModifiedDate":"2024-04-02"},{"lineNumber":275,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":276,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":277,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":278,"author":{"gitId":"caitlyntang"},"content":"        public String toString() {","lastModifiedDate":"2024-04-02"},{"lineNumber":279,"author":{"gitId":"caitlyntang"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2024-04-02"},{"lineNumber":280,"author":{"gitId":"caitlyntang"},"content":"                    .add(\"patientId\", patientId)","lastModifiedDate":"2024-04-02"},{"lineNumber":281,"author":{"gitId":"caitlyntang"},"content":"                    .add(\"startDateTime\", startDateTime)","lastModifiedDate":"2024-04-02"},{"lineNumber":282,"author":{"gitId":"caitlyntang"},"content":"                    .add(\"endDateTime\", endDateTime)","lastModifiedDate":"2024-04-02"},{"lineNumber":283,"author":{"gitId":"caitlyntang"},"content":"                    .add(\"hasAttended\", hasAttended)","lastModifiedDate":"2024-04-02"},{"lineNumber":284,"author":{"gitId":"caitlyntang"},"content":"                    .add(\"feedbackScore\", feedbackScore)","lastModifiedDate":"2024-04-02"},{"lineNumber":285,"author":{"gitId":"caitlyntang"},"content":"                    .add(\"appointmentDescription\", appointmentDescription)","lastModifiedDate":"2024-04-02"},{"lineNumber":286,"author":{"gitId":"caitlyntang"},"content":"                    .toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":287,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":288,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":289,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"caitlyntang":289}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"    public static final String COMMAND_WORD \u003d \"editp\";","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"            + \"[\" + PREFIX_ALIAS + \"ALIAS]...\\n\"","lastModifiedDate":"2024-03-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param index                of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // We try to find the person based on the given studentId.","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"        Optional\u003cPatient\u003e personToEdit \u003d lastShownList.stream()","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .filter(person -\u003e person.getSid() \u003d\u003d index.getOneBased())","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .findFirst();","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (personToEdit.isPresent()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"Jerome-j"},"content":"            Patient editedPatient \u003d createEditedPerson(personToEdit.get(), editPersonDescriptor);","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            // Checks if the new person is the same as the unedited person.","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"Jerome-j"},"content":"            if (!personToEdit.get().isSamePerson(editedPatient) \u0026\u0026 model.hasPerson(editedPatient)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"Jerome-j"},"content":"            model.setPerson(personToEdit.get(), editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"Jerome-j"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient)));","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            // This means that the person was not found.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"Jerome-j"},"content":"    private static Patient createEditedPerson(Patient patientToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"Jerome-j"},"content":"        assert patientToEdit !\u003d null;","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"Jerome-j"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(patientToEdit.getName());","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"Jerome-j"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(patientToEdit.getPhone());","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"Jerome-j"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(patientToEdit.getEmail());","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"Jerome-j"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(patientToEdit.getTags());","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"Jerome-j"},"content":"        int studentId \u003d patientToEdit.getSid();","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"Jerome-j"},"content":"        return new Patient(updatedName, updatedPhone, updatedEmail, updatedTags, studentId, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // TODO: maybe need to change to `Integer` type","lastModifiedDate":"2024-03-20"},{"lineNumber":146,"author":{"gitId":"Jerome-j"},"content":"        private int id;","lastModifiedDate":"2024-03-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"Jerome-j"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, tags);","lastModifiedDate":"2024-03-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public void setStudentId(int studentId) {","lastModifiedDate":"2024-03-20"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            this.id \u003d studentId;","lastModifiedDate":"2024-03-20"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public Optional\u003cInteger\u003e getStudentId() {","lastModifiedDate":"2024-03-20"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            return Optional.of(Integer.valueOf(id));","lastModifiedDate":"2024-03-20"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(tags, otherEditPersonDescriptor.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                    .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"Jerome-j":25,"-":223}},{"path":"src/main/java/seedu/address/logic/commands/FilterAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import seedu.address.logic.parser.CliSyntax;","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":" * Filter the appointment in the CogniCare appointment list which happen on the specified datetimes.","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"public class FilterAppointmentCommand extends Command {","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter the appointment which happens \"","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"            + \"between one datetime and another datetime. Parameters: \"","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"            + CliSyntax.PREFIX_START_DATETIME + \"START_DATETIME \"","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"            + CliSyntax.PREFIX_END_DATETIME + \"END_DATETIME\\n\"","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"            + CliSyntax.PREFIX_START_DATETIME + \"2024-03-18 09:00\"","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"            + CliSyntax.PREFIX_END_DATETIME + \"2024-03-18 18:00\";","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"    private final Predicate\u003cAppointment\u003e predicate;","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    private final StartDateTime startDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"    private final EndDateTime endDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"     * Creates a FilterAppointmentCommand to filter the appointment list with the specified predicate.","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    public FilterAppointmentCommand(Predicate\u003cAppointment\u003e predicate,","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"                                    StartDateTime startDateTime, EndDateTime endDateTime) {","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        requireAllNonNull(model, startDateTime, endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        // Check if startDateTime is before endDateTime","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"        if (startDateTime.compareTo(endDateTime) \u003e 0) {","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_START_END_DATETIME);","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        model.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"        return new CommandResult(String.format(Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW,","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"                model.getFilteredAppointmentList().size()));","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"            return true;","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"        if (!(other instanceof FilterAppointmentCommand)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"            return false;","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentCommand otherAppointmentFindCommand \u003d (FilterAppointmentCommand) other;","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"        return predicate.equals(otherAppointmentFindCommand.predicate)","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 startDateTime.equals(otherAppointmentFindCommand.startDateTime)","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 endDateTime.equals(otherAppointmentFindCommand.endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"    public String toString() {","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-31"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"                .toString();","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":81}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return predicate.equals(otherFindCommand.predicate);","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"Jerome-j":1,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.ui.HelpWindow;","lastModifiedDate":"2024-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"For the complete user guide, please visit: \"","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"            + HelpWindow.USERGUIDE_URL;","lastModifiedDate":"2024-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":3,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/ListAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_ID;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_ID;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"public class ListAppointmentCommand extends Command {","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"    public static final String COMMAND_WORD \u003d \"querya\";","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all appointments that meet the condition. \"","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"            + \"Optional Parameters: \"","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"            + PREFIX_APPOINTMENT_ID + \"APPOINTMENT_ID \"","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"            + PREFIX_PATIENT_ID + \"PATIENT_ID \"","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"            + PREFIX_NAME + \"PATIENT_NAME \"","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"            + PREFIX_APPOINTMENT_ID + \"1\"","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"            + \"Or: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            + PREFIX_PATIENT_ID + \"1\"","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            + \"Or: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"            + PREFIX_NAME + \"John Doe\" + \" \"","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"            + \"Note that you can only use one of the optional parameters at a time.\";","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    private final Predicate\u003cAppointment\u003e predicates;","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    public ListAppointmentCommand(Predicate\u003cAppointment\u003e predicates) {","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        this.predicates \u003d predicates;","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        model.updateFilteredAppointmentList(predicates);","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"caitlyntang":1,"tankh99":49}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-03"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"    public static final String COMMAND_WORD \u003d \"queryp\";","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all students that meets the condition \"","lastModifiedDate":"2024-03-03"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"            + \"Optional Parameters: \"","lastModifiedDate":"2024-03-03"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2024-03-03"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2024-03-03"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2024-03-03"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"            + \"[\" + PREFIX_ALIAS + \"ALIAS]...\\n\"","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-03"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2024-03-03"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2024-03-03"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2024-03-03"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_ALIAS + \"depression \"","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"            + PREFIX_ALIAS + \"sad\";","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"    private final Predicate\u003cPatient\u003e predicates;","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"    public ListCommand(Predicate\u003cPatient\u003e predicates) {","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"        this.predicates \u003d predicates;","lastModifiedDate":"2024-03-03"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        assert model !\u003d null : \"Model should not be null.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"        model.updateFilteredPersonList(predicates);","lastModifiedDate":"2024-03-03"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":31,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ReportFeedbackCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-30"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-30"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-30"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-30"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.FilterAppointmentPredicate;","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-30"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":" * Prints out feedback score statistics for each patient across a specific date range","lastModifiedDate":"2024-03-30"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"public class ReportFeedbackCommand extends Command {","lastModifiedDate":"2024-03-30"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public static final String COMMAND_WORD \u003d \"reportf\";","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Generated patient feedback report from %1$s to %2$s\";","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates a report of feedback scores \"","lastModifiedDate":"2024-03-30"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"            + \"for each patient across a specific date range. \"","lastModifiedDate":"2024-03-30"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"            + \"Parameters: \"","lastModifiedDate":"2024-03-30"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"            + PREFIX_START_DATETIME + \"FROM_DATE \"","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            + PREFIX_END_DATETIME + \" TO_DATE\\n\"","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-30"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"            + PREFIX_START_DATETIME + \"2024-03-18 \"","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"            + PREFIX_END_DATETIME + \"2024-03-18\\n\";","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    private final LocalDateTime fromDate;","lastModifiedDate":"2024-03-30"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    private final LocalDateTime toDate;","lastModifiedDate":"2024-03-30"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"    // Note that we\u0027re unable to perform the same predicate query logic here because reports are fundmantally different","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    // from the usual model objects as report objects are transient data that are aggregated from other models","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"     * Creates a ReportFeedbackCommand to generate a report of feedback scores for each patient across a specific date","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"     * @param fromDate","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"     * @param toDate","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    public ReportFeedbackCommand(LocalDateTime fromDate, LocalDateTime toDate) {","lastModifiedDate":"2024-03-30"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2024-03-30"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2024-03-30"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-30"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-30"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        model.updateFilteredAppointmentList(new FilterAppointmentPredicate(","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"            new StartDateTime(fromDate), new EndDateTime(toDate)));","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"        String fromDateStr \u003d DateUtil.formatDate(fromDate.toLocalDate());","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"        if (fromDate \u003d\u003d LocalDateTime.MIN) {","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"            fromDateStr \u003d \"the beginning of time\";","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"        String toDateStr \u003d DateUtil.formatDate(toDate.toLocalDate());","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"        if (toDate \u003d\u003d LocalDateTime.MAX) {","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"            toDateStr \u003d \"the end of time\";","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, fromDateStr, toDateStr));","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-30"}],"authorContributionMap":{"tankh99":67}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTEND;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK_SCORE;","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_ID;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentDescription;","lastModifiedDate":"2024-04-01"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.FeedbackScore;","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.HasAttended;","lastModifiedDate":"2024-04-01"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.PatientId;","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.util.RelationshipUtil;","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"    private final List\u003cPatient\u003e patients;","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final List\u003cAppointment\u003e appointments;","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Takes in multiple lists so as to perform validation checks against them","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param patients List of patients","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param appointments List of appointments","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"    public AddAppointmentCommandParser(List\u003cPatient\u003e patients, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.appointments \u003d appointments;","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"    //@@author caitlyntang","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"     * and returns an AddAppointmentCommand object for execution.","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_ID, PREFIX_START_DATETIME, PREFIX_END_DATETIME,","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"                        PREFIX_ATTEND, PREFIX_APPOINTMENT_DESCRIPTION, PREFIX_FEEDBACK_SCORE);","lastModifiedDate":"2024-03-25"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PATIENT_ID, PREFIX_START_DATETIME, PREFIX_END_DATETIME)","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"                PREFIX_PATIENT_ID, PREFIX_START_DATETIME, PREFIX_END_DATETIME, PREFIX_ATTEND,","lastModifiedDate":"2024-04-01"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"                PREFIX_APPOINTMENT_DESCRIPTION, PREFIX_FEEDBACK_SCORE);","lastModifiedDate":"2024-04-01"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"        PatientId patientId \u003d ParserUtil.parsePatientId(argMultimap.getValue(PREFIX_PATIENT_ID).get(), patients);","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"        StartDateTime startDateTime \u003d ParserUtil.parseStartDateTime(argMultimap.getValue(PREFIX_START_DATETIME).get());","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"        EndDateTime endDateTime \u003d ParserUtil.parseEndDateTime(argMultimap.getValue(PREFIX_END_DATETIME).get());","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"        HasAttended hasAttended \u003d ParserUtil.parseHasAttended(argMultimap.getValue(PREFIX_ATTEND).orElse(\"\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"        AppointmentDescription appointmentDescription \u003d ParserUtil.parseDescription(","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"                argMultimap.getValue(PREFIX_APPOINTMENT_DESCRIPTION).orElse(\"\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"        FeedbackScore feedbackScore \u003d ParserUtil.parseFeedbackScore(","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"                argMultimap.getValue(PREFIX_FEEDBACK_SCORE).orElse(\"\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointment \u003d new Appointment(startDateTime, endDateTime, patientId, appointmentDescription,","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"                hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"        if (RelationshipUtil.isAppointmentDateTimeAlreadyTaken(startDateTime, endDateTime, this.appointments)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(Appointment.MESSAGE_DATETIME_ALREADY_TAKEN);","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        return new AddAppointmentCommand(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":62,"Jerome-j":3,"tankh99":2,"vnnamng":2,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/AddPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddPatientCommandParser.class);","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"    public AddPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ALIAS);","lastModifiedDate":"2024-03-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"            logger.log(Level.WARNING, \"AddPatientCommandParser error: \" + args);","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);","lastModifiedDate":"2024-04-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_ALIAS));","lastModifiedDate":"2024-03-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        Patient patient \u003d new Patient(name, phone, email, tagList);","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"        return new AddPatientCommand(patient);","lastModifiedDate":"2024-04-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"caitlyntang":1,"Jerome-j":20,"-":33}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"    public static final Prefix PREFIX_ALIAS \u003d new Prefix(\"a/\");","lastModifiedDate":"2024-03-03"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"    public static final Prefix PREFIX_PATIENT_ID \u003d new Prefix(\"pid/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"    public static final Prefix PREFIX_START_DATETIME \u003d new Prefix(\"sd/\");","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    public static final Prefix PREFIX_END_DATETIME \u003d new Prefix(\"ed/\");","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"    public static final Prefix PREFIX_ATTEND \u003d new Prefix(\"att/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"    //TODO: remove after case log is implemented","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"    public static final Prefix PREFIX_APPOINTMENT_DESCRIPTION \u003d new Prefix(\"ad/\");","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"    public static final Prefix PREFIX_APPOINTMENT_ID \u003d new Prefix(\"aid/\");","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    public static final Prefix PREFIX_FEEDBACK_SCORE \u003d new Prefix(\"s/\");","lastModifiedDate":"2024-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"caitlyntang":5,"Jerome-j":1,"tankh99":1,"vnnamng":2,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/CommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2024-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"import seedu.address.logic.commands.FilterAppointmentCommand;","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.commands.ListAppointmentCommand;","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.commands.ReportFeedbackCommand;","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"public class CommandParser {","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CommandParser.class);","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"    private final List\u003cPatient\u003e patients;","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final List\u003cAppointment\u003e appointments;","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param patients List of patients","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param appointments List of appointments","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    public CommandParser(List\u003cPatient\u003e patients, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.appointments \u003d appointments;","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"     * @param userInput full user input string.","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"        case AddPatientCommand.COMMAND_WORD:","lastModifiedDate":"2024-04-01"},{"lineNumber":78,"author":{"gitId":"Jerome-j"},"content":"            return new AddPatientCommandParser().parse(arguments);","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"Jerome-j"},"content":"            return new EditPatientCommandParser().parse(arguments);","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"Jerome-j"},"content":"            return new DeletePatientCommandParser().parse(arguments);","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"Jerome-j"},"content":"            return new FindPatientCommandParser().parse(arguments);","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"Jerome-j"},"content":"            return new ListPatientCommandParser().parse(arguments);","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"        case AddAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return new AddAppointmentCommandParser(this.patients, this.appointments).parse(arguments);","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"caitlyntang"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"caitlyntang"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"tankh99"},"content":"        case ListAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return new ListAppointmentCommandParser(this.patients).parse(arguments);","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"vnnamng"},"content":"        case FilterAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-31"},{"lineNumber":111,"author":{"gitId":"vnnamng"},"content":"            return new FilterAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2024-03-31"},{"lineNumber":112,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":113,"author":{"gitId":"tankh99"},"content":"        case ReportFeedbackCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-30"},{"lineNumber":114,"author":{"gitId":"tankh99"},"content":"            return new ReportFeedbackCommandParser().parse(arguments);","lastModifiedDate":"2024-03-30"},{"lineNumber":115,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"caitlyntang"},"content":"        case EditAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"caitlyntang"},"content":"            return new EditAppointmentCommandParser(patients, appointments).parse(arguments);","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"caitlyntang":13,"Jerome-j":9,"tankh99":11,"vnnamng":3,"-":89}},{"path":"src/main/java/seedu/address/logic/parser/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"     * and returns a DeleteAppointmentCommand object for execution.","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"        try {","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"            return new DeleteAppointmentCommand(index);","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"caitlyntang":29}},{"path":"src/main/java/seedu/address/logic/parser/DeletePatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"public class DeletePatientCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Jerome-j":1,"-":28}},{"path":"src/main/java/seedu/address/logic/parser/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTEND;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK_SCORE;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_ID;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import java.util.List;","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":" * Parses input arguments and creates a new EditAppointmentCommand object","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"public class EditAppointmentCommandParser {","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"    private final List\u003cPatient\u003e patients;","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    private final List\u003cAppointment\u003e appointments;","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"     * Takes in multiple lists so as to perform validation checks against them","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"     * @param patients List of patients","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentCommandParser(List\u003cPatient\u003e patients, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"        this.appointments \u003d appointments;","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_ID, PREFIX_START_DATETIME, PREFIX_END_DATETIME,","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"                        PREFIX_ATTEND, PREFIX_FEEDBACK_SCORE, PREFIX_APPOINTMENT_DESCRIPTION);","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"        Index index;","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_PATIENT_ID, PREFIX_START_DATETIME, PREFIX_END_DATETIME,","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"                PREFIX_ATTEND, PREFIX_FEEDBACK_SCORE, PREFIX_APPOINTMENT_DESCRIPTION);","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor editAppointmentDescriptor \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"                new EditAppointmentCommand.EditAppointmentDescriptor();","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"        if (argMultimap.getValue(PREFIX_PATIENT_ID).isPresent()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"            editAppointmentDescriptor.setPatientId(","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"                    ParserUtil.parsePatientId(argMultimap.getValue(PREFIX_PATIENT_ID).get(), patients));","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"        if (argMultimap.getValue(PREFIX_START_DATETIME).isPresent()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"            editAppointmentDescriptor.setStartDateTime(","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"                    ParserUtil.parseStartDateTime(argMultimap.getValue(PREFIX_START_DATETIME).get()));","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"        if (argMultimap.getValue(PREFIX_END_DATETIME).isPresent()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"            editAppointmentDescriptor.setEndDateTime(","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"                    ParserUtil.parseEndDateTime(argMultimap.getValue(PREFIX_END_DATETIME).get()));","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"        if (argMultimap.getValue(PREFIX_ATTEND).isPresent()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"            editAppointmentDescriptor.setHasAttended(","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"                    ParserUtil.parseHasAttended(argMultimap.getValue(PREFIX_ATTEND).get()));","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        if (argMultimap.getValue(PREFIX_FEEDBACK_SCORE).isPresent()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"            editAppointmentDescriptor.setFeedbackScore(","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"                    ParserUtil.parseFeedbackScore(argMultimap.getValue(PREFIX_FEEDBACK_SCORE).get()));","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"        if (argMultimap.getValue(PREFIX_APPOINTMENT_DESCRIPTION).isPresent()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"            editAppointmentDescriptor.setAppointmentDescription(","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_APPOINTMENT_DESCRIPTION).get()));","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"caitlyntang"},"content":"        return new EditAppointmentCommand(index, editAppointmentDescriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"caitlyntang":94}},{"path":"src/main/java/seedu/address/logic/parser/EditPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"public class EditPatientCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(EditPatientCommandParser.class);","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ALIAS);","lastModifiedDate":"2024-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"            logger.log(Level.WARNING, \"EditPatientCommandParser error: \" + args);","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);","lastModifiedDate":"2024-04-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_ALIAS)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2024-03-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Jerome-j":10,"-":77}},{"path":"src/main/java/seedu/address/logic/parser/FilterAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import seedu.address.logic.commands.FilterAppointmentCommand;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.FilterAppointmentPredicate;","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":" * Parses input arguments and creates a new FindAppointmentCommand object","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"public class FilterAppointmentCommandParser implements Parser\u003cFilterAppointmentCommand\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAppointmentCommand","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"     * and returns a FindAppointmentCommand object for execution.","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    public FilterAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_START_DATETIME, PREFIX_END_DATETIME);","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"        if (!argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"            throw new ParseException(","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_START_DATETIME, PREFIX_END_DATETIME);","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"        StartDateTime startDateTime;","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"        EndDateTime endDateTime;","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"        if (argMultimap.getValue(PREFIX_START_DATETIME).isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"            startDateTime \u003d new StartDateTime(LocalDateTime.MIN);","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"            startDateTime \u003d ParserUtil.parseStartDateTime(argMultimap.getValue(PREFIX_START_DATETIME).get());","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"        if (argMultimap.getValue(PREFIX_END_DATETIME).isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"            endDateTime \u003d new EndDateTime(LocalDateTime.MAX);","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"            endDateTime \u003d ParserUtil.parseEndDateTime(argMultimap.getValue(PREFIX_END_DATETIME).get());","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        return new FilterAppointmentCommand(new FilterAppointmentPredicate(startDateTime, endDateTime),","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"                startDateTime, endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":52}},{"path":"src/main/java/seedu/address/logic/parser/FindPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"public class FindPatientCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Jerome-j":2,"-":31}},{"path":"src/main/java/seedu/address/logic/parser/ListAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.commands.ListAppointmentCommand;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.AppointmentContainsAppointmentIdPredicate;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.AppointmentContainsPatientIdPredicate;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.AppointmentContainsPatientNamePredicate;","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.util.RelationshipUtil;","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":" * Parses input arguments and creates a new ListCommand object","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"public class ListAppointmentCommandParser implements Parser\u003cListAppointmentCommand\u003e {","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"    private final List\u003cPatient\u003e patients;","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"    public ListAppointmentCommandParser(List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ListAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"                ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"                                           CliSyntax.PREFIX_NAME,","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"                                           CliSyntax.PREFIX_PATIENT_ID,","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"                                           CliSyntax.PREFIX_APPOINTMENT_ID);","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        List\u003cPredicate\u003cAppointment\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        // Checks if there is at least one prefix available.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        boolean hasAtLeastOnePrefixPresent \u003d ParserUtil.hasAtLeastOnePrefixPresent(","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"                argMultimap,","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"                CliSyntax.PREFIX_NAME,","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"                CliSyntax.PREFIX_PATIENT_ID,","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"                CliSyntax.PREFIX_APPOINTMENT_ID);","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"        if (!hasAtLeastOnePrefixPresent \u0026\u0026 argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"            // If there is no prefix specified, then display all records.","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"            // TODO: Show an error message here.","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"            return new ListAppointmentCommand(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        if (!hasAtLeastOnePrefixPresent \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"            throw new ParseException(","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE)","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"            );","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        // All these criterias are OR not AND","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"            predicates.add(new AppointmentContainsPatientNamePredicate(","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"                    Collections.singletonList(name.fullName),","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"                    patients","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"            ));","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_PATIENT_ID).isPresent()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"            int studentId \u003d ParserUtil.parseIndex(argMultimap.getValue(CliSyntax.PREFIX_PATIENT_ID)","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"                                                          .get()).getOneBased();","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            if (!RelationshipUtil.personExists(studentId, patients)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                throw new ParseException(","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                        String.format(Messages.MESSAGE_INVALID_PATIENT_ID, studentId)","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                );","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"            predicates.add(","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"                    new AppointmentContainsPatientIdPredicate(Collections.singletonList(String.valueOf(studentId)))","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"            );","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_APPOINTMENT_ID).isPresent()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"tankh99"},"content":"            int appointmentId \u003d ParserUtil.parseIndex(argMultimap.getValue(CliSyntax.PREFIX_APPOINTMENT_ID)","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"tankh99"},"content":"                                                          .get()).getOneBased();","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"tankh99"},"content":"            predicates.add(","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"                    new AppointmentContainsAppointmentIdPredicate(","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"tankh99"},"content":"                            Collections.singletonList(String.valueOf(appointmentId))","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"tankh99"},"content":"                    )","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"tankh99"},"content":"            );","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"        // Combine predicates with AND logic","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"        Predicate\u003cAppointment\u003e combinedPredicate \u003d predicates.stream()","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"tankh99"},"content":"                .reduce(p -\u003e true, Predicate::and);","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"tankh99"},"content":"        return new ListAppointmentCommand(combinedPredicate);","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"Jerome-j":4,"tankh99":75,"vnnamng":7,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/ListPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-03"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-03"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-03"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import java.util.List;","lastModifiedDate":"2024-03-03"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-03"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.EmailContainsKeywordPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.PhoneContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.TagContainsKeywordPredicate;","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"/**","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":" * Parses input arguments and creates a new ListCommand object","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":" */","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"public class ListPatientCommandParser implements Parser\u003cListCommand\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"    @Override","lastModifiedDate":"2024-03-03"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"    public ListCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-03"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-03"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"                        CliSyntax.PREFIX_EMAIL, PREFIX_ALIAS);","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"        List\u003cPredicate\u003cPatient\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"        // Checks if there is at least one prefix available.","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"        boolean hasAtLeastOnePrefixPresent \u003d ParserUtil.hasAtLeastOnePrefixPresent(argMultimap, CliSyntax.PREFIX_NAME,","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"                CliSyntax.PREFIX_PHONE, CliSyntax.PREFIX_EMAIL, PREFIX_ALIAS);","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"        if (!hasAtLeastOnePrefixPresent \u0026\u0026 argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"            // If there is no prefix specified, then display all records.","lastModifiedDate":"2024-03-03"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"            // TODO: Show an error message here.","lastModifiedDate":"2024-03-03"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"            return new ListCommand(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2024-03-03"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"        if (!hasAtLeastOnePrefixPresent \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"            throw new ParseException(","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE)","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"            );","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"        // All these criteria are AND not OR","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2024-03-15"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"            String nameToSearch \u003d argMultimap.getValue(CliSyntax.PREFIX_NAME).get();","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"            predicates.add(new NameContainsKeywordsPredicate(Collections.singletonList(nameToSearch)));","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2024-03-15"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"            String phoneToSearch \u003d argMultimap.getValue(CliSyntax.PREFIX_PHONE).get();","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"            predicates.add(new PhoneContainsKeywordsPredicate(Collections.singletonList(phoneToSearch)));","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2024-03-15"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"            String emailToSearch \u003d argMultimap.getValue(CliSyntax.PREFIX_EMAIL).get();","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"            predicates.add(new EmailContainsKeywordPredicate(Collections.singletonList(emailToSearch)));","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":68,"author":{"gitId":"Jerome-j"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_ALIAS).isPresent()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"Jerome-j"},"content":"            List\u003cString\u003e tagsToSearch \u003d argMultimap.getAllValues(PREFIX_ALIAS);","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"            predicates.add(new TagContainsKeywordPredicate(tagsToSearch));","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"Jerome-j"},"content":"        // Combine predicates with AND logic","lastModifiedDate":"2024-03-03"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"        Predicate\u003cPatient\u003e combinedPredicate \u003d predicates.stream()","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"Jerome-j"},"content":"                .reduce(p -\u003e true, Predicate::and);","lastModifiedDate":"2024-03-03"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":78,"author":{"gitId":"Jerome-j"},"content":"        return new ListCommand(combinedPredicate);","lastModifiedDate":"2024-03-03"},{"lineNumber":79,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":80,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":81,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-03-03"}],"authorContributionMap":{"caitlyntang":1,"Jerome-j":72,"vnnamng":8}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-30"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import java.util.List;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-03-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentDescription;","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.FeedbackScore;","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.HasAttended;","lastModifiedDate":"2024-04-01"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.PatientId;","lastModifiedDate":"2024-04-01"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.util.RelationshipUtil;","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"        String trimmedName \u003d StringUtil.trimWhitespace(name);","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"        // Store all emails in lowercase by default. Do not allow capitalisations","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"        trimmedEmail \u003d trimmedEmail.toLowerCase();","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":125,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":126,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-30"},{"lineNumber":127,"author":{"gitId":"tankh99"},"content":"     * Parses a {@code String date} into a {@code LocalDateTime}. by setting it to be at either the start or end","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"tankh99"},"content":"     * of the day.","lastModifiedDate":"2024-03-30"},{"lineNumber":129,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-03-30"},{"lineNumber":130,"author":{"gitId":"tankh99"},"content":"     * @param isStartOfDay Determines whether to return a date string at the start or end of day","lastModifiedDate":"2024-03-30"},{"lineNumber":131,"author":{"gitId":"tankh99"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2024-03-30"},{"lineNumber":132,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-30"},{"lineNumber":133,"author":{"gitId":"tankh99"},"content":"    public static LocalDateTime parseDate(String date, boolean isStartOfDay) throws ParseException {","lastModifiedDate":"2024-03-30"},{"lineNumber":134,"author":{"gitId":"tankh99"},"content":"        requireNonNull(date);","lastModifiedDate":"2024-03-30"},{"lineNumber":135,"author":{"gitId":"tankh99"},"content":"        String trimmedDateTime \u003d date.trim();","lastModifiedDate":"2024-03-30"},{"lineNumber":136,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":137,"author":{"gitId":"tankh99"},"content":"        LocalDate localDate \u003d DateUtil.parseDate(trimmedDateTime);","lastModifiedDate":"2024-03-30"},{"lineNumber":138,"author":{"gitId":"tankh99"},"content":"        if (localDate \u003d\u003d null) {","lastModifiedDate":"2024-03-30"},{"lineNumber":139,"author":{"gitId":"tankh99"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_DATE);","lastModifiedDate":"2024-03-30"},{"lineNumber":140,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":141,"author":{"gitId":"tankh99"},"content":"        LocalDateTime dateTime \u003d isStartOfDay","lastModifiedDate":"2024-03-30"},{"lineNumber":142,"author":{"gitId":"tankh99"},"content":"                ? localDate.atStartOfDay()","lastModifiedDate":"2024-03-30"},{"lineNumber":143,"author":{"gitId":"tankh99"},"content":"                : localDate.atTime(23, 59, 59);;","lastModifiedDate":"2024-03-30"},{"lineNumber":144,"author":{"gitId":"tankh99"},"content":"        return dateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":145,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":146,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":147,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":148,"author":{"gitId":"caitlyntang"},"content":"     * Parses a {@code String dateTime} into an {@code LocalDateTime}.","lastModifiedDate":"2024-03-18"},{"lineNumber":149,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":150,"author":{"gitId":"caitlyntang"},"content":"     * @throws ParseException if the given {@code dateTime} is invalid.","lastModifiedDate":"2024-03-18"},{"lineNumber":151,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":152,"author":{"gitId":"vnnamng"},"content":"    public static StartDateTime parseStartDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2024-03-31"},{"lineNumber":153,"author":{"gitId":"vnnamng"},"content":"        LocalDateTime localDateTime \u003d parseDateTime(dateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":154,"author":{"gitId":"vnnamng"},"content":"        return new StartDateTime(localDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":155,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":156,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":157,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":158,"author":{"gitId":"vnnamng"},"content":"     * Parses a {@code String dateTime} into an {@code LocalDateTime}.","lastModifiedDate":"2024-03-31"},{"lineNumber":159,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":160,"author":{"gitId":"vnnamng"},"content":"     * @throws ParseException if the given {@code dateTime} is invalid.","lastModifiedDate":"2024-03-31"},{"lineNumber":161,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":162,"author":{"gitId":"vnnamng"},"content":"    public static EndDateTime parseEndDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2024-03-31"},{"lineNumber":163,"author":{"gitId":"vnnamng"},"content":"        LocalDateTime localDateTime \u003d parseDateTime(dateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":164,"author":{"gitId":"vnnamng"},"content":"        return new EndDateTime(localDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":165,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":166,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":167,"author":{"gitId":"vnnamng"},"content":"    static LocalDateTime parseDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2024-03-31"},{"lineNumber":168,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2024-03-18"},{"lineNumber":169,"author":{"gitId":"caitlyntang"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2024-03-18"},{"lineNumber":170,"author":{"gitId":"tankh99"},"content":"        LocalDateTime localDateTime \u003d DateUtil.parseDateTime(trimmedDateTime);","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"tankh99"},"content":"        if (localDateTime \u003d\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_DATE_TIME);","lastModifiedDate":"2024-03-20"},{"lineNumber":173,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":174,"author":{"gitId":"caitlyntang"},"content":"        return localDateTime;","lastModifiedDate":"2024-03-19"},{"lineNumber":175,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":176,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":177,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":178,"author":{"gitId":"caitlyntang"},"content":"     * Parses a {@code String attend} into a {@code HasAttended}.","lastModifiedDate":"2024-04-01"},{"lineNumber":179,"author":{"gitId":"caitlyntang"},"content":"     * By default, false will be returned if {@code attend} is empty.","lastModifiedDate":"2024-03-18"},{"lineNumber":180,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":181,"author":{"gitId":"caitlyntang"},"content":"     * @throws ParseException if the given {@code attend} is invalid.","lastModifiedDate":"2024-03-18"},{"lineNumber":182,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":183,"author":{"gitId":"caitlyntang"},"content":"    public static HasAttended parseHasAttended(String attend) throws ParseException {","lastModifiedDate":"2024-03-31"},{"lineNumber":184,"author":{"gitId":"caitlyntang"},"content":"        if (attend.isEmpty()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":185,"author":{"gitId":"caitlyntang"},"content":"            return null;","lastModifiedDate":"2024-04-03"},{"lineNumber":186,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":187,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":188,"author":{"gitId":"caitlyntang"},"content":"        String trimmedAttend \u003d attend.trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":189,"author":{"gitId":"caitlyntang"},"content":"        if (!HasAttended.isValidStatus(trimmedAttend)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":190,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(HasAttended.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-31"},{"lineNumber":191,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":192,"author":{"gitId":"caitlyntang"},"content":"        return new HasAttended(Boolean.parseBoolean(trimmedAttend));","lastModifiedDate":"2024-03-31"},{"lineNumber":193,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":194,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":195,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":196,"author":{"gitId":"caitlyntang"},"content":"     * Parses a {@code String description} into a {@code AppointmentDescription}.","lastModifiedDate":"2024-04-01"},{"lineNumber":197,"author":{"gitId":"caitlyntang"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-18"},{"lineNumber":198,"author":{"gitId":"caitlyntang"},"content":"     * By default, an empty string will be returned if {@code description} is empty.","lastModifiedDate":"2024-03-18"},{"lineNumber":199,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":200,"author":{"gitId":"caitlyntang"},"content":"    public static AppointmentDescription parseDescription(String description) {","lastModifiedDate":"2024-03-31"},{"lineNumber":201,"author":{"gitId":"caitlyntang"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":202,"author":{"gitId":"caitlyntang"},"content":"            return null;","lastModifiedDate":"2024-04-03"},{"lineNumber":203,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":204,"author":{"gitId":"caitlyntang"},"content":"        return new AppointmentDescription(description.trim());","lastModifiedDate":"2024-03-31"},{"lineNumber":205,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":206,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":207,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":208,"author":{"gitId":"caitlyntang"},"content":"     * Parses a {@code String feedbackScore} into an {@code FeedbackScore} and ensures that","lastModifiedDate":"2024-04-01"},{"lineNumber":209,"author":{"gitId":"caitlyntang"},"content":"     * it is a valid number and is between 1 and 5 (inclusive).","lastModifiedDate":"2024-04-01"},{"lineNumber":210,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"caitlyntang"},"content":"     * @throws ParseException if the given {@code attend} is invalid.","lastModifiedDate":"2024-04-01"},{"lineNumber":212,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":213,"author":{"gitId":"caitlyntang"},"content":"    public static FeedbackScore parseFeedbackScore(String feedbackScore) throws ParseException {","lastModifiedDate":"2024-03-31"},{"lineNumber":214,"author":{"gitId":"tankh99"},"content":"        if (feedbackScore.isEmpty()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":215,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-03-25"},{"lineNumber":216,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":217,"author":{"gitId":"tankh99"},"content":"        String trimmedFeedbackScore \u003d feedbackScore.trim();","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"tankh99"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedFeedbackScore)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":219,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(FeedbackScore.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-31"},{"lineNumber":220,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":221,"author":{"gitId":"tankh99"},"content":"        int feedbackScoreInt \u003d Integer.parseInt(trimmedFeedbackScore);","lastModifiedDate":"2024-03-25"},{"lineNumber":222,"author":{"gitId":"caitlyntang"},"content":"        if (!FeedbackScore.isValidScore(feedbackScoreInt)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":223,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(FeedbackScore.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-31"},{"lineNumber":224,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":225,"author":{"gitId":"caitlyntang"},"content":"        return new FeedbackScore(feedbackScoreInt);","lastModifiedDate":"2024-03-31"},{"lineNumber":226,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":227,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":228,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":229,"author":{"gitId":"caitlyntang"},"content":"     * Parses a {@code String id} into a {@code PatientId}.","lastModifiedDate":"2024-04-01"},{"lineNumber":230,"author":{"gitId":"caitlyntang"},"content":"     * By default, false will be returned if {@code id} is empty.","lastModifiedDate":"2024-04-01"},{"lineNumber":231,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":232,"author":{"gitId":"caitlyntang"},"content":"     * @throws ParseException if the given {@code id} is invalid.","lastModifiedDate":"2024-04-01"},{"lineNumber":233,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":234,"author":{"gitId":"caitlyntang"},"content":"    public static PatientId parsePatientId(String id, List\u003cPatient\u003e patients) throws ParseException {","lastModifiedDate":"2024-03-31"},{"lineNumber":235,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(id);","lastModifiedDate":"2024-03-31"},{"lineNumber":236,"author":{"gitId":"caitlyntang"},"content":"        int patientId \u003d parseIndex(id).getOneBased();","lastModifiedDate":"2024-03-31"},{"lineNumber":237,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":238,"author":{"gitId":"caitlyntang"},"content":"        if (!RelationshipUtil.personExists(patientId, patients)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":239,"author":{"gitId":"caitlyntang"},"content":"            throw new ParseException(PatientId.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-31"},{"lineNumber":240,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":241,"author":{"gitId":"caitlyntang"},"content":"        return new PatientId(patientId);","lastModifiedDate":"2024-03-31"},{"lineNumber":242,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":243,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":244,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":245,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-04-01"},{"lineNumber":246,"author":{"gitId":"caitlyntang"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-04-01"},{"lineNumber":247,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":248,"author":{"gitId":"caitlyntang"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-04-01"},{"lineNumber":249,"author":{"gitId":"caitlyntang"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-04-01"},{"lineNumber":250,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":251,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":252,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":253,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if any of the prefixes contains non-empty {@code Optional} values in the given","lastModifiedDate":"2024-03-19"},{"lineNumber":254,"author":{"gitId":"caitlyntang"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-19"},{"lineNumber":255,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":256,"author":{"gitId":"caitlyntang"},"content":"    public static boolean hasAtLeastOnePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-19"},{"lineNumber":257,"author":{"gitId":"caitlyntang"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-19"},{"lineNumber":258,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":259,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"caitlyntang":93,"Jerome-j":3,"tankh99":42,"vnnamng":16,"-":106}},{"path":"src/main/java/seedu/address/logic/parser/ReportFeedbackCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-30"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-30"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-30"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-30"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.commands.ReportFeedbackCommand;","lastModifiedDate":"2024-03-30"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-30"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":" * Parses input arguments and creates a new ReportFeedbackCommand object","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"public class ReportFeedbackCommandParser implements Parser\u003cReportFeedbackCommand\u003e {","lastModifiedDate":"2024-03-30"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    public ReportFeedbackCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-30"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_START_DATETIME, PREFIX_END_DATETIME);","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        if (!argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"            throw new ParseException(","lastModifiedDate":"2024-03-30"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReportFeedbackCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-30"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_START_DATETIME, PREFIX_END_DATETIME);","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        // If no values are provided in the command, We set the default values for fromDate and toDate to","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        // LocalDateTime.MIN and LocalDateTime.MAX respectively","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        LocalDateTime fromDate;","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        LocalDateTime toDate;","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        if (argMultimap.getValue(PREFIX_START_DATETIME).isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"            fromDate \u003d LocalDateTime.MIN;","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"            fromDate \u003d ParserUtil.parseDate(","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"                    argMultimap.getValue(PREFIX_START_DATETIME).get(), true);","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        if (argMultimap.getValue(PREFIX_END_DATETIME).isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"            toDate \u003d LocalDateTime.MAX;","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"            toDate \u003d ParserUtil.parseDate(","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"                argMultimap.getValue(PREFIX_END_DATETIME).get(), false);","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        boolean bothDatesPresent \u003d fromDate !\u003d null \u0026\u0026 toDate !\u003d null;","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        if (bothDatesPresent \u0026\u0026 toDate.isBefore(fromDate)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_START_END_DATETIME);","lastModifiedDate":"2024-03-30"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        return new ReportFeedbackCommand(fromDate, toDate);","lastModifiedDate":"2024-03-30"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-30"}],"authorContributionMap":{"tankh99":51}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"     * Sets the user prefs\u0027 CogniCare book file path.","lastModifiedDate":"2024-03-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"    void setPatientListFilePath(Path patientListFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"     * Replaces CogniCare book data with the data in {@code patientList}.","lastModifiedDate":"2024-03-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"    void setPatientList(ReadOnlyPatientList patientList);","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-30"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"     * Replaces Appointment book data with the data in {@code patientList}.","lastModifiedDate":"2024-03-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-30"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"    void setAppointmentList(ReadOnlyAppointmentList appointmentList);","lastModifiedDate":"2024-03-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"    /** Returns the PatientList */","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"    ReadOnlyPatientList getPatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"Jerome-j"},"content":"    boolean hasPerson(Patient patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"    void deletePerson(Patient target);","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"Jerome-j"},"content":"    void addPerson(Patient patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":88,"author":{"gitId":"Jerome-j"},"content":"    void setPerson(Patient target, Patient editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"Jerome-j"},"content":"    ObservableList\u003cPatient\u003e getFilteredPersonList();","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":97,"author":{"gitId":"Jerome-j"},"content":"    void updateFilteredPersonList(Predicate\u003cPatient\u003e predicate);","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if an appointment with the same details as {@code appointment} exists in the appointment list.","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"caitlyntang"},"content":"     * Adds the given appointment.","lastModifiedDate":"2024-03-18"},{"lineNumber":106,"author":{"gitId":"caitlyntang"},"content":"     * {@code appointment} must not already exist in the appointment list.","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":108,"author":{"gitId":"caitlyntang"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":111,"author":{"gitId":"caitlyntang"},"content":"     * Returns an unmodifiable view of the filtered appointment list","lastModifiedDate":"2024-03-19"},{"lineNumber":112,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":113,"author":{"gitId":"caitlyntang"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"caitlyntang"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"caitlyntang"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"caitlyntang"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":121,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":122,"author":{"gitId":"caitlyntang"},"content":"     * Deletes the given appointment.","lastModifiedDate":"2024-03-19"},{"lineNumber":123,"author":{"gitId":"caitlyntang"},"content":"     * The appointment must exist in the appointment list.","lastModifiedDate":"2024-03-19"},{"lineNumber":124,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":125,"author":{"gitId":"caitlyntang"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"caitlyntang"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"caitlyntang"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"caitlyntang"},"content":"     * The appointment details of {@code editedAppointment} must not be the same as another","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"caitlyntang"},"content":"     * existing appointment in the address book.","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"caitlyntang"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":136,"author":{"gitId":"vnnamng"},"content":"     * Get appointments from inside person list","lastModifiedDate":"2024-03-18"},{"lineNumber":137,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":138,"author":{"gitId":"vnnamng"},"content":"    ReadOnlyAppointmentList getAppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":139,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"tankh99"},"content":"     * Gets the current patient feedback report list.","lastModifiedDate":"2024-04-02"},{"lineNumber":142,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"tankh99"},"content":"    ObservableList\u003cPatientFeedbackReport\u003e getPatientFeedbackReportList();","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"caitlyntang":40,"Jerome-j":12,"tankh99":6,"vnnamng":10,"-":76}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReportList;","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"    private final PatientList patientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    private final AppointmentList appointmentList;","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    private final PatientFeedbackReportList reportFeedbackList;","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"     * Initializes a ModelManager with the given patientList and userPrefs.","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"    public ModelManager(ReadOnlyPatientList patientList, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"        requireAllNonNull(patientList, userPrefs);","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        logger.fine(\"Initializing with patientList book: \" + patientList + \" and user prefs \" + userPrefs);","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"        this.patientList \u003d new PatientList(patientList);","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.appointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.patientList.getPersonList());","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentList.getAppointmentList());","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList \u003d new PatientFeedbackReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"     * Initializes a ModelManager with the given patientList, appointmentList and userPrefs.","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"    public ModelManager(ReadOnlyPatientList patientList,","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"                        ReadOnlyAppointmentList appointmentList,","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"                        ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        requireAllNonNull(patientList, appointmentList, userPrefs);","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"        logger.fine(\"Initializing with patientList book: \" + patientList","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"                + \", appointment list: \" + appointmentList + \" and user prefs \" + userPrefs);","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"        this.patientList \u003d new PatientList(patientList);","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"        this.appointmentList \u003d new AppointmentList(appointmentList);","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.patientList.getPersonList());","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentList.getAppointmentList());","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList \u003d new PatientFeedbackReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"        this(new PatientList(), new AppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"vnnamng"},"content":"        return userPrefs.getPatientListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"vnnamng"},"content":"    public void setPatientListFilePath(Path patientListFilePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(patientListFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"vnnamng"},"content":"        userPrefs.setPatientListFilePath(patientListFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"vnnamng"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":114,"author":{"gitId":"vnnamng"},"content":"    public void setPatientList(ReadOnlyPatientList patientList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"vnnamng"},"content":"        this.patientList.resetData(patientList);","lastModifiedDate":"2024-03-27"},{"lineNumber":116,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":120,"author":{"gitId":"Jerome-j"},"content":"    public void setAppointmentList(ReadOnlyAppointmentList appointmentList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":121,"author":{"gitId":"Jerome-j"},"content":"        this.appointmentList.resetData(appointmentList);","lastModifiedDate":"2024-03-30"},{"lineNumber":122,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":126,"author":{"gitId":"vnnamng"},"content":"    public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-27"},{"lineNumber":127,"author":{"gitId":"vnnamng"},"content":"        return patientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"Jerome-j"},"content":"    public boolean hasPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":132,"author":{"gitId":"Jerome-j"},"content":"        requireNonNull(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":133,"author":{"gitId":"vnnamng"},"content":"        return patientList.hasPerson(patient);","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":137,"author":{"gitId":"Jerome-j"},"content":"    public void deletePerson(Patient target) {","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"vnnamng"},"content":"        patientList.removePerson(target);","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":143,"author":{"gitId":"Jerome-j"},"content":"    public void addPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":144,"author":{"gitId":"vnnamng"},"content":"        patientList.addPerson(patient);","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":146,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":150,"author":{"gitId":"Jerome-j"},"content":"    public void setPerson(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"Jerome-j"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":153,"author":{"gitId":"vnnamng"},"content":"        patientList.setPerson(target, editedPatient);","lastModifiedDate":"2024-03-27"},{"lineNumber":154,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":164,"author":{"gitId":"Jerome-j"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":165,"author":{"gitId":"Jerome-j"},"content":"        return filteredPatients;","lastModifiedDate":"2024-03-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":169,"author":{"gitId":"Jerome-j"},"content":"    public void updateFilteredPersonList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2024-03-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":171,"author":{"gitId":"Jerome-j"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2024-03-26"},{"lineNumber":172,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":175,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":176,"author":{"gitId":"vnnamng"},"content":"     * Get appointments from inside appointment list","lastModifiedDate":"2024-03-19"},{"lineNumber":177,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":178,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":179,"author":{"gitId":"vnnamng"},"content":"    public ReadOnlyAppointmentList getAppointmentList() {","lastModifiedDate":"2024-03-18"},{"lineNumber":180,"author":{"gitId":"vnnamng"},"content":"        return appointmentList;","lastModifiedDate":"2024-03-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":195,"author":{"gitId":"vnnamng"},"content":"        return patientList.equals(otherModelManager.patientList)","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":197,"author":{"gitId":"Jerome-j"},"content":"                \u0026\u0026 filteredPatients.equals(otherModelManager.filteredPatients);","lastModifiedDate":"2024-03-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"caitlyntang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":201,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":202,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":203,"author":{"gitId":"caitlyntang"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":204,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":205,"author":{"gitId":"caitlyntang"},"content":"        return appointmentList.hasAppointment(appointment);","lastModifiedDate":"2024-03-19"},{"lineNumber":206,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":207,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":208,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":209,"author":{"gitId":"caitlyntang"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":210,"author":{"gitId":"caitlyntang"},"content":"        appointmentList.addAppointment(appointment);","lastModifiedDate":"2024-03-19"},{"lineNumber":211,"author":{"gitId":"caitlyntang"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2024-03-19"},{"lineNumber":212,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":213,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":214,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":215,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":216,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":217,"author":{"gitId":"caitlyntang"},"content":"    public void setAppointment(Appointment target, Appointment editededitedAppointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":218,"author":{"gitId":"caitlyntang"},"content":"        requireAllNonNull(target, editededitedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":219,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":220,"author":{"gitId":"caitlyntang"},"content":"        appointmentList.setAppointment(target, editededitedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":221,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-04"},{"lineNumber":222,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":223,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":224,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":225,"author":{"gitId":"caitlyntang"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2024-03-19"},{"lineNumber":226,"author":{"gitId":"caitlyntang"},"content":"        appointmentList.removeAppointment(target);","lastModifiedDate":"2024-03-19"},{"lineNumber":227,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":228,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":229,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":230,"author":{"gitId":"caitlyntang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":231,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":232,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":233,"author":{"gitId":"caitlyntang"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2024-03-18"},{"lineNumber":234,"author":{"gitId":"caitlyntang"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2024-03-18"},{"lineNumber":235,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":236,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":237,"author":{"gitId":"caitlyntang"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-18"},{"lineNumber":238,"author":{"gitId":"caitlyntang"},"content":"        return filteredAppointments;","lastModifiedDate":"2024-03-18"},{"lineNumber":239,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":240,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":241,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":242,"author":{"gitId":"caitlyntang"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2024-03-19"},{"lineNumber":243,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2024-03-19"},{"lineNumber":244,"author":{"gitId":"caitlyntang"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2024-03-19"},{"lineNumber":245,"author":{"gitId":"tankh99"},"content":"        this.reportFeedbackList.generateReportList(this.filteredPatients, this.filteredAppointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":248,"author":{"gitId":"tankh99"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reports \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":249,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":250,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":251,"author":{"gitId":"tankh99"},"content":"    public ObservableList\u003cPatientFeedbackReport\u003e getPatientFeedbackReportList() {","lastModifiedDate":"2024-04-02"},{"lineNumber":252,"author":{"gitId":"tankh99"},"content":"        return this.reportFeedbackList.getList();","lastModifiedDate":"2024-04-02"},{"lineNumber":253,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"caitlyntang":45,"Jerome-j":15,"tankh99":25,"vnnamng":41,"-":128}},{"path":"src/main/java/seedu/address/model/PatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.UniquePersonList;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"public class PatientList implements ReadOnlyPatientList {","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    public PatientList() {}","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"     * Creates an PatientList using the Persons in the {@code toBeCopied}","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"    public PatientList(ReadOnlyPatientList toBeCopied) {","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"    public void setPersons(List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"        this.persons.setPersons(patients);","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"     * Resets the existing data of this {@code PatientList} with {@code newData}.","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"    public void resetData(ReadOnlyPatientList newData) {","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"    public boolean hasPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"        requireNonNull(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"        return persons.contains(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"Jerome-j"},"content":"    public void addPerson(Patient p) {","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"Jerome-j"},"content":"    public void setPerson(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"Jerome-j"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"Jerome-j"},"content":"        persons.setPerson(target, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"     * Removes {@code key} from this {@code PatientList}.","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":93,"author":{"gitId":"Jerome-j"},"content":"    public void removePerson(Patient key) {","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)","lastModifiedDate":"2019-02-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"Jerome-j"},"content":"    public ObservableList\u003cPatient\u003e getPersonList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":118,"author":{"gitId":"vnnamng"},"content":"        if (!(other instanceof PatientList)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"vnnamng"},"content":"        PatientList otherPatientList \u003d (PatientList) other;","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"vnnamng"},"content":"        return persons.equals(otherPatientList.persons);","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jerome-j":13,"vnnamng":10,"-":107}},{"path":"src/main/java/seedu/address/model/ReadOnlyList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"public interface ReadOnlyList\u003cT\u003e {","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    ObservableList\u003cT\u003e getList();","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"tankh99":2,"-":14}},{"path":"src/main/java/seedu/address/model/ReadOnlyPatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"public interface ReadOnlyPatientList {","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"    ObservableList\u003cPatient\u003e getPersonList();","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jerome-j":2,"vnnamng":1,"-":14}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    Path getAppointmentListFilePath();","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"vnnamng":2,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"    private Path patientListFilePath \u003d Paths.get(\"data\" , \"patientList.json\");","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    private Path appointmentListFilePath \u003d Paths.get(\"data\", \"appointmentList.json\");","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"        setPatientListFilePath(newUserPrefs.getPatientListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        setAppointmentListFilePath(newUserPrefs.getAppointmentListFilePath());","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"        return patientListFilePath;","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"    public Path getAppointmentListFilePath() {","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        return appointmentListFilePath;","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"    public void setPatientListFilePath(Path patientListFilePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(patientListFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"        this.patientListFilePath \u003d patientListFilePath;","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"    public void setAppointmentListFilePath(Path appointmentListFilePath) {","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(appointmentListFilePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"        this.appointmentListFilePath \u003d appointmentListFilePath;","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 patientListFilePath.equals(otherUserPrefs.patientListFilePath)","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 appointmentListFilePath.equals(otherUserPrefs.appointmentListFilePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"        return Objects.hash(guiSettings, patientListFilePath, appointmentListFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"        sb.append(\"\\nLocal data file location : \" + patientListFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"vnnamng"},"content":"        sb.append(\"\\nLocal appointment list file location : \" + appointmentListFilePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"vnnamng":21,"-":81}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import java.util.Objects;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":" * Represents an Appointment attached to a Person in PatientList","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":" * TODO: check if need to enforcing immutable","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"public class Appointment implements Comparable\u003cAppointment\u003e {","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DATETIME_ALREADY_TAKEN \u003d \"There is already an appointment at that time\";","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"    private static final HasAttended DEFAULT_ATTENDED_STATUS \u003d new HasAttended(false);","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    private static int idTracker \u003d 1;","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"    public final int appointmentId;","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    private final PatientId patientId;","lastModifiedDate":"2024-04-01"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    private final AppointmentDescription appointmentDescription;","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    private final FeedbackScore feedbackScore;","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"    private HasAttended hasAttended;","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"    private final StartDateTime startDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    private final EndDateTime endDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code Appointment}.","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"     * @param appointmentId          unique id of the appointment.","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"     * @param startDateTime          start date and time of the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"     * @param endDateTime            end date and time of the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"     * @param patientId              unique id of the student.","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"     * @param appointmentDescription description of the appointment.","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"     * @param hasAttended            whether student has attended the appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"    public Appointment(int appointmentId,","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"                       StartDateTime startDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"                       EndDateTime endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"                       PatientId patientId,","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"                       AppointmentDescription appointmentDescription,","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"                       HasAttended hasAttended,","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"                       FeedbackScore feedbackScore) {","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"        requireAllNonNull(startDateTime, endDateTime);","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2024-03-15"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"        // Student ID is the same as the person ID","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"        this.patientId \u003d patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"        idTracker \u003d appointmentId + 1;","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        this.appointmentDescription \u003d appointmentDescription;","lastModifiedDate":"2024-03-15"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"        this.hasAttended \u003d hasAttended;","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        this.feedbackScore \u003d feedbackScore;","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code Appointment} with automatically generated id.","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"     * @param startDateTime          start date and time of the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"     * @param endDateTime            end date and time of the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"     * @param patientId              unique id of the student.","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"     * @param appointmentDescription description of the appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"    public Appointment(StartDateTime startDateTime, EndDateTime endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"                       PatientId patientId, AppointmentDescription appointmentDescription) {","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"        this(idTracker, startDateTime, endDateTime, patientId, appointmentDescription, DEFAULT_ATTENDED_STATUS, null);","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code Appointment} with automatically generated id.","lastModifiedDate":"2024-03-15"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"     * @param startDateTime          start date and time of the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"     * @param endDateTime            end date and time of the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"     * @param patientId              unique id of the student.","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"     * @param appointmentDescription description of the appointment.","lastModifiedDate":"2024-03-15"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"     * @param hasAttended            whether student has attended the appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"    public Appointment(StartDateTime startDateTime, EndDateTime endDateTime, PatientId patientId,","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"                       AppointmentDescription appointmentDescription, HasAttended hasAttended) {","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"        this(idTracker, startDateTime, endDateTime, patientId, appointmentDescription, hasAttended, null);","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"     * Constructs a {@code Appointment} with automatically generated id.","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"     * @param startDateTime          start date and time of the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"     * @param endDateTime            end date and time of the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"     * @param patientId              unique id of the student.","lastModifiedDate":"2024-03-31"},{"lineNumber":96,"author":{"gitId":"tankh99"},"content":"     * @param appointmentDescription description of the appointment.","lastModifiedDate":"2024-03-25"},{"lineNumber":97,"author":{"gitId":"tankh99"},"content":"     * @param hasAttended            whether student has attended the appointment.","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"tankh99"},"content":"     * @param feedbackScore          student\u0027s rating of the counselling session","lastModifiedDate":"2024-03-25"},{"lineNumber":99,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":100,"author":{"gitId":"vnnamng"},"content":"    public Appointment(StartDateTime startDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"                       EndDateTime endDateTime, PatientId patientId, AppointmentDescription appointmentDescription,","lastModifiedDate":"2024-03-31"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"                       HasAttended hasAttended, FeedbackScore feedbackScore) {","lastModifiedDate":"2024-03-31"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":104,"author":{"gitId":"caitlyntang"},"content":"        this(idTracker, startDateTime, endDateTime, patientId, appointmentDescription, hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":105,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":106,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":107,"author":{"gitId":"tankh99"},"content":"    public boolean isStartDateTimeAfterEndDateTime() {","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"caitlyntang"},"content":"        return startDateTime.compareTo(endDateTime) \u003e 0;","lastModifiedDate":"2024-04-04"},{"lineNumber":109,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":110,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-15"},{"lineNumber":112,"author":{"gitId":"vnnamng"},"content":"    public String toString() {","lastModifiedDate":"2024-03-15"},{"lineNumber":113,"author":{"gitId":"vnnamng"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"vnnamng"},"content":"                .add(\"appointmentId\", appointmentId)","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"vnnamng"},"content":"                .add(\"startDateTime\", startDateTime)","lastModifiedDate":"2024-03-31"},{"lineNumber":116,"author":{"gitId":"vnnamng"},"content":"                .add(\"endDateTime\", endDateTime)","lastModifiedDate":"2024-03-31"},{"lineNumber":117,"author":{"gitId":"caitlyntang"},"content":"                .add(\"studentId\", patientId)","lastModifiedDate":"2024-03-31"},{"lineNumber":118,"author":{"gitId":"vnnamng"},"content":"                .add(\"appointmentDescription\", appointmentDescription)","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"vnnamng"},"content":"                .add(\"hasAttended\", hasAttended)","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"tankh99"},"content":"                .add(\"feedbackScore\", feedbackScore)","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"vnnamng"},"content":"                .toString();","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":123,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":124,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-15"},{"lineNumber":125,"author":{"gitId":"vnnamng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-15"},{"lineNumber":126,"author":{"gitId":"vnnamng"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-15"},{"lineNumber":127,"author":{"gitId":"vnnamng"},"content":"            return true;","lastModifiedDate":"2024-03-15"},{"lineNumber":128,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":129,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":130,"author":{"gitId":"vnnamng"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-15"},{"lineNumber":131,"author":{"gitId":"vnnamng"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2024-03-15"},{"lineNumber":132,"author":{"gitId":"vnnamng"},"content":"            return false;","lastModifiedDate":"2024-03-15"},{"lineNumber":133,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":134,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":135,"author":{"gitId":"vnnamng"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2024-03-15"},{"lineNumber":136,"author":{"gitId":"vnnamng"},"content":"        return otherAppointment.appointmentId \u003d\u003d this.appointmentId","lastModifiedDate":"2024-03-15"},{"lineNumber":137,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 otherAppointment.startDateTime.equals(this.startDateTime)","lastModifiedDate":"2024-03-31"},{"lineNumber":138,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 otherAppointment.endDateTime.equals(this.endDateTime)","lastModifiedDate":"2024-03-31"},{"lineNumber":139,"author":{"gitId":"caitlyntang"},"content":"                \u0026\u0026 otherAppointment.patientId.equals(this.patientId)","lastModifiedDate":"2024-04-01"},{"lineNumber":140,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 otherAppointment.appointmentDescription.equals(this.appointmentDescription)","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"caitlyntang"},"content":"                \u0026\u0026 otherAppointment.hasAttended.equals(this.hasAttended)","lastModifiedDate":"2024-04-01"},{"lineNumber":142,"author":{"gitId":"caitlyntang"},"content":"                \u0026\u0026 otherAppointment.feedbackScore.equals(this.feedbackScore);","lastModifiedDate":"2024-04-01"},{"lineNumber":143,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":144,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":145,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-15"},{"lineNumber":146,"author":{"gitId":"vnnamng"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-15"},{"lineNumber":147,"author":{"gitId":"vnnamng"},"content":"        return Objects.hash(appointmentId, startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":148,"author":{"gitId":"caitlyntang"},"content":"                patientId, appointmentDescription, hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":149,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":150,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":151,"author":{"gitId":"caitlyntang"},"content":"    public HasAttended getAttendedStatus() {","lastModifiedDate":"2024-03-31"},{"lineNumber":152,"author":{"gitId":"vnnamng"},"content":"        return hasAttended;","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":154,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":155,"author":{"gitId":"caitlyntang"},"content":"    public void setAttendedStatus(HasAttended hasAttended) {","lastModifiedDate":"2024-03-31"},{"lineNumber":156,"author":{"gitId":"vnnamng"},"content":"        this.hasAttended \u003d hasAttended;","lastModifiedDate":"2024-03-16"},{"lineNumber":157,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":158,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":159,"author":{"gitId":"vnnamng"},"content":"    public int getAppointmentId() {","lastModifiedDate":"2024-03-17"},{"lineNumber":160,"author":{"gitId":"vnnamng"},"content":"        return appointmentId;","lastModifiedDate":"2024-03-17"},{"lineNumber":161,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":162,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":163,"author":{"gitId":"vnnamng"},"content":"    public StartDateTime getStartDateTime() {","lastModifiedDate":"2024-03-31"},{"lineNumber":164,"author":{"gitId":"vnnamng"},"content":"        return startDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":165,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":166,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":167,"author":{"gitId":"vnnamng"},"content":"    public EndDateTime getEndDateTime() {","lastModifiedDate":"2024-03-31"},{"lineNumber":168,"author":{"gitId":"vnnamng"},"content":"        return endDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":169,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":170,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":171,"author":{"gitId":"caitlyntang"},"content":"    public PatientId getPatientId() {","lastModifiedDate":"2024-03-31"},{"lineNumber":172,"author":{"gitId":"caitlyntang"},"content":"        return patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":173,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":174,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":175,"author":{"gitId":"caitlyntang"},"content":"    public AppointmentDescription getAppointmentDescription() {","lastModifiedDate":"2024-03-31"},{"lineNumber":176,"author":{"gitId":"vnnamng"},"content":"        return appointmentDescription;","lastModifiedDate":"2024-03-17"},{"lineNumber":177,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":178,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":179,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":180,"author":{"gitId":"tankh99"},"content":"     * This getter method is a bit special is it can return null. It is the job of the","lastModifiedDate":"2024-04-02"},{"lineNumber":181,"author":{"gitId":"tankh99"},"content":"     * caller to check fo null first before using the value.","lastModifiedDate":"2024-04-02"},{"lineNumber":182,"author":{"gitId":"tankh99"},"content":"     * @return A nullable integer","lastModifiedDate":"2024-04-02"},{"lineNumber":183,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":184,"author":{"gitId":"caitlyntang"},"content":"    public FeedbackScore getFeedbackScore() {","lastModifiedDate":"2024-03-31"},{"lineNumber":185,"author":{"gitId":"tankh99"},"content":"        return feedbackScore;","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"caitlyntang"},"content":"    public static int getIdTracker() {","lastModifiedDate":"2024-03-19"},{"lineNumber":189,"author":{"gitId":"caitlyntang"},"content":"        return idTracker;","lastModifiedDate":"2024-03-19"},{"lineNumber":190,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":191,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":192,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":193,"author":{"gitId":"vnnamng"},"content":"     * Compares the appointment id of this appointment with another appointment.","lastModifiedDate":"2024-03-15"},{"lineNumber":194,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-15"},{"lineNumber":195,"author":{"gitId":"vnnamng"},"content":"     * @param other the other appointment to compare with.","lastModifiedDate":"2024-03-15"},{"lineNumber":196,"author":{"gitId":"vnnamng"},"content":"     * @return a negative integer, zero, or a positive integer as this appointment id is less than, equal to,","lastModifiedDate":"2024-03-15"},{"lineNumber":197,"author":{"gitId":"vnnamng"},"content":"     *         or greater than the other appointment id.","lastModifiedDate":"2024-03-15"},{"lineNumber":198,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":199,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-15"},{"lineNumber":200,"author":{"gitId":"vnnamng"},"content":"    public int compareTo(Appointment other) {","lastModifiedDate":"2024-03-15"},{"lineNumber":201,"author":{"gitId":"vnnamng"},"content":"        return this.appointmentId - other.appointmentId;","lastModifiedDate":"2024-03-15"},{"lineNumber":202,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":203,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":204,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":205,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if both appointments have the same studentId and appointmentDateTime.","lastModifiedDate":"2024-03-18"},{"lineNumber":206,"author":{"gitId":"caitlyntang"},"content":"     * This defines a weaker notion of equality between two appointments.","lastModifiedDate":"2024-03-18"},{"lineNumber":207,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":208,"author":{"gitId":"caitlyntang"},"content":"    public boolean isSameAppointment(Appointment otherAppointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":209,"author":{"gitId":"caitlyntang"},"content":"        if (otherAppointment \u003d\u003d this) {","lastModifiedDate":"2024-03-18"},{"lineNumber":210,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":211,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":212,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":213,"author":{"gitId":"caitlyntang"},"content":"        return otherAppointment !\u003d null","lastModifiedDate":"2024-03-18"},{"lineNumber":214,"author":{"gitId":"caitlyntang"},"content":"                \u0026\u0026 this.patientId.equals(otherAppointment.patientId)","lastModifiedDate":"2024-04-02"},{"lineNumber":215,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 this.startDateTime.compareTo(otherAppointment.endDateTime) \u003c 0","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"vnnamng"},"content":"                \u0026\u0026 this.endDateTime.compareTo(otherAppointment.startDateTime) \u003e 0;","lastModifiedDate":"2024-03-31"},{"lineNumber":217,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":218,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":219,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"caitlyntang":55,"tankh99":19,"vnnamng":144,"-":1}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentContainsAppointmentIdPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":" * Tests that a {@code Appointment}\u0027s id matches any of the keywords given.","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"public class AppointmentContainsAppointmentIdPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    public AppointmentContainsAppointmentIdPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        // We check for equality here instead of containsIn because otherwise, student 1 would match with 100","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        return keywords.stream()","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"                .anyMatch(keyword -\u003e String.valueOf(appointment.getAppointmentId()).equals(keyword)","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"                );","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            return true;","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        if (!(other instanceof AppointmentContainsAppointmentIdPredicate)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"            return false;","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        AppointmentContainsAppointmentIdPredicate otherNameContainsKeywordsPredicate \u003d","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"                (AppointmentContainsAppointmentIdPredicate) other;","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    public String toString() {","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"tankh99":47}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentContainsPatientIdPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" * Tests that a {@code Appointment}\u0027s patientId matches any of the keywords given.","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"public class AppointmentContainsPatientIdPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    public AppointmentContainsPatientIdPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        // We check for equality here instead of containsIn because otherwise, student 1 would match with 100","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        return keywords.stream()","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"                .anyMatch(keyword -\u003e String.valueOf(appointment.getPatientId()).equals(keyword)","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"                );","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"            return true;","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        if (!(other instanceof AppointmentContainsPatientIdPredicate)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"            return false;","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        AppointmentContainsPatientIdPredicate otherNameContainsKeywordsPredicate \u003d","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"                (AppointmentContainsPatientIdPredicate) other;","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    public String toString() {","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"caitlyntang":1,"tankh99":45}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentContainsPatientNamePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":" * Tests that a {@code Name} matches the {@code Person} that the appointment is associated with","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"public class AppointmentContainsPatientNamePredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"    private final List\u003cPatient\u003e patients;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * Constructor for AppointmentContainsPatientNamePredicate","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     * @param keywords","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"     * @param patients The current observable list of patients","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"    public AppointmentContainsPatientNamePredicate(List\u003cString\u003e keywords, List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        // 1. Map names to patient IDs","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        // 2. Check if the appointment\u0027s patient name matches any of the keywords","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        for (String keyword: keywords) {","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"            List\u003cInteger\u003e patientIdsMatched \u003d patients.stream()","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"                    .filter(patient -\u003e StringUtil.containsStringIgnoreCase(patient.getName().fullName, keyword))","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"                    .map(patient -\u003e patient.getSid())","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"                    .collect(Collectors.toList());","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"            for (int patientId: patientIdsMatched) {","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"                if (appointment.getPatientId().patientId \u003d\u003d patientId) {","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"                    return true;","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"                }","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        return false;","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"            return true;","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        if (!(other instanceof AppointmentContainsPatientNamePredicate)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"            return false;","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"        AppointmentContainsPatientNamePredicate otherNameContainsKeywordsPredicate \u003d","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"                (AppointmentContainsPatientNamePredicate) other;","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"    public String toString() {","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"caitlyntang":1,"Jerome-j":3,"tankh99":63}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-04-01"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":" * Represents an Appointment\u0027s description in the address book.","lastModifiedDate":"2024-04-01"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":" * Guarantees: immutable;","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"public class AppointmentDescription {","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"    public final String appointmentDescription;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"     * Constructs a {@code AppointmentDescription}.","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"     * @param appointmentDescription A valid appointment description.","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"    public AppointmentDescription(String appointmentDescription) {","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"        this.appointmentDescription \u003d appointmentDescription;","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"    public String toString() {","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"        return appointmentDescription;","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"        if (!(other instanceof AppointmentDescription)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"            return false;","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"        AppointmentDescription otherDescription \u003d (AppointmentDescription) other;","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"        return appointmentDescription.equalsIgnoreCase(otherDescription.appointmentDescription);","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"caitlyntang":39}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import java.util.List;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":" * Wraps all appointments in one list object.","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":" * Duplicates are not allowed (by {@code .isSameAppointment} comparison).","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"public class AppointmentList implements ReadOnlyAppointmentList {","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"    private final UniqueAppointmentList appointments;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"    /*","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"     *   among constructors.","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    {","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"     * Creates an empty AppointmentList, ensure appointments to not be null.","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"    public AppointmentList() {}","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"     * Creates an AppointmentList using the Appointments in the {@code toBeCopied}.","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"    public AppointmentList(ReadOnlyAppointmentList toBeCopied) {","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"        this();","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"    //// list overwrite operations","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"     * Replaces the contents of the appointment list with {@code appointments}.","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"     * {@code appointments} must not contain duplicate persons.","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"     * Resets the existing data of this {@code AppointmentList} with {@code newData}.","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"    public void resetData(ReadOnlyAppointmentList newData) {","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(newData);","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"     * Returns an unmodifiable view of the appointment list.","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"     * This list will not contain any duplicate appointments.","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"     * Returns true if the appointment list contains a repeated appointment as the given argument.","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"        if (!(other instanceof AppointmentList)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"            return false;","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"        AppointmentList otherAppointmentList \u003d (AppointmentList) other;","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"        return appointments.equals(otherAppointmentList.appointments);","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"     * Adds an appointment to the appointment list.","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"        appointments.add(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"     * Removes {@code key} from this {@code PatientList}.","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"    public void removeAppointment(Appointment key) {","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"        appointments.remove(key);","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"caitlyntang"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"caitlyntang"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2024-04-02"},{"lineNumber":107,"author":{"gitId":"caitlyntang"},"content":"     * The appointment details of {@code editedAppointment} must not be the same as another","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"caitlyntang"},"content":"     * existing appointment in the address book.","lastModifiedDate":"2024-04-02"},{"lineNumber":109,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"caitlyntang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"caitlyntang"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":47,"vnnamng":68}},{"path":"src/main/java/seedu/address/model/appointment/DateTimeField.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":" * Represents a DateTimeField in the appointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"public class DateTimeField implements Comparable\u003cDateTimeField\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"            \"Date should be in the format of yyyy-MM-dd HH:mm\";","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"    private final LocalDateTime value;","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code DateTimeField}.","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"     * @param dateTimeValue A valid date","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"    public DateTimeField(String dateTimeValue) {","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(dateTimeValue);","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"        checkArgument(isValidDateTimeField(dateTimeValue), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"        this.value \u003d LocalDateTime.parse(dateTimeValue);","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code DateTimeField}.","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"     * @param dateTimeValue A valid date","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"    public DateTimeField(LocalDateTime dateTimeValue) {","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(dateTimeValue);","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"        this.value \u003d dateTimeValue;","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"     * Returns true if a given string is a valid start date.","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"    public static boolean isValidDateTimeField(String test) {","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"            LocalDateTime.parse(test, Appointment.DATE_TIME_FORMATTER);","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"            return true;","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"            return false;","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"    public String toString() {","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        return value.toString();","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"            return true;","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"        if (!(other instanceof DateTimeField)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"            return false;","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"        DateTimeField otherDateTimeField \u003d (DateTimeField) other;","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"        return value.equals(otherDateTimeField.value);","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"    public boolean isAfter(DateTimeField other) {","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"        return this.compareTo(other) \u003e 0;","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"    public boolean isBefore(DateTimeField other) {","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"        return this.compareTo(other) \u003c 0;","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"        return value.hashCode();","lastModifiedDate":"2024-03-31"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"    public int compareTo(DateTimeField other) {","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        return value.compareTo(other.value);","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"    public LocalDateTime getDateTimeValue() {","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"        return value;","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":89}},{"path":"src/main/java/seedu/address/model/appointment/EndDateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":" * Represents the end date and time of an appointment in the appointment book.","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTimeField(String)}","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"public class EndDateTime extends DateTimeField {","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code EndDateTime}.","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"     * @param endDateTime A valid date","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"    public EndDateTime(String endDateTime) {","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"        super(endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code EndDateTime}.","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"     * @param endDateTime A valid date","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    public EndDateTime(LocalDateTime endDateTime) {","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"        super(endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":25}},{"path":"src/main/java/seedu/address/model/appointment/FeedbackScore.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":" * Represents an Appointment\u0027s feedback score in the address book.","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidScore(int)}","lastModifiedDate":"2024-04-01"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"public class FeedbackScore {","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Feedback score should only be from 1 to 5 (inclusive)\";","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    public final Integer feedbackScore;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"     * Constructs a {@code FeedbackScore}.","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"     * @param feedbackScore A valid feedback score.","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    public FeedbackScore(Integer feedbackScore) {","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"        checkArgument(isValidScore(feedbackScore), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"        this.feedbackScore \u003d feedbackScore;","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    public static boolean isValidScore(Integer test) {","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        if (test \u003d\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"        return test \u003e\u003d 1 \u0026\u0026 test \u003c\u003d 5;","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"    public int getFeedbackScore() {","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"        return feedbackScore;","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"    public String toString() {","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"        return String.valueOf(feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"        if (!(other instanceof FeedbackScore)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"            return false;","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"        FeedbackScore otherScore \u003d (FeedbackScore) other;","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"        return feedbackScore \u003d\u003d otherScore.feedbackScore;","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"caitlyntang":52,"tankh99":7}},{"path":"src/main/java/seedu/address/model/appointment/FilterAppointmentPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":" * Tests that a {@code Appointment}\u0027s {@code startDateTime} and {@code endDateTime} matches the date times given.","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"public class FilterAppointmentPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"    private final StartDateTime lowerBoundDateTime;","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"    private final EndDateTime upperBoundDateTime;","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"     * Finds appointment based on start and end date times.","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"     * @param lowerBoundDateTime target start date time.","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"     * @param upperBoundDateTime target end date time.","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    public FilterAppointmentPredicate(StartDateTime lowerBoundDateTime, EndDateTime upperBoundDateTime) {","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"        this.lowerBoundDateTime \u003d lowerBoundDateTime;","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"        this.upperBoundDateTime \u003d upperBoundDateTime;","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"        boolean isAppointmentFullyBeforeLowerBound \u003d appointment.getEndDateTime().isBefore(lowerBoundDateTime);","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"        boolean isAppointmentFullyAfterUpperBound \u003d appointment.getStartDateTime().isAfter(upperBoundDateTime);","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"        // Filter out all eliminated cases","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"        return !(isAppointmentFullyBeforeLowerBound || isAppointmentFullyAfterUpperBound);","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":31}},{"path":"src/main/java/seedu/address/model/appointment/FindAppointmentPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":" * Tests that a {@code Appointment}\u0027s {@code studentId} and {@code appointmentId} matches the indexs given.","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"public class FindAppointmentPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"    private final int patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"    private final int appointmentId;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"     * Finds appointment based on student and appointment id.","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"     * @param patientId target student id.","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"     * @param appointmentId target appointment id.","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"    public FindAppointmentPredicate(int patientId, int appointmentId) {","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"        this.patientId \u003d patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"        return appointmentId \u003d\u003d appointment.getAppointmentId() \u0026\u0026 patientId \u003d\u003d appointment.getPatientId().patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"caitlyntang":26}},{"path":"src/main/java/seedu/address/model/appointment/HasAttended.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-04-01"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":" * Represents an Appointment\u0027s attended status in the address book.","lastModifiedDate":"2024-04-01"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidStatus(String)}","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"public class HasAttended {","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Attended status should only be true or false.\";","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"    public final Boolean hasAttended;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"     * Constructs a {@code HasAttended}.","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"     * @param hasAttended A valid attend status.","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"    public HasAttended(Boolean hasAttended) {","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"        this.hasAttended \u003d hasAttended;","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    public static boolean isValidStatus(String test) {","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"        if (test \u003d\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"        return test.equalsIgnoreCase(\"true\") || test.equalsIgnoreCase(\"false\");","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"    public String toString() {","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"        return String.valueOf(hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"        if (!(other instanceof HasAttended)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"            return false;","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"        HasAttended otherStatus \u003d (HasAttended) other;","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"        return hasAttended \u003d\u003d otherStatus.hasAttended;","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"caitlyntang":52}},{"path":"src/main/java/seedu/address/model/appointment/PatientId.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import java.util.List;","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-01"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":" * Represents an Appointment\u0027s patient id in the address book.","lastModifiedDate":"2024-04-01"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidId(int)}","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"public class PatientId {","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"No such patient with this id exists. Please pick a valid id.\";","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"    public final int patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"     * Constructs a {@code PatientId}.","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"     * @param patientId A valid patient id.","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"    public PatientId(int patientId) {","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"        checkArgument(isValidId(patientId), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"        this.patientId \u003d patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"    public static boolean isValidId(int test) {","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"        return test \u003e\u003d 1;","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"    public static boolean isValidId(int test, List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"        return patients.stream().anyMatch(patient -\u003e patient.getSid() \u003d\u003d test);","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"    public String toString() {","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"        return String.valueOf(patientId);","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"        if (!(other instanceof PatientId)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"            return false;","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"        PatientId otherId \u003d (PatientId) other;","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"        return patientId \u003d\u003d otherId.patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"caitlyntang":57}},{"path":"src/main/java/seedu/address/model/appointment/ReadOnlyAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":" * Unmodifiable view of an appointment list","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"public interface ReadOnlyAppointmentList {","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"     * Returns an unmodifiable view of the appointment list.","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"     * This list will not contain any duplicate appointments.","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"vnnamng":17}},{"path":"src/main/java/seedu/address/model/appointment/StartDateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":" * Represents the start date and time of an appointment in the appointment book.","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTimeField(String)}","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"public class StartDateTime extends DateTimeField {","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code StartDateTime}.","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"     * @param startDateTime A valid date","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"    public StartDateTime(String startDateTime) {","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"        super(startDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code StartDateTime}.","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"     * @param startDateTime A valid date","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    public StartDateTime(LocalDateTime startDateTime) {","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"        super(startDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":25}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import java.util.Iterator;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import java.util.List;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":" * A person is considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}. As such, adding","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":" * and updating of appointments uses Appointment#isSameAppointment(Appointment) for equality so as to ensure that the","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":" * appointment being added or updated is unique in terms of identity in the UniqueAppointmentList. However, the removal","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":" * of an appointment uses Appointment#equals(Object) so as to ensure that the appointment with exactly the same fields","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":" * will be removed.","lastModifiedDate":"2024-03-30"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":" *","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":" *","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":" * @see Appointment#isSameAppointment(Appointment)","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"        return internalList.stream().anyMatch(toCheck::isSameAppointment);","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"     * Adds an appointment to the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"     * The appointment must not already exist in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"     * The appointment identity of {@code editedAppointment} must not be the same as another","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"     * existing appointment in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"     * Removes the equivalent appointment from the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"     * The appointment must exist in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"     * Replaces the contents of this list with {@code appointments}.","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"caitlyntang"},"content":"     * {@code appointments} must not contain duplicate appointments.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"    public void setAppointments(List\u003cAppointment\u003e persons) {","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"caitlyntang"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"        if (!appointmentsAreUnique(persons)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"caitlyntang"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"caitlyntang"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"caitlyntang"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"caitlyntang"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"caitlyntang"},"content":"        return internalList.iterator();","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":113,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":115,"author":{"gitId":"caitlyntang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"caitlyntang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"caitlyntang"},"content":"            return true;","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"caitlyntang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"caitlyntang"},"content":"        if (!(other instanceof UniqueAppointmentList)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"caitlyntang"},"content":"            return false;","lastModifiedDate":"2024-03-20"},{"lineNumber":123,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"caitlyntang"},"content":"        UniqueAppointmentList otherUniqueAppointmentList \u003d (UniqueAppointmentList) other;","lastModifiedDate":"2024-03-20"},{"lineNumber":126,"author":{"gitId":"caitlyntang"},"content":"        return internalList.equals(otherUniqueAppointmentList.internalList);","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":129,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":130,"author":{"gitId":"caitlyntang"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"caitlyntang"},"content":"        return internalList.hashCode();","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":134,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"caitlyntang"},"content":"    public String toString() {","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"caitlyntang"},"content":"        return internalList.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":137,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":139,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":140,"author":{"gitId":"caitlyntang"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"caitlyntang"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-20"},{"lineNumber":143,"author":{"gitId":"caitlyntang"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"caitlyntang"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":145,"author":{"gitId":"caitlyntang"},"content":"                if (appointments.get(i).isSameAppointment(appointments.get(j))) {","lastModifiedDate":"2024-03-20"},{"lineNumber":146,"author":{"gitId":"caitlyntang"},"content":"                    return false;","lastModifiedDate":"2024-03-20"},{"lineNumber":147,"author":{"gitId":"caitlyntang"},"content":"                }","lastModifiedDate":"2024-03-20"},{"lineNumber":148,"author":{"gitId":"caitlyntang"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"caitlyntang"},"content":"        return true;","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"caitlyntang":147,"tankh99":5}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"public class AppointmentNotFoundException extends RuntimeException {}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"caitlyntang":6}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":" * identity).","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"caitlyntang":12}},{"path":"src/main/java/seedu/address/model/patient/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof Email)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Email otherEmail \u003d (Email) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return value.equals(otherEmail.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":1,"-":78}},{"path":"src/main/java/seedu/address/model/patient/EmailContainsKeywordPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import java.util.List;","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"/**","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":" * Tests that a {@code Patient}\u0027s {@code Email} matches a part of the keywords given.","lastModifiedDate":"2024-03-28"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":" */","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"public class EmailContainsKeywordPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    public EmailContainsKeywordPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"    @Override","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"        return keywords.stream()","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(patient.getEmail().value, keyword));","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"    @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"            return true;","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"        if (!(other instanceof EmailContainsKeywordPredicate)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"            return false;","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"        EmailContainsKeywordPredicate otherNameContainsKeywordsPredicate \u003d (EmailContainsKeywordPredicate) other;","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"    @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"    public String toString() {","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Jerome-j":45}},{"path":"src/main/java/seedu/address/model/patient/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof Name)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Name otherName \u003d (Name) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"        return fullName.toLowerCase().equals(otherName.fullName.toLowerCase());","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":1,"tankh99":1,"-":65}},{"path":"src/main/java/seedu/address/model/patient/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(patient.getName().fullName, keyword));","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!(other instanceof NameContainsKeywordsPredicate)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d (NameContainsKeywordsPredicate) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Jerome-j":4,"-":40}},{"path":"src/main/java/seedu/address/model/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"public class Patient {","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"    private static int idTracker \u003d 1;","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"    private final int id;","lastModifiedDate":"2024-03-05"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"    public Patient(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"        this(name, phone, email, tags, idTracker);","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"    public Patient(Name name, Phone phone, Email email, Set\u003cTag\u003e tags, int studentId) {","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"        requireAllNonNull(name, phone, email, tags, studentId);","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        this.id \u003d studentId;","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"        // When we are recreating Person with the Id, the id tracker also keeps note of the next id.","lastModifiedDate":"2024-03-15"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"        idTracker \u003d this.id + 1;","lastModifiedDate":"2024-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"    public Patient(Name name, Phone phone, Email email, Set\u003cTag\u003e tags, int studentId, boolean updatedPerson) {","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // TODO: This method needs a rewrite in v1.3","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // The constructor has an additional boolean variable to make sure that the Java compiler treats","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // it as a totally different constructor.","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // The main difference with (Name name, Phone phone, Email email, Set\u003cTag\u003e tags, int studentId)","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // is that it does not refresh the idTracker variable. The constructor without the `updatedPerson` is used","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // to refresh the master last used Id from the last Id of the JSON file.","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, tags, studentId);","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.id \u003d studentId;","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":85,"author":{"gitId":"Jerome-j"},"content":"    public int getSid() {","lastModifiedDate":"2024-03-05"},{"lineNumber":86,"author":{"gitId":"Jerome-j"},"content":"        return id;","lastModifiedDate":"2024-03-05"},{"lineNumber":87,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"Jerome-j"},"content":"    public static int getIdTracker() {","lastModifiedDate":"2024-03-17"},{"lineNumber":90,"author":{"gitId":"Jerome-j"},"content":"        return Patient.idTracker;","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":92,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"Jerome-j"},"content":"    public boolean isSamePerson(Patient otherPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"Jerome-j"},"content":"        if (otherPatient \u003d\u003d this) {","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"Jerome-j"},"content":"        return otherPatient !\u003d null","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"Jerome-j"},"content":"                \u0026\u0026 otherPatient.getName().equals(getName());","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"Jerome-j"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"Jerome-j"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2024-03-26"},{"lineNumber":130,"author":{"gitId":"Jerome-j"},"content":"        return name.equals(otherPatient.name)","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"Jerome-j"},"content":"                \u0026\u0026 phone.equals(otherPatient.phone)","lastModifiedDate":"2024-03-26"},{"lineNumber":132,"author":{"gitId":"Jerome-j"},"content":"                \u0026\u0026 email.equals(otherPatient.email)","lastModifiedDate":"2024-03-26"},{"lineNumber":133,"author":{"gitId":"Jerome-j"},"content":"                // \u0026\u0026 id \u003d\u003d otherPerson.id","lastModifiedDate":"2024-03-15"},{"lineNumber":134,"author":{"gitId":"Jerome-j"},"content":"                \u0026\u0026 tags.equals(otherPatient.tags);","lastModifiedDate":"2024-03-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"Jerome-j"},"content":"        return Objects.hash(name, phone, email, tags, id);","lastModifiedDate":"2024-03-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":150,"author":{"gitId":"Jerome-j"},"content":"                .add(\"id\", id)","lastModifiedDate":"2024-03-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":41,"-":113}},{"path":"src/main/java/seedu/address/model/patient/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 or 8 digits long \"","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"                    + \"and start with 6, 8 or 9\";","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * Phone number regex matches the following conditions:","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * 1. Has exactly 3 OR 8 digits exactly","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * 2. Starts with 6, 8 or 9. We ignore numbers starting with 3 since they\u0027re not numbers that patients would have","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"     * Note that we currently do not validate against ALL invalid numbers like 666 or 88888888 due to technical","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"     * complexities","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\b[689]\\\\d{2}(\\\\d{5})?\\\\b\";","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (!(other instanceof Phone)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Phone otherPhone \u003d (Phone) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return value.equals(otherPhone.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":1,"tankh99":12,"-":58}},{"path":"src/main/java/seedu/address/model/patient/PhoneContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"import java.util.List;","lastModifiedDate":"2024-03-03"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-03"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"/**","lastModifiedDate":"2024-03-15"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":" * Tests that a {@code Person}\u0027s {@code Phone} matches a part of the keywords given.","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":" */","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"public class PhoneContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2024-03-03"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2024-03-03"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2024-03-03"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"    @Override","lastModifiedDate":"2024-03-03"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"        return keywords.stream()","lastModifiedDate":"2024-03-03"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(patient.getPhone().toString(), keyword));","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"     * Checks if the current object is equal to the given object.","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"     * @param other The object to compare against","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"     * @return True if the objects are equal, false otherwise","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"            return true;","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"        if (!(other instanceof PhoneContainsKeywordsPredicate)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"            return false;","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"        PhoneContainsKeywordsPredicate otherPhoneContainsKeywordsPredicate \u003d (PhoneContainsKeywordsPredicate) other;","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"        return keywords.equals(otherPhoneContainsKeywordsPredicate.keywords);","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"    @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"    public String toString() {","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"Jerome-j":49}},{"path":"src/main/java/seedu/address/model/patient/TagContainsKeywordPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"import java.util.List;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":" * Tests that a {@code Person}\u0027s {@code Tags} (case-insensitive) matches a part of the keywords given.","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"public class TagContainsKeywordPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"    public TagContainsKeywordPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"     * Checks if the given patient has any tags that contain the specified keywords.","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"     * @param patient the patient to be checked","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"     * @return true if the patient has any tags that contain the specified keywords (case-insensitive), false otherwise","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"        return keywords.stream()","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"                .anyMatch(keyword -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"                        patient.getTags().stream()","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"                                .anyMatch(tag -\u003e tag.tagName.equalsIgnoreCase(keyword))","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"                );","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"     * Checks if the current object is equal to the given object.","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"     * @param other The object to compare against","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"     * @return True if the objects are equal, false otherwise","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"            return true;","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"        if (!(other instanceof TagContainsKeywordPredicate)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"            return false;","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"        TagContainsKeywordPredicate otherTagContainsKeywordsPredicate \u003d (TagContainsKeywordPredicate) other;","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        return keywords.equals(otherTagContainsKeywordsPredicate.keywords);","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"    @Override","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"    public String toString() {","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"Jerome-j":57}},{"path":"src/main/java/seedu/address/model/patient/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":" * @see Patient#isSamePerson(Patient)","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"public class UniquePersonList implements Iterable\u003cPatient\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"    public boolean contains(Patient toCheck) {","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    public void add(Patient toAdd) {","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"    public void setPerson(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"        if (!target.isSamePerson(editedPatient) \u0026\u0026 contains(editedPatient)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"Jerome-j"},"content":"        internalList.set(index, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"    public void remove(Patient toRemove) {","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"Jerome-j"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"Jerome-j"},"content":"    public void setPersons(List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"Jerome-j"},"content":"        requireAllNonNull(patients);","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"Jerome-j"},"content":"        if (!personsAreUnique(patients)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"Jerome-j"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"Jerome-j"},"content":"        internalList.setAll(patients);","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"Jerome-j"},"content":"    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"Jerome-j"},"content":"    public Iterator\u003cPatient\u003e iterator() {","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!(other instanceof UniquePersonList)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        UniquePersonList otherUniquePersonList \u003d (UniquePersonList) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return internalList.equals(otherUniquePersonList.internalList);","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return internalList.toString();","lastModifiedDate":"2019-02-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"Jerome-j"},"content":"    private boolean personsAreUnique(List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"Jerome-j"},"content":"        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"Jerome-j"},"content":"            for (int j \u003d i + 1; j \u003c patients.size(); j++) {","lastModifiedDate":"2024-03-26"},{"lineNumber":143,"author":{"gitId":"Jerome-j"},"content":"                if (patients.get(i).isSamePerson(patients.get(j))) {","lastModifiedDate":"2024-03-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jerome-j":29,"-":121}},{"path":"src/main/java/seedu/address/model/patient/exceptions/DuplicatePatientException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient.exceptions;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"/**","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":" * Signals that the operation will result in duplicate Patient (Patients are considered duplicates if they have the same","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":" * identity).","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":" */","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"public class DuplicatePatientException extends RuntimeException {","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"    public DuplicatePatientException() {","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"Jerome-j":11}},{"path":"src/main/java/seedu/address/model/patient/exceptions/PatientNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient.exceptions;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"/**","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":" * Signals that the operation is unable to find the specified patient.","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":" */","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"public class PatientNotFoundException extends RuntimeException {}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"Jerome-j":6}},{"path":"src/main/java/seedu/address/model/patientfeedbackreport/PatientFeedbackReport.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.model.patientfeedbackreport;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":" * Represents a PatientFeedbackReport object that contains a patient and a list of appointments","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"public class PatientFeedbackReport implements Comparable\u003cPatientFeedbackReport\u003e {","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    private Patient patient;","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    private List\u003cAppointment\u003e appointments;","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * Creates a PatientFeedbackReport object","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    public PatientFeedbackReport(Patient patient, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        requireAllNonNull(patient, appointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        this.appointments \u003d appointments;","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    public int getPatientId() {","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        return patient.getSid();","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    public Name getPatientName() {","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        return patient.getName();","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     * Calculates the avg feedback score according to the list of appointments the object has","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"     * @return An average feedback score or null if there are no appointments","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"    public Double getAvgFeedbackScore() {","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        Double total \u003d Double.valueOf(0);","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        int count \u003d 0;","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"            boolean apptBelongsToPatient \u003d appointment.getPatientId().patientId \u003d\u003d patient.getSid();","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"            boolean apptHasFeedbacScore \u003d appointment.getFeedbackScore() !\u003d null","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"                    \u0026\u0026 appointment.getFeedbackScore().feedbackScore !\u003d null;","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"            if (apptBelongsToPatient \u0026\u0026 apptHasFeedbacScore) {","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"                total +\u003d appointment.getFeedbackScore().feedbackScore;","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"                count++;","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        if (count !\u003d 0) {","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"            return Math.round(total / count * 100.0) / 100.0;","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"            return null;","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"    public int compareTo(PatientFeedbackReport o) {","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"        return this.patient.getName().fullName.compareTo(o.patient.getName().fullName);","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"tankh99":62}},{"path":"src/main/java/seedu/address/model/patientfeedbackreport/PatientFeedbackReportList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.model.patientfeedbackreport;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.ReadOnlyList;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":" * Represents a list of PatientFeedbackReports.","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"public class PatientFeedbackReportList implements ReadOnlyList\u003cPatientFeedbackReport\u003e {","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    private final ObservableList\u003cPatientFeedbackReport\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    private final ObservableList\u003cPatientFeedbackReport\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"     * Constructs a PatientFeedbackReportList with the given list of patients and appointments.","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    public PatientFeedbackReportList(List\u003cPatient\u003e patients, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        requireAllNonNull(patients, appointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        generateReportList(patients, appointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"     * Generates the report list by iterating through the list of patients and appointments and matching the","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     * various appointments to their respective patients and then calculating their overall score.","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"     * @param patients The list of patients to iterate through","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     * @param appointments The list of appointments to iterate through","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    public void generateReportList(List\u003cPatient\u003e patients, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        requireAllNonNull(patients, appointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        this.internalList.clear();","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        for (Patient patient : patients) {","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"            PatientFeedbackReport report \u003d new PatientFeedbackReport(patient, appointments);","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"            internalList.add(report);","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"    public ObservableList\u003cPatientFeedbackReport\u003e getList() {","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"tankh99":50}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be alphanumeric and should not be blank\";","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!(other instanceof Tag)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Tag otherTag \u003d (Tag) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return tagName.equals(otherTag.tagName);","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tankh99":1,"-":61}},{"path":"src/main/java/seedu/address/model/util/RelationshipUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * In charge of enforcing relationship constraints between models","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class RelationshipUtil {","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Checks if a {@code Person} with the given ID exists","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param id       personId","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param patients List of {@code Person}","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"    public static boolean personExists(int id, List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return patients.stream().anyMatch(patient -\u003e patient.getSid() \u003d\u003d id);","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Checks if the given date and time is already used by another {@code Appointment}.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param appointments List of {@code Appointment}s to check against","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    public static boolean isAppointmentDateTimeAlreadyTaken(StartDateTime startDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"                                                            EndDateTime endDateTime, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"            // Check if the appointment is within the range of the existing appointment","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"            if (appointment.getEndDateTime().compareTo(startDateTime) \u003e 0","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"                    \u0026\u0026 appointment.getStartDateTime().compareTo(endDateTime) \u003c 0) {","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return false;","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"     * Checks if the given start and end date and time is already used by another {@code Appointment}.","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"     * @param appointments List of {@code Appointment}s to check against","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"    public static boolean isAppointmentDateTimeAlreadyTaken(Appointment uneditedAppointment,","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"                                                            Appointment editedAppointment,","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"                                                            List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"            if (appointment.isSameAppointment(uneditedAppointment)) {","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"                continue;","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"            // Check if the appointment is within the range of the existing appointment","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"            if (appointment.getEndDateTime().compareTo(editedAppointment.getStartDateTime()) \u003e 0","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"                    \u0026\u0026 appointment.getStartDateTime().compareTo(editedAppointment.getEndDateTime()) \u003c 0) {","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"                return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"        return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"caitlyntang":22,"Jerome-j":2,"vnnamng":9,"-":31}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-01"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentDescription;","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.FeedbackScore;","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.HasAttended;","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.PatientId;","lastModifiedDate":"2024-04-01"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":" * Contains utility methods for populating {@code PatientList} with sample data.","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"    public static Patient[] getSamplePersons() {","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"        return new Patient[]{","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@gmail.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"depression\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@gmail.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"jobless\", \"anxiety\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Charlotte Tan\"), new Phone(\"93210283\"), new Email(\"charlotte@outlook.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"depression\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@gmail.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"ocd\", \"adhd\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"            new Patient(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"ocd\", \"depression\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"            new Patient(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"adhd\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Elena Wong\"), new Phone(\"81234567\"), new Email(\"elenawong@gmail.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"stress\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Fahad Mubarak\"), new Phone(\"82345678\"), new Email(\"fahadmubarak@example.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"insomnia\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Grace Lim\"), new Phone(\"83456789\"), new Email(\"gracelim@outlook.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"anxiety\", \"stress\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Henry Quek\"), new Phone(\"84567890\"), new Email(\"henryquek@gmail.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"bipolar\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Isabella Tan\"), new Phone(\"85678901\"), new Email(\"isabellatan@example.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"depression\", \"anxiety\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Jasmine Koh\"), new Phone(\"86789012\"), new Email(\"jasminekoh@outlook.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"adhd\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Kumar Singh\"), new Phone(\"87890123\"), new Email(\"kumarsingh@gmail.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"ocd\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Lily Chen\"), new Phone(\"88901234\"), new Email(\"lilychen@example.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"jobless\", \"stress\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Mohamed Zulfikar\"), new Phone(\"89012345\"), new Email(\"mohamedz@example.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"depression\", \"insomnia\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"            new Patient(new Name(\"Nora Seah\"), new Phone(\"90123456\"), new Email(\"noraseah@outlook.com\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"                getTagSet(\"anxiety\"))","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"    public static Appointment[] getSampleAppointments() {","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"        return new Appointment[]{","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"            new Appointment(1,","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"                                new StartDateTime(LocalDateTime.of(2021, 10, 10, 10, 10)),","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"                                new EndDateTime(LocalDateTime.of(2021, 10, 10, 10, 59)),","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"                                new PatientId(1), new AppointmentDescription(\"First appointment\"),","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"                                new HasAttended(true), new FeedbackScore(1)),","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"            new Appointment(2,","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"                                new StartDateTime(LocalDateTime.of(2021, 10, 10, 11, 0)),","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"                                new EndDateTime(LocalDateTime.of(2021, 10, 10, 11, 45)),","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"                                new PatientId(2), new AppointmentDescription(\"Second appointment\"),","lastModifiedDate":"2024-03-31"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"                                new HasAttended(false), new FeedbackScore(3)),","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"            new Appointment(3,","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"                                new StartDateTime(LocalDateTime.of(2021, 10, 10, 12, 30)),","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"                                new EndDateTime(LocalDateTime.of(2021, 10, 10, 14, 59)),","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"                                new PatientId(3), new AppointmentDescription(\"Third appointment\"),","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"                                new HasAttended(true), new FeedbackScore(5)),","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"            new Appointment(4,","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"                                new StartDateTime(LocalDateTime.of(2021, 11, 10, 10, 10)),","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"                                new EndDateTime(LocalDateTime.of(2021, 11, 10, 10, 59)),","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"                                new PatientId(1), new AppointmentDescription(\"Fourth appointment\"),","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"caitlyntang"},"content":"                                new HasAttended(false), new FeedbackScore(4)),","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"    public static ReadOnlyAppointmentList getSampleAppointmentList() {","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"        AppointmentList sampleAl \u003d new AppointmentList();","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"        for (Appointment sampleAppointment : getSampleAppointments()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":95,"author":{"gitId":"vnnamng"},"content":"            sampleAl.addAppointment(sampleAppointment);","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"        return sampleAl;","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"vnnamng"},"content":"    public static ReadOnlyPatientList getSamplePatientList() {","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"        PatientList sampleAb \u003d new PatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"Jerome-j"},"content":"        for (Patient samplePatient : getSamplePersons()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"Jerome-j"},"content":"            sampleAb.addPerson(samplePatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"caitlyntang":17,"Jerome-j":10,"tankh99":31,"vnnamng":28,"-":31}},{"path":"src/main/java/seedu/address/storage/AppointmentListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":" * Represents a storage for {@link AppointmentList}.","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"public interface AppointmentListStorage {","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"    Path getAppointmentListFilePath();","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"     * Returns AppointmentList data as a {@link ReadOnlyAppointmentList}.","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"    Optional\u003cReadOnlyAppointmentList\u003e readAppointmentList() throws DataLoadingException;","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"     * @see #getAppointmentListFilePath()","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    Optional\u003cReadOnlyAppointmentList\u003e readAppointmentList(Path filePath) throws DataLoadingException;","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"     * Saves the given {@link ReadOnlyAppointmentList} to the storage.","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"     * @param appointmentList cannot be null.","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"    void saveAppointmentList(ReadOnlyAppointmentList appointmentList) throws IOException;","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"     * @see #saveAppointmentList(ReadOnlyAppointmentList)","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"    void saveAppointmentList(ReadOnlyAppointmentList appointmentList, Path filePath) throws IOException;","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"vnnamng":30,"-":16}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-17"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentDescription;","lastModifiedDate":"2024-04-01"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.FeedbackScore;","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.HasAttended;","lastModifiedDate":"2024-04-01"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.PatientId;","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    private final int appointmentId;","lastModifiedDate":"2024-04-01"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"    private final LocalDateTime startDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    private final LocalDateTime endDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    private final int patientId;","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"    private final String appointmentDescription;","lastModifiedDate":"2024-04-01"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"    private final Boolean hasAttended;","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    private final Integer feedbackScore;","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details.","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    @JsonCreator","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"appointmentId\") int appointmentId,","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"                                  @JsonProperty(\"startDateTime\") LocalDateTime startDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"                                  @JsonProperty(\"endDateTime\") LocalDateTime endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"                                  @JsonProperty(\"studentId\") int patientId,","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"                                  @JsonProperty(\"appointmentDescription\") String appointmentDescription,","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"                                  @JsonProperty(\"hasAttended\") Boolean hasAttended,","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"                                  @JsonProperty(\"feedbackScore\") Integer feedbackScore) {","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"        this.patientId \u003d patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"        this.appointmentDescription \u003d appointmentDescription;","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        this.hasAttended \u003d hasAttended;","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        this.feedbackScore \u003d feedbackScore;","lastModifiedDate":"2024-03-25"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"        appointmentId \u003d source.getAppointmentId();","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"        startDateTime \u003d source.getStartDateTime().getDateTimeValue();","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        endDateTime \u003d source.getEndDateTime().getDateTimeValue();","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"        patientId \u003d source.getPatientId().patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"        if (source.getAppointmentDescription() !\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"            appointmentDescription \u003d source.getAppointmentDescription().appointmentDescription;","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"            appointmentDescription \u003d null;","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"        if (source.getAttendedStatus() !\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"            hasAttended \u003d source.getAttendedStatus().hasAttended;","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"            hasAttended \u003d null;","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"        if (source.getFeedbackScore() !\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"            feedbackScore \u003d source.getFeedbackScore().feedbackScore;","lastModifiedDate":"2024-04-01"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"            feedbackScore \u003d null;","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-17"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2024-03-17"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-17"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"        if (startDateTime \u003d\u003d null) {","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"appointmentDateTime\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"        if (endDateTime \u003d\u003d null) {","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"appointmentDateTime\"));","lastModifiedDate":"2024-03-17"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"        if (appointmentId \u003c\u003d 0 || patientId \u003c\u003d 0) {","lastModifiedDate":"2024-03-31"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"            throw new IllegalValueException(\"Please only use positive index.\");","lastModifiedDate":"2024-03-17"},{"lineNumber":95,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":96,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"caitlyntang"},"content":"        final PatientId modelPatientId \u003d new PatientId(patientId);","lastModifiedDate":"2024-04-01"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"        final StartDateTime modelStartDateTime \u003d new StartDateTime(this.startDateTime);","lastModifiedDate":"2024-04-01"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"        final EndDateTime modelEndDateTime \u003d new EndDateTime(this.endDateTime);","lastModifiedDate":"2024-04-01"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"        final FeedbackScore modelFeedbackScore \u003d new FeedbackScore(this.feedbackScore);","lastModifiedDate":"2024-04-01"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"        final HasAttended modelHasAttended \u003d new HasAttended(hasAttended);","lastModifiedDate":"2024-04-01"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"        final AppointmentDescription modelAppointmentDescription \u003d new AppointmentDescription(appointmentDescription);","lastModifiedDate":"2024-04-01"},{"lineNumber":103,"author":{"gitId":"vnnamng"},"content":"        // TODO: Dummy value for ID","lastModifiedDate":"2024-03-17"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"        return new Appointment(appointmentId, modelStartDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":105,"author":{"gitId":"caitlyntang"},"content":"                modelEndDateTime, modelPatientId, modelAppointmentDescription, modelHasAttended, modelFeedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":106,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":107,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"caitlyntang":39,"tankh99":7,"vnnamng":61}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":" * Jackson-friendly version of {@link Patient}.","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"class JsonAdaptedPatient {","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"    private final int sid;","lastModifiedDate":"2024-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"                              @JsonProperty(\"email\") String email,","lastModifiedDate":"2024-03-03"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"                              @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags, @JsonProperty(\"sid\") int sid) {","lastModifiedDate":"2024-03-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"        this.sid \u003d sid;","lastModifiedDate":"2024-03-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-01-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-01-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-01-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"        sid \u003d source.getSid();","lastModifiedDate":"2024-03-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-01-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":95,"author":{"gitId":"Jerome-j"},"content":"        if (sid \u003c 0) {","lastModifiedDate":"2024-03-15"},{"lineNumber":96,"author":{"gitId":"Jerome-j"},"content":"            // If the student ID is of an illegal value.","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"Jerome-j"},"content":"            throw new IllegalValueException(\"Please only use positive index.\");","lastModifiedDate":"2024-03-15"},{"lineNumber":98,"author":{"gitId":"Jerome-j"},"content":"        } else if (sid \u003c Patient.getIdTracker()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":99,"author":{"gitId":"Jerome-j"},"content":"            // If the studentId is not strictly increasing.","lastModifiedDate":"2024-03-31"},{"lineNumber":100,"author":{"gitId":"Jerome-j"},"content":"            throw new IllegalValueException(\"Index should be strictly increasing.\");","lastModifiedDate":"2024-03-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":102,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":107,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":108,"author":{"gitId":"Jerome-j"},"content":"        return new Patient(modelName, modelPhone, modelEmail, modelTags, sid);","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jerome-j":24,"-":87}},{"path":"src/main/java/seedu/address/storage/JsonAppointmentListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":" * A class to access PatientList data stored as a json file on the hard disk.","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"public class JsonAppointmentListStorage implements AppointmentListStorage {","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAppointmentListStorage.class);","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    private Path appointmentFilePath;","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"     * Creates a {@code JsonPatientListStorage} with the given file paths.","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"     * @param appointmentFilePath the file path for the appointment list data. Can be null.","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    public JsonAppointmentListStorage(Path appointmentFilePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"        this.appointmentFilePath \u003d appointmentFilePath;","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    public Path getAppointmentListFilePath() {","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"        return appointmentFilePath;","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"    public Optional\u003cReadOnlyAppointmentList\u003e readAppointmentList() throws DataLoadingException {","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        return readAppointmentList(appointmentFilePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"     * Similar to {@link #readAppointmentList()}.","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"    public Optional\u003cReadOnlyAppointmentList\u003e readAppointmentList(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        Optional\u003cJsonSerializableAppointmentList\u003e jsonAppointmentList \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"                filePath, JsonSerializableAppointmentList.class);","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"        if (!jsonAppointmentList.isPresent()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"            return Optional.empty();","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"            return Optional.of(jsonAppointmentList.get().toModelType());","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"     * Saves the given {@link ReadOnlyAppointmentList} to the storage.","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"     * @param appointmentList cannot be null.","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"    public void saveAppointmentList(ReadOnlyAppointmentList appointmentList) throws IOException {","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"        saveAppointmentList(appointmentList, appointmentFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"     * @see #saveAppointmentList(ReadOnlyAppointmentList)","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"    public void saveAppointmentList(ReadOnlyAppointmentList appointmentList, Path filePath) throws IOException {","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(appointmentList);","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAppointmentList(appointmentList), filePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"vnnamng":71,"-":20}},{"path":"src/main/java/seedu/address/storage/JsonPatientListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":" * A class to access PatientList data stored as a json file on the hard disk.","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"public class JsonPatientListStorage implements PatientListStorage {","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientListStorage.class);","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    private Path personsFilePath;","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"     * Creates a {@code JsonPatientListStorage} with the given file paths.","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"     * @param personsFilePath the file path for the person data. Cannot be null.","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    public JsonPatientListStorage(Path personsFilePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"        this.personsFilePath \u003d personsFilePath;","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"        return personsFilePath;","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"    public Optional\u003cReadOnlyPatientList\u003e readPatientList() throws DataLoadingException {","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        return readPatientList(personsFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"     * Similar to {@link #readPatientList()}.","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"    public Optional\u003cReadOnlyPatientList\u003e readPatientList(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        Optional\u003cJsonSerializablePatientList\u003e jsonPatientList \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"                filePath, JsonSerializablePatientList.class);","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"        if (!jsonPatientList.isPresent()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"            return Optional.of(jsonPatientList.get().toModelType());","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"    public void savePatientList(ReadOnlyPatientList patientList) throws IOException {","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"        savePatientList(patientList, personsFilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"     * Similar to {@link #savePatientList(ReadOnlyPatientList)}.","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"    public void savePatientList(ReadOnlyPatientList addressBook, Path filePath) throws IOException {","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        JsonUtil.saveJsonFile(new JsonSerializablePatientList(addressBook), filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"vnnamng":28,"-":58}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import java.util.List;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":" * An Immutable PatientList that is serializable to JSON format.","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"@JsonRootName(value \u003d \"appointmentList\")","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"class JsonSerializableAppointmentList {","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointment list contains duplicate appointment(s) \"","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"            + \"or appointments with overlapping datetime.\";","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    private static final String MESSAGE_INVALID_START_END_DATE_TIME \u003d \"Appointment list contains \"","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"            + \"invalid start and end datetime i.e start datetime is after end datetime.\";","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code JsonSerializablePatientList} with the given persons.","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"    @JsonCreator","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    public JsonSerializableAppointmentList(@JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"        this.appointments.addAll(appointments);","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"     * Converts a given {@code ReadOnlyPatientList} into this class for Jackson use.","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializablePatientList}.","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"    public JsonSerializableAppointmentList(ReadOnlyAppointmentList source) {","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"        appointments.addAll(source.getAppointmentList().stream()","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"                .map(JsonAdaptedAppointment::new).collect(Collectors.toList()));","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"     * Converts this address book into the model\u0027s {@code PatientList} object.","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"    public AppointmentList toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        AppointmentList appointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"            if (appointmentList.hasAppointment(appointment)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"            if (appointment.isStartDateTimeAfterEndDateTime()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_START_END_DATE_TIME);","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"            appointmentList.addAppointment(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"        return appointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"tankh99":1,"vnnamng":66}},{"path":"src/main/java/seedu/address/storage/JsonSerializablePatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":" * An Immutable PatientList that is serializable to JSON format.","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"class JsonSerializablePatientList {","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"    private final List\u003cJsonAdaptedPatient\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"     * Constructs a {@code JsonSerializablePatientList} with the given persons.","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"    public JsonSerializablePatientList(@JsonProperty(\"persons\") List\u003cJsonAdaptedPatient\u003e persons) {","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"     * Converts a given {@code ReadOnlyPatientList} into this class for Jackson use.","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializablePatientList}.","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    public JsonSerializablePatientList(ReadOnlyPatientList source) {","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"     * Converts this address book into the model\u0027s {@code PatientList} object.","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"    public PatientList toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        PatientList patientList \u003d new PatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient : persons) {","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"            if (patientList.hasPerson(patient)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"            patientList.addPerson(patient);","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"        return patientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jerome-j":5,"vnnamng":15,"-":40}},{"path":"src/main/java/seedu/address/storage/PatientListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":" * Represents a storage for {@link PatientList}.","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"public interface PatientListStorage {","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"     * Returns PatientList data as a {@link ReadOnlyPatientList}.","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"    Optional\u003cReadOnlyPatientList\u003e readPatientList() throws DataLoadingException;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"     * @see #getPatientListFilePath()","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"    Optional\u003cReadOnlyPatientList\u003e readPatientList(Path filePath) throws DataLoadingException;","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"     * Saves the given {@link ReadOnlyPatientList} to the storage.","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    void savePatientList(ReadOnlyPatientList addressBook) throws IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"     * @see #savePatientList(ReadOnlyPatientList)","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"    void savePatientList(ReadOnlyPatientList addressBook, Path filePath) throws IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"vnnamng":13,"-":33}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"public interface Storage extends PatientListStorage, AppointmentListStorage, UserPrefsStorage {","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"    Optional\u003cReadOnlyPatientList\u003e readPatientList() throws DataLoadingException;","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    void savePatientList(ReadOnlyPatientList patientList) throws IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"    Path getAppointmentListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"    Optional\u003cReadOnlyAppointmentList\u003e readAppointmentList() throws DataLoadingException;","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"    void saveAppointmentList(ReadOnlyAppointmentList appointmentList) throws IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"vnnamng":15,"-":27}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":" * Manages storage of PatientList data in local storage.","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"    private PatientListStorage patientListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"    private AppointmentListStorage appointmentListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"     * Creates a {@code StorageManager} with the given {@code PatientListStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    public StorageManager(PatientListStorage patientListStorage, AppointmentListStorage appointmentListStorage,","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"                          UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"        this.patientListStorage \u003d patientListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"        this.appointmentListStorage \u003d appointmentListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        return patientListStorage.getPatientListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"    public void savePatientList(ReadOnlyPatientList addressBook) throws IOException {","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"        savePatientList(addressBook, patientListStorage.getPatientListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"    public void savePatientList(ReadOnlyPatientList addressBook, Path filePath) throws IOException {","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"        logger.fine(\"Attempting to write persons to data file: \" + filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"        patientListStorage.savePatientList(addressBook, filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"    public Optional\u003cReadOnlyPatientList\u003e readPatientList() throws DataLoadingException {","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"        return readPatientList(patientListStorage.getPatientListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"    public Optional\u003cReadOnlyPatientList\u003e readPatientList(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"        return patientListStorage.readPatientList(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"    public Path getAppointmentListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"        return appointmentListStorage.getAppointmentListFilePath();","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"    public Optional\u003cReadOnlyAppointmentList\u003e readAppointmentList() throws DataLoadingException {","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"        return readAppointmentList(appointmentListStorage.getAppointmentListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":96,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":99,"author":{"gitId":"vnnamng"},"content":"    public Optional\u003cReadOnlyAppointmentList\u003e readAppointmentList(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"vnnamng"},"content":"        logger.fine(\"Attempting to read appointments data from file: \" + filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"        return appointmentListStorage.readAppointmentList(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"vnnamng"},"content":"     * @param appointmentList","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"vnnamng"},"content":"     * @throws IOException","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"vnnamng"},"content":"    public void saveAppointmentList(ReadOnlyAppointmentList appointmentList) throws IOException {","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"Jerome-j"},"content":"        // This saves to a different JSON file.","lastModifiedDate":"2024-03-19"},{"lineNumber":111,"author":{"gitId":"vnnamng"},"content":"        saveAppointmentList(appointmentList, appointmentListStorage.getAppointmentListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":115,"author":{"gitId":"vnnamng"},"content":"    public void saveAppointmentList(ReadOnlyAppointmentList appointmentList, Path filePath) throws IOException {","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"vnnamng"},"content":"        logger.fine(\"Attempting to write appointments to data file: \" + filePath);","lastModifiedDate":"2024-03-18"},{"lineNumber":117,"author":{"gitId":"vnnamng"},"content":"        appointmentListStorage.saveAppointmentList(appointmentList, filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jerome-j":1,"vnnamng":48,"-":71}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.ui;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":" * A UI component that displays information of an {@code Appointment}.","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PatientList level 4\u003c/a\u003e","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"    public final Appointment appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"    @FXML","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"    private HBox cardPane;","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"    @FXML","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"    private Label name;","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    @FXML","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"    private Label appointmentId;","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"    @FXML","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"    private Label appointmentDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"    @FXML","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"    private Label appointmentDescription;","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-03-25"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"    private FlowPane details;","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"     * Creates a {@code AppointmentCode} with the given {@code Appointment} to display.","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"    public AppointmentCard(Appointment appointment, String patientName) {","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"        super(FXML);","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"        appointmentId.setText(appointment.getAppointmentId() + \". \");","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"        name.setText(patientName);","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"        String formattedStartDateTime \u003d DateUtil.formatDateTime(appointment.getStartDateTime().getDateTimeValue());","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"        String formattedEndDateTime \u003d DateUtil.formatDateTime(appointment.getEndDateTime().getDateTimeValue());","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"        appointmentDateTime.setText(formattedStartDateTime + \" - \"","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"                + formattedEndDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"        if (appointment.getAttendedStatus() !\u003d null","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"                \u0026\u0026 appointment.getAttendedStatus().hasAttended !\u003d null","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"                \u0026\u0026 appointment.getAttendedStatus().hasAttended) {","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"            details.getChildren().add(new Label(\"Attended\"));","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"        appointmentDescription.managedProperty().bind(appointmentDescription.visibleProperty());","lastModifiedDate":"2024-03-25"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"        if (appointment.getAppointmentDescription() !\u003d null","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"                \u0026\u0026 appointment.getAppointmentDescription().appointmentDescription !\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"            appointmentDescription.setText(appointment.getAppointmentDescription().appointmentDescription);","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-03-25"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"            appointmentDescription.setVisible(false);","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"        if (appointment.getFeedbackScore() \u003d\u003d null || appointment.getFeedbackScore().feedbackScore \u003d\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"            details.getChildren().add(new Label(\"N/A\"));","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"            details.getChildren().add(new Label(appointment.getFeedbackScore().toString()));","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":60,"tankh99":12,"vnnamng":4}},{"path":"src/main/java/seedu/address/ui/AppointmentListViewCell.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.ui;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":" * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using an {@code AppointmentCard}.","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"public class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"    private final ReadOnlyPatientList patients;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"    AppointmentListViewCell(ReadOnlyPatientList patients) {","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"    protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"        super.updateItem(appointment, empty);","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"        if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"            setGraphic(null);","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"            setText(null);","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"            String name \u003d patients.getPersonList().stream()","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"                    .filter(patient -\u003e patient.getSid() \u003d\u003d appointment.getPatientId().patientId).findFirst()","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"                    .get().getName().fullName;","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"            setGraphic(new AppointmentCard(appointment, name).getRoot());","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"caitlyntang":32}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static seedu.address.commons.util.UiUtil.setShortcut;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.core.CommandHistory;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.UiUtil;","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    private final CommandHistory commandHistory;","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    private int currentCommandIndex \u003d -1;","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        commandHistory \u003d new CommandHistory();","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        setShortcut(getRoot(), KeyCode.UP, (keyCode) -\u003e {","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"            commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"            String prevCommand \u003d commandHistory.getCurrentCommand();","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"            UiUtil.setText(commandTextField, prevCommand);","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        setShortcut(getRoot(), KeyCode.DOWN, (keyCode) -\u003e {","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"            commandHistory.redo();","lastModifiedDate":"2024-03-24"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"            String nextCommand \u003d commandHistory.getCurrentCommand();","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"            UiUtil.setText(commandTextField, nextCommand);","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"            commandHistory.addCommandToHistory(commandText);","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"tankh99":25,"-":84}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2324s2-cs2103-f08-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Jerome-j":1,"-":101}},{"path":"src/main/java/seedu/address/ui/ListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":" * Panel containing the list of persons, appointments and case logs.","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"public class ListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"    private static final String FXML \u003d \"ListPanel.fxml\";","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"    private ListView\u003cPatient\u003e personListView;","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"    @FXML","lastModifiedDate":"2024-03-08"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    private ListView\u003cPatientFeedbackReport\u003e patientFeedbackReportListView;","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"     * Creates a {@code ListPanel} with the given {@code ObservableLists}.","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    public ListPanel(","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        ObservableList\u003cPatient\u003e patientList,","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"        ReadOnlyPatientList readOnlyPatientList,","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"        ObservableList\u003cAppointment\u003e appointmentList,","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"        ObservableList\u003cPatientFeedbackReport\u003e patientFeedbackReportList","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    ) {","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"        personListView.setItems(patientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        patientFeedbackReportListView.setItems(patientFeedbackReportList);","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell(readOnlyPatientList));","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        patientFeedbackReportListView.setCellFactory(listView -\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"            new PatientFeedbackReportListViewCell());","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"caitlyntang":15,"Jerome-j":3,"tankh99":11,"-":19}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"    private ListPanel listPanel;","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"    private StackPane listPanelPlaceholder;","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"    @FXML","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"    private VBox patientTagViewer;","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"tankh99"},"content":"        listPanel \u003d new ListPanel(","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"tankh99"},"content":"            logic.getFilteredPersonList(),","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"caitlyntang"},"content":"            logic.getPatientList(),","lastModifiedDate":"2024-04-04"},{"lineNumber":120,"author":{"gitId":"tankh99"},"content":"            logic.getFilteredAppointmentList(),","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"tankh99"},"content":"            logic.getPatientFeedbackReportList()","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"tankh99"},"content":"        );","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"caitlyntang"},"content":"        listPanelPlaceholder.getChildren().add(listPanel.getRoot());","lastModifiedDate":"2024-03-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"vnnamng"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPatientListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"Jerome-j"},"content":"        PatientTagViewer patientTagViewer1 \u003d new PatientTagViewer(logic.getPatientList());","lastModifiedDate":"2024-04-03"},{"lineNumber":135,"author":{"gitId":"Jerome-j"},"content":"        patientTagViewer.getChildren().add(patientTagViewer1.getRoot());","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":158,"author":{"gitId":"Jerome-j"},"content":"            ensureWindowIsFocusedAndUnminimized();","lastModifiedDate":"2024-03-30"},{"lineNumber":159,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":160,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":161,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":162,"author":{"gitId":"Jerome-j"},"content":"    private void ensureWindowIsFocusedAndUnminimized() {","lastModifiedDate":"2024-03-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":164,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":165,"author":{"gitId":"Jerome-j"},"content":"        Stage helpStage \u003d helpWindow.getRoot();","lastModifiedDate":"2024-03-30"},{"lineNumber":166,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":167,"author":{"gitId":"Jerome-j"},"content":"        // Check if the help window is minimized","lastModifiedDate":"2024-03-30"},{"lineNumber":168,"author":{"gitId":"Jerome-j"},"content":"        if (helpStage.isIconified()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":169,"author":{"gitId":"Jerome-j"},"content":"            // Unminimize the window","lastModifiedDate":"2024-03-30"},{"lineNumber":170,"author":{"gitId":"Jerome-j"},"content":"            // Method from: https://stackoverflow.com/questions/22773070/","lastModifiedDate":"2024-03-30"},{"lineNumber":171,"author":{"gitId":"Jerome-j"},"content":"            // Question Title: Is there anyway to programmatically unminimize a stage in javafx","lastModifiedDate":"2024-03-30"},{"lineNumber":172,"author":{"gitId":"Jerome-j"},"content":"            helpStage.setIconified(false);","lastModifiedDate":"2024-03-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":192,"author":{"gitId":"caitlyntang"},"content":"    public ListPanel getListPanel() {","lastModifiedDate":"2024-03-12"},{"lineNumber":193,"author":{"gitId":"caitlyntang"},"content":"        return listPanel;","lastModifiedDate":"2024-03-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"caitlyntang":6,"Jerome-j":21,"tankh99":5,"vnnamng":1,"-":189}},{"path":"src/main/java/seedu/address/ui/PatientFeedbackReportCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.ui;","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":" * An UI component that displays information of a {@code PatientFeedbackReport}.","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"public class PatientFeedbackReportCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    private static final String FXML \u003d \"PatientFeedbackReportListCard.fxml\";","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PatientList level 4\u003c/a\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    private HBox cardPane;","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    private Label name;","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    private Label avgFeedbackScore;","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"    public PatientFeedbackReportCard(PatientFeedbackReport pfr) {","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        super(FXML);","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"        name.setText(\"Name: \" + pfr.getPatientName().fullName);","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"        avgFeedbackScore.managedProperty().bind(avgFeedbackScore.visibleProperty());","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        if (pfr.getAvgFeedbackScore() !\u003d null) {","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"            avgFeedbackScore.setText(\"Avg Score: \" + pfr.getAvgFeedbackScore().toString());","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"            avgFeedbackScore.setVisible(false);","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"tankh99":43}},{"path":"src/main/java/seedu/address/ui/PatientFeedbackReportListViewCell.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.ui;","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":" * Custom {@code ListCell} that displays the graphics of a {@code PatientFeedbackReport}","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":" * using an {@code PatientFeedbackReportCard}.","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"public class PatientFeedbackReportListViewCell extends ListCell\u003cPatientFeedbackReport\u003e {","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    protected void updateItem(PatientFeedbackReport pfr, boolean empty) {","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"        super.updateItem(pfr, empty);","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"        if (empty || pfr \u003d\u003d null) {","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"            setGraphic(null);","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"            setText(null);","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"            setGraphic(new PatientFeedbackReportCard(pfr).getRoot());","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"tankh99":22}},{"path":"src/main/java/seedu/address/ui/PatientTagViewer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.ui;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import java.util.HashMap;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"import javafx.collections.ListChangeListener;","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":" * Represents a class that displays all patient tags in main UI.","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"public class PatientTagViewer extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"    public static final int MAX_TAGS_TO_BE_DISPLAYED \u003d 20;","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"    private static final String FXML \u003d \"PatientTagViewer.fxml\";","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"    @FXML","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"    private FlowPane tags;","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"    private final ObservableList\u003cPatient\u003e patientList;","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"     * Renders the Patient alias as  Labels","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"     * @param model which contains all patient information.","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"    public PatientTagViewer(ReadOnlyPatientList model) {","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"        super(FXML);","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"        patientList \u003d model.getPersonList();","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"        // Add listener to PersonList.","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"        // Inspired by: https://stackoverflow.com/questions/23335522/","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"        patientList.addListener((ListChangeListener.Change\u003c? extends Patient\u003e change) -\u003e updateTags());","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"        updateTags();","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    private void updateTags() {","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        // Clear existing tags","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"        tags.getChildren().clear();","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        // Create as a HashMap to store the tagInformation as key and count as value","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"        HashMap\u003cString, Integer\u003e tagInfo \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        // Iterate all person, and their tag to count how many occurrence.","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"        patientList.stream().forEach(person -\u003e {","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"            person.getTags().stream().forEach(tag -\u003e {","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"                // If there is a value, increment it, otherwise we start from 1.","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"                tagInfo.put(tag.tagName, tagInfo.getOrDefault(tag.tagName, 0) + 1);","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"            });","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"        });","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"        tagInfo.entrySet().stream()","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"                // Sort by value size in descending order","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"                // Credits: ChatGPT \"Stream sort by value size\"","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"                .sorted(Comparator.comparingInt(entry -\u003e -entry.getValue()))","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"                // Limit length to prevent malicious users.","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"                .limit(MAX_TAGS_TO_BE_DISPLAYED).forEach(tag -\u003e {","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"                    addLabel(tag.getKey() + \" (\" + tag.getValue() + \")\");","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"                });","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Jerome-j"},"content":"    private void addLabel(String labelText) {","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"        Label label \u003d new Label(labelText);","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"        tags.getChildren().add(label);","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Jerome-j":73}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PatientList level 4\u003c/a\u003e","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"    public final Patient patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"    public PersonCard(Patient patient) {","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        id.setText(patient.getSid() + \". \");","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"        name.setText(patient.getName().fullName);","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"        phone.setText(patient.getPhone().value);","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"        email.setText(patient.getEmail().value);","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"        patient.getTags().stream()","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"caitlyntang":1,"Jerome-j":8,"vnnamng":1,"-":48}},{"path":"src/main/java/seedu/address/ui/PersonListViewCell.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.ui;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":" * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"public class PersonListViewCell extends ListCell\u003cPatient\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"    protected void updateItem(Patient patient, boolean empty) {","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"        super.updateItem(patient, empty);","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"        if (empty || patient \u003d\u003d null) {","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"            setGraphic(null);","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"            setText(null);","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"            setGraphic(new PersonCard(patient).getRoot());","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"caitlyntang":17,"Jerome-j":5}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"        \u003cLabel fx:id\u003d\"appointmentId\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"      \u003cFlowPane fx:id\u003d\"details\" /\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"      \u003cLabel fx:id\u003d\"appointmentDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointmentDateTime\" /\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"      \u003cLabel fx:id\u003d\"appointmentDescription\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointmentDescription\" /\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":35}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":353,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":354,"author":{"gitId":"caitlyntang"},"content":"#details {","lastModifiedDate":"2024-04-02"},{"lineNumber":355,"author":{"gitId":"caitlyntang"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2024-04-02"},{"lineNumber":356,"author":{"gitId":"caitlyntang"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2024-04-02"},{"lineNumber":357,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-04-02"},{"lineNumber":358,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":359,"author":{"gitId":"caitlyntang"},"content":"#details .label {","lastModifiedDate":"2024-04-02"},{"lineNumber":360,"author":{"gitId":"caitlyntang"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2024-04-02"},{"lineNumber":361,"author":{"gitId":"caitlyntang"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2024-04-02"},{"lineNumber":362,"author":{"gitId":"caitlyntang"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2024-04-02"},{"lineNumber":363,"author":{"gitId":"caitlyntang"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2024-04-02"},{"lineNumber":364,"author":{"gitId":"caitlyntang"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2024-04-02"},{"lineNumber":365,"author":{"gitId":"caitlyntang"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2024-04-02"},{"lineNumber":366,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"caitlyntang":14,"-":352}},{"path":"src/main/resources/view/ListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"\u003cHBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"  \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"  \u003cListView fx:id\u003d\"patientFeedbackReportListView\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"caitlyntang":10,"tankh99":1}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-07-27"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"         title\u003d\"CogniCare\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Extensions.css\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"                \u003cVBox fx:id\u003d\"patientTagViewer\" prefHeight\u003d\"24\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"                \u003cVBox styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"                    \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"caitlyntang":2,"Jerome-j":9,"tankh99":1,"-":56}},{"path":"src/main/resources/view/PatientFeedbackReportListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"                \u003cminWidth\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"                    \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"                \u003c/minWidth\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        \u003cLabel fx:id\u003d\"avgFeedbackScore\" text\u003d\"\\$second\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"tankh99":34}},{"path":"src/main/resources/view/PatientTagViewer.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"\u003cFlowPane fx:id\u003d\"tags\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"\u003c/FlowPane\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Jerome-j":7}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jerome-j":2,"-":33}},{"path":"src/test/java/seedu/address/commons/core/CommandHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-24"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" * Note: This test is unable to cover undoing at the start and end of the lists due to the","lastModifiedDate":"2024-03-24"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":" * undo() function playing audio, which requires a JavaFX application running","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-24"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"class CommandHistoryTest {","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    private CommandHistory commandHistory;","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    void setUp() {","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"        commandHistory \u003d new CommandHistory();","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    void undo_undoOnce_returnsPrevCommand() {","lastModifiedDate":"2024-03-24"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test1\");","lastModifiedDate":"2024-03-24"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test1\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    void undo_undoConsecutively_returnsPrevCommand() {","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test2\");","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test2\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test1\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"    void undo_undoAddThenUndo_returnsPrevCommand() {","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test2\");","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test3\");","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test3\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test4\");","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test4\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    void redo_addAddUndoUndoRedo_returnsNextCommand() {","lastModifiedDate":"2024-03-24"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test2\");","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test2\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test1\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"        commandHistory.redo();","lastModifiedDate":"2024-03-24"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test2\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"    void redo_redoAtEndOfHistory_returnsEmptyString() {","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test1\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"        commandHistory.redo();","lastModifiedDate":"2024-03-24"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"    void redo_redoOnEmptyListBeforeAddUndo_returnsPrevCommand() {","lastModifiedDate":"2024-03-24"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"        commandHistory.redo();","lastModifiedDate":"2024-03-24"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test1\");","lastModifiedDate":"2024-03-24"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":83,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test1\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":84,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":85,"author":{"gitId":"tankh99"},"content":"        commandHistory.addCommandToHistory(\"test2\");","lastModifiedDate":"2024-03-24"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":87,"author":{"gitId":"tankh99"},"content":"        commandHistory.undo();","lastModifiedDate":"2024-03-24"},{"lineNumber":88,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test1\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":89,"author":{"gitId":"tankh99"},"content":"        commandHistory.redo();","lastModifiedDate":"2024-03-24"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"test2\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"        commandHistory.redo();","lastModifiedDate":"2024-03-24"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"\", commandHistory.getCurrentCommand());","lastModifiedDate":"2024-03-24"},{"lineNumber":93,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"tankh99":94}},{"path":"src/test/java/seedu/address/commons/util/AudioUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"class AudioUtilTest {","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    void playAudio() {","lastModifiedDate":"2024-03-15"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"tankh99":10}},{"path":"src/test/java/seedu/address/commons/util/DateUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"class DateUtilTest {","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    private LocalDateTime validDateTime1 \u003d LocalDateTime.of(2024, 3, 18, 9, 0);","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    void parseDateTime_validDateTimeString_returnsParsedDateTime() {","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"        String validDateTimeString1 \u003d validDateTime1.format(","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"                DateTimeFormatter.ofPattern(DateUtil.DATETIME_INPUT_FORMAT));","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"        LocalDateTime parsedDateTime1 \u003d DateUtil.parseDateTime(validDateTimeString1);","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(validDateTime1, parsedDateTime1);","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    void parseDateTime_validDateTimeString_returnsNull() {","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        String invalidDateTimeString1 \u003d null;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        LocalDateTime parsedDateTime1 \u003d DateUtil.parseDateTime(invalidDateTimeString1);","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        Assertions.assertNull(parsedDateTime1);","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        // Invalid format: no time","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        String invalidDateTimeString2 \u003d \"2024-03-18\";","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        LocalDateTime parsedDateTime2 \u003d DateUtil.parseDateTime(invalidDateTimeString2);","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        Assertions.assertNull(parsedDateTime2);","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        // Invalid format: invalid date","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        String invalidDateTimeString3 \u003d \"2024-02-30 09:00\";","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        LocalDateTime parsedDateTime3 \u003d DateUtil.parseDateTime(invalidDateTimeString3);","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        Assertions.assertNull(parsedDateTime3);","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    void formatDateTime_validDateTimeString_returnsFormattedDateTime() {","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        LocalDateTime validDateTime1 \u003d LocalDateTime.of(2024, 3, 18, 9, 0);","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        String formattedDateTime1 \u003d DateUtil.formatDateTime(validDateTime1);","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        Assertions.assertEquals(\"18 Mar 2024, 09:00 AM\", formattedDateTime1);","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    void formatDateTime_invalidDateTime_returnsNull() {","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        LocalDateTime invalidDateTime1 \u003d null;","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        String formattedDateTime1 \u003d DateUtil.formatDateTime(invalidDateTime1);","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        Assertions.assertNull(formattedDateTime1);","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"tankh99":49}},{"path":"src/test/java/seedu/address/commons/util/UiUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"class UiUtilTest {","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    void setShortcut() {","lastModifiedDate":"2024-03-15"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    void setText() {","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"tankh99":14}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"import seedu.address.storage.JsonAppointmentListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"import seedu.address.storage.JsonPatientListStorage;","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        JsonPatientListStorage patientListStorage \u003d","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"                new JsonPatientListStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"        JsonAppointmentListStorage appointmentListStorage \u003d","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"                new JsonAppointmentListStorage(temporaryFolder.resolve(\"appointmentList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        StorageManager storage \u003d new StorageManager(patientListStorage, appointmentListStorage, userPrefsStorage);","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"        String deleteCommand \u003d \"deletep 9\";","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"vnnamng"},"content":"        // Inject LogicManager with an PatientListStorage that throws the IOException e when saving","lastModifiedDate":"2024-03-27"},{"lineNumber":155,"author":{"gitId":"vnnamng"},"content":"        JsonPatientListStorage patientListStorage \u003d new JsonPatientListStorage(prefPath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"vnnamng"},"content":"            public void savePatientList(ReadOnlyPatientList addressBook, Path filePath)","lastModifiedDate":"2024-03-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":165,"author":{"gitId":"vnnamng"},"content":"        JsonAppointmentListStorage appointmentListStorage \u003d","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"vnnamng"},"content":"                new JsonAppointmentListStorage(temporaryFolder.resolve(\"ExceptionAppointmentList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"vnnamng"},"content":"        StorageManager storage \u003d new StorageManager(patientListStorage, appointmentListStorage, userPrefsStorage);","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":172,"author":{"gitId":"Jerome-j"},"content":"        String addCommand \u003d AddPatientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2024-04-01"},{"lineNumber":173,"author":{"gitId":"Jerome-j"},"content":"                + EMAIL_DESC_AMY;","lastModifiedDate":"2024-03-15"},{"lineNumber":174,"author":{"gitId":"Jerome-j"},"content":"        Patient expectedPatient \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.addPerson(expectedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Jerome-j":7,"vnnamng":15,"-":157}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"public class AddAppointmentCommandTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"        ModelStubAcceptingAppointmentsAdded modelStub \u003d new ModelStubAcceptingAppointmentsAdded();","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"        CommandResult commandResult \u003d new AddAppointmentCommand(validAppointment).execute(modelStub);","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, Messages.formatAppointment(validAppointment)),","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(validAppointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"        AddAppointmentCommandTest.ModelStub modelStub \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"                new AddAppointmentCommandTest.ModelStubWithAppointment(validAppointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"        assertThrows(CommandException.class, AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT, () -\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"                addAppointmentCommand.execute(modelStub));","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"    public void equals() {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointmentOne \u003d new AppointmentBuilder().withStudentId(1).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointmentTwo \u003d new AppointmentBuilder().withStudentId(2).build();","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"        AddAppointmentCommand addAppointmentOneCommand \u003d new AddAppointmentCommand(appointmentOne);","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"        AddAppointmentCommand addAppointmentTwoCommand \u003d new AddAppointmentCommand(appointmentTwo);","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(addAppointmentOneCommand.equals(addAppointmentOneCommand));","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"        AddAppointmentCommand addAppointmentOneCommandCopy \u003d new AddAppointmentCommand(appointmentOne);","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(addAppointmentOneCommand.equals(addAppointmentOneCommandCopy));","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(addAppointmentOneCommand.equals(1));","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(addAppointmentOneCommand.equals(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(addAppointmentOneCommand.equals(addAppointmentTwoCommand));","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointment \u003d new AppointmentBuilder().withStudentId(1)","lastModifiedDate":"2024-03-18"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"                .withStartDatetime(LocalDateTime.parse(\"2024-03-18 12:15\",","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")))","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"                .withAppointmentId(1)","lastModifiedDate":"2024-03-18"},{"lineNumber":91,"author":{"gitId":"caitlyntang"},"content":"                .withHasAttended(true)","lastModifiedDate":"2024-03-18"},{"lineNumber":92,"author":{"gitId":"caitlyntang"},"content":"                .withAppointmentDescription(\"This is a dummy appointment\").build();","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"caitlyntang"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"        String expected \u003d AddAppointmentCommand.class.getCanonicalName() + \"{toAdd\u003d\" + appointment + \"}\";","lastModifiedDate":"2024-03-18"},{"lineNumber":96,"author":{"gitId":"caitlyntang"},"content":"        assertEquals(expected, addAppointmentCommand.toString());","lastModifiedDate":"2024-03-18"},{"lineNumber":97,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2024-03-18"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2024-03-18"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"caitlyntang"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":106,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":107,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":108,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"caitlyntang"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"caitlyntang"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2024-03-18"},{"lineNumber":115,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":117,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":118,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":119,"author":{"gitId":"caitlyntang"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2024-03-18"},{"lineNumber":120,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":121,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":122,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":123,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":124,"author":{"gitId":"vnnamng"},"content":"        public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":125,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":126,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":127,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":128,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":129,"author":{"gitId":"vnnamng"},"content":"        public void setPatientListFilePath(Path patientListFilePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":131,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":132,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":133,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":134,"author":{"gitId":"Jerome-j"},"content":"        public void addPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":135,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":136,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":137,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":138,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":139,"author":{"gitId":"vnnamng"},"content":"        public void setPatientList(ReadOnlyPatientList patientList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":141,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":142,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":143,"author":{"gitId":"Jerome-j"},"content":"        @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":144,"author":{"gitId":"Jerome-j"},"content":"        public void setAppointmentList(ReadOnlyAppointmentList appointmentList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":145,"author":{"gitId":"Jerome-j"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-30"},{"lineNumber":146,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":147,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":148,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":149,"author":{"gitId":"vnnamng"},"content":"        public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-27"},{"lineNumber":150,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":151,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":152,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":153,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":154,"author":{"gitId":"Jerome-j"},"content":"        public boolean hasPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":155,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":156,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":157,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":158,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":159,"author":{"gitId":"Jerome-j"},"content":"        public void deletePerson(Patient target) {","lastModifiedDate":"2024-03-26"},{"lineNumber":160,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":161,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":162,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":163,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":164,"author":{"gitId":"Jerome-j"},"content":"        public void setPerson(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":165,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":166,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":167,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":168,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":169,"author":{"gitId":"Jerome-j"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":170,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":171,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":172,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":173,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":174,"author":{"gitId":"Jerome-j"},"content":"        public void updateFilteredPersonList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2024-03-26"},{"lineNumber":175,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":176,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":177,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":178,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":179,"author":{"gitId":"caitlyntang"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":180,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":181,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":182,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":183,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":184,"author":{"gitId":"caitlyntang"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":185,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":186,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":187,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":188,"author":{"gitId":"caitlyntang"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2024-03-19"},{"lineNumber":189,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-19"},{"lineNumber":190,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":191,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":192,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":193,"author":{"gitId":"caitlyntang"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":194,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-04-02"},{"lineNumber":195,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":196,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":197,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":198,"author":{"gitId":"caitlyntang"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-19"},{"lineNumber":199,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-19"},{"lineNumber":200,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":201,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":202,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":203,"author":{"gitId":"caitlyntang"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2024-03-19"},{"lineNumber":204,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-19"},{"lineNumber":205,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":206,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":207,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":208,"author":{"gitId":"caitlyntang"},"content":"        public ReadOnlyAppointmentList getAppointmentList() {","lastModifiedDate":"2024-03-19"},{"lineNumber":209,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-19"},{"lineNumber":210,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":211,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":212,"author":{"gitId":"tankh99"},"content":"        @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":213,"author":{"gitId":"tankh99"},"content":"        public ObservableList\u003cPatientFeedbackReport\u003e getPatientFeedbackReportList() {","lastModifiedDate":"2024-04-02"},{"lineNumber":214,"author":{"gitId":"tankh99"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-04-02"},{"lineNumber":215,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":216,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":217,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":218,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":219,"author":{"gitId":"caitlyntang"},"content":"     * A Model stub that contains a single appointment.","lastModifiedDate":"2024-03-18"},{"lineNumber":220,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":221,"author":{"gitId":"caitlyntang"},"content":"    private class ModelStubWithAppointment extends ModelStub {","lastModifiedDate":"2024-03-18"},{"lineNumber":222,"author":{"gitId":"caitlyntang"},"content":"        private final Appointment appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":223,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":224,"author":{"gitId":"caitlyntang"},"content":"        ModelStubWithAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":225,"author":{"gitId":"caitlyntang"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":226,"author":{"gitId":"caitlyntang"},"content":"            this.appointment \u003d appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":227,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":228,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":229,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":230,"author":{"gitId":"caitlyntang"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":231,"author":{"gitId":"caitlyntang"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":232,"author":{"gitId":"caitlyntang"},"content":"            return this.appointment.isSameAppointment(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":233,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":234,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":235,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":236,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":237,"author":{"gitId":"caitlyntang"},"content":"     * A Model stub that always accept the appointment being added.","lastModifiedDate":"2024-03-18"},{"lineNumber":238,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":239,"author":{"gitId":"caitlyntang"},"content":"    private class ModelStubAcceptingAppointmentsAdded extends ModelStub {","lastModifiedDate":"2024-03-18"},{"lineNumber":240,"author":{"gitId":"caitlyntang"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-18"},{"lineNumber":241,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":242,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":243,"author":{"gitId":"caitlyntang"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":244,"author":{"gitId":"caitlyntang"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":245,"author":{"gitId":"caitlyntang"},"content":"            return appointmentsAdded.stream().anyMatch(appointment::isSameAppointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":246,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":247,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":248,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":249,"author":{"gitId":"caitlyntang"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":250,"author":{"gitId":"caitlyntang"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":251,"author":{"gitId":"caitlyntang"},"content":"            appointmentsAdded.add(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":252,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":253,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":254,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":255,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":256,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":232,"Jerome-j":12,"tankh99":6,"vnnamng":6}},{"path":"src/test/java/seedu/address/logic/commands/AddPatientCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"public class AddPatientCommandIntegrationTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"        model \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"        Patient validPatient \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.addPerson(validPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"        assertCommandSuccess(new AddPatientCommand(validPatient), model,","lastModifiedDate":"2024-04-01"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"                String.format(AddPatientCommand.MESSAGE_SUCCESS, Messages.format(validPatient)),","lastModifiedDate":"2024-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                expectedModel);","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"        Patient patientInList \u003d model.getPatientList().getPersonList().get(0);","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        assertCommandFailure(new AddPatientCommand(patientInList), model,","lastModifiedDate":"2024-04-01"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"                AddPatientCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"Jerome-j":8,"vnnamng":4,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/AddPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.patientfeedbackreport.PatientFeedbackReport;","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"public class AddPatientCommandTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));","lastModifiedDate":"2024-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"        Patient validPatient \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"        CommandResult commandResult \u003d new AddPatientCommand(validPatient).execute(modelStub);","lastModifiedDate":"2024-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, Messages.format(validPatient)),","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.personsAdded);","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"        Patient validPatient \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(validPatient);","lastModifiedDate":"2024-04-01"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"                AddPatientCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addPatientCommand.execute(modelStub));","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"        Patient alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"        Patient bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);","lastModifiedDate":"2024-04-01"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);","lastModifiedDate":"2024-04-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);","lastModifiedDate":"2024-04-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"Jerome-j"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(ALICE);","lastModifiedDate":"2024-04-01"},{"lineNumber":87,"author":{"gitId":"Jerome-j"},"content":"        String expected \u003d AddPatientCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2024-04-01"},{"lineNumber":88,"author":{"gitId":"Jerome-j"},"content":"        assertEquals(expected, addPatientCommand.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"vnnamng"},"content":"        public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"vnnamng"},"content":"        public void setPatientListFilePath(Path patientListFilePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"Jerome-j"},"content":"        public void addPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"vnnamng"},"content":"        public void setPatientList(ReadOnlyPatientList patientList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"Jerome-j"},"content":"        @Override","lastModifiedDate":"2024-03-30"},{"lineNumber":136,"author":{"gitId":"Jerome-j"},"content":"        public void setAppointmentList(ReadOnlyAppointmentList appointmentList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":137,"author":{"gitId":"Jerome-j"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-30"},{"lineNumber":138,"author":{"gitId":"Jerome-j"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":139,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"vnnamng"},"content":"        public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"Jerome-j"},"content":"        public boolean hasPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"Jerome-j"},"content":"        public void deletePerson(Patient target) {","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"Jerome-j"},"content":"        public void setPerson(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"Jerome-j"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"Jerome-j"},"content":"        public void updateFilteredPersonList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2024-03-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":170,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":171,"author":{"gitId":"caitlyntang"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":172,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":173,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":174,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":175,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":176,"author":{"gitId":"caitlyntang"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":177,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":178,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":179,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":180,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":181,"author":{"gitId":"caitlyntang"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2024-03-19"},{"lineNumber":182,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-19"},{"lineNumber":183,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":184,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":185,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":186,"author":{"gitId":"caitlyntang"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-04-02"},{"lineNumber":188,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":189,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":190,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":191,"author":{"gitId":"caitlyntang"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-19"},{"lineNumber":192,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-19"},{"lineNumber":193,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":194,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":195,"author":{"gitId":"caitlyntang"},"content":"        @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":196,"author":{"gitId":"caitlyntang"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2024-03-19"},{"lineNumber":197,"author":{"gitId":"caitlyntang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-19"},{"lineNumber":198,"author":{"gitId":"caitlyntang"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":199,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":200,"author":{"gitId":"vnnamng"},"content":"        @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":201,"author":{"gitId":"vnnamng"},"content":"        public ReadOnlyAppointmentList getAppointmentList() {","lastModifiedDate":"2024-03-18"},{"lineNumber":202,"author":{"gitId":"vnnamng"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-19"},{"lineNumber":203,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":204,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":205,"author":{"gitId":"tankh99"},"content":"        @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":206,"author":{"gitId":"tankh99"},"content":"        public ObservableList\u003cPatientFeedbackReport\u003e getPatientFeedbackReportList() {","lastModifiedDate":"2024-04-02"},{"lineNumber":207,"author":{"gitId":"tankh99"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-04-02"},{"lineNumber":208,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":215,"author":{"gitId":"Jerome-j"},"content":"        private final Patient patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":217,"author":{"gitId":"Jerome-j"},"content":"        ModelStubWithPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":218,"author":{"gitId":"Jerome-j"},"content":"            requireNonNull(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":219,"author":{"gitId":"Jerome-j"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":223,"author":{"gitId":"Jerome-j"},"content":"        public boolean hasPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":224,"author":{"gitId":"Jerome-j"},"content":"            requireNonNull(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":225,"author":{"gitId":"Jerome-j"},"content":"            return this.patient.isSamePerson(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"Jerome-j"},"content":"        final ArrayList\u003cPatient\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":236,"author":{"gitId":"Jerome-j"},"content":"        public boolean hasPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":237,"author":{"gitId":"Jerome-j"},"content":"            requireNonNull(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":238,"author":{"gitId":"Jerome-j"},"content":"            return personsAdded.stream().anyMatch(patient::isSamePerson);","lastModifiedDate":"2024-03-26"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":242,"author":{"gitId":"Jerome-j"},"content":"        public void addPerson(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":243,"author":{"gitId":"Jerome-j"},"content":"            requireNonNull(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":244,"author":{"gitId":"Jerome-j"},"content":"            personsAdded.add(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":248,"author":{"gitId":"vnnamng"},"content":"        public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-27"},{"lineNumber":249,"author":{"gitId":"vnnamng"},"content":"            return new PatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"caitlyntang":32,"Jerome-j":45,"tankh99":6,"vnnamng":13,"-":156}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2024-03-30"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"    public void execute_emptyPatientList_success() {","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    public void execute_nonEmptyPatientList_success() {","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"        Model model \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"        expectedModel.setPatientList(new PatientList());","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-30"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"    public void execute_nonEmptyAppointmentList_success() {","lastModifiedDate":"2024-03-30"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"        Model model \u003d new ModelManager(getTypicalPatientList(), getTypicalAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-30"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientList(), getTypicalAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-30"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.setAppointmentList(new AppointmentList());","lastModifiedDate":"2024-03-30"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.setPatientList(new PatientList());","lastModifiedDate":"2024-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Jerome-j":9,"vnnamng":7,"-":29}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentIdContainsIndexPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    public static final String VALID_PHONE_AMY \u003d \"61111111\";","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    public static final String VALID_PHONE_BOB \u003d \"82222222\";","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_ALIAS + VALID_TAG_FRIEND;","lastModifiedDate":"2024-03-03"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_ALIAS + VALID_TAG_HUSBAND;","lastModifiedDate":"2024-03-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_ALIAS + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2024-03-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"        PatientList expectedPatientList \u003d new PatientList(actualModel.getPatientList());","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"Jerome-j"},"content":"        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":108,"author":{"gitId":"vnnamng"},"content":"        assertEquals(expectedPatientList, actualModel.getPatientList());","lastModifiedDate":"2024-03-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":118,"author":{"gitId":"Jerome-j"},"content":"        Patient patient \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":119,"author":{"gitId":"Jerome-j"},"content":"        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"caitlyntang"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"caitlyntang"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2024-03-19"},{"lineNumber":128,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":129,"author":{"gitId":"caitlyntang"},"content":"    public static void showAppointmentAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2024-03-19"},{"lineNumber":130,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"caitlyntang"},"content":"        model.updateFilteredAppointmentList(new AppointmentIdContainsIndexPredicate(targetIndex.getOneBased()));","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":133,"author":{"gitId":"caitlyntang"},"content":"        assertEquals(1, model.getFilteredAppointmentList().size());","lastModifiedDate":"2024-03-19"},{"lineNumber":134,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"caitlyntang":11,"Jerome-j":11,"tankh99":2,"vnnamng":3,"-":108}},{"path":"src/test/java/seedu/address/logic/commands/DeleteAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentIdContainsIndexPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"public class DeleteAppointmentCommandTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientList(), getTypicalAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    public void execute_invalidAppointmentIndex_throwsCommandException() {","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 2);","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"    public void execute_validAppointmentIndex_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"        model.updateFilteredAppointmentList(","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentIdContainsIndexPredicate(INDEX_FIRST_APPOINTMENT.getOneBased()));","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(0);","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"                Messages.formatAppointment(appointmentToDelete));","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientList(), model.getAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"        showNoAppointment(expectedModel);","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"    public void execute_invalidAppointmentIndex_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        Index invalidIndex \u003d Index.fromOneBased(model.getPatientList().getPersonList().size() + 1);","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(invalidIndex);","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"    public void equals() {","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"        DeleteAppointmentCommand deleteFirstCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"        DeleteAppointmentCommand deleteSecondCommand \u003d new DeleteAppointmentCommand(INDEX_SECOND_APPOINTMENT);","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"        DeleteAppointmentCommand deleteFirstCommandCopy \u003d new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"caitlyntang"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(targetIndex);","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"        String expected \u003d DeleteAppointmentCommand.class.getCanonicalName()","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"caitlyntang"},"content":"                + \"{targetAppointmentIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2024-03-19"},{"lineNumber":92,"author":{"gitId":"caitlyntang"},"content":"        assertEquals(expected, deleteAppointmentCommand.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"caitlyntang"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"    private void showNoAppointment(Model model) {","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"        model.updateFilteredAppointmentList(p -\u003e false);","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(model.getFilteredAppointmentList().isEmpty());","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"caitlyntang":99,"vnnamng":4}},{"path":"src/test/java/seedu/address/logic/commands/DeletePatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SEVEN_HUNDRED_PERSON;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"public class DeletePatientCommandTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        Patient patientToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"                Messages.format(patientToDelete));","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.deletePerson(patientToDelete);","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"        // TODO: Update test case for the deletion by Sid.","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"        Patient patientToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"                Messages.format(patientToDelete));","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.deletePerson(patientToDelete);","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"    public void execute_indexSevenHundred_success() {","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"Jerome-j"},"content":"        Optional\u003cPatient\u003e personToDelete \u003d model.getFilteredPersonList().stream()","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"                .filter(person -\u003e person.getSid() \u003d\u003d INDEX_SEVEN_HUNDRED_PERSON)","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"Jerome-j"},"content":"                .findFirst();","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.deletePerson(personToDelete.get());","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"Jerome-j"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"        assertEquals(6, expectedModel.getPatientList().getPersonList().size());","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientList().getPersonList().size());","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(targetIndex);","lastModifiedDate":"2019-02-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        String expected \u003d DeleteCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expected, deleteCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Jerome-j":25,"vnnamng":7,"-":108}},{"path":"src/test/java/seedu/address/logic/commands/EditAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"import java.util.Optional;","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"public class EditAppointmentCommandTest {","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientList(), getTypicalAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"                new EditAppointmentDescriptorBuilder(editedAppointment).build();","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"                EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS, Messages.formatAppointment(editedAppointment));","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()),","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentList(model.getAppointmentList()), new UserPrefs());","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"        Index indexLastAppointment \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"        Optional\u003cAppointment\u003e lastAppointment \u003d model.getFilteredAppointmentList().stream()","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"                .filter(appointment -\u003e appointment.getAppointmentId() \u003d\u003d INDEX_FIRST_APPOINTMENT.getOneBased())","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"                .findFirst();","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"        AppointmentBuilder appointmentInList \u003d new AppointmentBuilder(lastAppointment.get());","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"        Appointment editedAppointment \u003d appointmentInList.withStudentId(1)","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"                .withStartDatetime(LocalDateTime.of(2022, 12, 12, 8, 0, 0))","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"                .withEndDateTime(LocalDateTime.of(2022, 12, 12, 9, 0, 0))","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"                .withAppointmentDescription(\"pre-edited appointment\")","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"                .withFeedbackScore(1)","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"                .withHasAttended(false)","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"                .build();","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"                .withAppointmentDescription(\"pre-edited appointment\")","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"                .withFeedbackScore(1)","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"                .withAttendedStatus(false).build();","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(indexLastAppointment, descriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"                EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS, Messages.formatAppointment(editedAppointment));","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()),","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentList(model.getAppointmentList()), new UserPrefs());","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"        expectedModel.setAppointment(lastAppointment.get(), editedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"                INDEX_FIRST_APPOINTMENT, new EditAppointmentCommand.EditAppointmentDescriptor());","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"        Appointment editedAppointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT.getZeroBased());","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"caitlyntang"},"content":"                EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS, Messages.formatAppointment(editedAppointment));","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()),","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentList(model.getAppointmentList()), new UserPrefs());","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"caitlyntang"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2024-04-02"},{"lineNumber":99,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"                new EditAppointmentDescriptorBuilder().withPatientId(100).build();","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":107,"author":{"gitId":"caitlyntang"},"content":"    public void execute_duplicateAppointmentFilteredList_failure() {","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"caitlyntang"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2024-04-02"},{"lineNumber":109,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointmentInList \u003d model.getAppointmentList().getAppointmentList()","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"caitlyntang"},"content":"                .get(INDEX_SECOND_APPOINTMENT.getZeroBased());","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT,","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"caitlyntang"},"content":"                new EditAppointmentDescriptorBuilder(appointmentInList).build());","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"caitlyntang"},"content":"        assertCommandFailure(editCommand, model, EditAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"caitlyntang"},"content":"    public void equals() {","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descFirst \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"caitlyntang"},"content":"                .withPatientId(1)","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"caitlyntang"},"content":"                .withStartDateTime(LocalDateTime.of(2022, 12, 12, 8, 0, 0))","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"caitlyntang"},"content":"                .withEndDateTime(LocalDateTime.of(2022, 12, 12, 9, 0, 0))","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"caitlyntang"},"content":"                .withAppointmentDescription(\"First appointment\")","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"caitlyntang"},"content":"                .withFeedbackScore(1)","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"caitlyntang"},"content":"                .withAttendedStatus(false)","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"caitlyntang"},"content":"                .build();","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"caitlyntang"},"content":"        final EditAppointmentCommand.EditAppointmentDescriptor descSecond \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"caitlyntang"},"content":"                .withPatientId(1)","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"caitlyntang"},"content":"                .withStartDateTime(LocalDateTime.of(2022, 12, 12, 9, 0, 0))","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"caitlyntang"},"content":"                .withEndDateTime(LocalDateTime.of(2022, 12, 12, 10, 0, 0))","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"caitlyntang"},"content":"                .withAppointmentDescription(\"First appointment\")","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"caitlyntang"},"content":"                .withFeedbackScore(1)","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"caitlyntang"},"content":"                .withAttendedStatus(false)","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"caitlyntang"},"content":"                .build();","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"caitlyntang"},"content":"        final EditAppointmentCommand standardCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descFirst);","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"caitlyntang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor copyDescriptor \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"caitlyntang"},"content":"                new EditAppointmentCommand.EditAppointmentDescriptor(descFirst);","lastModifiedDate":"2024-04-02"},{"lineNumber":142,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand commandWithSameValues \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"caitlyntang"},"content":"                new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, copyDescriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"caitlyntang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"caitlyntang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-04-02"},{"lineNumber":150,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":152,"author":{"gitId":"caitlyntang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-04-02"},{"lineNumber":153,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2024-04-02"},{"lineNumber":154,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":155,"author":{"gitId":"caitlyntang"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_SECOND_APPOINTMENT, descFirst)));","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"caitlyntang"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descSecond)));","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"caitlyntang"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"caitlyntang"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"caitlyntang"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor editAppointmentDescriptor \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":166,"author":{"gitId":"caitlyntang"},"content":"                new EditAppointmentCommand.EditAppointmentDescriptor();","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"caitlyntang"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(index, editAppointmentDescriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"caitlyntang"},"content":"        String expected \u003d EditAppointmentCommand.class.getCanonicalName() + \"{index\u003d\" + index","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"caitlyntang"},"content":"                + \", editAppointmentDescriptor\u003d\" + editAppointmentDescriptor + \"}\";","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"caitlyntang"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2024-04-02"},{"lineNumber":171,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":172,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"caitlyntang":172}},{"path":"src/test/java/seedu/address/logic/commands/EditPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SEVEN_HUNDRED_PERSON;","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"public class EditPatientCommandTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"        Patient editedPatient \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPatient).build();","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(INDEX_SEVEN_HUNDRED_PERSON);","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"        Optional\u003cPatient\u003e lastPerson \u003d model.getFilteredPersonList().stream()","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .filter(person -\u003e person.getSid() \u003d\u003d INDEX_SEVEN_HUNDRED_PERSON)","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .findFirst();","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson.get());","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"        Patient editedPatient \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.setPerson(lastPerson.get(), editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"Jerome-j"},"content":"        Patient editedPatient \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"Jerome-j"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"Jerome-j"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"Jerome-j"},"content":"        Patient editedPatient \u003d new PersonBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"Jerome-j"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"Jerome-j"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"Jerome-j"},"content":"        Patient firstPatient \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"Jerome-j"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPatient).build();","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"vnnamng"},"content":"        Patient patientInList \u003d model.getPatientList().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"Jerome-j"},"content":"                new EditPersonDescriptorBuilder(patientInList).build());","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"vnnamng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientList().getPersonList().size());","lastModifiedDate":"2024-03-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2019-02-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPersonDescriptor\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"Jerome-j":19,"vnnamng":9,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/EditPatientDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"public class EditPatientDescriptorTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expected \u003d EditPersonDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getName().orElse(null) + \", phone\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getPhone().orElse(null) + \", email\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"                + editPersonDescriptor.getEmail().orElse(null) + \", tags\u003d\"","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getTags().orElse(null) + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Jerome-j":2,"-":64}},{"path":"src/test/java/seedu/address/logic/commands/FilterAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_START_END_DATETIME;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalAppointments.UNATTENDED_FIRST_APPOINTMENT;","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalEndDateTime.END_DATE_TIME_1;","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalEndDateTime.END_DATE_TIME_3;","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalStartDateTime.START_DATE_TIME_1;","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalStartDateTime.START_DATE_TIME_2;","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalStartDateTime.START_DATE_TIME_5;","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.FilterAppointmentPredicate;","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":" * Contains integration tests (interaction with the Model) for {@code FilterAppointmentCommand}.","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"public class FilterAppointmentCommandTest {","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientList(), getTypicalAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientList(),","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"            getTypicalAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"    public void equals() {","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentPredicate firstPredicate \u003d","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"                new FilterAppointmentPredicate(START_DATE_TIME_1, END_DATE_TIME_1);","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentPredicate secondPredicate \u003d","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"                new FilterAppointmentPredicate(START_DATE_TIME_2, END_DATE_TIME_3);","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentCommand filterFirstCommand \u003d new FilterAppointmentCommand(firstPredicate,","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"                START_DATE_TIME_1, END_DATE_TIME_1);","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentCommand filterSecondCommand \u003d new FilterAppointmentCommand(secondPredicate,","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"                START_DATE_TIME_2, END_DATE_TIME_3);","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommand));","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentCommand filterFirstCommandCopy \u003d new FilterAppointmentCommand(firstPredicate,","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"                START_DATE_TIME_1, END_DATE_TIME_1);","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"        assertFalse(filterFirstCommand.equals(1));","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"        assertFalse(filterFirstCommand.equals(null));","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"        assertFalse(filterFirstCommand.equals(filterSecondCommand));","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"    public void execute_invalidStartEndDateTime_noAppointmentFound() {","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_START_END_DATETIME);","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentPredicate predicate \u003d new FilterAppointmentPredicate(START_DATE_TIME_5, END_DATE_TIME_1);","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(predicate, START_DATE_TIME_5, END_DATE_TIME_1);","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model), expectedMessage);","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"    public void execute_validStartEndDateTime_appointmentFound() {","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"        StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.of(2022, 12, 12, 7, 30));","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(LocalDateTime.of(2022, 12, 12, 9, 30));","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentPredicate predicate \u003d new FilterAppointmentPredicate(startDateTime, endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(predicate, startDateTime, endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"        expectedModel.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"        assertEquals(Collections.singletonList(UNATTENDED_FIRST_APPOINTMENT), model.getFilteredAppointmentList());","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"    public void execute_validStartEndDateTime_noAppointmentFound() {","lastModifiedDate":"2024-03-31"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2024-03-31"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"        StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.of(1999, 12, 12, 8, 30));","lastModifiedDate":"2024-03-31"},{"lineNumber":95,"author":{"gitId":"vnnamng"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(LocalDateTime.of(1999, 12, 12, 9, 30));","lastModifiedDate":"2024-03-31"},{"lineNumber":96,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentPredicate predicate \u003d new FilterAppointmentPredicate(startDateTime, endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(predicate, startDateTime, endDateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":98,"author":{"gitId":"vnnamng"},"content":"        expectedModel.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2024-03-31"},{"lineNumber":99,"author":{"gitId":"vnnamng"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-03-31"},{"lineNumber":100,"author":{"gitId":"vnnamng"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2024-03-31"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":102,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":102}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"keyword\"));","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        FindCommand findCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expected \u003d FindCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expected, findCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Jerome-j":1,"vnnamng":3,"-":87}},{"path":"src/test/java/seedu/address/logic/commands/ListAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showAppointmentAtIndex;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListAppointmentCommand.","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"public class ListAppointmentCommandTest {","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    private Model model;","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    private Model expectedModel;","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    public void setUp() {","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"        model \u003d new ModelManager(getTypicalPatientList(), getTypicalAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"        expectedModel \u003d new ModelManager(model.getPatientList(), model.getAppointmentList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        System.out.println(1);","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"        assertCommandSuccess(new ListAppointmentCommand(PREDICATE_SHOW_ALL_APPOINTMENTS),","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"                model, ListAppointmentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"        assertCommandSuccess(new ListAppointmentCommand(PREDICATE_SHOW_ALL_APPOINTMENTS),","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"                model, ListAppointmentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"tankh99":42,"vnnamng":3}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2024-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2018-01-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"        model \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"        expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"        assertCommandSuccess(new ListCommand(PREDICATE_SHOW_ALL_PERSONS),","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"                model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"        assertCommandSuccess(new ListCommand(PREDICATE_SHOW_ALL_PERSONS),","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"                model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Jerome-j":5,"vnnamng":3,"-":34}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2024-04-01"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        Patient expectedPatient \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"                + TAG_DESC_FRIEND, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2024-04-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"        Patient expectedPatientMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2024-03-15"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"                new AddPatientCommand(expectedPatientMultipleTags));","lastModifiedDate":"2024-04-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-07-14"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"                 + TAG_DESC_FRIEND;","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple emails","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"Jerome-j"},"content":"                validExpectedPersonString + PHONE_DESC_AMY + EMAIL_DESC_AMY + NAME_DESC_AMY","lastModifiedDate":"2024-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                        + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"Jerome-j"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE));","lastModifiedDate":"2024-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":113,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"Jerome-j"},"content":"        Patient expectedPatient \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"Jerome-j"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,","lastModifiedDate":"2024-03-15"},{"lineNumber":121,"author":{"gitId":"Jerome-j"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2024-04-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"Jerome-j"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2024-04-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,","lastModifiedDate":"2024-04-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,","lastModifiedDate":"2024-04-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":137,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,","lastModifiedDate":"2024-04-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,","lastModifiedDate":"2024-03-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":148,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2024-04-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":152,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB","lastModifiedDate":"2024-04-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":156,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC","lastModifiedDate":"2024-04-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2024-03-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":165,"author":{"gitId":"Jerome-j"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,","lastModifiedDate":"2024-04-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":170,"author":{"gitId":"Jerome-j"},"content":"                         + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2024-04-04"},{"lineNumber":171,"author":{"gitId":"Jerome-j"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-04-01"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"Jerome-j":30,"-":143}},{"path":"src/test/java/seedu/address/logic/parser/CommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"public class CommandParserTest {","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    private CommandParser parser;","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    private Model model;","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    public void setUp() {","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"        model \u003d new ModelManager(getTypicalPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        parser \u003d new CommandParser(","lastModifiedDate":"2024-04-10"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"                model.getPatientList().getPersonList(),","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                model.getAppointmentList().getAppointmentList());","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"        List\u003cPatient\u003e patients \u003d model.getFilteredPersonList();","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"        Patient patient \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PersonUtil.getAddCommand(patient));","lastModifiedDate":"2024-04-01"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"        assertEquals(new AddPatientCommand(patient), command);","lastModifiedDate":"2024-04-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"Jerome-j"},"content":"        Patient patient \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(patient).build();","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"vnnamng"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\"));","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":116,"author":{"gitId":"tankh99"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Jerome-j":9,"tankh99":14,"vnnamng":4,"-":92}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"    private DeletePatientCommandParser parser \u003d new DeletePatientCommandParser();","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"Jerome-j":1,"-":31}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_ALIAS;","lastModifiedDate":"2024-03-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":104,"author":{"gitId":"Jerome-j"},"content":"                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"Jerome-j"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // More extensive testing of duplicate parameter detections is done in","lastModifiedDate":"2023-07-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()","lastModifiedDate":"2023-07-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-07-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-07-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-07-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":172,"author":{"gitId":"Jerome-j"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"Jerome-j"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2024-04-04"},{"lineNumber":174,"author":{"gitId":"Jerome-j"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2024-04-02"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":177,"author":{"gitId":"Jerome-j"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL, PREFIX_PHONE));","lastModifiedDate":"2024-04-02"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-07-14"},{"lineNumber":180,"author":{"gitId":"Jerome-j"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2024-04-02"},{"lineNumber":181,"author":{"gitId":"Jerome-j"},"content":"                + INVALID_PHONE_DESC + INVALID_EMAIL_DESC;","lastModifiedDate":"2024-04-02"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":184,"author":{"gitId":"Jerome-j"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL));","lastModifiedDate":"2024-04-02"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"Jerome-j":15,"-":182}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    private FindPatientCommandParser parser \u003d new FindPatientCommandParser();","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"Jerome-j":2,"-":32}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.DateUtil;","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.HasAttended;","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    private static final String VALID_PHONE \u003d \"92345612\";","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"    public void parseName_validWithInnerWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"        String nameWithWhitespace \u003d \"  Bob   Choo  \";","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"        Name expectedName \u003d new Name(\"Bob Choo\");","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2024-03-17"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":116,"author":{"gitId":"tankh99"},"content":"    public void parseEmail_validValue_returnsLowerCaseMeail() throws Exception {","lastModifiedDate":"2024-03-17"},{"lineNumber":117,"author":{"gitId":"tankh99"},"content":"        Email expectedEmail \u003d new Email(\"test@gmail.com\");","lastModifiedDate":"2024-03-17"},{"lineNumber":118,"author":{"gitId":"tankh99"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(expectedEmail.value.toUpperCase()));","lastModifiedDate":"2024-03-17"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"tankh99"},"content":"    public void parseDateTime_validDateTimeString_returnsDateTime() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"tankh99"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.of(2024, 3, 18, 9, 0);","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"tankh99"},"content":"        String validDateTimeString1 \u003d expectedDateTime.format(","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"tankh99"},"content":"                DateTimeFormatter.ofPattern(DateUtil.DATETIME_INPUT_FORMAT));","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"tankh99"},"content":"        LocalDateTime actualDateTime1 \u003d ParserUtil.parseDateTime(validDateTimeString1);","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"tankh99"},"content":"        assertEquals(expectedDateTime, actualDateTime1);","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"tankh99"},"content":"        // With whitespaces","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"tankh99"},"content":"        LocalDateTime actualDateTime2 \u003d ParserUtil.parseDateTime(\"  2024-03-18 09:00  \");","lastModifiedDate":"2024-03-27"},{"lineNumber":199,"author":{"gitId":"tankh99"},"content":"        assertEquals(expectedDateTime, actualDateTime2);","lastModifiedDate":"2024-03-27"},{"lineNumber":200,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":201,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":203,"author":{"gitId":"tankh99"},"content":"    public void parseDateTime_invalidDateTimeString_throwsException() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":204,"author":{"gitId":"tankh99"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(\"2024-03-18\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":205,"author":{"gitId":"tankh99"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime(null));","lastModifiedDate":"2024-03-27"},{"lineNumber":206,"author":{"gitId":"tankh99"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(\"23/12/1999\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":207,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":208,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":209,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":210,"author":{"gitId":"tankh99"},"content":"    public void parseHasAttended_validBoolean_returnsHasAttended() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":211,"author":{"gitId":"caitlyntang"},"content":"        Assertions.assertEquals(new HasAttended(true), ParserUtil.parseHasAttended(\"true\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":212,"author":{"gitId":"caitlyntang"},"content":"        Assertions.assertEquals(new HasAttended(true), ParserUtil.parseHasAttended(\"   TruE  \"));","lastModifiedDate":"2024-03-31"},{"lineNumber":213,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":214,"author":{"gitId":"caitlyntang"},"content":"        Assertions.assertEquals(new HasAttended(false), ParserUtil.parseHasAttended(\"false\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":215,"author":{"gitId":"caitlyntang"},"content":"        Assertions.assertEquals(new HasAttended(false), ParserUtil.parseHasAttended(\" FalSE  \"));","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":217,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":218,"author":{"gitId":"tankh99"},"content":"    public void parseHasAttended_invalidBoolean_throwsParseException() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":219,"author":{"gitId":"tankh99"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHasAttended(\"f alse\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":220,"author":{"gitId":"tankh99"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime(null));","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"tankh99"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(\"test\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"caitlyntang":5,"Jerome-j":3,"tankh99":45,"-":170}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"import seedu.address.testutil.PatientListBuilder;","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"        assertEquals(new PatientList(), new PatientList(modelManager.getPatientList()));","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"        userPrefs.setPatientListFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"        userPrefs.setPatientListFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"    public void setPatientListFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatientListFilePath(null));","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"    public void setPatientListFilePath_validPath_setsPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"        modelManager.setPatientListFilePath(path);","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"        assertEquals(path, modelManager.getPatientListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"    public void hasPerson_personNotInPatientList_returnsFalse() {","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"    public void hasPerson_personInPatientList_returnsTrue() {","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"vnnamng"},"content":"        PatientList patientList \u003d new PatientListBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"vnnamng"},"content":"        PatientList differentPatientList \u003d new PatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"vnnamng"},"content":"        modelManager \u003d new ModelManager(patientList, userPrefs);","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(patientList, userPrefs);","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"vnnamng"},"content":"        // different patientList -\u003e returns false","lastModifiedDate":"2024-03-27"},{"lineNumber":117,"author":{"gitId":"vnnamng"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentPatientList, userPrefs)));","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":122,"author":{"gitId":"vnnamng"},"content":"        assertFalse(modelManager.equals(new ModelManager(patientList, userPrefs)));","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"vnnamng"},"content":"        differentUserPrefs.setPatientListFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"vnnamng"},"content":"        assertFalse(modelManager.equals(new ModelManager(patientList, differentUserPrefs)));","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"Jerome-j":1,"vnnamng":20,"-":111}},{"path":"src/test/java/seedu/address/model/PatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"public class PatientListTest {","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    private final PatientList patientList \u003d new PatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"        assertEquals(Collections.emptyList(), patientList.getPersonList());","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e patientList.resetData(null));","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    public void resetData_withValidReadOnlyPatientList_replacesData() {","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"        PatientList newData \u003d getTypicalPatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        patientList.resetData(newData);","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"        assertEquals(newData, patientList);","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"        Patient editedAlice \u003d new PersonBuilder(ALICE).withId(13).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"        PatientListStub newData \u003d new PatientListStub(newPatients);","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e patientList.resetData(newData));","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e patientList.hasPerson(null));","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"    public void hasPerson_personNotInPatientList_returnsFalse() {","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"        assertFalse(patientList.hasPerson(ALICE));","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"    public void hasPerson_personInPatientList_returnsTrue() {","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"        patientList.addPerson(ALICE);","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"        assertTrue(patientList.hasPerson(ALICE));","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"    public void hasPerson_personWithSameIdentityFieldsInPatientList_returnsTrue() {","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"        patientList.addPerson(ALICE);","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"        Patient editedAlice \u003d new PersonBuilder(ALICE).withId(19).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"        assertTrue(patientList.hasPerson(editedAlice));","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e patientList.getPersonList().remove(0));","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"        String expected \u003d PatientList.class.getCanonicalName() + \"{persons\u003d\" + patientList.getPersonList() + \"}\";","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"        assertEquals(expected, patientList.toString());","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"     * A stub ReadOnlyPatientList whose persons list can violate interface constraints.","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"    private static class PatientListStub implements ReadOnlyPatientList {","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"Jerome-j"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"        PatientListStub(Collection\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"Jerome-j"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"Jerome-j"},"content":"        public ObservableList\u003cPatient\u003e getPersonList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"Jerome-j"},"content":"            return patients;","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"Jerome-j":9,"vnnamng":26,"-":72}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    public void setPatientListFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPatientListFilePath(null));","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"vnnamng":2,"-":19}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentIdContainsIndexPredicate.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":" * Tests that a {@code Appointment}\u0027s {@code studentId} matches the index given.","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"public class AppointmentIdContainsIndexPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"    private final int appointmentId;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"    public AppointmentIdContainsIndexPredicate(int appointmentId) {","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"        return appointmentId \u003d\u003d appointment.getAppointmentId();","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"caitlyntang":19}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalAppointments.ATTENDED_FIRST_APPOINTMENT;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"public class AppointmentListTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    private final AppointmentList appointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    public void constructor() {","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"        assertEquals(Collections.emptyList(), appointmentList.getAppointmentList());","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.resetData(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    public void resetData_withValidReadOnlyPatientList_replacesData() {","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"        AppointmentList newData \u003d getTypicalAppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"        appointmentList.resetData(newData);","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"        assertEquals(newData, appointmentList);","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    //TODO: add duplicate appointments check","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.hasAppointment(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"    public void hasPerson_personNotInPatientList_returnsFalse() {","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"        assertFalse(appointmentList.hasAppointment(ATTENDED_FIRST_APPOINTMENT));","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"    public void hasPerson_personInPatientList_returnsTrue() {","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        appointmentList.addAppointment(ATTENDED_FIRST_APPOINTMENT);","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"        assertTrue(appointmentList.hasAppointment(ATTENDED_FIRST_APPOINTMENT));","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"vnnamng":53}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-15"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"public class AppointmentTest {","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    private static final int TEST_APPOINTMENT_ID \u003d 1;","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    private static final int TEST_LATER_APPOINTMENT_ID \u003d 2;","lastModifiedDate":"2024-03-15"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    public void equals() {","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"        PatientId patientId \u003d new PatientId(1);","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"        StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.now());","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(LocalDateTime.now().plusHours(1));","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"        FeedbackScore feedbackScore \u003d new FeedbackScore(5);","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"        HasAttended hasAttended \u003d new HasAttended(false);","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"        AppointmentDescription appointmentDescription \u003d new AppointmentDescription(\"Test\");","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"        Appointment appointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"                patientId, appointmentDescription, hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"        Appointment appointmentCopy \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"                patientId, appointmentDescription, hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"        assertEquals(appointment, appointmentCopy);","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"        assertEquals(appointment, appointment);","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"        assertNotEquals(appointment, null);","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"        assertNotEquals(5, appointment);","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"        // different appointmentId -\u003e returns false","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"        Appointment differentAppointment \u003d new Appointment(TEST_LATER_APPOINTMENT_ID, startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"                patientId, appointmentDescription, hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"        assertNotEquals(appointment, differentAppointment);","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        // different startDateTime -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"        differentAppointment \u003d new Appointment(TEST_APPOINTMENT_ID,","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"                new StartDateTime(LocalDateTime.now().plusHours(1)), endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"                patientId, appointmentDescription, hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        assertNotEquals(appointment, differentAppointment);","lastModifiedDate":"2024-03-15"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"        // different endDateTime -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"        differentAppointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"                new EndDateTime(LocalDateTime.now().plusHours(2)),","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"                patientId, appointmentDescription, hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"        assertNotEquals(appointment, differentAppointment);","lastModifiedDate":"2024-03-15"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"        // different patientId -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"        differentAppointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"                new PatientId(2), appointmentDescription, hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"        assertNotEquals(appointment, differentAppointment);","lastModifiedDate":"2024-03-15"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"        // different appointmentDescription -\u003e returns false","lastModifiedDate":"2024-03-15"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"        differentAppointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"                patientId, new AppointmentDescription(\"Different\"), hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"        assertNotEquals(appointment, differentAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"        // different hasAttended -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"        differentAppointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"                patientId, appointmentDescription, new HasAttended(true), feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"        assertNotEquals(appointment, differentAppointment);","lastModifiedDate":"2024-03-15"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"    public void compareTo() {","lastModifiedDate":"2024-03-15"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        PatientId patientId \u003d new PatientId(1);","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"        StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.now());","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(LocalDateTime.now().plusHours(1));","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"        HasAttended hasAttended \u003d new HasAttended(false);","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"        AppointmentDescription appointmentDescription \u003d new AppointmentDescription(\"Test\");","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime, patientId,","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"                appointmentDescription, hasAttended, new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"        // same values -\u003e returns 0","lastModifiedDate":"2024-03-15"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointmentCopy \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime, patientId,","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"                appointmentDescription, hasAttended, new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"        assertEquals(0, appointment.compareTo(appointmentCopy));","lastModifiedDate":"2024-03-15"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"        // another Appointment has larger appointmentId -\u003e returns less than 0;","lastModifiedDate":"2024-03-15"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"        Appointment differentAppointment \u003d new Appointment(TEST_LATER_APPOINTMENT_ID,","lastModifiedDate":"2024-03-31"},{"lineNumber":95,"author":{"gitId":"caitlyntang"},"content":"                new StartDateTime(LocalDateTime.now().plusDays(1)), endDateTime, patientId,","lastModifiedDate":"2024-03-31"},{"lineNumber":96,"author":{"gitId":"caitlyntang"},"content":"                appointmentDescription, hasAttended, new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"        assertTrue(appointment.compareTo(differentAppointment) \u003c 0);","lastModifiedDate":"2024-03-15"},{"lineNumber":98,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":99,"author":{"gitId":"vnnamng"},"content":"        // another Appointment has smaller appointmentId -\u003e returns more than 0;","lastModifiedDate":"2024-03-15"},{"lineNumber":100,"author":{"gitId":"caitlyntang"},"content":"        differentAppointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime, new PatientId(2),","lastModifiedDate":"2024-03-31"},{"lineNumber":101,"author":{"gitId":"caitlyntang"},"content":"                appointmentDescription, hasAttended, new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":102,"author":{"gitId":"caitlyntang"},"content":"        appointment \u003d new Appointment(TEST_LATER_APPOINTMENT_ID, startDateTime, endDateTime, patientId,","lastModifiedDate":"2024-03-31"},{"lineNumber":103,"author":{"gitId":"caitlyntang"},"content":"                appointmentDescription, hasAttended, new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"        assertTrue(appointment.compareTo(differentAppointment) \u003e 0);","lastModifiedDate":"2024-03-15"},{"lineNumber":105,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":106,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"vnnamng"},"content":"    void getAttendedStatus() {","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"vnnamng"},"content":"        StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.now());","lastModifiedDate":"2024-03-31"},{"lineNumber":111,"author":{"gitId":"vnnamng"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(LocalDateTime.now().plusHours(1));","lastModifiedDate":"2024-03-31"},{"lineNumber":112,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime, new PatientId(1),","lastModifiedDate":"2024-03-31"},{"lineNumber":113,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentDescription(\"Test\"), new HasAttended(false), new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":114,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(appointment.getAttendedStatus().hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":115,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"caitlyntang"},"content":"        appointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime, new PatientId(1),","lastModifiedDate":"2024-03-31"},{"lineNumber":117,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentDescription(\"Test\"), new HasAttended(true), new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":118,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(appointment.getAttendedStatus().hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":119,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"vnnamng"},"content":"    void setAttendedStatus() {","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"vnnamng"},"content":"        StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.now());","lastModifiedDate":"2024-03-31"},{"lineNumber":124,"author":{"gitId":"vnnamng"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(LocalDateTime.now().plusHours(1));","lastModifiedDate":"2024-03-31"},{"lineNumber":125,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":126,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime, new PatientId(1),","lastModifiedDate":"2024-03-31"},{"lineNumber":127,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentDescription(\"Test\"), new HasAttended(false), new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":128,"author":{"gitId":"caitlyntang"},"content":"        appointment.setAttendedStatus(new HasAttended(true));","lastModifiedDate":"2024-03-31"},{"lineNumber":129,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(appointment.getAttendedStatus().hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":130,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"caitlyntang"},"content":"        appointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime, new PatientId(1),","lastModifiedDate":"2024-03-31"},{"lineNumber":132,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentDescription(\"Test\"), new HasAttended(true), new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":133,"author":{"gitId":"caitlyntang"},"content":"        appointment.setAttendedStatus(new HasAttended(true));","lastModifiedDate":"2024-03-31"},{"lineNumber":134,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(appointment.getAttendedStatus().hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":135,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"caitlyntang"},"content":"        appointment \u003d new Appointment(TEST_APPOINTMENT_ID, startDateTime, endDateTime, new PatientId(1),","lastModifiedDate":"2024-03-31"},{"lineNumber":137,"author":{"gitId":"caitlyntang"},"content":"                new AppointmentDescription(\"Test\"), new HasAttended(true), new FeedbackScore(5));","lastModifiedDate":"2024-03-31"},{"lineNumber":138,"author":{"gitId":"caitlyntang"},"content":"        appointment.setAttendedStatus(new HasAttended(false));","lastModifiedDate":"2024-03-31"},{"lineNumber":139,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(appointment.getAttendedStatus().hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":140,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"vnnamng"},"content":"        // default status","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"caitlyntang"},"content":"        appointment \u003d new Appointment(startDateTime, endDateTime, new PatientId(1), new AppointmentDescription(\"Test\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":143,"author":{"gitId":"caitlyntang"},"content":"        assertFalse(appointment.getAttendedStatus().hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":144,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":145,"author":{"gitId":"caitlyntang"},"content":"        appointment \u003d new Appointment(startDateTime, endDateTime, new PatientId(1), new AppointmentDescription(\"Test\"),","lastModifiedDate":"2024-03-31"},{"lineNumber":146,"author":{"gitId":"caitlyntang"},"content":"                new HasAttended(true));","lastModifiedDate":"2024-03-31"},{"lineNumber":147,"author":{"gitId":"caitlyntang"},"content":"        assertTrue(appointment.getAttendedStatus().hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":148,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":150,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"vnnamng"},"content":"    void constructorTest() {","lastModifiedDate":"2024-03-16"},{"lineNumber":152,"author":{"gitId":"vnnamng"},"content":"        StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.now());","lastModifiedDate":"2024-03-31"},{"lineNumber":153,"author":{"gitId":"vnnamng"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(LocalDateTime.now().plusHours(1));","lastModifiedDate":"2024-03-31"},{"lineNumber":154,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":155,"author":{"gitId":"vnnamng"},"content":"        //increasing id","lastModifiedDate":"2024-03-16"},{"lineNumber":156,"author":{"gitId":"caitlyntang"},"content":"        Appointment appointment \u003d new Appointment(startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":157,"author":{"gitId":"caitlyntang"},"content":"                new PatientId(1), new AppointmentDescription(\"Test\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":158,"author":{"gitId":"caitlyntang"},"content":"        Appointment otherAppointment \u003d new Appointment(startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":159,"author":{"gitId":"caitlyntang"},"content":"                new PatientId(1), new AppointmentDescription(\"Test\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":160,"author":{"gitId":"vnnamng"},"content":"        assertTrue(appointment.compareTo(otherAppointment) \u003c 0);","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"vnnamng"},"content":"        assertEquals(appointment.appointmentId + 1, otherAppointment.appointmentId);","lastModifiedDate":"2024-03-16"},{"lineNumber":162,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":163,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"caitlyntang":53,"vnnamng":110}},{"path":"src/test/java/seedu/address/model/appointment/DateTimeFieldTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"class DateTimeFieldTest {","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"    void isValidDateTimeField_returnTrue() {","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"        assertTrue(DateTimeField.isValidDateTimeField(\"2022-12-12 08:00\"));","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"        assertTrue(DateTimeField.isValidDateTimeField(\"2020-02-29 23:59\"));","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"    void isValidDateTimeField_returnFalse() {","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"        assertFalse(DateTimeField.isValidDateTimeField(\"2022-12-1 08:00\"));","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"        assertFalse(DateTimeField.isValidDateTimeField(\"2022-12-12 08:00:00\"));","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"        assertFalse(DateTimeField.isValidDateTimeField(\"2022-1-12 08:00\"));","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"        assertFalse(DateTimeField.isValidDateTimeField(\"2022-12-12 8:00\"));","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"vnnamng":23}},{"path":"src/test/java/seedu/address/model/patient/EmailContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"public class EmailContainsKeywordsPredicateTest {","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Email email \u003d new Email(\"valid@email\");","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(email.equals(new Email(\"valid@email\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(email.equals(email));","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(new Email(\"other.valid@email\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"Jerome-j":2,"-":86}},{"path":"src/test/java/seedu/address/model/patient/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"        // Keywords match phone, email, but does not match name","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"999\")","lastModifiedDate":"2024-03-17"},{"lineNumber":74,"author":{"gitId":"Jerome-j"},"content":"                .withEmail(\"alice@email.com\").withId(12).build()));","lastModifiedDate":"2024-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d NameContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Jerome-j":3,"tankh99":1,"-":81}},{"path":"src/test/java/seedu/address/model/patient/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d new Name(\"Valid Name\");","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(new Name(\"Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(name));","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(new Name(\"Other Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"Jerome-j":1,"-":59}},{"path":"src/test/java/seedu/address/model/patient/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"public class PatientTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"        Patient patient \u003d new PersonBuilder().build();","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getTags().remove(0));","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        Patient editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"                .withId(100).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        Patient editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        // Name has extra white space in between words, all other attributes same -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(\"Bob  Choo\").build();","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns true","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"        Patient aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"Jerome-j"},"content":"        Patient editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"Jerome-j"},"content":"        String expected \u003d Patient.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"Jerome-j"},"content":"                + \", email\u003d\" + ALICE.getEmail() + \", tags\u003d\" + ALICE.getTags() + \", id\u003d\" + ALICE.getSid() + \"}\";","lastModifiedDate":"2024-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Jerome-j":11,"tankh99":8,"-":79}},{"path":"src/test/java/seedu/address/model/patient/PhoneContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import java.util.List;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-28"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"public class PhoneContainsKeywordsPredicateTest {","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"    public void equals() {","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"97788112\");","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"61234566\", \"97788112\");","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"        PhoneContainsKeywordsPredicate firstPredicate \u003d new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"        PhoneContainsKeywordsPredicate secondPredicate \u003d new PhoneContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"        PhoneContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"                new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    public void test_phoneContainsNumber_returnsTrue() {","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        // One keyword","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(Collections.singletonList(\"123\"));","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91231234\").build()));","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"        // Multiple keywords","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"881\", \"188\"));","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98811888\").build()));","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"        // Only one matching keyword","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"999\", \"99981122\"));","lastModifiedDate":"2024-03-28"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"99981122\").build()));","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"    public void test_phoneDoesNotContainNumber_returnsFalse() {","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"        // Zero keywords","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"91234456\").build()));","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"        // Non-matching keyword","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"84441234\").build()));","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"        // Keywords match name, email but does not match phone","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"999\")","lastModifiedDate":"2024-03-28"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"                .withEmail(\"alice@email.com\").withId(12).build()));","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":74,"author":{"gitId":"Jerome-j"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2024-03-28"},{"lineNumber":76,"author":{"gitId":"Jerome-j"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(keywords);","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":78,"author":{"gitId":"Jerome-j"},"content":"        String expected \u003d PhoneContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"Jerome-j"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":80,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"Jerome-j":81}},{"path":"src/test/java/seedu/address/model/patient/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        assertFalse(Phone.isValidPhone(\"9234\")); // More than 3 numbers","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"        assertFalse(Phone.isValidPhone(\"599\")); // Doesn\u0027t start with 6, 8 or 9","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        assertTrue(Phone.isValidPhone(\"63121534\")); // Starts with 6, 8-digits","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        assertTrue(Phone.isValidPhone(\"83121534\")); // Starts with 8, 8-digits","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\")); // Starts with 9, 8-digits","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Phone phone \u003d new Phone(\"999\");","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(phone.equals(new Phone(\"999\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(phone.equals(phone));","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(new Phone(\"995\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"Jerome-j":1,"tankh99":5,"-":57}},{"path":"src/test/java/seedu/address/model/patient/TagContainsKeywordPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import java.util.List;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"class TagContainsKeywordPredicateTest {","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"    public void equals() {","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"depression\");","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"depression\", \"sadness\");","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"        TagContainsKeywordPredicate firstPredicate \u003d new TagContainsKeywordPredicate(firstPredicateKeywordList);","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"Jerome-j"},"content":"        TagContainsKeywordPredicate secondPredicate \u003d new TagContainsKeywordPredicate(secondPredicateKeywordList);","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"Jerome-j"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"Jerome-j"},"content":"        TagContainsKeywordPredicate firstPredicateCopy \u003d","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"                new TagContainsKeywordPredicate(firstPredicateKeywordList);","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    public void test_tagListContainsTag_returnsTrue() {","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        // One keyword","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"        TagContainsKeywordPredicate predicate \u003d new TagContainsKeywordPredicate(Collections.singletonList(\"noIntern\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"noIntern\").build()));","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"        // Multiple keywords","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new TagContainsKeywordPredicate(Arrays.asList(\"depression\", \"intern\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"depression\", \"noIntern\", \"sadness\").build()));","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"        // Only one matching keyword","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new TagContainsKeywordPredicate(Arrays.asList(\"depression\", \"jobless\", \"relationship\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"anxiety\", \"sadness\", \"depression\").build()));","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"        // Only one matching keyword - non-case-sensitive","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new TagContainsKeywordPredicate(Arrays.asList(\"dEpRESsION\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"Jerome-j"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"anxiety\", \"sadness\", \"depression\").build()));","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"Jerome-j"},"content":"    public void test_tagListDoesNotContainTag_returnsFalse() {","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"Jerome-j"},"content":"        // Zero keywords","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"Jerome-j"},"content":"        TagContainsKeywordPredicate predicate \u003d new TagContainsKeywordPredicate(Collections.emptyList());","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"noIntern\").build()));","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"Jerome-j"},"content":"        // Non-matching keyword","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new TagContainsKeywordPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"depression\", \"noIntern\", \"sadness\").build()));","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"        // Keywords match name, email but does not match phone","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"Jerome-j"},"content":"        predicate \u003d new TagContainsKeywordPredicate(Arrays.asList(\"12345\", \"jjjj\", \"Main\", \"Street\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"Jerome-j"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"999\")","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"Jerome-j"},"content":"                .withTags(\"anxiety\", \"sadness\", \"depression\")","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"Jerome-j"},"content":"                .withEmail(\"alice@gmail.com\").withId(12).build()));","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":78,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"Jerome-j"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"Jerome-j"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"Jerome-j"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"Jerome-j"},"content":"        TagContainsKeywordPredicate predicate \u003d new TagContainsKeywordPredicate(keywords);","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"Jerome-j"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"Jerome-j"},"content":"        String expected \u003d TagContainsKeywordPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"Jerome-j"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"Jerome-j"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"Jerome-j"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"Jerome-j":87}},{"path":"src/test/java/seedu/address/model/patient/UniquePatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jerome-j"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"Jerome-j"},"content":"public class UniquePatientListTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        Patient editedAlice \u003d new PersonBuilder(ALICE).withId(11).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"Jerome-j"},"content":"        Patient editedAlice \u003d new PersonBuilder(ALICE).withId(13).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2024-03-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPatient\u003e) null));","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"Jerome-j"},"content":"        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"Jerome-j"},"content":"        uniquePersonList.setPersons(patientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"Jerome-j"},"content":"        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2024-03-26"},{"lineNumber":161,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePatients));","lastModifiedDate":"2024-03-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList().toString(), uniquePersonList.toString());","lastModifiedDate":"2019-02-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Jerome-j":15,"-":159}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedAppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalAppointments.ATTENDED_FIRST_APPOINTMENT;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"public class JsonAdaptedAppointmentTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    private static final int INVALID_APPOINTMENT_ID \u003d -1;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    private static final int INVALID_STUDENT_ID \u003d -1;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"    private static final int VALID_APPOINTMENT_ID \u003d ATTENDED_FIRST_APPOINTMENT.getAppointmentId();","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    private static final LocalDateTime VALID_START_DATETIME \u003d","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"            ATTENDED_FIRST_APPOINTMENT.getStartDateTime().getDateTimeValue();","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"    private static final LocalDateTime VALID_END_DATETIME \u003d","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"            ATTENDED_FIRST_APPOINTMENT.getEndDateTime().getDateTimeValue();","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    private static final int VALID_STUDENT_ID \u003d ATTENDED_FIRST_APPOINTMENT.getPatientId().patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    private static final String VALID_APPOINTMENT_DESCRIPTION \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"            ATTENDED_FIRST_APPOINTMENT.getAppointmentDescription().appointmentDescription;","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    private static final boolean VALID_ATTENDED_STATUS \u003d ATTENDED_FIRST_APPOINTMENT.getAttendedStatus().hasAttended;","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"    private static final int VALID_FEEDBACK_SCORE \u003d ATTENDED_FIRST_APPOINTMENT.getFeedbackScore().getFeedbackScore();","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(ATTENDED_FIRST_APPOINTMENT);","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"        assertEquals(ATTENDED_FIRST_APPOINTMENT, appointment.toModelType());","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"    public void toModelType_invalidAppointmentId_throwsIllegalValueException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(INVALID_APPOINTMENT_ID,","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"                VALID_START_DATETIME, VALID_END_DATETIME, VALID_STUDENT_ID,","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"                VALID_APPOINTMENT_DESCRIPTION, VALID_ATTENDED_STATUS, VALID_FEEDBACK_SCORE);","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"        String expectedMessage \u003d \"Please only use positive index.\";","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"    public void toModelType_invalidStudentId_throwsIllegalValueException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_APPOINTMENT_ID,","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"                VALID_START_DATETIME, VALID_END_DATETIME, INVALID_STUDENT_ID, VALID_APPOINTMENT_DESCRIPTION,","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"                                                                        VALID_ATTENDED_STATUS, VALID_FEEDBACK_SCORE);","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        String expectedMessage \u003d \"Please only use positive index.\";","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"    //TODO: Add null check","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":6,"vnnamng":48}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"Jerome-j"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(BENSON);","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"                new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS, 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS, 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"Jerome-j"},"content":"                new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS, 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_EMAIL, VALID_TAGS, 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS, 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, null, VALID_TAGS, 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"Jerome-j"},"content":"    public void toModelType_invalidId_throwsIllegalValueException() {","lastModifiedDate":"2024-03-15"},{"lineNumber":84,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"Jerome-j"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS, -1);","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"Jerome-j"},"content":"        String expectedMessage \u003d \"Please only use positive index.\";","lastModifiedDate":"2024-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"Jerome-j"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"Jerome-j"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags, 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jerome-j":21,"-":78}},{"path":"src/test/java/seedu/address/storage/JsonAppointmentListStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalAppointments.FIFTH_APPOINTMENT;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.ReadOnlyAppointmentList;","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"public class JsonAppointmentListStorageTest {","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAppointmentListStorageTest\");","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    @TempDir","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"    public Path testFolder;","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"    private Optional\u003cReadOnlyAppointmentList\u003e readAppointmentList(String filePath) throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"        Path appointmentFilePath \u003d Paths.get(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"        return new JsonAppointmentListStorage(appointmentFilePath)","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"                .readAppointmentList(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"                : null;","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"     * Saves {@code appointmentList} at the specified {@code filePath}.","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"    private void saveAppointmentList(ReadOnlyAppointmentList appointmentList, String filePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"            new JsonAppointmentListStorage(Paths.get(filePath))","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"                    .saveAppointmentList(appointmentList, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"    public void readAppointmentList_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAppointmentList(null));","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"    public void readAppointment_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"        assertFalse(readAppointmentList(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"    public void readAppointment_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAppointmentList(\"notJsonFormatAppointmentList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"    public void readAppointment_invalidAppointmentList_throwDataLoadingException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAppointmentList(\"invalidAppointmentList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"    public void readAppointmentList_invalidAndValidAppointmentList_throwDataLoadingException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAppointmentList(\"invalidAndValidAppointmentList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"    public void readAndSaveAppointmentList_allInOrder_success() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"        Path appointmentListfilePath \u003d testFolder.resolve(\"TempAppointmentList.json\");","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"        AppointmentList original \u003d getTypicalAppointmentList();","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"        JsonAppointmentListStorage jsonAppointmentListStorage \u003d","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"                new JsonAppointmentListStorage(appointmentListfilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"        // Save in new file and read back","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        jsonAppointmentListStorage.saveAppointmentList(original, appointmentListfilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"        ReadOnlyAppointmentList readBack \u003d jsonAppointmentListStorage","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"                .readAppointmentList(appointmentListfilePath).get();","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"        assertEquals(original, new AppointmentList(readBack));","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"        original.addAppointment(FIFTH_APPOINTMENT);","lastModifiedDate":"2024-03-27"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"        jsonAppointmentListStorage.saveAppointmentList(original, appointmentListfilePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"        readBack \u003d jsonAppointmentListStorage.readAppointmentList(appointmentListfilePath).get();","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"        assertEquals(original, new AppointmentList(readBack));","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"vnnamng"},"content":"        original \u003d getTypicalAppointmentList();","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"vnnamng"},"content":"        original.addAppointment(FIFTH_APPOINTMENT);","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"        jsonAppointmentListStorage.saveAppointmentList(original); // file path not specified","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"vnnamng"},"content":"        readBack \u003d jsonAppointmentListStorage.readAppointmentList().get(); // file path not specified","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"vnnamng"},"content":"        assertEquals(original, new AppointmentList(readBack));","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"    public void saveAppointmentList_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAppointmentList(new AppointmentList(), null));","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":109,"author":{"gitId":"vnnamng"},"content":"    public void saveAppointmentList_nullPatientList_throwsNullPointerException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":110,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAppointmentList(null, \"SomeFile.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":111,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"vnnamng":113}},{"path":"src/test/java/seedu/address/storage/JsonPatientListStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"Jerome-j"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"public class JsonPatientListStorageTest {","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPatientListStorageTest\");","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    @TempDir","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"    public Path testFolder;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"    public void readPatientList_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e readPatientList(null));","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"    private java.util.Optional\u003cReadOnlyPatientList\u003e readPatientList(String filePath) throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"        return new JsonPatientListStorage(Paths.get(filePath)).readPatientList(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"                : null;","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"        assertFalse(readPatientList(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readPatientList(\"notJsonFormatPatientList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"    public void readPatientList_invalidPersonPatientList_throwDataLoadingException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readPatientList(\"invalidPersonPatientList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"    public void readPatientList_invalidAndValidPersonPatientList_throwDataLoadingException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readPatientList(\"invalidAndValidPersonPatientList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"    public void readAndSavePatientList_allInOrder_success() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"        Path filePath \u003d testFolder.resolve(\"TempPatientList.json\");","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"        PatientList original \u003d getTypicalPatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"        JsonPatientListStorage jsonPatientListStorage \u003d new JsonPatientListStorage(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"        // Save in new file and read back","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"        jsonPatientListStorage.savePatientList(original, filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"        ReadOnlyPatientList readBack \u003d getTypicalPatientList();","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"        assertEquals(original, new PatientList(readBack));","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"        jsonPatientListStorage.savePatientList(original, filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"Jerome-j"},"content":"        assertNotEquals(original, new PatientList(readBack));","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        jsonPatientListStorage.savePatientList(original); // file path not specified","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"Jerome-j"},"content":"        assertNotEquals(original, new PatientList(readBack));","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"    public void savePatientList_nullPatientList_throwsNullPointerException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e savePatientList(null, \"SomeFile.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"     * Saves {@code patientList} at the specified {@code filePath}.","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"vnnamng"},"content":"    private void savePatientList(ReadOnlyPatientList patientList, String filePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"vnnamng"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"vnnamng"},"content":"            new JsonPatientListStorage(Paths.get(filePath))","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"vnnamng"},"content":"                    .savePatientList(patientList, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"vnnamng"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"vnnamng"},"content":"    public void savePatientList_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"vnnamng"},"content":"        assertThrows(NullPointerException.class, () -\u003e savePatientList(new PatientList(), null));","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":109,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":110,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"Jerome-j":6,"vnnamng":104}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"import seedu.address.testutil.TypicalAppointments;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"public class JsonSerializableAppointmentListTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    private static final Path TEST_DATA_FOLDER \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAppointmentListTest\");","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"    private static final Path TYPICAL_APPOINTMENT_LIST_FILE \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"            TEST_DATA_FOLDER.resolve(\"typicalAppointmentList.json\");","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"    private static final Path INVALID_APPOINTMENT_LIST \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"            TEST_DATA_FOLDER.resolve(\"invalidAppointmentList.json\");","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"    private static final Path DUPLICATE_APPOINTMENT_FILE \u003d","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"            TEST_DATA_FOLDER.resolve(\"duplicateAppointmentList.json\");","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    public void toModelType_typicalAppointmentFile_success() throws Exception {","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"        JsonSerializableAppointmentList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_APPOINTMENT_LIST_FILE,","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"                JsonSerializableAppointmentList.class).get();","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"        AppointmentList addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"        AppointmentList typicalPersonsAddressBook \u003d TypicalAppointments.getTypicalAppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"    public void toModelType_invalidAppointmentFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"        JsonSerializableAppointmentList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_APPOINTMENT_LIST,","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"                JsonSerializableAppointmentList.class).get();","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"    public void toModelType_duplicateAppointments_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"        JsonSerializableAppointmentList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_APPOINTMENT_FILE,","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"                JsonSerializableAppointmentList.class).get();","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAppointmentList.MESSAGE_DUPLICATE_APPOINTMENT,","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"vnnamng":52}},{"path":"src/test/java/seedu/address/storage/JsonSerializablePatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"public class JsonSerializablePatientListTest {","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePatientListTest\");","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsPatientList.json\");","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonPatientList.json\");","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonPatientList.json\");","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"        JsonSerializablePatientList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"                JsonSerializablePatientList.class).get();","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"        PatientList patientListFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"        PatientList typicalPersonsPatientList \u003d TypicalPersons.getTypicalPatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"        assertEquals(patientListFromFile, typicalPersonsPatientList);","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"        JsonSerializablePatientList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"                JsonSerializablePatientList.class).get();","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"        JsonSerializablePatientList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"                JsonSerializablePatientList.class).get();","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"        assertThrows(IllegalValueException.class, \"Index should be strictly increasing.\",","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jerome-j":1,"vnnamng":15,"-":31}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"        userPrefs.setPatientListFilePath(Paths.get(\"patientList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"        userPrefs.setAppointmentListFilePath(Paths.get(\"appointmentList.json\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataLoadingException, IOException {","lastModifiedDate":"2023-06-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"vnnamng":2,"-":122}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"        JsonPatientListStorage patientListStorage \u003d new JsonPatientListStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"        JsonAppointmentListStorage appointmentListStorage \u003d new JsonAppointmentListStorage(getTempFilePath(\"ap\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"        storageManager \u003d new StorageManager(patientListStorage, appointmentListStorage, userPrefsStorage);","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"    public void patientListReadSave() throws Exception {","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"         * {@link JsonPatientListStorage} class.","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonPatientListStorageTest} class.","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"        PatientList original \u003d getTypicalPatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"        storageManager.savePatientList(original);","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"Jerome-j"},"content":"        ReadOnlyPatientList retrieved \u003d getTypicalPatientList();","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"        assertEquals(original, new PatientList(retrieved));","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"    public void getPatientListFilePath() {","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"        assertNotNull(storageManager.getPatientListFilePath());","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jerome-j":1,"vnnamng":14,"-":54}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentDescription;","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.FeedbackScore;","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.HasAttended;","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.PatientId;","lastModifiedDate":"2024-04-01"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    public static final int DEFAULT_APPOINTMENT_ID \u003d 1;","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"    public static final LocalDateTime DEFAULT_APPOINTMENT_DATE_TIME \u003d","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"            LocalDateTime.of(2020, 12, 12, 12, 12);","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"    public static final StartDateTime DEFAULT_START_DATETIME \u003d new StartDateTime(DEFAULT_APPOINTMENT_DATE_TIME);","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    public static final EndDateTime DEFAULT_END_DATETIME \u003d new EndDateTime(DEFAULT_APPOINTMENT_DATE_TIME.plusHours(1));","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    public static final PatientId DEFAULT_PATIENT_ID \u003d new PatientId(1);","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    public static final AppointmentDescription DEFAULT_APPOINTMENT_DESCRIPTION \u003d","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"            new AppointmentDescription(\"Appointment Description\");","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"    public static final HasAttended DEFAULT_HAS_ATTENDED \u003d new HasAttended(false);","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"    public static final FeedbackScore DEFAULT_FEEDBACK_SCORE \u003d new FeedbackScore(1);","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    private int appointmentId;","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"    private StartDateTime startDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"    private EndDateTime endDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"    private PatientId patientId;","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"    private AppointmentDescription appointmentDescription;","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"    private HasAttended hasAttended;","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"    private FeedbackScore feedbackScore;","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"     * Creates a {@code AppointmentBuilder} with the default details.","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"vnnamng"},"content":"        appointmentId \u003d DEFAULT_APPOINTMENT_ID;","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"        startDateTime \u003d DEFAULT_START_DATETIME;","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"        endDateTime \u003d DEFAULT_END_DATETIME;","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"        patientId \u003d DEFAULT_PATIENT_ID;","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"        appointmentDescription \u003d DEFAULT_APPOINTMENT_DESCRIPTION;","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"        hasAttended \u003d DEFAULT_HAS_ATTENDED;","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        feedbackScore \u003d DEFAULT_FEEDBACK_SCORE;","lastModifiedDate":"2024-03-25"},{"lineNumber":55,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}.","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"        appointmentId \u003d appointmentToCopy.getAppointmentId();","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"        startDateTime \u003d appointmentToCopy.getStartDateTime();","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"vnnamng"},"content":"        endDateTime \u003d appointmentToCopy.getEndDateTime();","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"        patientId \u003d appointmentToCopy.getPatientId();","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"        appointmentDescription \u003d appointmentToCopy.getAppointmentDescription();","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"        hasAttended \u003d appointmentToCopy.getAttendedStatus();","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"        feedbackScore \u003d appointmentToCopy.getFeedbackScore();","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"     * Sets the {@code appointmentId} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"    public AppointmentBuilder withAppointmentId(int appointmentId) {","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"        return this;","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"     * Set the {@code withStartDatetime} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"    public AppointmentBuilder withStartDatetime(LocalDateTime dateTime) {","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"vnnamng"},"content":"        this.startDateTime \u003d new StartDateTime(dateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"vnnamng"},"content":"        return this;","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"vnnamng"},"content":"     * Set the {@code withStartDatetime} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"vnnamng"},"content":"    public AppointmentBuilder withEndDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"vnnamng"},"content":"        this.endDateTime \u003d new EndDateTime(dateTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"vnnamng"},"content":"        return this;","lastModifiedDate":"2024-03-18"},{"lineNumber":92,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":95,"author":{"gitId":"vnnamng"},"content":"     * Sets the {@code studentId} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-18"},{"lineNumber":96,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":97,"author":{"gitId":"caitlyntang"},"content":"    public AppointmentBuilder withStudentId(int patientId) {","lastModifiedDate":"2024-03-31"},{"lineNumber":98,"author":{"gitId":"caitlyntang"},"content":"        this.patientId \u003d new PatientId(patientId);","lastModifiedDate":"2024-03-31"},{"lineNumber":99,"author":{"gitId":"vnnamng"},"content":"        return this;","lastModifiedDate":"2024-03-18"},{"lineNumber":100,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":101,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":102,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":103,"author":{"gitId":"vnnamng"},"content":"     * Sets the {@code AppointmentDescription} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"vnnamng"},"content":"    public AppointmentBuilder withAppointmentDescription(String appointmentDescription) {","lastModifiedDate":"2024-03-18"},{"lineNumber":106,"author":{"gitId":"caitlyntang"},"content":"        this.appointmentDescription \u003d new AppointmentDescription(appointmentDescription);","lastModifiedDate":"2024-03-31"},{"lineNumber":107,"author":{"gitId":"vnnamng"},"content":"        return this;","lastModifiedDate":"2024-03-18"},{"lineNumber":108,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"vnnamng"},"content":"     * Sets the {@code hasAttended} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"vnnamng"},"content":"    public AppointmentBuilder withHasAttended(boolean hasAttended) {","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"caitlyntang"},"content":"        this.hasAttended \u003d new HasAttended(hasAttended);","lastModifiedDate":"2024-03-31"},{"lineNumber":115,"author":{"gitId":"vnnamng"},"content":"        return this;","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":117,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":118,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"tankh99"},"content":"     * Sets the {@code feedbackScore} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"caitlyntang"},"content":"    public AppointmentBuilder withFeedbackScore(int feedbackScore) {","lastModifiedDate":"2024-03-31"},{"lineNumber":122,"author":{"gitId":"caitlyntang"},"content":"        this.feedbackScore \u003d new FeedbackScore(feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":123,"author":{"gitId":"tankh99"},"content":"        return this;","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"tankh99"},"content":"     * Builds an (@code Appointment)","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"vnnamng"},"content":"    public Appointment build() {","lastModifiedDate":"2024-03-18"},{"lineNumber":130,"author":{"gitId":"vnnamng"},"content":"        return new Appointment(appointmentId, startDateTime, endDateTime,","lastModifiedDate":"2024-03-31"},{"lineNumber":131,"author":{"gitId":"caitlyntang"},"content":"                patientId, appointmentDescription, hasAttended, feedbackScore);","lastModifiedDate":"2024-03-31"},{"lineNumber":132,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":133,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":134,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":27,"tankh99":11,"vnnamng":96}},{"path":"src/test/java/seedu/address/testutil/AppointmentListBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":" * A utility class to help with building AppointmentList objects.","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"public class AppointmentListBuilder {","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"    private AppointmentList appointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"    public AppointmentListBuilder() {","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"        appointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"    public AppointmentListBuilder(AppointmentList appointmentList) {","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"        this.appointmentList \u003d appointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"     * Adds a new {@code Appointment} to the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"    public AppointmentListBuilder withAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"        appointmentList.addAppointment(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"        return this;","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    public AppointmentList build() {","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"        return appointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"vnnamng":32}},{"path":"src/test/java/seedu/address/testutil/EditAppointmentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"caitlyntang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"caitlyntang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.AppointmentDescription;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.FeedbackScore;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.HasAttended;","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.PatientId;","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"caitlyntang"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"caitlyntang"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"caitlyntang"},"content":" * A utility class to help with building EditAppointmentDescriptor objects.","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"caitlyntang"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"caitlyntang"},"content":"public class EditAppointmentDescriptorBuilder {","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"caitlyntang"},"content":"    private EditAppointmentCommand.EditAppointmentDescriptor descriptor;","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder() {","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"caitlyntang"},"content":"        descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor();","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder(EditAppointmentCommand.EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"caitlyntang"},"content":"        this.descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor(descriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"caitlyntang"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder(Appointment appointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"caitlyntang"},"content":"        descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor();","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setAppointmentId(appointment.appointmentId);","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setPatientId(appointment.getPatientId());","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setStartDateTime(appointment.getStartDateTime());","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setEndDateTime(appointment.getEndDateTime());","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setHasAttended(appointment.getAttendedStatus());","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setFeedbackScore(appointment.getFeedbackScore());","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setAppointmentDescription(appointment.getAppointmentDescription());","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"caitlyntang"},"content":"     * Sets the {@code PatientId} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder withPatientId(int patientId) {","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setPatientId(new PatientId(patientId));","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"caitlyntang"},"content":"        return this;","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"caitlyntang"},"content":"     * Sets the {@code StartDateTime} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder withStartDateTime(LocalDateTime startDateTime) {","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setStartDateTime(new StartDateTime(startDateTime));","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"caitlyntang"},"content":"        return this;","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"caitlyntang"},"content":"     * Sets the {@code EndDateTime} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder withEndDateTime(LocalDateTime endDateTime) {","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setEndDateTime(new EndDateTime(endDateTime));","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"caitlyntang"},"content":"        return this;","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"caitlyntang"},"content":"     * Sets the {@code HasAttended} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder withAttendedStatus(boolean hasAttended) {","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setHasAttended(new HasAttended(hasAttended));","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"caitlyntang"},"content":"        return this;","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"caitlyntang"},"content":"     * Sets the {@code FeedbackScore} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder withFeedbackScore(int feedbackScore) {","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setFeedbackScore(new FeedbackScore(feedbackScore));","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"caitlyntang"},"content":"        return this;","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"caitlyntang"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"caitlyntang"},"content":"     * Sets the {@code AppointmentDescription} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"caitlyntang"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentDescriptorBuilder withAppointmentDescription(String description) {","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"caitlyntang"},"content":"        descriptor.setAppointmentDescription(new AppointmentDescription(description));","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"caitlyntang"},"content":"        return this;","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"caitlyntang"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"caitlyntang"},"content":"    public EditAppointmentCommand.EditAppointmentDescriptor build() {","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"caitlyntang"},"content":"        return descriptor;","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"caitlyntang"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"caitlyntang"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"caitlyntang":94}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"    public EditPersonDescriptorBuilder(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"        descriptor.setName(patient.getName());","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        descriptor.setPhone(patient.getPhone());","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"        descriptor.setEmail(patient.getEmail());","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"        // descriptor.setAddress(person.getAddress());","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"        descriptor.setTags(patient.getTags());","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Jerome-j":10,"-":68}},{"path":"src/test/java/seedu/address/testutil/PatientListBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":" *     {@code PatientList ab \u003d new PatientListBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"public class PatientListBuilder {","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"    private PatientList patientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    public PatientListBuilder() {","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"        patientList \u003d new PatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"    public PatientListBuilder(PatientList patientList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"        this.patientList \u003d patientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"     * Adds a new {@code Person} to the {@code PatientList} that we are building.","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"    public PatientListBuilder withPerson(Patient patient) {","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"        patientList.addPerson(patient);","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"vnnamng"},"content":"        return this;","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"    public PatientList build() {","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"        return patientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"vnnamng":34}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"    private int id;","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"        id \u003d new Integer(id);","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":43,"author":{"gitId":"Jerome-j"},"content":"    public PersonBuilder(Patient patientToCopy) {","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"Jerome-j"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"        phone \u003d patientToCopy.getPhone();","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"        email \u003d patientToCopy.getEmail();","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        String trimmedName \u003d StringUtil.trimWhitespace(name);","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        this.name \u003d new Name(trimmedName);","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"Jerome-j"},"content":"    public PersonBuilder withId(int id) {","lastModifiedDate":"2024-03-15"},{"lineNumber":71,"author":{"gitId":"Jerome-j"},"content":"        this.id \u003d id;","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"Jerome-j"},"content":"    public Patient build() {","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"Jerome-j"},"content":"        return new Patient(name, phone, email, tags, id);","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"Jerome-j":15,"tankh99":3,"-":77}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"Jerome-j"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2024-04-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"Jerome-j"},"content":"    public static String getAddCommand(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPersonDetails(patient);","lastModifiedDate":"2024-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"Jerome-j"},"content":"    public static String getPersonDetails(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"Jerome-j"},"content":"        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"        patient.getTags().stream().forEach(","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"            s -\u003e sb.append(PREFIX_ALIAS + s.tagName + \" \")","lastModifiedDate":"2024-03-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"                sb.append(PREFIX_ALIAS);","lastModifiedDate":"2024-03-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_ALIAS).append(s.tagName).append(\" \"));","lastModifiedDate":"2024-03-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"Jerome-j":13,"-":46}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"    public static Patient getPerson(Model model, Index index) {","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jerome-j":2,"-":53}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"import java.util.List;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":" * A utility class containing a list of {@code Appointment} objects to be used in tests.","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"public class TypicalAppointments {","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    public static final Appointment UNATTENDED_FIRST_APPOINTMENT \u003d new AppointmentBuilder().withAppointmentId(1)","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"            .withStartDatetime(LocalDateTime.of(2022, 12, 12, 8, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"            .withEndDateTime(LocalDateTime.of(2022, 12, 12, 9, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"            .withStudentId(1)","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"vnnamng"},"content":"            .withAppointmentDescription(\"First Appointment\")","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"vnnamng"},"content":"            .withHasAttended(false)","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"vnnamng"},"content":"            .withFeedbackScore(1)","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"vnnamng"},"content":"            .build();","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"caitlyntang"},"content":"    public static final Appointment ATTENDED_FIRST_APPOINTMENT \u003d new AppointmentBuilder().withAppointmentId(1)","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"vnnamng"},"content":"            .withStartDatetime(LocalDateTime.of(2022, 12, 12, 9, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"vnnamng"},"content":"            .withEndDateTime(LocalDateTime.of(2022, 12, 12, 10, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"caitlyntang"},"content":"            .withStudentId(1)","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"vnnamng"},"content":"            .withAppointmentDescription(\"First Appointment\")","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"vnnamng"},"content":"            .withHasAttended(true)","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"vnnamng"},"content":"            .withFeedbackScore(2)","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"vnnamng"},"content":"            .build();","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"vnnamng"},"content":"    public static final Appointment ATTENDED_SECOND_APPOINTMENT \u003d new AppointmentBuilder().withAppointmentId(2)","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"vnnamng"},"content":"            .withStartDatetime(LocalDateTime.of(2022, 12, 12, 10, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"vnnamng"},"content":"            .withEndDateTime(LocalDateTime.of(2022, 12, 12, 11, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"vnnamng"},"content":"            .withStudentId(2)","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"vnnamng"},"content":"            .withAppointmentDescription(\"Second Appointment\")","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"vnnamng"},"content":"            .withHasAttended(false)","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"vnnamng"},"content":"            .withFeedbackScore(3)","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"vnnamng"},"content":"            .build();","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"vnnamng"},"content":"    public static final Appointment THIRD_APPOINTMENT \u003d new AppointmentBuilder().withAppointmentId(3)","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"vnnamng"},"content":"            .withStartDatetime(LocalDateTime.of(2022, 12, 12, 11, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"vnnamng"},"content":"            .withEndDateTime(LocalDateTime.of(2022, 12, 12, 12, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"vnnamng"},"content":"            .withStudentId(3)","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"vnnamng"},"content":"            .withAppointmentDescription(\"Third Appointment\")","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"            .withHasAttended(false)","lastModifiedDate":"2024-03-25"},{"lineNumber":49,"author":{"gitId":"vnnamng"},"content":"            .withFeedbackScore(5).build();","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"vnnamng"},"content":"    public static final Appointment FORTH_APPOINTMENT \u003d new AppointmentBuilder().withAppointmentId(4)","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"vnnamng"},"content":"            .withStartDatetime(LocalDateTime.of(2022, 12, 12, 12, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"vnnamng"},"content":"            .withEndDateTime(LocalDateTime.of(2022, 12, 12, 13, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"caitlyntang"},"content":"            .withStudentId(4)","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"caitlyntang"},"content":"            .withAppointmentDescription(\"Fourth Appointment\")","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"            .withHasAttended(false)","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"            .withFeedbackScore(4).build();","lastModifiedDate":"2024-03-25"},{"lineNumber":58,"author":{"gitId":"vnnamng"},"content":"    public static final Appointment FIFTH_APPOINTMENT \u003d new AppointmentBuilder().withAppointmentId(5)","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"vnnamng"},"content":"            .withStartDatetime(LocalDateTime.of(2022, 12, 12, 13, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"vnnamng"},"content":"            .withEndDateTime(LocalDateTime.of(2022, 12, 12, 14, 0, 0))","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"vnnamng"},"content":"            .withStudentId(5)","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"            .withAppointmentDescription(\"Final Appointment\")","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"            .withHasAttended(false)","lastModifiedDate":"2024-03-25"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"            .withFeedbackScore(4).build();","lastModifiedDate":"2024-03-25"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"vnnamng"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"vnnamng"},"content":"     * Returns an {@code AppointmentList} with all the typical persons.","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"vnnamng"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"vnnamng"},"content":"    public static AppointmentList getTypicalAppointmentList() {","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"vnnamng"},"content":"        AppointmentList appointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"vnnamng"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"vnnamng"},"content":"            appointmentList.addAppointment(appointment);","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"vnnamng"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"vnnamng"},"content":"        return appointmentList;","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"vnnamng"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"vnnamng"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(UNATTENDED_FIRST_APPOINTMENT, ATTENDED_SECOND_APPOINTMENT,","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"vnnamng"},"content":"                THIRD_APPOINTMENT, FORTH_APPOINTMENT));","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"vnnamng"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"caitlyntang":4,"tankh99":5,"vnnamng":72}},{"path":"src/test/java/seedu/address/testutil/TypicalEndDateTime.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.EndDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":" * A utility class containing a list of {@code EndDateTime} objects to be used in tests.","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"public class TypicalEndDateTime {","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"    public static final EndDateTime END_DATE_TIME_1 \u003d new EndDateTime(LocalDateTime.of(2024, 3, 18, 9, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"    public static final EndDateTime END_DATE_TIME_2 \u003d new EndDateTime(LocalDateTime.of(2024, 3, 18, 10, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"    public static final EndDateTime END_DATE_TIME_3 \u003d new EndDateTime(LocalDateTime.of(2024, 3, 18, 11, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    public static final EndDateTime END_DATE_TIME_4 \u003d new EndDateTime(LocalDateTime.of(2024, 3, 18, 12, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    public static final EndDateTime END_DATE_TIME_5 \u003d new EndDateTime(LocalDateTime.of(2024, 3, 18, 13, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"    public static final EndDateTime END_DATE_TIME_6 \u003d new EndDateTime(LocalDateTime.of(2024, 3, 18, 14, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":18}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"Jerome-j"},"content":"    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"Jerome-j"},"content":"    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"Jerome-j"},"content":"    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"Jerome-j"},"content":"    public static final int INDEX_SEVEN_HUNDRED_PERSON \u003d 700;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"Jerome-j":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"Jerome-j"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(\"alice@example.com\")","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"Jerome-j"},"content":"            .withId(1)","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":29,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"Jerome-j"},"content":"            .withId(2)","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":33,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(\"heinz@example.com\").withId(3).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(\"cornelia@example.com\").withId(4).withTags(\"friends\").build();","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"94822240\")","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(\"werner@example.com\").withId(5).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"94824270\")","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(\"lydia@example.com\").withId(6).build();","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"94824420\")","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(\"anna@example.com\").withId(700).build();","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":45,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"84824240\")","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(\"stefan@example.com\").withId(708).build();","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"84821310\")","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(\"hans@example.com\").withId(709).build();","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(VALID_EMAIL_AMY).withId(710).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"Jerome-j"},"content":"    public static final Patient BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"Jerome-j"},"content":"            .withEmail(VALID_EMAIL_BOB).withId(711).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"vnnamng"},"content":"     * Returns an {@code PatientList} with all the typical persons.","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"vnnamng"},"content":"    public static PatientList getTypicalPatientList() {","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"vnnamng"},"content":"        PatientList ab \u003d new PatientList();","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"Jerome-j"},"content":"        for (Patient patient : getTypicalPersons()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"Jerome-j"},"content":"            ab.addPerson(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":72,"author":{"gitId":"Jerome-j"},"content":"    public static List\u003cPatient\u003e getTypicalPersons() {","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"Jerome-j":27,"vnnamng":4,"-":44}},{"path":"src/test/java/seedu/address/testutil/TypicalStartDateTime.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vnnamng"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"vnnamng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"vnnamng"},"content":"import seedu.address.model.appointment.StartDateTime;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"vnnamng"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"vnnamng"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"vnnamng"},"content":" * A utility class containing a list of {@code StartDateTime} objects to be used in tests.","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"vnnamng"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"vnnamng"},"content":"public class TypicalStartDateTime {","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"vnnamng"},"content":"    public static final StartDateTime START_DATE_TIME_1 \u003d new StartDateTime(LocalDateTime.of(2024, 3, 18, 9, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"vnnamng"},"content":"    public static final StartDateTime START_DATE_TIME_2 \u003d new StartDateTime(LocalDateTime.of(2024, 3, 18, 10, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"vnnamng"},"content":"    public static final StartDateTime START_DATE_TIME_3 \u003d new StartDateTime(LocalDateTime.of(2024, 3, 18, 11, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"vnnamng"},"content":"    public static final StartDateTime START_DATE_TIME_4 \u003d new StartDateTime(LocalDateTime.of(2024, 3, 18, 12, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"vnnamng"},"content":"    public static final StartDateTime START_DATE_TIME_5 \u003d new StartDateTime(LocalDateTime.of(2024, 3, 18, 13, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"vnnamng"},"content":"    public static final StartDateTime START_DATE_TIME_6 \u003d new StartDateTime(LocalDateTime.of(2024, 3, 18, 14, 0));","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"vnnamng"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"vnnamng":17}}]
