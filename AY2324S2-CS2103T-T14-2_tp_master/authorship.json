[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"[![CI Status](https://github.com/AY2324S2-CS2103T-T14-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103T-T14-2/tp/actions)","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"**MediTrack is a desktop application for managing your patient details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"-":3,"Vision-2000":4}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"run {","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"    archiveFileName \u003d \u0027MediTrack.jar\u0027","lastModifiedDate":"2024-03-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"jeong-jaeho"},"content":"run {","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"jeong-jaeho"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"jskimdev":1,"-":73,"jeong-jaeho":2,"Vision-2000":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"### Sivakumar Aishvarya","lastModifiedDate":"2024-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"S-Aishvarya"},"content":"\u003cimg src\u003d\"images/s-aishvarya.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"S-Aishvarya"},"content":"[[github](https://github.com/S-Aishvarya)]","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"S-Aishvarya"},"content":"* Role: Developer","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"* Responsibilities: Scheduling and tracking + Documentation + Commons","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"### Eugene Hirose","lastModifiedDate":"2024-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"\u003cimg src\u003d\"images/vision-2000.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"[[github](http://github.com/Vision-2000)]","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2024-03-07"},{"lineNumber":33,"author":{"gitId":"jeong-jaeho"},"content":"* Responsibilities: Testing + UI + Logic","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"### Jeong Jaeho","lastModifiedDate":"2024-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"jeong-jaeho"},"content":"\u003cimg src\u003d\"images/jeong-jaeho.png\" width\u003d\"200px\"\u003e  ","lastModifiedDate":"2024-03-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"jeong-jaeho"},"content":"[[github](http://github.com/jeong-jaeho)]","lastModifiedDate":"2024-03-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"jeong-jaeho"},"content":"* Responsibilities: Team lead + Integration + Storage","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"### Kim Junseo","lastModifiedDate":"2024-03-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"\u003cimg src\u003d\"images/jskimdev.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"[[github](https://github.com/jskimdev)]","lastModifiedDate":"2024-03-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"jeong-jaeho"},"content":"* Responsibilities: Code Quality + Model + JavaFX visuals","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"jskimdev":6,"S-Aishvarya":3,"-":36,"jeong-jaeho":6,"Vision-2000":2}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"# MediTrack Developer Guide","lastModifiedDate":"2024-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"- [Regular-Expressions.info](https://www.regular-expressions.info/tutorial.html) was our source for learning regex.","lastModifiedDate":"2024-03-22"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"_{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"find n/Bob\")` API call as an example.","lastModifiedDate":"2024-03-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"\u003cpuml src\u003d\"diagrams/FindSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `find n/Bob` Command\" /\u003e","lastModifiedDate":"2024-03-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2024-03-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"**Note:** The lifeline for `FindCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline continues till the end of diagram.","lastModifiedDate":"2024-03-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `FindCommandParser`) and uses it to parse the command.","lastModifiedDate":"2024-03-22"},{"lineNumber":107,"author":{"gitId":"Vision-2000"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `FindCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2024-03-22"},{"lineNumber":108,"author":{"gitId":"jskimdev"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a patient).\u003cbr\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"   Note that although this is shown as a single step in the diagram above (for simplicity), in the code it can take several interactions (between the command object and the `Model`) to achieve.","lastModifiedDate":"2024-02-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"jskimdev"},"content":"* stores the address book data i.e., all `Patient` objects (which are contained in a `UniquePatientList` object).","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"jskimdev"},"content":"* stores the currently \u0027selected\u0027 `Patient` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPatient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"Vision-2000"},"content":"### Find feature","lastModifiedDate":"2024-03-28"},{"lineNumber":155,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":156,"author":{"gitId":"Vision-2000"},"content":"#### Implementation","lastModifiedDate":"2024-03-28"},{"lineNumber":157,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":158,"author":{"gitId":"Vision-2000"},"content":"The `find` feature is implemented by using the `ArgumentTokenizer`, `ArgumentMultimap` and `Prefix` classes. `Prefix` ","lastModifiedDate":"2024-03-28"},{"lineNumber":159,"author":{"gitId":"Vision-2000"},"content":"represents argument prefixes such as `n/` for names. In combination with the below methods, the parser can access different parts","lastModifiedDate":"2024-03-28"},{"lineNumber":160,"author":{"gitId":"Vision-2000"},"content":"of the argument based on the prefixes:","lastModifiedDate":"2024-03-28"},{"lineNumber":161,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":162,"author":{"gitId":"Vision-2000"},"content":"* `ArgumentTokenizer#tokenize(String argsString, Prefix... prefixes)` — Generates an `ArgumentMultimap` object which contains","lastModifiedDate":"2024-03-28"},{"lineNumber":163,"author":{"gitId":"Vision-2000"},"content":"information on string argument mapped to each prefix.","lastModifiedDate":"2024-03-28"},{"lineNumber":164,"author":{"gitId":"Vision-2000"},"content":"* `ArgumentMultimap#getPreamble()` — Returns the part of the argument before any prefixes.","lastModifiedDate":"2024-03-28"},{"lineNumber":165,"author":{"gitId":"Vision-2000"},"content":"* `ArgumentMultimap#getValue(Prefix prefix)` — Returns the part of the argument belonging to the given prefix.","lastModifiedDate":"2024-03-28"},{"lineNumber":166,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":167,"author":{"gitId":"Vision-2000"},"content":"The following activity diagram describes the operation of `FindCommandParser`:","lastModifiedDate":"2024-03-28"},{"lineNumber":168,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":169,"author":{"gitId":"Vision-2000"},"content":"\u003cpuml src\u003d\"diagrams/FindActivityDiagram.puml\" alt\u003d\"FindActivityDiagram\" /\u003e","lastModifiedDate":"2024-03-28"},{"lineNumber":170,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":171,"author":{"gitId":"Vision-2000"},"content":"Each valid prefix is checked, and if found, the value proceeding it in the argument string is saved in the form of a subclass ","lastModifiedDate":"2024-03-28"},{"lineNumber":172,"author":{"gitId":"Vision-2000"},"content":"of `Predicate`. Otherwise, a `Predicate` that always returns true is used instead. When `FindCommand` is created, all of the ","lastModifiedDate":"2024-03-28"},{"lineNumber":173,"author":{"gitId":"Vision-2000"},"content":"`Predicate` are passed into it, which will be chained into a singular `Predicate` such that the `Model` component can use to update ","lastModifiedDate":"2024-03-28"},{"lineNumber":174,"author":{"gitId":"Vision-2000"},"content":"the `PatientList`.","lastModifiedDate":"2024-03-28"},{"lineNumber":175,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":176,"author":{"gitId":"Vision-2000"},"content":"The operation returns an error if:","lastModifiedDate":"2024-03-28"},{"lineNumber":177,"author":{"gitId":"Vision-2000"},"content":"* There is redundant argument before valid prefixes.","lastModifiedDate":"2024-03-28"},{"lineNumber":178,"author":{"gitId":"Vision-2000"},"content":"* None of the valid prefixes are provided.","lastModifiedDate":"2024-03-28"},{"lineNumber":179,"author":{"gitId":"Vision-2000"},"content":"* There are duplicate prefixes.","lastModifiedDate":"2024-03-28"},{"lineNumber":180,"author":{"gitId":"Vision-2000"},"content":"* The arguments provided have invalid format with respect to their prefixes, e.g. argument for `p/` prefix contains letters.","lastModifiedDate":"2024-03-28"},{"lineNumber":181,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":182,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":183,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":184,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":185,"author":{"gitId":"Vision-2000"},"content":"#### Design considerations","lastModifiedDate":"2024-03-28"},{"lineNumber":186,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":187,"author":{"gitId":"Vision-2000"},"content":"The current design was chosen to allow for addition of more `find` conditions in later iterations. With the current implementation, only","lastModifiedDate":"2024-03-28"},{"lineNumber":188,"author":{"gitId":"Vision-2000"},"content":"the `FindCommandParser` class needs to be changed, as well as the creation of a new `Predicate` subclass.","lastModifiedDate":"2024-03-28"},{"lineNumber":189,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":190,"author":{"gitId":"Vision-2000"},"content":"An alternative was to use a flag to denote the condition to filter the list by. For example, if a user wishes to find a patient with","lastModifiedDate":"2024-03-28"},{"lineNumber":191,"author":{"gitId":"Vision-2000"},"content":"the name `Bob`, the command would be `find-n Bob`. This was rejected as it only allows for finding with a single condition, leading ","lastModifiedDate":"2024-03-28"},{"lineNumber":192,"author":{"gitId":"Vision-2000"},"content":"to a less flexible feature.","lastModifiedDate":"2024-03-28"},{"lineNumber":193,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":194,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":195,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":196,"author":{"gitId":"S-Aishvarya"},"content":"### List in alphabetical order feature","lastModifiedDate":"2024-03-28"},{"lineNumber":197,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":198,"author":{"gitId":"S-Aishvarya"},"content":"#### Implementation","lastModifiedDate":"2024-03-28"},{"lineNumber":199,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":200,"author":{"gitId":"S-Aishvarya"},"content":"The list in alphabetical order feature is implemented by using the `ArrayList` and `Comparator` classes. `ArrayList` is used to manage the list of `Patients` while `Comparator` is used to compare the `fullName` of each `Patient`.","lastModifiedDate":"2024-03-28"},{"lineNumber":201,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":202,"author":{"gitId":"S-Aishvarya"},"content":"The implementation of the `list` command works as follows.","lastModifiedDate":"2024-03-28"},{"lineNumber":203,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":204,"author":{"gitId":"S-Aishvarya"},"content":"Upon the user\u0027s entering the `list` command, after checking that the list of patients is not empty, a list of all `Patients` is retrieved from the `Model` object and added to a separate `ArrayList`. From there, a `Comparator` is created that sorts the list of `Patients` using their `fullName`. Then, each element from the `ArrayList` is removed then added in the correct alphabetical order. Once this is completed, the `CommandResult` returns successfully and displays the correct output, a list of all patients in alphabetical order.","lastModifiedDate":"2024-03-28"},{"lineNumber":205,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":206,"author":{"gitId":"S-Aishvarya"},"content":"The following sequence diagram shows the sequence of events when the \u0027list\u0027 command is typed by a user.","lastModifiedDate":"2024-03-28"},{"lineNumber":207,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":208,"author":{"gitId":"S-Aishvarya"},"content":"\u003cpuml src\u003d\"diagrams/ListSequenceDiagram.puml\" alt\u003d\"ListSequenceDiagram\" /\u003e","lastModifiedDate":"2024-03-28"},{"lineNumber":209,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":210,"author":{"gitId":"S-Aishvarya"},"content":"#### Design considerations","lastModifiedDate":"2024-03-28"},{"lineNumber":211,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":212,"author":{"gitId":"S-Aishvarya"},"content":"The current design was chosen as the existing list of `Patients` in the `Model` object, `getFilteredPersonList()`, is an immutable object that necessitated the creation of an `ArrayList` object, though it may be inefficient.","lastModifiedDate":"2024-03-28"},{"lineNumber":213,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":214,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":215,"author":{"gitId":"jeong-jaeho"},"content":"### Delete All feature","lastModifiedDate":"2024-03-28"},{"lineNumber":216,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":217,"author":{"gitId":"jeong-jaeho"},"content":"#### Implementation","lastModifiedDate":"2024-03-28"},{"lineNumber":218,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":219,"author":{"gitId":"jeong-jaeho"},"content":"The feature of deleting all entries is implemented via two separate commands (DeleteAllCommand and ForceDeleteAllCommand).","lastModifiedDate":"2024-03-28"},{"lineNumber":220,"author":{"gitId":"jeong-jaeho"},"content":"When the user enters \u0027delete-all\u0027 command, AddressBookParser parses the command into a DeleteAllCommand.","lastModifiedDate":"2024-03-28"},{"lineNumber":221,"author":{"gitId":"jeong-jaeho"},"content":"The LogicManager executes the DeleteAllCommand. This would return a CommandResult with a confirmation message,","lastModifiedDate":"2024-03-28"},{"lineNumber":222,"author":{"gitId":"jeong-jaeho"},"content":"which asks if the user wants to truly delete all entries. When prompted with the confirmation message, the user would ","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"jeong-jaeho"},"content":"have the choice to enter \u0027delete-all-f\u0027 command or to cancel the \u0027delete-all\u0027 command.","lastModifiedDate":"2024-03-28"},{"lineNumber":224,"author":{"gitId":"jeong-jaeho"},"content":"When the \u0027delete-all-f\u0027 command is entered, AddressBookParser would parse the command into a ForceDeleteAllCommand.","lastModifiedDate":"2024-03-28"},{"lineNumber":225,"author":{"gitId":"jeong-jaeho"},"content":"The LogicManager would execute the ForceDeleteAllCommand. This would set the current model of the patient list to clear ","lastModifiedDate":"2024-03-28"},{"lineNumber":226,"author":{"gitId":"jeong-jaeho"},"content":"out all existing entries by calling setAddressBook method with an empty AddressBook object used as its argument.","lastModifiedDate":"2024-03-28"},{"lineNumber":227,"author":{"gitId":"jeong-jaeho"},"content":"A CommandResult object would be returned with a success message that states that all data has been successfully deleted.","lastModifiedDate":"2024-03-28"},{"lineNumber":228,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":229,"author":{"gitId":"jeong-jaeho"},"content":"The following sequence diagram describes the sequence of logic when the user inputs \u0027delete-all-f\u0027 command:","lastModifiedDate":"2024-03-28"},{"lineNumber":230,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":231,"author":{"gitId":"jeong-jaeho"},"content":"\u003cpuml src\u003d\"diagrams/ForceDeleteAllSequenceDiagram-Logic.puml\" alt\u003d\"ForceDeleteAllSequenceDiagram\" /\u003e","lastModifiedDate":"2024-03-28"},{"lineNumber":232,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":233,"author":{"gitId":"jeong-jaeho"},"content":"#### Design considerations","lastModifiedDate":"2024-03-28"},{"lineNumber":234,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":235,"author":{"gitId":"jeong-jaeho"},"content":"The current design was chosen so that there is a safety check mechanism that asks for confirmation from the user if the","lastModifiedDate":"2024-03-28"},{"lineNumber":236,"author":{"gitId":"jeong-jaeho"},"content":"user truly wants to delete all entries when the \u0027delete-all\u0027 command is given. ","lastModifiedDate":"2024-03-28"},{"lineNumber":237,"author":{"gitId":"jeong-jaeho"},"content":"If the user wishes to bypass the safety check and is certain of the intent to delete all entries, the user can enter ","lastModifiedDate":"2024-03-28"},{"lineNumber":238,"author":{"gitId":"jeong-jaeho"},"content":"\u0027delete-all-f\u0027 command to forcefully delete all entries.","lastModifiedDate":"2024-03-28"},{"lineNumber":239,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":240,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":241,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"jskimdev"},"content":"Step 2. The user executes `delete 5` command to delete the 5th patient in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2024-03-19"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"jskimdev"},"content":"Step 3. The user executes `add n/David …​` to add a new patient. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2024-03-19"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":271,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"jskimdev"},"content":"Step 4. The user now decides that adding the patient was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2024-03-19"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":281,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"The following sequence diagram shows how an undo operation goes through the `Logic` component:","lastModifiedDate":"2024-02-09"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Logic.puml\" alt\u003d\"UndoSequenceDiagram-Logic\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"Similarly, how an undo operation goes through the `Model` component is shown below:","lastModifiedDate":"2024-02-09"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Model.puml\" alt\u003d\"UndoSequenceDiagram-Model\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":299,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":303,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"jskimdev"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the patient being deleted).","lastModifiedDate":"2024-03-19"},{"lineNumber":330,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":344,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":345,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":346,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":347,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"Vision-2000"},"content":"* has a need to manage a significant number of patient details","lastModifiedDate":"2024-03-07"},{"lineNumber":358,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":361,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"Vision-2000"},"content":"**Value proposition**: MediTrack can manage patient details faster than a typical mouse/GUI driven app.","lastModifiedDate":"2024-03-07"},{"lineNumber":364,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"| Priority | As a …​      | I want to …​                     | So that I can…​                                                          |","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"Vision-2000"},"content":"|----------|--------------|----------------------------------|--------------------------------------------------------------------------|","lastModifiedDate":"2024-03-07"},{"lineNumber":373,"author":{"gitId":"Vision-2000"},"content":"| `* * *`  | receptionist | see usage instructions           | refer to instructions when I forget how to use the App                   |","lastModifiedDate":"2024-03-07"},{"lineNumber":374,"author":{"gitId":"Vision-2000"},"content":"| `* * *`  | receptionist | see the list of patients         | check the index of all patients                                          |","lastModifiedDate":"2024-03-07"},{"lineNumber":375,"author":{"gitId":"Vision-2000"},"content":"| `* * *`  | receptionist | add a new patient                |                                                                          |","lastModifiedDate":"2024-03-07"},{"lineNumber":376,"author":{"gitId":"Vision-2000"},"content":"| `* * *`  | receptionist | delete a patient                 | remove entries that are outdated                                         |","lastModifiedDate":"2024-03-07"},{"lineNumber":377,"author":{"gitId":"Vision-2000"},"content":"| `* * *`  | receptionist | find a patient by name           | locate details of a patient without having to go through the entire list |","lastModifiedDate":"2024-03-07"},{"lineNumber":378,"author":{"gitId":"Vision-2000"},"content":"| `* *`    | receptionist | find a patient by contact number | look for a specific patient without worrying about duplicate names       |","lastModifiedDate":"2024-03-07"},{"lineNumber":379,"author":{"gitId":"Vision-2000"},"content":"| `* *`    | receptionist | delete all patients              | easily reset the list to a blank state                                   |","lastModifiedDate":"2024-03-07"},{"lineNumber":380,"author":{"gitId":"Vision-2000"},"content":"| `* *`    | receptionist | exit  with a command             | close the application with keyboard inputs only                          |","lastModifiedDate":"2024-03-07"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"Vision-2000"},"content":"(For all use cases below, the **System** is the `MediTrack` and the **Actor** is the `receptionist`, unless specified otherwise)","lastModifiedDate":"2024-03-07"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"Vision-2000"},"content":"**Use case: UC01 - Add a patient**","lastModifiedDate":"2024-03-07"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"**MSS**  ","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"Vision-2000"},"content":"1. Receptionist requests to add a patient’s data in the list.","lastModifiedDate":"2024-03-07"},{"lineNumber":392,"author":{"gitId":"Vision-2000"},"content":"2. MediTrack adds the patient’s data into the list.","lastModifiedDate":"2024-03-07"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"Vision-2000"},"content":"   Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":395,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":396,"author":{"gitId":"Vision-2000"},"content":"**Extensions**","lastModifiedDate":"2024-03-07"},{"lineNumber":397,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":398,"author":{"gitId":"Vision-2000"},"content":"* 1a.  There is already a patient with the same phone number.  ","lastModifiedDate":"2024-03-07"},{"lineNumber":399,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":400,"author":{"gitId":"Vision-2000"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":401,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":402,"author":{"gitId":"Vision-2000"},"content":"**Use case: UC02 - Delete a patient**","lastModifiedDate":"2024-03-07"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":404,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":406,"author":{"gitId":"Vision-2000"},"content":"1.  Receptionist requests to list patients.","lastModifiedDate":"2024-03-07"},{"lineNumber":407,"author":{"gitId":"Vision-2000"},"content":"2.  MediTrack shows a list of patients.","lastModifiedDate":"2024-03-07"},{"lineNumber":408,"author":{"gitId":"Vision-2000"},"content":"3.  Receptionist requests to delete a specific patient in the list.","lastModifiedDate":"2024-03-07"},{"lineNumber":409,"author":{"gitId":"Vision-2000"},"content":"4.  MediTrack deletes the patient.","lastModifiedDate":"2024-03-07"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"Vision-2000"},"content":"    * 3a1. MediTrack shows an error message.","lastModifiedDate":"2024-03-07"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"Vision-2000"},"content":"**Use case: UC03 - Find a patient**","lastModifiedDate":"2024-03-07"},{"lineNumber":426,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":427,"author":{"gitId":"Vision-2000"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":428,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":429,"author":{"gitId":"Vision-2000"},"content":"1.  Receptionist requests for a patient\u0027s information.","lastModifiedDate":"2024-03-07"},{"lineNumber":430,"author":{"gitId":"Vision-2000"},"content":"2.  MediTrack returns the patient\u0027s information.","lastModifiedDate":"2024-03-07"},{"lineNumber":431,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":432,"author":{"gitId":"Vision-2000"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":433,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":434,"author":{"gitId":"Vision-2000"},"content":"**Extensions**","lastModifiedDate":"2024-03-07"},{"lineNumber":435,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":436,"author":{"gitId":"Vision-2000"},"content":"* 1a. The patient\u0027s information is not found in the list.","lastModifiedDate":"2024-03-07"},{"lineNumber":437,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":438,"author":{"gitId":"Vision-2000"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":439,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":440,"author":{"gitId":"Vision-2000"},"content":"**Use case: UC04 - Exit**","lastModifiedDate":"2024-03-07"},{"lineNumber":441,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":442,"author":{"gitId":"Vision-2000"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":443,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":444,"author":{"gitId":"Vision-2000"},"content":"1.  Receptionist requests to exit the program.","lastModifiedDate":"2024-03-07"},{"lineNumber":445,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":446,"author":{"gitId":"Vision-2000"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":447,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":448,"author":{"gitId":"Vision-2000"},"content":"**Use case: UC05 - Delete all patients**","lastModifiedDate":"2024-03-07"},{"lineNumber":449,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":450,"author":{"gitId":"Vision-2000"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":451,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":452,"author":{"gitId":"Vision-2000"},"content":"1.  Receptionist requests to delete all patients.","lastModifiedDate":"2024-03-07"},{"lineNumber":453,"author":{"gitId":"Vision-2000"},"content":"2.  MediTrack asks for confirmation.","lastModifiedDate":"2024-03-07"},{"lineNumber":454,"author":{"gitId":"Vision-2000"},"content":"3.  Receptionist confirms.","lastModifiedDate":"2024-03-07"},{"lineNumber":455,"author":{"gitId":"Vision-2000"},"content":"4.  MediTrack deletes all patient information.","lastModifiedDate":"2024-03-07"},{"lineNumber":456,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":457,"author":{"gitId":"Vision-2000"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":458,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":459,"author":{"gitId":"Vision-2000"},"content":"**Extensions**","lastModifiedDate":"2024-03-07"},{"lineNumber":460,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":461,"author":{"gitId":"Vision-2000"},"content":"* 1a. There are no patient information.","lastModifiedDate":"2024-03-07"},{"lineNumber":462,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":463,"author":{"gitId":"Vision-2000"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":464,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":465,"author":{"gitId":"Vision-2000"},"content":"* 3a. Receptionist cancels.","lastModifiedDate":"2024-03-07"},{"lineNumber":466,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":467,"author":{"gitId":"Vision-2000"},"content":"  Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":468,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":469,"author":{"gitId":"Vision-2000"},"content":"**Use case: UC06 - Start the system**","lastModifiedDate":"2024-03-07"},{"lineNumber":470,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":471,"author":{"gitId":"Vision-2000"},"content":"**MSS**","lastModifiedDate":"2024-03-07"},{"lineNumber":472,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":473,"author":{"gitId":"Vision-2000"},"content":"1.  Receptionist starts the program","lastModifiedDate":"2024-03-07"},{"lineNumber":474,"author":{"gitId":"Vision-2000"},"content":"2.  MediTrack shows a list of patients","lastModifiedDate":"2024-03-07"},{"lineNumber":475,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":476,"author":{"gitId":"Vision-2000"},"content":"    Use case ends.","lastModifiedDate":"2024-03-07"},{"lineNumber":477,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":478,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"Vision-2000"},"content":"2.  Should be able to hold up to 100 patients without a noticeable lag in performance for typical usage.","lastModifiedDate":"2024-03-07"},{"lineNumber":484,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"Vision-2000"},"content":"4. Should work without internet connection.","lastModifiedDate":"2024-03-07"},{"lineNumber":486,"author":{"gitId":"Vision-2000"},"content":"5. Can only be used by a registered receptionist.","lastModifiedDate":"2024-03-07"},{"lineNumber":487,"author":{"gitId":"Vision-2000"},"content":"6. Each command should take no more than 1 second until a response is displayed.","lastModifiedDate":"2024-03-07"},{"lineNumber":488,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"Vision-2000"},"content":"* **Mainstream OS**: Windows, Linux, MacOS","lastModifiedDate":"2024-03-07"},{"lineNumber":494,"author":{"gitId":"jskimdev"},"content":"* **Patient**: A patient who has visited the clinic at least once due to an illness","lastModifiedDate":"2024-03-19"},{"lineNumber":495,"author":{"gitId":"Vision-2000"},"content":"* **Receptionist** The user operating MediTrack","lastModifiedDate":"2024-03-07"},{"lineNumber":496,"author":{"gitId":"Vision-2000"},"content":"* **Patient information**: Name, contact number, address, email, date of birth, symptoms, date of visit ","lastModifiedDate":"2024-03-07"},{"lineNumber":497,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":506,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":507,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":512,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"jskimdev"},"content":"### Deleting a patient","lastModifiedDate":"2024-03-19"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"jskimdev"},"content":"1. Deleting a patient while all patients are being shown","lastModifiedDate":"2024-03-19"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"jskimdev"},"content":"   1. Prerequisites: List all patients using the `list` command. Multiple patients in the list.","lastModifiedDate":"2024-03-19"},{"lineNumber":534,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"jskimdev"},"content":"      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2024-03-19"},{"lineNumber":540,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"jskimdev":12,"S-Aishvarya":20,"-":354,"jeong-jaeho":27,"Vision-2000":139}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"# MediTrack User Guide","lastModifiedDate":"2024-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"MediTrack is a **desktop app for managing patient details, optimized for use via a  Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your patient management tasks done faster than traditional GUI apps.","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. Download the latest `addressbook.jar` from [here](https://github.com/se-edu/addressbook-level3/releases).","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar addressbook.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * `list` : Lists all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2023-01-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * `delete 3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2023-01-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * `clear` : Deletes all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"**Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2023-06-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"jskimdev"},"content":"### Adding a patient: `add`","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"jskimdev"},"content":"Adds a patient to the address book.","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"jskimdev"},"content":"**Tip:** A patient can have any number of tags (including 0)","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"jskimdev"},"content":"### Listing all patients : `list`","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"jskimdev"},"content":"Shows a list of all patients in the address book.","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"jskimdev"},"content":"### Editing a patient : `edit`","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"jskimdev"},"content":"Edits an existing patient in the address book.","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"jskimdev"},"content":"* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"jskimdev"},"content":"* When editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"jskimdev"},"content":"* You can remove all the patient’s tags by typing `t/` without","lastModifiedDate":"2024-03-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"jskimdev"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2024-03-19"},{"lineNumber":114,"author":{"gitId":"jskimdev"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"jskimdev"},"content":"### Locating patients by name: `find`","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"jskimdev"},"content":"Finds patients whose names contain any of the given keywords.","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"jskimdev"},"content":"### Deleting a patient : `delete`","lastModifiedDate":"2024-03-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"jskimdev"},"content":"Deletes the specified patient from the address book.","lastModifiedDate":"2024-03-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"jskimdev"},"content":"* Deletes the patient at the specified `INDEX`.","lastModifiedDate":"2024-03-19"},{"lineNumber":141,"author":{"gitId":"jskimdev"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2024-03-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"jskimdev"},"content":"* `list` followed by `delete 2` deletes the 2nd patient in the address book.","lastModifiedDate":"2024-03-19"},{"lineNumber":146,"author":{"gitId":"jskimdev"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st patient in the results of the `find` command.","lastModifiedDate":"2024-03-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"AddressBook data are saved automatically as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-09-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"**Caution:**","lastModifiedDate":"2023-09-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.  Hence, it is recommended to take a backup of the file before editing it.\u003cbr\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"Furthermore, certain edits can cause the AddressBook to behave in unexpected ways (e.g., if a value entered is outside the acceptable range). Therefore, edit the data file only if you are confident that you can update it correctly.","lastModifiedDate":"2023-09-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"Action     | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"**Add**    | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"**Clear**  | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"**Edit**   | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"**Find**   | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"**List**   | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"**Help**   | `help`","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"jskimdev":20,"-":182,"Vision-2000":2}},{"path":"docs/diagrams/BetterModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"jeong-jaeho"},"content":"AddressBook *-right-\u003e \"1\" UniquePatientList","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook *-right-\u003e \"1\" UniqueTagList","lastModifiedDate":"2019-07-30"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":"UniqueTagList -[hidden]down- UniquePatientList","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"UniqueTagList -[hidden]down- UniquePatientList","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"UniqueTagList -right-\u003e \"*\" Tag","lastModifiedDate":"2023-01-01"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"UniquePatientList -right-\u003e Patient","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"Patient -up-\u003e \"*\" Tag","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Name","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Phone","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Email","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Address","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e DateOfBirth","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Sex","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":12,"jeong-jaeho":11}},{"path":"docs/diagrams/FindActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"@startuml","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"skin rose","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"skinparam ActivityFontSize 15","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"skinparam ArrowFontSize 12","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"start","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":":Execute parse method of FindCommandParser;","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":":Generate ArgumentMultimap;","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"if () then ([argument contains \"n/\"])","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"    :Set NameContainsKeywordPredicate;","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"else ([else])","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"    :Set PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"endif","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"if () then ([argument contains \"p/\"])","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"    :Set PhoneMatchesPredicate;","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"else ([else])","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"    :Set PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"endif","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":":Return FindCommand;","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"stop","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"@enduml","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"Vision-2000":25}},{"path":"docs/diagrams/FindSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"@startuml","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"!include style.puml","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-03-22"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2024-03-22"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2024-03-22"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2024-03-22"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR","lastModifiedDate":"2024-03-22"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"participant \"f:FindCommand\" as FindCommand LOGIC_COLOR","lastModifiedDate":"2024-03-22"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2024-03-22"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"end box","lastModifiedDate":"2024-03-22"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2024-03-22"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"participant \"m:Model\" as Model MODEL_COLOR","lastModifiedDate":"2024-03-22"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"end box","lastModifiedDate":"2024-03-22"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"[-\u003e LogicManager : execute(\"find n/Bob\")","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"activate LogicManager","lastModifiedDate":"2024-03-22"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"find n/Bob\")","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"activate AddressBookParser","lastModifiedDate":"2024-03-22"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"create FindCommandParser","lastModifiedDate":"2024-03-22"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"AddressBookParser -\u003e FindCommandParser","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"activate FindCommandParser","lastModifiedDate":"2024-03-22"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"FindCommandParser --\u003e AddressBookParser","lastModifiedDate":"2024-03-22"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"deactivate FindCommandParser","lastModifiedDate":"2024-03-22"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"AddressBookParser -\u003e FindCommandParser : parse(\"n/Bob\")","lastModifiedDate":"2024-03-22"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"activate FindCommandParser","lastModifiedDate":"2024-03-22"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"create FindCommand","lastModifiedDate":"2024-03-22"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"FindCommandParser -\u003e FindCommand","lastModifiedDate":"2024-03-22"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"activate FindCommand","lastModifiedDate":"2024-03-22"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"FindCommand --\u003e FindCommandParser :","lastModifiedDate":"2024-03-22"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"deactivate FindCommand","lastModifiedDate":"2024-03-22"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"FindCommandParser --\u003e AddressBookParser : f","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"deactivate FindCommandParser","lastModifiedDate":"2024-03-22"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2024-03-22"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"FindCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2024-03-22"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"destroy FindCommandParser","lastModifiedDate":"2024-03-22"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"AddressBookParser --\u003e LogicManager : f","lastModifiedDate":"2024-03-22"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"deactivate AddressBookParser","lastModifiedDate":"2024-03-22"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"LogicManager -\u003e FindCommand : execute(m)","lastModifiedDate":"2024-03-22"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"activate FindCommand","lastModifiedDate":"2024-03-22"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"FindCommand -\u003e Model : updateFilteredPersonList(namePredicate)","lastModifiedDate":"2024-03-22"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"activate Model","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"Model --\u003e FindCommand","lastModifiedDate":"2024-03-22"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"deactivate Model","lastModifiedDate":"2024-03-22"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"create CommandResult","lastModifiedDate":"2024-03-22"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"FindCommand -\u003e CommandResult","lastModifiedDate":"2024-03-22"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"activate CommandResult","lastModifiedDate":"2024-03-22"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"CommandResult --\u003e FindCommand","lastModifiedDate":"2024-03-22"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"deactivate CommandResult","lastModifiedDate":"2024-03-22"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"FindCommand --\u003e LogicManager : r","lastModifiedDate":"2024-03-22"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"deactivate FindCommand","lastModifiedDate":"2024-03-22"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"[\u003c--LogicManager","lastModifiedDate":"2024-03-22"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"deactivate LogicManager","lastModifiedDate":"2024-03-22"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"@enduml","lastModifiedDate":"2024-03-22"}],"authorContributionMap":{"Vision-2000":70}},{"path":"docs/diagrams/ForceDeleteAllSequenceDiagram-Logic.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jeong-jaeho"},"content":"@startuml","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"jeong-jaeho"},"content":"!include style.puml","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"jeong-jaeho"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"jeong-jaeho"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"jeong-jaeho"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"jeong-jaeho"},"content":"participant \"f:ForceDeleteAllCommand\" as ForceDeleteAllCommand LOGIC_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":"end box","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2024-03-28"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"end box","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"[-\u003e LogicManager : execute(delete-all-f)","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"activate LogicManager","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(delete-all-f)","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"activate AddressBookParser","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"create ForceDeleteAllCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"AddressBookParser -\u003e ForceDeleteAllCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"activate ForceDeleteAllCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"ForceDeleteAllCommand --\u003e AddressBookParser","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"deactivate ForceDeleteAllCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"AddressBookParser --\u003e LogicManager : f","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"jeong-jaeho"},"content":"deactivate AddressBookParser","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"jeong-jaeho"},"content":"LogicManager -\u003e ForceDeleteAllCommand : execute()","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"jeong-jaeho"},"content":"activate ForceDeleteAllCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"jeong-jaeho"},"content":"ForceDeleteAllCommand -\u003e Model : setAddressBook()","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"jeong-jaeho"},"content":"activate Model","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"jeong-jaeho"},"content":"Model --\u003e ForceDeleteAllCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"jeong-jaeho"},"content":"deactivate Model","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"jeong-jaeho"},"content":"ForceDeleteAllCommand --\u003e LogicManager : result","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"jeong-jaeho"},"content":"deactivate ForceDeleteAllCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"jeong-jaeho"},"content":"ForceDeleteAllCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"jeong-jaeho"},"content":"destroy ForceDeleteAllCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"jeong-jaeho"},"content":"[\u003c--LogicManager","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"jeong-jaeho"},"content":"deactivate LogicManager","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"@enduml","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"jeong-jaeho":46}},{"path":"docs/diagrams/ListSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"S-Aishvarya"},"content":"@startuml","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"S-Aishvarya"},"content":"!include style.puml","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"S-Aishvarya"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"S-Aishvarya"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"S-Aishvarya"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"S-Aishvarya"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"S-Aishvarya"},"content":"participant \"f:ListCommand\" as ListCommand LOGIC_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"S-Aishvarya"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"S-Aishvarya"},"content":"end box","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":12,"author":{"gitId":"S-Aishvarya"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"S-Aishvarya"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"S-Aishvarya"},"content":"end box","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"S-Aishvarya"},"content":"[-\u003e LogicManager : execute(\"list\")","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"S-Aishvarya"},"content":"activate LogicManager","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"S-Aishvarya"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"list\")","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"S-Aishvarya"},"content":"activate AddressBookParser","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"S-Aishvarya"},"content":"create ListCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"S-Aishvarya"},"content":"AddressBookParser -\u003e ListCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"S-Aishvarya"},"content":"activate ListCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"S-Aishvarya"},"content":"ListCommand -\u003e Model : updateFilteredPersonList","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"S-Aishvarya"},"content":"Model -\u003e ListCommand : (patient1, patient2)","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"S-Aishvarya"},"content":"ListCommand --\u003e Model","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"S-Aishvarya"},"content":"Model --\u003e ListCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"S-Aishvarya"},"content":"ListCommand -\u003e Model: deletePerson","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"S-Aishvarya"},"content":"Model --\u003e ListCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"S-Aishvarya"},"content":"ListCommand -\u003e Model: addPerson","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"S-Aishvarya"},"content":"Model --\u003e ListCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"S-Aishvarya"},"content":"ListCommand -\u003e CommandResult: sortedList","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"S-Aishvarya"},"content":"CommandResult --\u003e ListCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"S-Aishvarya"},"content":"deactivate CommandResult","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"S-Aishvarya"},"content":"ListCommand --\u003e LogicManager : r","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"S-Aishvarya"},"content":"deactivate ListCommand","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"S-Aishvarya"},"content":"[\u003c--LogicManager","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"S-Aishvarya"},"content":"deactivate LogicManager","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"S-Aishvarya"},"content":"@enduml","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"S-Aishvarya"},"content":"","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"S-Aishvarya":47}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model as ModelPackage \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-07-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyAddressBook\" as ReadOnlyAddressBook","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyUserPrefs\" as ReadOnlyUserPrefs","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"Class UniquePatientList","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"Class Patient","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"Class DateOfBirth","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"Class Sex","lastModifiedDate":"2024-03-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class I #FFFFFF","lastModifiedDate":"2023-07-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"jeong-jaeho"},"content":"AddressBook *--\u003e \"1\" UniquePatientList","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"jeong-jaeho"},"content":"UniquePatientList --\u003e \"~* all\" Patient","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Name","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Phone","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Email","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Address","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e DateOfBirth","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"Patient *--\u003e Sex","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"jeong-jaeho"},"content":"Patient -[hidden]up--\u003e I","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"jeong-jaeho"},"content":"UniquePatientList -[hidden]right-\u003e I","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"Phone -[hidden]right-\u003e Email","lastModifiedDate":"2024-03-23"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"Email -[hidden]right-\u003e Address","lastModifiedDate":"2024-03-23"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"Address -[hidden]right-\u003e DateOfBirth","lastModifiedDate":"2024-03-23"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"DateOfBirth -[hidden]right-\u003e Sex","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"jeong-jaeho"},"content":"ModelManager --\u003e \"~* filtered\" Patient","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"jskimdev":6,"-":39,"jeong-jaeho":13}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"# MediTrack","lastModifiedDate":"2024-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"[![CI Status](https://github.com/AY2324S2-CS2103T-T14-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103T-T14-2/tp/actions)","lastModifiedDate":"2024-03-06"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103T-T14-2/tp/graph/badge.svg?token\u003dyYHlxxXkJQ)](https://codecov.io/gh/AY2324S2-CS2103T-T14-2/tp)","lastModifiedDate":"2024-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"**MediTrack is a desktop application for managing your patient details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2024-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"* If you are interested in using MediTrack, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2024-03-06"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"* If you are interested about developing MediTrack, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2024-03-06"}],"authorContributionMap":{"-":14,"Vision-2000":7}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Tutorial: Adding a command","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":" * Changes the remark of an existing patient in the address book.","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/add-remark/RemarkClass.puml\" alt\u003d\"The relationship between RemarkCommand and Command\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":71,"author":{"gitId":"jskimdev"},"content":"            + \": Edits the remark of the patient identified \"","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"            + \"by the index number used in the last patient listing. \"","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"jskimdev"},"content":"     * @param index of the patient in the filtered patient list to edit the remark","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"jskimdev"},"content":"     * @param remark of the patient to be updated to","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/add-remark/ParserClass.puml\" alt\u003d\"The relationship between Parser and RemarkCommandParser\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2023-09-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"jskimdev"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of patient data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the patient’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"jskimdev"},"content":"Create a new `Remark` in `seedu.address.model.patient`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2024-03-19"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":236,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"jskimdev"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"Vision-2000"},"content":"Simply add the following to [`seedu.address.ui.PatientCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2024-03-26"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2023-09-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2023-09-12"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"jskimdev"},"content":"public PersonCard(Person patient, int displayedIndex) {","lastModifiedDate":"2024-03-19"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"jskimdev"},"content":"    remark.setText(patient.getRemark().value);","lastModifiedDate":"2024-03-19"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"jskimdev"},"content":"        Person patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-19"},{"lineNumber":348,"author":{"gitId":"jskimdev"},"content":"        Person editedPatient \u003d new Person(","lastModifiedDate":"2024-03-19"},{"lineNumber":349,"author":{"gitId":"jskimdev"},"content":"                patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),","lastModifiedDate":"2024-03-19"},{"lineNumber":350,"author":{"gitId":"jskimdev"},"content":"                patientToEdit.getAddress(), remark, patientToEdit.getTags());","lastModifiedDate":"2024-03-19"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"jskimdev"},"content":"        model.setPerson(patientToEdit, editedPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"jskimdev"},"content":"        return new CommandResult(generateSuccessMessage(editedPatient));","lastModifiedDate":"2024-03-19"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":361,"author":{"gitId":"jskimdev"},"content":"     * {@code patientToEdit}.","lastModifiedDate":"2024-03-19"},{"lineNumber":362,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"jskimdev"},"content":"    private String generateSuccessMessage(Person patientToEdit) {","lastModifiedDate":"2024-03-19"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"jskimdev"},"content":"        return String.format(message, patientToEdit);","lastModifiedDate":"2024-03-19"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":379,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":402,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"jskimdev":19,"-":382,"Vision-2000":1}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Tutorial: Removing Fields","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"success\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003c!-- {:toc} --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.patient.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   \u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"jskimdev"},"content":"  \"patients\": [ {","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"jskimdev":2,"-":113}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Tutorial: Tracing code","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c!-- {:toc} --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ArchitectureDiagram.puml\" alt\u003d\"ArchitectureDiagram\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.address.logic.Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"A quick look at the `seedu.address.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ComponentManagers.puml\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"**Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"   ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"   \u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2023-09-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   \u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"   \u003cpuml src\u003d\"../diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    \u003cpuml src\u003d\"../diagrams/tracing/LogicSequenceDiagram.puml\" alt\u003d\"Tracing an `edit` command through the Logic component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"   ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"jskimdev"},"content":"       Person patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-19"},{"lineNumber":199,"author":{"gitId":"jskimdev"},"content":"       Person editedPatient \u003d createEditedPerson(patientToEdit, editPersonDescriptor);","lastModifiedDate":"2024-03-19"},{"lineNumber":200,"author":{"gitId":"jskimdev"},"content":"       if (!patientToEdit.isSamePerson(editedPatient) \u0026\u0026 model.hasPerson(editedPatient)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":201,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"jskimdev"},"content":"       model.setPerson(patientToEdit, editedPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":204,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"jskimdev"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPatient));","lastModifiedDate":"2024-03-19"},{"lineNumber":206,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"jskimdev"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the patient data.","lastModifiedDate":"2024-03-19"},{"lineNumber":211,"author":{"gitId":"jskimdev"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ patients.\u003cbr\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":212,"author":{"gitId":"jskimdev"},"content":"     FYI, The \u0027filtered list\u0027 is the list of patients resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the patients so that the user can see the edited patient along with all other patients. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":213,"author":{"gitId":"jskimdev"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of patients is being tracked.","lastModifiedDate":"2024-03-19"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     \u003cpuml src\u003d\"../diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":215,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    \u003cpuml src\u003d\"../diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"   \u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"   **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2023-09-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"   \u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"1. As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"jskimdev"},"content":"        patients.addAll(","lastModifiedDate":"2024-03-19"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":255,"author":{"gitId":"-"},"content":"   \u003cpuml src\u003d\"../diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    ```java","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":272,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"jskimdev":10,"-":301}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.storage.JsonPatientListStorage;","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.storage.PatientListStorage;","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    public static final Version VERSION \u003d new Version(1, 2, 1, true);","lastModifiedDate":"2024-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MediTrack ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2023-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"        PatientListStorage patientListStorage \u003d new JsonPatientListStorage(userPrefs.getPatientListFilePath());","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        storage \u003d new StorageManager(patientListStorage, userPrefsStorage);","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s patient list and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"     * The data from the sample patient list will be used instead if {@code storage}\u0027s patient list is not found,","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"     * or an empty patient list will be used instead if errors occur when reading {@code storage}\u0027s patient list.","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        logger.info(\"Using data file : \" + storage.getPatientListFilePath());","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"        Optional\u003cReadOnlyPatientList\u003e patientListOptional;","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        ReadOnlyPatientList initialData;","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"            patientListOptional \u003d storage.readPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"            if (!patientListOptional.isPresent()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"                logger.info(\"Creating a new data file \" + storage.getPatientListFilePath()","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"                        + \" populated with a sample PatientList.\");","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"            initialData \u003d patientListOptional.orElseGet(SampleDataUtil::getSamplePatientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"            logger.warning(\"Data file at \" + storage.getPatientListFilePath() + \" could not be loaded.\"","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"                    + \" Will be starting with an empty PatientList.\");","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"            initialData \u003d new PatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);","lastModifiedDate":"2023-05-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                    + \" Using default config properties.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    + \" Using default preferences.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"Vision-2000"},"content":"        logger.info(\"Starting MediTrack \" + MainApp.VERSION);","lastModifiedDate":"2024-03-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"Vision-2000"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping MediTrack ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2024-03-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":162,"Vision-2000":24}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-05-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-05-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"    private static final String LOG_FILE \u003d \"meditrack.log\";","lastModifiedDate":"2024-03-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger; // logger for this class","lastModifiedDate":"2023-07-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static Logger baseLogger; // to be used as the parent of all other loggers created by this class.","lastModifiedDate":"2023-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // This static block ensures essential loggers are created early","lastModifiedDate":"2023-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2023-07-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        setBaseLogger();","lastModifiedDate":"2023-07-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2023-07-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Initializes loggers with the log level specified in the {@code config} object. Applies to all loggers created","lastModifiedDate":"2023-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * using {@link #getLogger(String)} and {@link #getLogger(Class)} methods except for those that are manually set.","lastModifiedDate":"2023-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        logger.info(\"Log level will be set as: \" + currentLogLevel);","lastModifiedDate":"2023-07-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // set the level of the baseLogger which will be inherited by other loggers","lastModifiedDate":"2023-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        baseLogger.setLevel(currentLogLevel);","lastModifiedDate":"2023-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name prefixed by the {@code baseLogger}\u0027s name so that the created logger","lastModifiedDate":"2023-07-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * becomes a descendant of the {@code baseLogger}. Furthermore, the returned logger will have the same log handlers","lastModifiedDate":"2023-07-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * as the {@code baseLogger}.","lastModifiedDate":"2023-07-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Java organizes loggers into a hierarchy based on their names (using \u0027.\u0027 as a separator, similar to how Java","lastModifiedDate":"2023-07-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // packages form a hierarchy). Furthermore, loggers without a level inherit the level of their parent logger.","lastModifiedDate":"2023-07-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // By prefixing names of all loggers with baseLogger\u0027s name + \".\", we make the baseLogger the parent of all","lastModifiedDate":"2023-07-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // loggers. This allows us to change the level of all loggers simply by changing the baseLogger level.","lastModifiedDate":"2023-07-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(baseLogger.getName() + \".\" + name);","lastModifiedDate":"2023-07-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(true);","lastModifiedDate":"2023-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return logger;","lastModifiedDate":"2023-07-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(clazz);","lastModifiedDate":"2023-05-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Removes all handlers from the {@code logger}.","lastModifiedDate":"2023-07-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"     * Creates a logger named \u0027base\u0027, containing a {@code ConsoleHandler} and a {@code FileHandler}.","lastModifiedDate":"2024-03-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets it as the {@code baseLogger}, to be used as the parent logger of all other loggers.","lastModifiedDate":"2023-07-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static void setBaseLogger() {","lastModifiedDate":"2023-07-19"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"        baseLogger \u003d Logger.getLogger(\"meditrack\");","lastModifiedDate":"2024-03-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        baseLogger.setUseParentHandlers(false);","lastModifiedDate":"2023-07-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        removeHandlers(baseLogger);","lastModifiedDate":"2023-07-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Level.ALL is used as the level for the handlers because the baseLogger filters the log messages by level","lastModifiedDate":"2023-07-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // already; there is no need to control log message level of the handlers.","lastModifiedDate":"2023-07-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // add a ConsoleHandler to log to the console","lastModifiedDate":"2023-07-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2023-07-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(Level.ALL);","lastModifiedDate":"2023-07-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        baseLogger.addHandler(consoleHandler);","lastModifiedDate":"2023-07-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // add a FileHandler to log to a file","lastModifiedDate":"2023-07-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2023-07-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2023-07-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            fileHandler.setLevel(Level.ALL);","lastModifiedDate":"2023-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            baseLogger.addHandler(fileHandler);","lastModifiedDate":"2023-07-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":103,"Vision-2000":3}},{"path":"src/main/java/seedu/address/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},","lastModifiedDate":"2024-03-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":82,"Vision-2000":1}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"     * Returns the PatientList.","lastModifiedDate":"2024-03-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"     * @see seedu.address.model.Model#getPatientList()","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"    ReadOnlyPatientList getPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"    /** Returns an unmodifiable view of the filtered list of patients */","lastModifiedDate":"2024-03-22"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2024-03-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"     * Returns the user prefs\u0027 patient list file path.","lastModifiedDate":"2024-03-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"jskimdev":1,"-":41,"Vision-2000":8}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.parser.InputParser;","lastModifiedDate":"2024-03-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    private final InputParser inputParser;","lastModifiedDate":"2024-03-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        inputParser \u003d new InputParser();","lastModifiedDate":"2024-03-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        Command command \u003d inputParser.parseCommand(commandText);","lastModifiedDate":"2024-03-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"            storage.savePatientList(model.getPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"    public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        return model.getPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2024-03-22"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        return model.getFilteredPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-22"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        return model.getPatientListFilePath();","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"jskimdev":1,"-":75,"Vision-2000":12}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";","lastModifiedDate":"2024-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"     * Formats the {@code patient} for display to the user.","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"    public static String format(Patient patient) {","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"        builder.append(patient.getName())","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"                .append(patient.getPhone())","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"                .append(patient.getEmail())","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"                .append(patient.getAddress())","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"                .append(\"; Date Of birth: \")","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"                .append(patient.getDateOfBirth())","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"                .append(\"; Sex: \")","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"                .append(patient.getSex())","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"                .append(\"; Appointment: \")","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"                .append(patient.getAppointment());","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":8,"-":40,"Vision-2000":7}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATEOFBIRTH;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":" * Adds a patient to the patient list.","lastModifiedDate":"2024-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the list. \"","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"            + PREFIX_DATEOFBIRTH + \"DATE OF BIRTH \"","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"            + PREFIX_SEX + \"Sex \\n\"","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"            + PREFIX_DATEOFBIRTH + \"25/2/2024 \"","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"            + PREFIX_SEX + \"Male\";","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the list\";","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"    private final Patient toAdd;","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"     * Creates an AddCommand to add the specified {@code Patient}","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"    public AddCommand(Patient patient) {","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        if (model.hasPatient(toAdd)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":13,"-":67,"Vision-2000":6}},{"path":"src/main/java/seedu/address/logic/commands/AddVisitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_VISIT;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEVERITY;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import java.util.List;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":" * Adds a visit to a Patient.","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"public class AddVisitCommand extends Command {","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"    public static final String COMMAND_WORD \u003d \"addv\";","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": adds a visit to the specified patient.\\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_DATE_OF_VISIT + \"DATE OF VISIT] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_CONDITION + \"CONDITION] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_SEVERITY + \"SEVERITY] \\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"            + \"OR \"","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_DATE_OF_VISIT + \"DATE OF VISIT] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_CONDITION + \"CONDITION] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_SEVERITY + \"SEVERITY] \\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"            + PREFIX_DATE_OF_VISIT + \"25/2/2024 \"","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"            + PREFIX_CONDITION + \"Mild Fever \"","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"            + PREFIX_SEVERITY + \"Low\";","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New visit added\";","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"Could not find specified patient\";","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_DUPLICATE_VISIT \u003d \"Identical visit already exists for this patient\";","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"    private final Visit toAdd;","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"    private final boolean useIndex;","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"    private Index index;","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"    private Name name;","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"    private Phone phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"     * Creates an add visit command from {@code index}.","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"    public AddVisitCommand(Index index, Visit visit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(index, visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"        this.useIndex \u003d true;","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"        this.toAdd \u003d visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"     * Creates an add visit command from {@code name} and {@code phone}.","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"    public AddVisitCommand(Name name, Phone phone, Visit visit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(name, phone, visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"        this.useIndex \u003d false;","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        this.toAdd \u003d visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"        if (!hasPatient(model)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"        Patient patient \u003d getPatient(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"        if (patient.hasVisit(toAdd)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_VISIT);","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"Vision-2000"},"content":"        patient.addVisit(toAdd);","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"        // Bandaid solution to fix UI not detecting visit changes.","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"        model.deletePatient(patient);","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"        model.addPatient(patient);","lastModifiedDate":"2024-04-03"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"Vision-2000"},"content":"    private boolean hasPatient(Model model) {","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"Vision-2000"},"content":"        if (useIndex) {","lastModifiedDate":"2024-04-03"},{"lineNumber":104,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"        return model.hasPatient(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"Vision-2000"},"content":"    private Patient getPatient(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"Vision-2000"},"content":"        if (useIndex) {","lastModifiedDate":"2024-04-03"},{"lineNumber":111,"author":{"gitId":"Vision-2000"},"content":"            return getPatientFromIndex(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"Vision-2000"},"content":"            return model.getPatient(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":117,"author":{"gitId":"Vision-2000"},"content":"    private Patient getPatientFromIndex(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"Vision-2000"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"Vision-2000"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-04-03"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"        return lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":128,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":129,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":132,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof AddVisitCommand)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":135,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":137,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":138,"author":{"gitId":"Vision-2000"},"content":"        AddVisitCommand otherAddVisitCommand \u003d (AddVisitCommand) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":139,"author":{"gitId":"Vision-2000"},"content":"        return toAdd.equals(otherAddVisitCommand.toAdd)","lastModifiedDate":"2024-04-03"},{"lineNumber":140,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 useIndex \u003d\u003d otherAddVisitCommand.useIndex","lastModifiedDate":"2024-04-03"},{"lineNumber":141,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 index.equals(otherAddVisitCommand.index)","lastModifiedDate":"2024-04-03"},{"lineNumber":142,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 name.equals(otherAddVisitCommand.name)","lastModifiedDate":"2024-04-03"},{"lineNumber":143,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 phone.equals(otherAddVisitCommand.phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":144,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":145,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":148,"author":{"gitId":"Vision-2000"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-04-03"},{"lineNumber":149,"author":{"gitId":"Vision-2000"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2024-04-03"},{"lineNumber":150,"author":{"gitId":"Vision-2000"},"content":"                .add(\"useIndex\", useIndex)","lastModifiedDate":"2024-04-03"},{"lineNumber":151,"author":{"gitId":"Vision-2000"},"content":"                .add(\"index\", index)","lastModifiedDate":"2024-04-03"},{"lineNumber":152,"author":{"gitId":"Vision-2000"},"content":"                .add(\"name\", name)","lastModifiedDate":"2024-04-03"},{"lineNumber":153,"author":{"gitId":"Vision-2000"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2024-04-03"},{"lineNumber":154,"author":{"gitId":"Vision-2000"},"content":"                .toString();","lastModifiedDate":"2024-04-03"},{"lineNumber":155,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":156,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":156}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAllCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":" * Deletes all entries in the patient list.","lastModifiedDate":"2024-03-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"public class DeleteAllCommand extends Command {","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String COMMAND_WORD \u003d \"delete-all\";","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String CONFIRMATION \u003d","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"            \"Are you sure you want to delete all?\"","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"                    + \"\\nThis action is irreversible.\"","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"                    + \"\\nIf yes, enter ‘yes’. If not, simply enter \u0027no\u0027.\";","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"        return new CommandResult(CONFIRMATION);","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":14,"jeong-jaeho":14,"Vision-2000":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteByIndexCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":" * Deletes a patient identified using it\u0027s displayed index from the patient list","lastModifiedDate":"2024-03-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"public class DeleteByIndexCommand extends Command {","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\"","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"jeong-jaeho"},"content":"    public DeleteByIndexCommand(Index targetIndex) {","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        model.deletePatient(patientToDelete);","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, Messages.format(patientToDelete)));","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"jeong-jaeho"},"content":"        if (!(other instanceof DeleteByIndexCommand)) {","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand otherDeleteByIndexCommand \u003d (DeleteByIndexCommand) other;","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"jeong-jaeho"},"content":"        return targetIndex.equals(otherDeleteByIndexCommand.targetIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":3,"-":54,"jeong-jaeho":5,"Vision-2000":6}},{"path":"src/main/java/seedu/address/logic/commands/DeleteByNamePhoneNumberCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jeong-jaeho"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"jeong-jaeho"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"jeong-jaeho"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.parser.InputParser;","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":" * Deletes a patient identified using name and phone number.","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"public class DeleteByNamePhoneNumberCommand extends Command {","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String COMMAND_WORD \u003d \"delete-p\";","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"            + \": Deletes the patient identified by the specified name and phone number.\\n\"","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"            + \"Command format: delete-p n/\u003cPatient Name\u003e p/\u003cPhone number\u003e\\n\"","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"            + \"n/Eugene Hirose p/90807561\";","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String DELETE_PATIENT_SUCCESS_MESSAGE \u003d \"Successfully deleted patient %1$s\u0027s data\";","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"jeong-jaeho"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(InputParser.class);","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"jeong-jaeho"},"content":"    private final Name name;","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"jeong-jaeho"},"content":"    private final Phone phone;","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"jeong-jaeho"},"content":"     * Constructor for DeleteByNamePhoneNumberCommand.","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"jeong-jaeho"},"content":"     * @param name Name of the patient to be deleted.","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"jeong-jaeho"},"content":"     * @param phone Phone number of the patient to be deleted.","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"jeong-jaeho"},"content":"    public DeleteByNamePhoneNumberCommand(Name name, Phone phone) {","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"jeong-jaeho"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"jeong-jaeho"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"jeong-jaeho"},"content":"     * Executes the command.","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"jeong-jaeho"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"jeong-jaeho"},"content":"     * @return {@code CommandResult} of the command.","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"jeong-jaeho"},"content":"     * @throws CommandException Exception thrown if the command fails.","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"jeong-jaeho"},"content":"    @Override","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"jeong-jaeho"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"jeong-jaeho"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"jeong-jaeho"},"content":"        Patient patientToBeDeleted \u003d model.getPatient(name, phone);","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"jeong-jaeho"},"content":"        logger.fine(\"checkpoint\");","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"jeong-jaeho"},"content":"        if (patientToBeDeleted \u003d\u003d null) {","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"jeong-jaeho"},"content":"            throw new CommandException(String.format(\"There is no patient with name %s and phone number %s\",","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"jeong-jaeho"},"content":"                    name, phone));","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"jeong-jaeho"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"jeong-jaeho"},"content":"        model.deletePatient(patientToBeDeleted);","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"jeong-jaeho"},"content":"        return new CommandResult(String.format(DELETE_PATIENT_SUCCESS_MESSAGE, patientToBeDeleted.getName()));","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"jeong-jaeho"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"jeong-jaeho":68}},{"path":"src/main/java/seedu/address/logic/commands/DeleteVisitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import java.util.List;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":" * Deletes the last visit from a Patient.","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"public class DeleteVisitCommand extends Command {","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"    public static final String COMMAND_WORD \u003d \"deletev\";","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": deletes the latest visit from the specified patient.\\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"            + \"Parameters: INDEX (must be a positive integer) \\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"            + \"OR \"","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Visit deleted\";","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"Could not find specified patient\";","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_NO_VISIT \u003d \"This patient does not have a visit to delete\";","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"    private final boolean useIndex;","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"    private Index index;","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    private Name name;","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"    private Phone phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"     * Creates a delete visit command from {@code index}.","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"    public DeleteVisitCommand(Index index) {","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(index);","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"        this.useIndex \u003d true;","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"     * Creates a delete visit command from {@code name} and {@code phone}.","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"    public DeleteVisitCommand(Name name, Phone phone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"        this.useIndex \u003d false;","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"        if (!hasPatient(model)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"        Patient patient \u003d getPatient(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"        if (patient.getVisits().isEmpty()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_NO_VISIT);","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        patient.removeVisit(patient.getLatestVisit());","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        // Bandaid solution to fix UI not detecting visit changes.","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"        model.deletePatient(patient);","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"        model.addPatient(patient);","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-04-03"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"    private boolean hasPatient(Model model) {","lastModifiedDate":"2024-04-03"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"        if (useIndex) {","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"        return model.hasPatient(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"    private Patient getPatient(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"        if (useIndex) {","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"            return getPatientFromIndex(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"            return model.getPatient(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"    private Patient getPatientFromIndex(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"Vision-2000"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":104,"author":{"gitId":"Vision-2000"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"Vision-2000"},"content":"        return lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":111,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":117,"author":{"gitId":"Vision-2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof DeleteVisitCommand)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"        DeleteVisitCommand otherDeleteVisitCommand \u003d (DeleteVisitCommand) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"Vision-2000"},"content":"        return useIndex \u003d\u003d otherDeleteVisitCommand.useIndex","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 index.equals(otherDeleteVisitCommand.index)","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 name.equals(otherDeleteVisitCommand.name)","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 phone.equals(otherDeleteVisitCommand.phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":128,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":129,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"Vision-2000"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-04-03"},{"lineNumber":132,"author":{"gitId":"Vision-2000"},"content":"                .add(\"useIndex\", useIndex)","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"                .add(\"index\", index)","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"Vision-2000"},"content":"                .add(\"name\", name)","lastModifiedDate":"2024-04-03"},{"lineNumber":135,"author":{"gitId":"Vision-2000"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"Vision-2000"},"content":"                .toString();","lastModifiedDate":"2024-04-03"},{"lineNumber":137,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":138,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":138}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATEOFBIRTH;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.DateOfBirth;","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":" * Edits the details of an existing patient in the patient list.","lastModifiedDate":"2024-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \"","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"            + \"by the index number used in the displayed patient list. \"","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"            + \"[\" + PREFIX_DATEOFBIRTH + \"DATEOFBIRTH] \"","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"            + \"[\" + PREFIX_SEX + \"SEX] \"","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"            + \"[\" + PREFIX_APPOINTMENT + \"APPOINTMENT] \\n\"","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the list.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"    private final EditPatientDescriptor editPatientDescriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"     * @param index of the patient in the filtered patient list to edit","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"     * @param editPatientDescriptor details to edit the patient with","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(editPatientDescriptor);","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":70,"author":{"gitId":"jskimdev"},"content":"        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"jskimdev"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, Messages.format(editedPatient)));","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"jskimdev"},"content":"     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"     * edited with {@code editPatientDescriptor}.","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"jskimdev"},"content":"        assert patientToEdit !\u003d null;","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"jskimdev"},"content":"        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"jskimdev"},"content":"        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"jskimdev"},"content":"        Email updatedEmail \u003d editPatientDescriptor.getEmail().orElse(patientToEdit.getEmail());","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"jskimdev"},"content":"        Address updatedAddress \u003d editPatientDescriptor.getAddress().orElse(patientToEdit.getAddress());","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"jskimdev"},"content":"        DateOfBirth updatedDateOfBirth \u003d editPatientDescriptor.getDateOfBirth().orElse(patientToEdit.getDateOfBirth());","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"jskimdev"},"content":"        Sex updatedSex \u003d editPatientDescriptor.getSex().orElse(patientToEdit.getSex());","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"jskimdev"},"content":"        Appointment updatedAppointment \u003d editPatientDescriptor.getAppointment().orElse(patientToEdit.getAppointment());","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":109,"author":{"gitId":"jskimdev"},"content":"        return new Patient(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedDateOfBirth, updatedSex,","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"jskimdev"},"content":"                updatedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":126,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 editPatientDescriptor.equals(otherEditCommand.editPatientDescriptor);","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"                .add(\"editPatientDescriptor\", editPatientDescriptor)","lastModifiedDate":"2024-03-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"jskimdev"},"content":"     * Stores the details to edit the patient with. Each non-empty field value will replace the","lastModifiedDate":"2024-03-19"},{"lineNumber":139,"author":{"gitId":"jskimdev"},"content":"     * corresponding field value of the patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"jskimdev"},"content":"    public static class EditPatientDescriptor {","lastModifiedDate":"2024-03-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":146,"author":{"gitId":"jskimdev"},"content":"        private DateOfBirth dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":147,"author":{"gitId":"jskimdev"},"content":"        private Sex sex;","lastModifiedDate":"2024-03-18"},{"lineNumber":148,"author":{"gitId":"jskimdev"},"content":"        private Appointment appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"jskimdev"},"content":"        public EditPatientDescriptor() {}","lastModifiedDate":"2024-03-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":155,"author":{"gitId":"jskimdev"},"content":"        public EditPatientDescriptor(EditPatientDescriptor toCopy) {","lastModifiedDate":"2024-03-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":160,"author":{"gitId":"jskimdev"},"content":"            setDateOfBirth(toCopy.dateOfBirth);","lastModifiedDate":"2024-03-17"},{"lineNumber":161,"author":{"gitId":"jskimdev"},"content":"            setSex(toCopy.sex);","lastModifiedDate":"2024-03-18"},{"lineNumber":162,"author":{"gitId":"jskimdev"},"content":"            setAppointment(toCopy.appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"jskimdev"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, dateOfBirth, sex, appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"jskimdev"},"content":"        public void setDateOfBirth(DateOfBirth dateOfBirth) {","lastModifiedDate":"2024-03-17"},{"lineNumber":205,"author":{"gitId":"jskimdev"},"content":"            this.dateOfBirth \u003d dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":208,"author":{"gitId":"jskimdev"},"content":"        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {","lastModifiedDate":"2024-03-17"},{"lineNumber":209,"author":{"gitId":"jskimdev"},"content":"            return Optional.ofNullable(dateOfBirth);","lastModifiedDate":"2024-03-17"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"jskimdev"},"content":"        public void setSex(Sex sex) {","lastModifiedDate":"2024-03-18"},{"lineNumber":213,"author":{"gitId":"jskimdev"},"content":"            this.sex \u003d sex;","lastModifiedDate":"2024-03-18"},{"lineNumber":214,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":215,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":216,"author":{"gitId":"jskimdev"},"content":"        public Optional\u003cSex\u003e getSex() {","lastModifiedDate":"2024-03-18"},{"lineNumber":217,"author":{"gitId":"jskimdev"},"content":"            return Optional.ofNullable(sex);","lastModifiedDate":"2024-03-18"},{"lineNumber":218,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":219,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":220,"author":{"gitId":"Vision-2000"},"content":"        public void setAppointment(Appointment appointment) {","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"Vision-2000"},"content":"            this.appointment \u003d appointment;","lastModifiedDate":"2024-04-03"},{"lineNumber":222,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":223,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":224,"author":{"gitId":"Vision-2000"},"content":"        public Optional\u003cAppointment\u003e getAppointment() {","lastModifiedDate":"2024-04-03"},{"lineNumber":225,"author":{"gitId":"Vision-2000"},"content":"            return Optional.ofNullable(appointment);","lastModifiedDate":"2024-04-03"},{"lineNumber":226,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":234,"author":{"gitId":"jskimdev"},"content":"            if (!(other instanceof EditPatientDescriptor)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":238,"author":{"gitId":"jskimdev"},"content":"            EditPatientDescriptor otherEditPatientDescriptor \u003d (EditPatientDescriptor) other;","lastModifiedDate":"2024-03-19"},{"lineNumber":239,"author":{"gitId":"jskimdev"},"content":"            return Objects.equals(name, otherEditPatientDescriptor.name)","lastModifiedDate":"2024-03-19"},{"lineNumber":240,"author":{"gitId":"jskimdev"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPatientDescriptor.phone)","lastModifiedDate":"2024-03-19"},{"lineNumber":241,"author":{"gitId":"jskimdev"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPatientDescriptor.email)","lastModifiedDate":"2024-03-19"},{"lineNumber":242,"author":{"gitId":"jskimdev"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPatientDescriptor.address)","lastModifiedDate":"2024-03-19"},{"lineNumber":243,"author":{"gitId":"jskimdev"},"content":"                    \u0026\u0026 Objects.equals(dateOfBirth, otherEditPatientDescriptor.dateOfBirth)","lastModifiedDate":"2024-03-19"},{"lineNumber":244,"author":{"gitId":"jskimdev"},"content":"                    \u0026\u0026 Objects.equals(sex, otherEditPatientDescriptor.sex)","lastModifiedDate":"2024-04-02"},{"lineNumber":245,"author":{"gitId":"jskimdev"},"content":"                    \u0026\u0026 Objects.equals(appointment, otherEditPatientDescriptor.appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":255,"author":{"gitId":"jskimdev"},"content":"                    .add(\"date of birth\", dateOfBirth)","lastModifiedDate":"2024-03-17"},{"lineNumber":256,"author":{"gitId":"jskimdev"},"content":"                    .add(\"sex\", sex)","lastModifiedDate":"2024-03-18"},{"lineNumber":257,"author":{"gitId":"jskimdev"},"content":"                    .add(\"appointment\", appointment)","lastModifiedDate":"2024-04-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"jskimdev":72,"-":168,"Vision-2000":21}},{"path":"src/main/java/seedu/address/logic/commands/EditVisitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_VISIT;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEVERITY;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import java.util.List;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import java.util.Objects;","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import java.util.Optional;","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.DateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":" * Edits the latest visit from a Patient.","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"public class EditVisitCommand extends Command {","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    public static final String COMMAND_WORD \u003d \"editv\";","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": edits the latest visit from the specified patient.\\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_DATE_OF_VISIT + \"DATE OF VISIT] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_CONDITION + \"CONDITION] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_SEVERITY + \"SEVERITY] \\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"            + \"OR \"","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_DATE_OF_VISIT + \"DATE OF VISIT] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_CONDITION + \"CONDITION] \"","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_SEVERITY + \"SEVERITY] \\n\"","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"            + PREFIX_DATE_OF_VISIT + \"25/2/2024 \"","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"            + PREFIX_CONDITION + \"High Fever \"","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"            + PREFIX_SEVERITY + \"High\";;","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Visit edited\";","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"Could not find specified patient\";","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_NO_VISIT \u003d \"This patient does not have a visit to edit\";","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_DUPLICATE_VISIT \u003d \"Identical visit already exists for this patient\";","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"    private final EditVisitDescriptor editVisitDescriptor;","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"    private final boolean useIndex;","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"    private Index index;","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"    private Name name;","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"    private Phone phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"     * Creates an edit visit command from {@code index}.","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"    public EditVisitCommand(Index index, EditVisitDescriptor editVisitDescriptor) {","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(index, editVisitDescriptor);","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"        this.useIndex \u003d true;","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"        this.editVisitDescriptor \u003d editVisitDescriptor;","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"     * Creates an edit visit command from {@code name} and {@code phone}.","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"    public EditVisitCommand(Name name, Phone phone, EditVisitDescriptor editVisitDescriptor) {","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(name, phone, editVisitDescriptor);","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"        this.useIndex \u003d false;","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"        this.editVisitDescriptor \u003d editVisitDescriptor;","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"        if (!hasPatient(model)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"        Patient patient \u003d getPatient(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"        if (patient.getVisits().isEmpty()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_NO_VISIT);","lastModifiedDate":"2024-04-03"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"        Visit visitToEdit \u003d patient.getLatestVisit();","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"        Visit editedVisit \u003d createEditedVisit(visitToEdit, editVisitDescriptor);","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"Vision-2000"},"content":"        if (!visitToEdit.equals(editedVisit) \u0026\u0026 patient.hasVisit(editedVisit)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":104,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_VISIT);","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"Vision-2000"},"content":"        patient.setVisit(visitToEdit, editedVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"Vision-2000"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"Vision-2000"},"content":"        // Bandaid solution to fix UI not detecting visit changes.","lastModifiedDate":"2024-04-03"},{"lineNumber":111,"author":{"gitId":"Vision-2000"},"content":"        model.deletePatient(patient);","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"Vision-2000"},"content":"        model.addPatient(patient);","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"Vision-2000"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":117,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"Vision-2000"},"content":"     * Creates and returns a {@code Visit} with the details of {@code visitToEdit}","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"     * edited with {@code editVisitDescriptor}.","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"Vision-2000"},"content":"    private static Visit createEditedVisit(Visit visitToEdit, EditVisitDescriptor editVisitDescriptor) {","lastModifiedDate":"2024-04-03"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"        assert visitToEdit !\u003d null;","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"        Condition updatedCondition \u003d editVisitDescriptor.getCondition().orElse(visitToEdit.getCondition());","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"Vision-2000"},"content":"        Severity updatedSeverity \u003d editVisitDescriptor.getSeverity().orElse(visitToEdit.getSeverity());","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"Vision-2000"},"content":"        DateOfVisit updatedDateOfVisit \u003d editVisitDescriptor.getDateOfVisit().orElse(visitToEdit.getDateOfVisit());","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":128,"author":{"gitId":"Vision-2000"},"content":"        return new Visit(updatedCondition, updatedSeverity, updatedDateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":129,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"Vision-2000"},"content":"    private boolean hasPatient(Model model) {","lastModifiedDate":"2024-04-03"},{"lineNumber":132,"author":{"gitId":"Vision-2000"},"content":"        if (useIndex) {","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":135,"author":{"gitId":"Vision-2000"},"content":"        return model.hasPatient(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":137,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":138,"author":{"gitId":"Vision-2000"},"content":"    private Patient getPatient(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":139,"author":{"gitId":"Vision-2000"},"content":"        if (useIndex) {","lastModifiedDate":"2024-04-03"},{"lineNumber":140,"author":{"gitId":"Vision-2000"},"content":"            return getPatientFromIndex(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":141,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":142,"author":{"gitId":"Vision-2000"},"content":"            return model.getPatient(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":143,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":144,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":145,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"Vision-2000"},"content":"    private Patient getPatientFromIndex(Model model) throws CommandException {","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"Vision-2000"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2024-04-03"},{"lineNumber":148,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":149,"author":{"gitId":"Vision-2000"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":150,"author":{"gitId":"Vision-2000"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-04-03"},{"lineNumber":151,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":152,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":153,"author":{"gitId":"Vision-2000"},"content":"        return lastShownList.get(index.getZeroBased());","lastModifiedDate":"2024-04-03"},{"lineNumber":154,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":155,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":156,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":157,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":158,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":159,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":160,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":161,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":162,"author":{"gitId":"Vision-2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":163,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof EditVisitCommand)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":164,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":165,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":166,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":167,"author":{"gitId":"Vision-2000"},"content":"        EditVisitCommand otherEditVisitCommand \u003d (EditVisitCommand) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"Vision-2000"},"content":"        return useIndex \u003d\u003d otherEditVisitCommand.useIndex","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 editVisitDescriptor.equals(otherEditVisitCommand.editVisitDescriptor)","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 index.equals(otherEditVisitCommand.index)","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 name.equals(otherEditVisitCommand.name)","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 phone.equals(otherEditVisitCommand.phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":173,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":174,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":175,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":176,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":177,"author":{"gitId":"Vision-2000"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-04-03"},{"lineNumber":178,"author":{"gitId":"Vision-2000"},"content":"                .add(\"editVisitDescriptor\", editVisitDescriptor)","lastModifiedDate":"2024-04-03"},{"lineNumber":179,"author":{"gitId":"Vision-2000"},"content":"                .add(\"useIndex\", useIndex)","lastModifiedDate":"2024-04-03"},{"lineNumber":180,"author":{"gitId":"Vision-2000"},"content":"                .add(\"index\", index)","lastModifiedDate":"2024-04-03"},{"lineNumber":181,"author":{"gitId":"Vision-2000"},"content":"                .add(\"name\", name)","lastModifiedDate":"2024-04-03"},{"lineNumber":182,"author":{"gitId":"Vision-2000"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2024-04-03"},{"lineNumber":183,"author":{"gitId":"Vision-2000"},"content":"                .toString();","lastModifiedDate":"2024-04-03"},{"lineNumber":184,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":185,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":186,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":187,"author":{"gitId":"Vision-2000"},"content":"     * Stores the details to edit the visit with. Each non-empty field value will replace the","lastModifiedDate":"2024-04-03"},{"lineNumber":188,"author":{"gitId":"Vision-2000"},"content":"     * corresponding field value of the visit.","lastModifiedDate":"2024-04-03"},{"lineNumber":189,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":190,"author":{"gitId":"Vision-2000"},"content":"    public static class EditVisitDescriptor {","lastModifiedDate":"2024-04-03"},{"lineNumber":191,"author":{"gitId":"Vision-2000"},"content":"        private Condition condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":192,"author":{"gitId":"Vision-2000"},"content":"        private Severity severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":193,"author":{"gitId":"Vision-2000"},"content":"        private DateOfVisit dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":194,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":195,"author":{"gitId":"Vision-2000"},"content":"        public EditVisitDescriptor() {};","lastModifiedDate":"2024-04-03"},{"lineNumber":196,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":197,"author":{"gitId":"Vision-2000"},"content":"        /**","lastModifiedDate":"2024-04-03"},{"lineNumber":198,"author":{"gitId":"Vision-2000"},"content":"         * Copy constructor.","lastModifiedDate":"2024-04-03"},{"lineNumber":199,"author":{"gitId":"Vision-2000"},"content":"         */","lastModifiedDate":"2024-04-03"},{"lineNumber":200,"author":{"gitId":"Vision-2000"},"content":"        public EditVisitDescriptor(EditVisitCommand.EditVisitDescriptor toCopy) {","lastModifiedDate":"2024-04-03"},{"lineNumber":201,"author":{"gitId":"Vision-2000"},"content":"            setCondition(toCopy.condition);","lastModifiedDate":"2024-04-03"},{"lineNumber":202,"author":{"gitId":"Vision-2000"},"content":"            setSeverity(toCopy.severity);","lastModifiedDate":"2024-04-03"},{"lineNumber":203,"author":{"gitId":"Vision-2000"},"content":"            setDateOfVisit(toCopy.dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":204,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":205,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":206,"author":{"gitId":"Vision-2000"},"content":"        /**","lastModifiedDate":"2024-04-03"},{"lineNumber":207,"author":{"gitId":"Vision-2000"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2024-04-03"},{"lineNumber":208,"author":{"gitId":"Vision-2000"},"content":"         */","lastModifiedDate":"2024-04-03"},{"lineNumber":209,"author":{"gitId":"Vision-2000"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2024-04-03"},{"lineNumber":210,"author":{"gitId":"Vision-2000"},"content":"            return CollectionUtil.isAnyNonNull(condition, severity, dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":211,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":212,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":213,"author":{"gitId":"Vision-2000"},"content":"        public void setCondition(Condition condition) {","lastModifiedDate":"2024-04-03"},{"lineNumber":214,"author":{"gitId":"Vision-2000"},"content":"            this.condition \u003d condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":215,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":216,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":217,"author":{"gitId":"Vision-2000"},"content":"        public Optional\u003cCondition\u003e getCondition() {","lastModifiedDate":"2024-04-03"},{"lineNumber":218,"author":{"gitId":"Vision-2000"},"content":"            return Optional.ofNullable(condition);","lastModifiedDate":"2024-04-03"},{"lineNumber":219,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":220,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"Vision-2000"},"content":"        public void setDateOfVisit(DateOfVisit dateOfVisit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":222,"author":{"gitId":"Vision-2000"},"content":"            this.dateOfVisit \u003d dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":223,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":224,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":225,"author":{"gitId":"Vision-2000"},"content":"        public Optional\u003cDateOfVisit\u003e getDateOfVisit() {","lastModifiedDate":"2024-04-03"},{"lineNumber":226,"author":{"gitId":"Vision-2000"},"content":"            return Optional.ofNullable(dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":227,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":228,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":229,"author":{"gitId":"Vision-2000"},"content":"        public void setSeverity(Severity severity) {","lastModifiedDate":"2024-04-03"},{"lineNumber":230,"author":{"gitId":"Vision-2000"},"content":"            this.severity \u003d severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":231,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":232,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":233,"author":{"gitId":"Vision-2000"},"content":"        public Optional\u003cSeverity\u003e getSeverity() {","lastModifiedDate":"2024-04-03"},{"lineNumber":234,"author":{"gitId":"Vision-2000"},"content":"            return Optional.ofNullable(severity);","lastModifiedDate":"2024-04-03"},{"lineNumber":235,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":236,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":237,"author":{"gitId":"Vision-2000"},"content":"        @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":238,"author":{"gitId":"Vision-2000"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":239,"author":{"gitId":"Vision-2000"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":240,"author":{"gitId":"Vision-2000"},"content":"                return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":241,"author":{"gitId":"Vision-2000"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":242,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":243,"author":{"gitId":"Vision-2000"},"content":"            // instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":244,"author":{"gitId":"Vision-2000"},"content":"            if (!(other instanceof EditVisitCommand.EditVisitDescriptor)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":245,"author":{"gitId":"Vision-2000"},"content":"                return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":246,"author":{"gitId":"Vision-2000"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":247,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":248,"author":{"gitId":"Vision-2000"},"content":"            EditVisitCommand.EditVisitDescriptor otherEditVisitDescriptor \u003d","lastModifiedDate":"2024-04-03"},{"lineNumber":249,"author":{"gitId":"Vision-2000"},"content":"                    (EditVisitCommand.EditVisitDescriptor) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":250,"author":{"gitId":"Vision-2000"},"content":"            return Objects.equals(condition, otherEditVisitDescriptor.condition)","lastModifiedDate":"2024-04-03"},{"lineNumber":251,"author":{"gitId":"Vision-2000"},"content":"                    \u0026\u0026 Objects.equals(severity, otherEditVisitDescriptor.severity)","lastModifiedDate":"2024-04-03"},{"lineNumber":252,"author":{"gitId":"Vision-2000"},"content":"                    \u0026\u0026 Objects.equals(dateOfVisit, otherEditVisitDescriptor.dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":253,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":254,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":255,"author":{"gitId":"Vision-2000"},"content":"        @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":256,"author":{"gitId":"Vision-2000"},"content":"        public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":257,"author":{"gitId":"Vision-2000"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2024-04-03"},{"lineNumber":258,"author":{"gitId":"Vision-2000"},"content":"                    .add(\"condition\", condition)","lastModifiedDate":"2024-04-03"},{"lineNumber":259,"author":{"gitId":"Vision-2000"},"content":"                    .add(\"severity\", severity)","lastModifiedDate":"2024-04-03"},{"lineNumber":260,"author":{"gitId":"Vision-2000"},"content":"                    .add(\"dateOfVisit\", dateOfVisit)","lastModifiedDate":"2024-04-03"},{"lineNumber":261,"author":{"gitId":"Vision-2000"},"content":"                    .toString();","lastModifiedDate":"2024-04-03"},{"lineNumber":262,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":263,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":264,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":264}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"jeong-jaeho"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String CONFIRMATION \u003d \"Would you like to exit the application? Enter \u0027yes\u0027 or \u0027no\u0027.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"        return new CommandResult(CONFIRMATION);","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"-":16,"jeong-jaeho":5}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":" * Finds and lists all patients whose name or phone number matches any of the argument inputs.","lastModifiedDate":"2024-03-22"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":" * Name matching is case insensitive.","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names or phone numbers \"","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"            + \"matches any of the inputs (case-insensitive for names) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"            + \"Parameters: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_NAME + \"KEYWORD] \"","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"            + PREFIX_NAME + \"alice \"","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"            + PREFIX_PHONE + \"91234567\";","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    private final Predicate\u003cPatient\u003e namePredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"    private final Predicate\u003cPatient\u003e phonePredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"     * @param namePredicate condition patient name must meet","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"     * @param phonePredicate condition patient phone must meet","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"    public FindCommand(Predicate\u003cPatient\u003e namePredicate, Predicate\u003cPatient\u003e phonePredicate) {","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        this.namePredicate \u003d namePredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"        this.phonePredicate \u003d phonePredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        model.updateFilteredPatientList(namePredicate.and(phonePredicate));","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"                String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"        return namePredicate.equals(otherFindCommand.namePredicate)","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 phonePredicate.equals(otherFindCommand.phonePredicate);","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"                .add(\"namePredicate\", namePredicate)","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"                .add(\"phonePredicate\", phonePredicate)","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"-":44,"Vision-2000":34}},{"path":"src/main/java/seedu/address/logic/commands/ForceDeleteAllCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jeong-jaeho"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"jeong-jaeho"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"jeong-jaeho"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":" * Deletes all patients in the patient list forcefully.","lastModifiedDate":"2024-03-29"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"public class ForceDeleteAllCommand extends Command {","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String COMMAND_WORD \u003d \"delete-all-f\";","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully deleted all data\";","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"        model.setPatientList(new PatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"jeong-jaeho"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"jeong-jaeho":25,"Vision-2000":3}},{"path":"src/main/java/seedu/address/logic/commands/ForceExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jeong-jaeho"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"jeong-jaeho"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":" * Forcefully terminates the program without confirmation check.","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"jeong-jaeho"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"jeong-jaeho"},"content":"public class ForceExitCommand extends Command {","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String COMMAND_WORD \u003d \"exit-f\";","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MediTrack as requested!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"    @Override","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"jeong-jaeho":17}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the link to the user guide.\\n\"","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String RESULT_MESSAGE \u003d \"Successfully opened help window. \"","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"            + \"\\nAccess the user guide to see all the usable commands.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"        return new CommandResult(RESULT_MESSAGE, true, false);","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":18,"jeong-jaeho":4}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"S-Aishvarya"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"S-Aishvarya"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"S-Aishvarya"},"content":"import java.util.List;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"S-Aishvarya"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":" * Lists all patients in the patient list to the user.","lastModifiedDate":"2024-03-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"S-Aishvarya"},"content":"        List\u003cPatient\u003e sortedList \u003d new ArrayList\u003cPatient\u003e();","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"        sortedList.addAll(model.getFilteredPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"S-Aishvarya"},"content":"        Comparator\u003cPatient\u003e comparator \u003d (patient1, patient2) -\u003e {","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"S-Aishvarya"},"content":"            return patient1.getName().fullName.compareTo(patient2.getName().fullName);","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"S-Aishvarya"},"content":"        };","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"S-Aishvarya"},"content":"        sortedList.sort(comparator);","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"S-Aishvarya"},"content":"        for (Patient patient : sortedList) {","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"            model.deletePatient(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"S-Aishvarya"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"S-Aishvarya"},"content":"        for (Patient patient : sortedList) {","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"            model.addPatient(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"S-Aishvarya"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"S-Aishvarya":13,"-":21,"Vision-2000":7}},{"path":"src/main/java/seedu/address/logic/commands/NoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jeong-jaeho"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"jeong-jaeho"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"jeong-jaeho"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"jeong-jaeho"},"content":" * No command, do nothing.","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"public class NoCommand extends Command {","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String COMMAND_WORD \u003d \"no\";","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"        return new CommandResult(\"\");","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"jeong-jaeho":24}},{"path":"src/main/java/seedu/address/logic/commands/YesCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jeong-jaeho"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"jeong-jaeho"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"jeong-jaeho"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":" * Yes command for \u0027delete-all\u0027 command, force delete all entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"public class YesCommand extends Command {","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String COMMAND_WORD \u003d \"yes\";","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String DELETE_MESSAGE_SUCCESS \u003d \"Successfully deleted all data\";","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"    public static final String EXIT_MESSAGE_SUCCESS \u003d \"Successfully exited the application\";","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"    private String previousCommand;","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"     * Constructor for YesCommand.","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"     * @param previousCommand The previous command that was executed.","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"    public YesCommand(String previousCommand) {","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"        super();","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"        this.previousCommand \u003d previousCommand;","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"jeong-jaeho"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"jeong-jaeho"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"jeong-jaeho"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"jeong-jaeho"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"jeong-jaeho"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"jeong-jaeho"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"jeong-jaeho"},"content":"        if (this.previousCommand.equals(\"delete-all\")) {","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"jeong-jaeho"},"content":"            model.setPatientList(new PatientList());","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"jeong-jaeho"},"content":"            return new CommandResult(DELETE_MESSAGE_SUCCESS);","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"jeong-jaeho"},"content":"        } else if (this.previousCommand.equals(\"exit\")) {","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"jeong-jaeho"},"content":"            return new CommandResult(EXIT_MESSAGE_SUCCESS, false, true);","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"jeong-jaeho"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"            return new CommandResult(\"\");","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"jeong-jaeho"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"jeong-jaeho"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"jeong-jaeho":49}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands.exceptions;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"-":17,"Vision-2000":2}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATEOFBIRTH;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.DateOfBirth;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"                        PREFIX_DATEOFBIRTH, PREFIX_SEX);","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"                PREFIX_DATEOFBIRTH, PREFIX_SEX)","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"                PREFIX_DATEOFBIRTH, PREFIX_SEX);","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATEOFBIRTH).get());","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"        Sex sex \u003d ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get());","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"        Patient patient \u003d new Patient(name, phone, email, address, dateOfBirth, sex, new Appointment(\"\"));","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"        return new AddCommand(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"jskimdev":20,"-":47}},{"path":"src/main/java/seedu/address/logic/parser/AddVisitCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_VISIT;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEVERITY;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.AddVisitCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.DateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":" * Parses input arguments and creates a new AddVisitCommand object","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"public class AddVisitCommandParser implements Parser\u003cAddVisitCommand\u003e {","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"     * Parses the given {@code String} of arguments in the context of the AddVisitCommand","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"     * and returns an AddVisitCommand object for execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"    public AddVisitCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_DATE_OF_VISIT, PREFIX_CONDITION,","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"                        PREFIX_SEVERITY);","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_DATE_OF_VISIT, PREFIX_CONDITION,","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"                PREFIX_SEVERITY);","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE_OF_VISIT, PREFIX_CONDITION, PREFIX_SEVERITY)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"        DateOfVisit dateOfVisit \u003d ParserUtil.parseDateOfVisit(argMultimap.getValue(PREFIX_DATE_OF_VISIT).get());","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        Severity severity \u003d ParserUtil.parseSeverity(argMultimap.getValue(PREFIX_SEVERITY).get());","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"        Condition condition \u003d ParserUtil.parseCondition(argMultimap.getValue(PREFIX_CONDITION).get());","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        Visit visit \u003d new Visit(condition, severity, dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE) \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"            return commandFromIndex(argMultimap.getPreamble(), visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"        } else if (argMultimap.getPreamble().isEmpty() \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"            return commandFromPrefixes(argMultimap.getValue(PREFIX_NAME).get(),","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"                    argMultimap.getValue(PREFIX_PHONE).get(), visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"    private AddVisitCommand commandFromIndex(String arg, Visit visit) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        Index index;","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"        try {","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"            index \u003d ParserUtil.parseIndex(arg);","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        return new AddVisitCommand(index, visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"    private AddVisitCommand commandFromPrefixes(String nameArg, String phoneArg, Visit visit) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"        Name name \u003d ParserUtil.parseName(nameArg);","lastModifiedDate":"2024-04-03"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"        Phone phone \u003d ParserUtil.parsePhone(phoneArg);","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"        return new AddVisitCommand(name, phone, visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":88}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-07-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if {@code flag} exists.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    public boolean hasFlag(Flag flag) {","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        return argMultimap.containsKey(flag);","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Throws a {@code ParseException} if any of the prefixes given in {@code prefixes} appeared more than","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * once among the arguments.","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void verifyNoDuplicatePrefixesFor(Prefix... prefixes) throws ParseException {","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Prefix[] duplicatedPrefixes \u003d Stream.of(prefixes).distinct()","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .filter(prefix -\u003e argMultimap.containsKey(prefix) \u0026\u0026 argMultimap.get(prefix).size() \u003e 1)","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .toArray(Prefix[]::new);","lastModifiedDate":"2023-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (duplicatedPrefixes.length \u003e 0) {","lastModifiedDate":"2023-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new ParseException(Messages.getErrorMessageForDuplicatePrefixes(duplicatedPrefixes));","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"-":78,"Vision-2000":7}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        // Handle case for Flag","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"        if (prefix instanceof Flag) {","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"            Flag flag \u003d (Flag) prefix;","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"            int flagPosition \u003d findFlagPosition(argsString, flag.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"            PrefixPosition extendedFlag \u003d new PrefixPosition(flag, flagPosition);","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"            positions.add(extendedFlag);","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"            return positions;","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"     * Returns the index of the first occurrence of {@code Flag} in","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"     * {@code argsString} starting from index {@code fromIndex}. Returns -1 if no","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"     * such occurrence can be found.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"    private static int findFlagPosition(String argString, String flag) {","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"        return argString.indexOf(flag);","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":134,"author":{"gitId":"Vision-2000"},"content":"     * If current prefix is a flag, return empty string.","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"Vision-2000"},"content":"        if (prefix instanceof Flag) {","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"Vision-2000"},"content":"            return \"\";","lastModifiedDate":"2024-03-20"},{"lineNumber":143,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"-":148,"Vision-2000":24}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"    public static final Prefix PREFIX_DATEOFBIRTH \u003d new Prefix(\"b/\");","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"    public static final Prefix PREFIX_SEX \u003d new Prefix(\"s/\");","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"    public static final Prefix PREFIX_APPOINTMENT \u003d new Prefix(\"o/\");","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"    public static final Prefix PREFIX_DATE_OF_VISIT \u003d new Prefix(\"d/\");","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"    public static final Prefix PREFIX_CONDITION \u003d new Prefix(\"c/\");","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    public static final Prefix PREFIX_SEVERITY \u003d new Prefix(\"v/\");","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"jskimdev":3,"-":13,"Vision-2000":3}},{"path":"src/main/java/seedu/address/logic/parser/DateTimeParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":" * Parses date time input arguments adn creates a LocalDate object","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"public class DateTimeParser {","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"    public static final DateTimeFormatter INPUTFORMAT1 \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"    public static final DateTimeFormatter INPUTFORMAT2 \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d\");","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"    public static final DateTimeFormatter OUTPUTFORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d\");","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"     * Parse String date into LocalDate.","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"     * @param dateTime date input.","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"     * @return date in LocalDate type.","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"    public static LocalDate parseDateTime(String dateTime) {","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"        String cleanDateString \u003d dateTime.strip();","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"        DateTimeFormatter inputFormat \u003d determineInputFormat(cleanDateString);","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"            date \u003d LocalDate.parse(cleanDateString, inputFormat);","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"            return date;","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"            return null;","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"     * Determines in which format the date is input.","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"     * @return the input format of String date.","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"    private static DateTimeFormatter determineInputFormat(String dateOfBirth) {","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"        boolean isInputFromat1 \u003d dateOfBirth.split(\"/\").length \u003e 1;","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"        return isInputFromat1 ? INPUTFORMAT1 : INPUTFORMAT2;","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"     * Converts the date into String output format.","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"     * @return String date in output format.","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"    public static String outputDateTime(LocalDate date) {","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        return date.format(OUTPUTFORMAT);","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"jskimdev":52}},{"path":"src/main/java/seedu/address/logic/parser/DeleteByIndexCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.DeleteByIndexCommand;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"public class DeleteByIndexCommandParser implements Parser\u003cDeleteByIndexCommand\u003e {","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"    public DeleteByIndexCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"            return new DeleteByIndexCommand(index);","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByIndexCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"-":23,"jeong-jaeho":5}},{"path":"src/main/java/seedu/address/logic/parser/DeleteByNamePhoneNumberCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jeong-jaeho"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"jeong-jaeho"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.DeleteByNamePhoneNumberCommand;","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":" * Parses input arguments and creates a new DeleteByNamePhoneNumberCommand object.","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"public class DeleteByNamePhoneNumberCommandParser implements Parser\u003cDeleteByNamePhoneNumberCommand\u003e {","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"     * Parses the given argument String into a DeleteByNamePhoneNumberCommand.","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"     * @param args String of arguments.","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"     * @return DeleteByNamePhoneNumberCommand object.","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"     * @throws ParseException Exception thrown if the user input does not conform the expected format.","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"    public DeleteByNamePhoneNumberCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE);","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"jeong-jaeho"},"content":"            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"jeong-jaeho"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"jeong-jaeho"},"content":"                        DeleteByNamePhoneNumberCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"jeong-jaeho"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"jeong-jaeho"},"content":"            argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE);","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"jeong-jaeho"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"jeong-jaeho"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"jeong-jaeho"},"content":"            return new DeleteByNamePhoneNumberCommand(name, phone);","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"jeong-jaeho"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"jeong-jaeho"},"content":"            throw new ParseException(","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"jeong-jaeho"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByNamePhoneNumberCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"jeong-jaeho"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"jeong-jaeho"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given.","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"jeong-jaeho"},"content":"     * @param argumentMultimap ArgumentMultimap object.","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"jeong-jaeho"},"content":"     * @param prefixes Prefix objects.","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"jeong-jaeho"},"content":"     * @return True if none of the prefixes contains empty {@code Optional} values in the given.","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"jeong-jaeho"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"jeong-jaeho"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"jeong-jaeho"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"jeong-jaeho":56}},{"path":"src/main/java/seedu/address/logic/parser/DeleteVisitCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.DeleteVisitCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":" * Parses input arguments and creates a new DeleteVisitCommand object","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"public class DeleteVisitCommandParser implements Parser\u003cDeleteVisitCommand\u003e {","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteVisitCommand","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"     * and returns a DeleteVisitCommand object for execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"    public DeleteVisitCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE);","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE);","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE) \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"            return commandFromIndex(argMultimap.getPreamble());","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        } else if (argMultimap.getPreamble().isEmpty() \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"            return commandFromPrefixes(argMultimap.getValue(PREFIX_NAME).get(),","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"                    argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVisitCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"    private DeleteVisitCommand commandFromIndex(String arg) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"        Index index;","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"        try {","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"            index \u003d ParserUtil.parseIndex(arg);","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"                    DeleteVisitCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"        return new DeleteVisitCommand(index);","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"    private DeleteVisitCommand commandFromPrefixes(String nameArg, String phoneArg) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"        Name name \u003d ParserUtil.parseName(nameArg);","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"        Phone phone \u003d ParserUtil.parsePhone(phoneArg);","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"        return new DeleteVisitCommand(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":69}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATEOFBIRTH;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"                        PREFIX_DATEOFBIRTH, PREFIX_SEX, PREFIX_APPOINTMENT);","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"                PREFIX_DATEOFBIRTH, PREFIX_SEX, PREFIX_APPOINTMENT);","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2024-03-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2024-03-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2024-03-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2024-03-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"        if (argMultimap.getValue(PREFIX_DATEOFBIRTH).isPresent()) {","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"            editPatientDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap","lastModifiedDate":"2024-03-22"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"                    .getValue(PREFIX_DATEOFBIRTH).get()));","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"        if (argMultimap.getValue(PREFIX_SEX).isPresent()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"            editPatientDescriptor.setSex(ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get()));","lastModifiedDate":"2024-03-22"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"        if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"            editPatientDescriptor.setAppointment(ParserUtil.parseAppointment(argMultimap","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"                    .getValue(PREFIX_APPOINTMENT).get()));","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        if (!editPatientDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2024-03-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        return new EditCommand(index, editPatientDescriptor);","lastModifiedDate":"2024-03-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"jskimdev":12,"-":52,"Vision-2000":13}},{"path":"src/main/java/seedu/address/logic/parser/EditVisitCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_VISIT;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEVERITY;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.EditVisitCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.EditVisitCommand.EditVisitDescriptor;","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":" * Parses input arguments and creates a new EditVisitCommand object","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"public class EditVisitCommandParser implements Parser\u003cEditVisitCommand\u003e {","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"     * Parses the given {@code String} of arguments in the context of the EditVisitCommand","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"     * and returns an EditVisitCommand object for execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"    public EditVisitCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_DATE_OF_VISIT, PREFIX_CONDITION,","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"                        PREFIX_SEVERITY);","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_DATE_OF_VISIT, PREFIX_CONDITION,","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"                PREFIX_SEVERITY);","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"        EditVisitDescriptor editVisitDescriptor \u003d new EditVisitDescriptor();","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        if (argMultimap.getValue(PREFIX_CONDITION).isPresent()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"            editVisitDescriptor.setCondition(ParserUtil.parseCondition(argMultimap.getValue(PREFIX_CONDITION).get()));","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        if (argMultimap.getValue(PREFIX_SEVERITY).isPresent()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"            editVisitDescriptor.setSeverity(ParserUtil.parseSeverity(argMultimap.getValue(PREFIX_SEVERITY).get()));","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"        if (argMultimap.getValue(PREFIX_DATE_OF_VISIT).isPresent()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"            editVisitDescriptor.setDateOfVisit(","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"                    ParserUtil.parseDateOfVisit(argMultimap.getValue(PREFIX_DATE_OF_VISIT).get()));","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"        if (!editVisitDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(EditVisitCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE) \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"            return commandFromIndex(argMultimap.getPreamble(), editVisitDescriptor);","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        } else if (argMultimap.getPreamble().isEmpty() \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"            return commandFromPrefixes(argMultimap.getValue(PREFIX_NAME).get(),","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"                    argMultimap.getValue(PREFIX_PHONE).get(), editVisitDescriptor);","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditVisitCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"    private EditVisitCommand commandFromIndex(String arg, EditVisitDescriptor editVisitDescriptor)","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"            throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        Index index;","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        try {","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"            index \u003d ParserUtil.parseIndex(arg);","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditVisitCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"        return new EditVisitCommand(index, editVisitDescriptor);","lastModifiedDate":"2024-04-03"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"    private EditVisitCommand commandFromPrefixes(String nameArg, String phoneArg,","lastModifiedDate":"2024-04-03"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"                                                 EditVisitDescriptor editVisitDescriptor) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"        Name name \u003d ParserUtil.parseName(nameArg);","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"        Phone phone \u003d ParserUtil.parsePhone(phoneArg);","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"        return new EditVisitCommand(name, phone, editVisitDescriptor);","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":93}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.PhoneMatchesPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(args);","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE);","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"        if (!argMultimap.getPreamble().equals(\"\")) {","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"        if (!argMultimap.getValue(PREFIX_NAME).isPresent() \u0026\u0026 !argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE);","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        Predicate\u003cPatient\u003e namePredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"        Predicate\u003cPatient\u003e phonePredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"            String keyword \u003d argMultimap.getValue(PREFIX_NAME).get().trim();","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"            if (keyword.isEmpty()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"            String [] nameKeywords \u003d keyword.split(\"\\\\s+\");","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"            namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords));","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"            namePredicate \u003d PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"            phonePredicate \u003d new PhoneMatchesPredicate(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"            phonePredicate \u003d PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"        logger.info(\"----------------[namePredicate][\" + namePredicate + \"]\");","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"        logger.info(\"----------------[phonePredicate][\" + phonePredicate + \"]\");","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        return new FindCommand(namePredicate, phonePredicate);","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"jskimdev":1,"-":29,"Vision-2000":44}},{"path":"src/main/java/seedu/address/logic/parser/Flag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":" * A flag that modifies the behaviour of a command, represented as a prefix with no arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":" * E.g. \u0027-a\u0027 in \u0027list -a\u0027","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"public class Flag extends Prefix {","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"    public Flag(String flag) {","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"        super(flag);","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"Vision-2000":11}},{"path":"src/main/java/seedu/address/logic/parser/InputParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.AddVisitCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.DeleteAllCommand;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.DeleteByIndexCommand;","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.DeleteByNamePhoneNumberCommand;","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.DeleteVisitCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.commands.EditVisitCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.ForceDeleteAllCommand;","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.ForceExitCommand;","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.NoCommand;","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.YesCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"public class InputParser {","lastModifiedDate":"2024-03-22"},{"lineNumber":34,"author":{"gitId":"jeong-jaeho"},"content":"    private static final String DELETE_ALL_ERROR_MESSAGE \u003d","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"jeong-jaeho"},"content":"            \"Please give either \u0027yes\u0027 or \u0027no\u0027 after \u0027delete-all\u0027 command!\";","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"jeong-jaeho"},"content":"    private static final String EXIT_ERROR_MESSAGE \u003d \"Please give either \u0027yes\u0027 or \u0027no\u0027 after \u0027exit\u0027 command!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(InputParser.class);","lastModifiedDate":"2024-03-22"},{"lineNumber":43,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"jeong-jaeho"},"content":"    private boolean isPreviousCommandDeleteAll \u003d false; // To check if the previous command was \"delete-all\"","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"jeong-jaeho"},"content":"    private boolean isPreviousCommandExit \u003d false; // To check if the previous command was \"exit\"","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":68,"author":{"gitId":"jeong-jaeho"},"content":"        // Checking if the previous command was \"delete-all\"","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"jeong-jaeho"},"content":"        if (isPreviousCommandDeleteAll) {","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"jeong-jaeho"},"content":"            isPreviousCommandDeleteAll \u003d false;","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"jeong-jaeho"},"content":"            if (userInput.equals(\"yes\")) {","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"jeong-jaeho"},"content":"                return new YesCommand(\"delete-all\");","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"jeong-jaeho"},"content":"            } else if (userInput.equals(\"no\")) {","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"jeong-jaeho"},"content":"                return new NoCommand();","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"jeong-jaeho"},"content":"            } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"jeong-jaeho"},"content":"                throw new ParseException(DELETE_ALL_ERROR_MESSAGE);","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"jeong-jaeho"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"jeong-jaeho"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"jeong-jaeho"},"content":"        // Checking if the previous command was \"exit\"","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"jeong-jaeho"},"content":"        if (isPreviousCommandExit) {","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"jeong-jaeho"},"content":"            isPreviousCommandExit \u003d false;","lastModifiedDate":"2024-04-04"},{"lineNumber":84,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"jeong-jaeho"},"content":"            if (userInput.equals(\"yes\")) {","lastModifiedDate":"2024-04-04"},{"lineNumber":86,"author":{"gitId":"jeong-jaeho"},"content":"                return new YesCommand(\"exit\");","lastModifiedDate":"2024-04-04"},{"lineNumber":87,"author":{"gitId":"jeong-jaeho"},"content":"            } else if (userInput.equals(\"no\")) {","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"jeong-jaeho"},"content":"                return new NoCommand();","lastModifiedDate":"2024-04-04"},{"lineNumber":89,"author":{"gitId":"jeong-jaeho"},"content":"            } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"jeong-jaeho"},"content":"                throw new ParseException(EXIT_ERROR_MESSAGE);","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"jeong-jaeho"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"jeong-jaeho"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"        case AddVisitCommand.COMMAND_WORD:","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"            return new AddVisitCommandParser().parse(arguments);","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"        case EditVisitCommand.COMMAND_WORD:","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"            return new EditVisitCommandParser().parse(arguments);","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"jeong-jaeho"},"content":"        case DeleteByIndexCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"jeong-jaeho"},"content":"            return new DeleteByIndexCommandParser().parse(arguments);","lastModifiedDate":"2024-04-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"jeong-jaeho"},"content":"        case DeleteAllCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"jeong-jaeho"},"content":"            isPreviousCommandDeleteAll \u003d true;","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"jeong-jaeho"},"content":"            return new DeleteAllCommand();","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"jeong-jaeho"},"content":"        case DeleteByNamePhoneNumberCommand.COMMAND_WORD:","lastModifiedDate":"2024-04-04"},{"lineNumber":116,"author":{"gitId":"jeong-jaeho"},"content":"            return new DeleteByNamePhoneNumberCommandParser().parse(arguments);","lastModifiedDate":"2024-04-04"},{"lineNumber":117,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":118,"author":{"gitId":"Vision-2000"},"content":"        case DeleteVisitCommand.COMMAND_WORD:","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"            return new DeleteVisitCommandParser().parse(arguments);","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"jeong-jaeho"},"content":"        case ForceDeleteAllCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"jeong-jaeho"},"content":"            return new ForceDeleteAllCommand();","lastModifiedDate":"2024-03-20"},{"lineNumber":123,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"jeong-jaeho"},"content":"            isPreviousCommandExit \u003d true;","lastModifiedDate":"2024-04-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"jeong-jaeho"},"content":"        case ForceExitCommand.COMMAND_WORD:","lastModifiedDate":"2024-04-04"},{"lineNumber":135,"author":{"gitId":"jeong-jaeho"},"content":"            return new ForceExitCommand();","lastModifiedDate":"2024-04-04"},{"lineNumber":136,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"jeong-jaeho"},"content":"     * Returns the error message for the delete-all command.","lastModifiedDate":"2024-04-03"},{"lineNumber":148,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":149,"author":{"gitId":"jeong-jaeho"},"content":"     * @return The error message for the delete-all command.","lastModifiedDate":"2024-04-03"},{"lineNumber":150,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":151,"author":{"gitId":"jeong-jaeho"},"content":"    public static String getDeleteAllErrorMessage() {","lastModifiedDate":"2024-04-03"},{"lineNumber":152,"author":{"gitId":"jeong-jaeho"},"content":"        return DELETE_ALL_ERROR_MESSAGE;","lastModifiedDate":"2024-04-03"},{"lineNumber":153,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":78,"jeong-jaeho":62,"Vision-2000":14}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.DateOfBirth;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.DateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"jeong-jaeho"},"content":"    public static Name parseName(String stringToParse) throws ParseException {","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"        requireNonNull(stringToParse);","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"jeong-jaeho"},"content":"        String trimmedName \u003d stringToParse.trim();","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"jeong-jaeho"},"content":"    public static Phone parsePhone(String stringToParse) throws ParseException {","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"jeong-jaeho"},"content":"        requireNonNull(stringToParse);","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"jeong-jaeho"},"content":"        String trimmedPhone \u003d stringToParse.trim();","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"jskimdev"},"content":"     * Parses a {@code String dateOfBirth} into an {@code DateOfBirth}.","lastModifiedDate":"2024-03-17"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"jskimdev"},"content":"     * @throws ParseException if the given {@code dateOfBirth} is invalid.","lastModifiedDate":"2024-03-17"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":110,"author":{"gitId":"jskimdev"},"content":"    public static DateOfBirth parseDateOfBirth(String dateOfBirth) throws ParseException {","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(dateOfBirth);","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"jskimdev"},"content":"        String trimmedDateOfBirth \u003d dateOfBirth.trim();","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"jskimdev"},"content":"        if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":114,"author":{"gitId":"jskimdev"},"content":"            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":116,"author":{"gitId":"jskimdev"},"content":"        return new DateOfBirth(trimmedDateOfBirth);","lastModifiedDate":"2024-03-18"},{"lineNumber":117,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":118,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":119,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":120,"author":{"gitId":"jskimdev"},"content":"     * Parses a {@code String sex} into an {@code Sex}.","lastModifiedDate":"2024-03-18"},{"lineNumber":121,"author":{"gitId":"jskimdev"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-18"},{"lineNumber":122,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":123,"author":{"gitId":"jskimdev"},"content":"     * @throws ParseException if the given {@code Sex} is invalid.","lastModifiedDate":"2024-03-18"},{"lineNumber":124,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":125,"author":{"gitId":"jskimdev"},"content":"    public static Sex parseSex(String sex) throws ParseException {","lastModifiedDate":"2024-03-18"},{"lineNumber":126,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(sex);","lastModifiedDate":"2024-03-18"},{"lineNumber":127,"author":{"gitId":"jskimdev"},"content":"        String trimmedSex \u003d sex.trim();","lastModifiedDate":"2024-03-18"},{"lineNumber":128,"author":{"gitId":"jskimdev"},"content":"        if (!Sex.isValidSex(trimmedSex)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":129,"author":{"gitId":"jskimdev"},"content":"            throw new ParseException(Sex.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":130,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":131,"author":{"gitId":"jskimdev"},"content":"        return new Sex(trimmedSex);","lastModifiedDate":"2024-03-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":133,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"jskimdev"},"content":"     * Parses a {@code String appointment} into an {@code Appointment}.","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"jskimdev"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"jskimdev"},"content":"     * @throws ParseException if the given {@code Appointment} is invalid.","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"jskimdev"},"content":"    public static Appointment parseAppointment(String appointment) throws ParseException {","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":142,"author":{"gitId":"jskimdev"},"content":"        String trimmedAppointment \u003d appointment.trim();","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"jskimdev"},"content":"        if (!Appointment.isValidAppointment(trimmedAppointment)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"jskimdev"},"content":"            throw new ParseException(Appointment.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"jskimdev"},"content":"        return new Appointment(trimmedAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":149,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":150,"author":{"gitId":"Vision-2000"},"content":"     * Parses a {@code String dateOfVisit} into an {@code DateOfVisit}.","lastModifiedDate":"2024-04-03"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-04-03"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":153,"author":{"gitId":"Vision-2000"},"content":"     * @throws ParseException if the given {@code dateOfVisit} is invalid.","lastModifiedDate":"2024-04-03"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":155,"author":{"gitId":"Vision-2000"},"content":"    public static DateOfVisit parseDateOfVisit(String dateOfVisit) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":156,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":157,"author":{"gitId":"Vision-2000"},"content":"        String trimmedDateOfVisit \u003d dateOfVisit.trim();","lastModifiedDate":"2024-04-03"},{"lineNumber":158,"author":{"gitId":"Vision-2000"},"content":"        if (!DateOfVisit.isValidDateOfVisit(trimmedDateOfVisit)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":159,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(DateOfVisit.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":161,"author":{"gitId":"Vision-2000"},"content":"        return new DateOfVisit(trimmedDateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":165,"author":{"gitId":"Vision-2000"},"content":"     * Parses a {@code String severity} into an {@code Severity}.","lastModifiedDate":"2024-04-03"},{"lineNumber":166,"author":{"gitId":"Vision-2000"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-04-03"},{"lineNumber":167,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"Vision-2000"},"content":"     * @throws ParseException if the given {@code Severity} is invalid.","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"Vision-2000"},"content":"    public static Severity parseSeverity(String severity) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(severity);","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"Vision-2000"},"content":"        String trimmedSeverity \u003d severity.trim();","lastModifiedDate":"2024-04-03"},{"lineNumber":173,"author":{"gitId":"Vision-2000"},"content":"        if (!Severity.isValidSeverity(trimmedSeverity)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":174,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(Severity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":175,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":176,"author":{"gitId":"Vision-2000"},"content":"        return new Severity(trimmedSeverity);","lastModifiedDate":"2024-04-03"},{"lineNumber":177,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":178,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":179,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":180,"author":{"gitId":"Vision-2000"},"content":"     * Parses a {@code String condition} into an {@code Condition}.","lastModifiedDate":"2024-04-03"},{"lineNumber":181,"author":{"gitId":"Vision-2000"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-04-03"},{"lineNumber":182,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":183,"author":{"gitId":"Vision-2000"},"content":"     * @throws ParseException if the given {@code Condition} is invalid.","lastModifiedDate":"2024-04-03"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":185,"author":{"gitId":"Vision-2000"},"content":"    public static Condition parseCondition(String condition) throws ParseException {","lastModifiedDate":"2024-04-03"},{"lineNumber":186,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(condition);","lastModifiedDate":"2024-04-03"},{"lineNumber":187,"author":{"gitId":"Vision-2000"},"content":"        String trimmedCondition \u003d condition.trim();","lastModifiedDate":"2024-04-03"},{"lineNumber":188,"author":{"gitId":"Vision-2000"},"content":"        if (!Condition.isValidCondition(trimmedCondition)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":189,"author":{"gitId":"Vision-2000"},"content":"            throw new ParseException(Condition.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":191,"author":{"gitId":"Vision-2000"},"content":"        return new Condition(trimmedCondition);","lastModifiedDate":"2024-04-03"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"jskimdev":45,"-":99,"jeong-jaeho":11,"Vision-2000":38}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"     * Returns the user prefs\u0027 patient list file path.","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"     * Sets the user prefs\u0027 patient list file path.","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"    void setPatientListFilePath(Path patientListFilePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"     * Replaces patient list data with the data in {@code patientList]}.","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"    void setPatientList(ReadOnlyPatientList patientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"    /** Returns the PatientList */","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"    ReadOnlyPatientList getPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the patient list.","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a patient with {@code name} and {@code phone} exists in the patient list.","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"    boolean hasPatient(Name name, Phone phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"     * Deletes the given patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"     * The patient must exist in the patient list.","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"    void deletePatient(Patient target);","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"jskimdev"},"content":"     * Adds the given patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"     * {@code patient} must not already exist in the patient list.","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"jskimdev"},"content":"     * Replaces the given patient {@code target} with {@code editedPatient}.","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"     * {@code target} must exist in the patient list.","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"jskimdev"},"content":"     * The patient identity of {@code editedPatient} must not be the same as","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"     * another existing patient in the patient list.","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"    void setPatient(Patient target, Patient editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"     * Returns the patient with {@code name} and {@code phone} in the patient list.","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"    Patient getPatient(Name name, Phone phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"jskimdev"},"content":"    /** Returns an unmodifiable view of the filtered patient list */","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":96,"author":{"gitId":"jskimdev"},"content":"     * Updates the filter of the filtered patient list to filter by the given {@code predicate}.","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"jskimdev":7,"-":64,"Vision-2000":29}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":" * Represents the in-memory model of the patient list data.","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"    private final PatientList patientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"     * Initializes a ModelManager with the given patientList and userPrefs.","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"    public ModelManager(ReadOnlyPatientList patientList, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(patientList, userPrefs);","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        logger.fine(\"Initializing with patient list: \" + patientList + \" and user prefs \" + userPrefs);","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"        this.patientList \u003d new PatientList(patientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.patientList.getPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        this(new PatientList(), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        return userPrefs.getPatientListFilePath();","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"    public void setPatientListFilePath(Path patientListFilePath) {","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(patientListFilePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        userPrefs.setPatientListFilePath(patientListFilePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"    public void setPatientList(ReadOnlyPatientList patientList) {","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"        this.patientList.resetData(patientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"    public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"        return patientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"        return patientList.hasPatient(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"    public boolean hasPatient(Name name, Phone phone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"        return patientList.hasPatient(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"        patientList.removePatient(target);","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":110,"author":{"gitId":"Vision-2000"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"Vision-2000"},"content":"        patientList.addPatient(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"Vision-2000"},"content":"        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"jskimdev"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"        patientList.setPatient(target, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"Vision-2000"},"content":"    public Patient getPatient(Name name, Phone phone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"        return patientList.getPatient(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"jskimdev"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"Vision-2000"},"content":"     * Returns an unmodifiable view of the filtered list of {@code Patient}.","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":134,"author":{"gitId":"jskimdev"},"content":"        return filteredPatients;","lastModifiedDate":"2024-03-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":138,"author":{"gitId":"Vision-2000"},"content":"    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2024-03-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":140,"author":{"gitId":"jskimdev"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2024-03-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":155,"author":{"gitId":"Vision-2000"},"content":"        return patientList.equals(otherModelManager.patientList)","lastModifiedDate":"2024-03-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":157,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 filteredPatients.equals(otherModelManager.filteredPatients);","lastModifiedDate":"2024-03-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jskimdev":8,"-":112,"Vision-2000":40}},{"path":"src/main/java/seedu/address/model/PatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import java.util.Optional;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.UniquePatientList;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":" * Wraps all data at the patient list level","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":" * Duplicates are not allowed (by .isSamePatient comparison)","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"public class PatientList implements ReadOnlyPatientList {","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"    private final UniquePatientList patients;","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"        patients \u003d new UniquePatientList();","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"    public PatientList() {}","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"     * Creates a PatientList using the Patients in the {@code toBeCopied}","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    public PatientList(ReadOnlyPatientList toBeCopied) {","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"     * Replaces the contents of the patient list with {@code patients}.","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        this.patients.setPatients(patients);","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"     * Resets the existing data of this {@code PatientList} with {@code newData}.","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"    public void resetData(ReadOnlyPatientList newData) {","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"        setPatients(newData.getPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"    //// patient-level operations","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"        return patients.contains(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a patient with {@code name} and {@code phone} exists in the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"    public boolean hasPatient(Name name, Phone phone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(name);","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"        return getPatientOptional(name, phone).isPresent();","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"     * Adds a patient to the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"     * The patient must not already exist in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"jskimdev"},"content":"        patients.add(p);","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":93,"author":{"gitId":"jskimdev"},"content":"     * Replaces the given patient {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"jskimdev"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another existing patient","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"     * in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":101,"author":{"gitId":"jskimdev"},"content":"        patients.setPatient(target, editedPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"     * Removes {@code key} from this {@code PatientList}.","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"     * {@code key} must exist in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"Vision-2000"},"content":"    public void removePatient(Patient key) {","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"jskimdev"},"content":"        patients.remove(key);","lastModifiedDate":"2024-03-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"Vision-2000"},"content":"     * Returns a {@code Patient} in the patient list that matches the given {@code name} and {@code phone}.","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"Vision-2000"},"content":"    public Patient getPatient(Name name, Phone phone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"        Optional\u003cPatient\u003e patient \u003d getPatientOptional(name, phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":117,"author":{"gitId":"Vision-2000"},"content":"        if (patient.isPresent()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"Vision-2000"},"content":"            return patient.get();","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"Vision-2000"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"jskimdev"},"content":"                .add(\"patients\", patients)","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"Vision-2000"},"content":"    public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":137,"author":{"gitId":"jskimdev"},"content":"        return patients.asUnmodifiableObservableList();","lastModifiedDate":"2024-03-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":147,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof PatientList)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":151,"author":{"gitId":"Vision-2000"},"content":"        PatientList otherPatientList \u003d (PatientList) other;","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"Vision-2000"},"content":"        return patients.equals(otherPatientList.patients);","lastModifiedDate":"2024-03-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":157,"author":{"gitId":"jskimdev"},"content":"        return patients.hashCode();","lastModifiedDate":"2024-03-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":159,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":160,"author":{"gitId":"Vision-2000"},"content":"    private Optional\u003cPatient\u003e getPatientOptional(Name name, Phone phone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":161,"author":{"gitId":"Vision-2000"},"content":"        Predicate\u003cPatient\u003e predicate \u003d patient -\u003e patient.getName().equals(name) \u0026\u0026 patient.getPhone().equals(phone);","lastModifiedDate":"2024-04-03"},{"lineNumber":162,"author":{"gitId":"Vision-2000"},"content":"        return getPatientList().stream().filter(predicate).findFirst();","lastModifiedDate":"2024-04-03"},{"lineNumber":163,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jskimdev":20,"-":87,"Vision-2000":57}},{"path":"src/main/java/seedu/address/model/ReadOnlyPatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":" * Unmodifiable view of a patient list","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"public interface ReadOnlyPatientList {","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"     * Returns an unmodifiable view of the patient list.","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"     * This list will not contain any duplicate patients.","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"    ObservableList\u003cPatient\u003e getPatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"Vision-2000":17}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"-":15,"Vision-2000":1}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"    private Path patientListFilePath \u003d Paths.get(\"data\" , \"patientlist.json\");","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"        setPatientListFilePath(newUserPrefs.getPatientListFilePath());","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"        return patientListFilePath;","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"    public void setPatientListFilePath(Path patientListFilePath) {","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(patientListFilePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"        this.patientListFilePath \u003d patientListFilePath;","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 patientListFilePath.equals(otherUserPrefs.patientListFilePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        return Objects.hash(guiSettings, patientListFilePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"        sb.append(\"\\nLocal data file location : \" + patientListFilePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":78,"Vision-2000":10}},{"path":"src/main/java/seedu/address/model/patient/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":" * Represents a Patient\u0027s address in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a given string is a valid address.","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof Address)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Address otherAddress \u003d (Address) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return value.equals(otherAddress.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":1,"-":62,"Vision-2000":2}},{"path":"src/main/java/seedu/address/model/patient/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.parser.DateTimeParser;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":" * Represents a Patient\u0027s next appointment date","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAppointment(String)}","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"public class Appointment {","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"            \"Appointment should only contain numeric values in dd/MM/yyyy or yyyy-MM-dd format, \"","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"                    + \"and it should not be left blank\";","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"    public final LocalDate appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"     * Constructs a {@code Appointment}","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"     * @param appointment","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"    public Appointment(String appointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"        checkArgument(isValidAppointment(appointment), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"        if (!appointment.isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"            this.appointment \u003d DateTimeParser.parseDateTime(appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"        } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"            this.appointment \u003d null;","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"     * Returns true if a given string is a valid appointment","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"    public static boolean isValidAppointment(String test) {","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"        if (test.isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"            return true;","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        } else if (!test.isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"            return DateTimeParser.parseDateTime(test) \u003d\u003d null ? false : true;","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"            return false;","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"    public String toString() {","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        if (appointment !\u003d null) {","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"            return DateTimeParser.outputDateTime(appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"            return \"\";","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"            return true;","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"        //instanceof handles nulls","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"            return false;","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"jskimdev"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"jskimdev"},"content":"        if (appointment \u003d\u003d null \u0026\u0026 otherAppointment.appointment \u003d\u003d null) {","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"jskimdev"},"content":"            return true;","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"        if (appointment !\u003d null \u0026\u0026 otherAppointment.appointment !\u003d null) {","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"jskimdev"},"content":"            return appointment.equals(otherAppointment.appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"jskimdev"},"content":"        return false;","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"jskimdev"},"content":"    public int hashCode() {","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"jskimdev"},"content":"        return appointment.hashCode();","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"jskimdev":83}},{"path":"src/main/java/seedu/address/model/patient/Condition.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":" * Represents a Patient\u0027s condition for a visit.","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCondition(String)}","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"public class Condition {","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Condition can take any values, and it should not be blank\";","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"    /*","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"     * The first character of the condition must not be a whitespace,","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"    public final String value;","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"     * Constructs an {@code Condition}.","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"     * @param condition A valid condition.","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"    public Condition(String condition) {","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(condition);","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"        checkArgument(isValidCondition(condition), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        value \u003d condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a given string is a valid condition.","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"    public static boolean isValidCondition(String test) {","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        return value;","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof Condition)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"        Condition otherCondition \u003d (Condition) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        return value.equals(otherCondition.value);","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"    public int hashCode() {","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"        return value.hashCode();","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":65}},{"path":"src/main/java/seedu/address/model/patient/DateOfBirth.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.parser.DateTimeParser;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"/**","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":" * Represents a Patient\u0027s date of birth.","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":" */","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"public class DateOfBirth {","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"            \"Date of birth should only contain numeric values in dd/MM/yyyy or yyyy-MM-dd format, and it should not \"","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"                    + \"be left blank\";","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"    public final LocalDate dateOfBirth;","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"     * Constructs a {@code DateOfBirth}.","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"     * @param dateOfBirth A valid date of birth.","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"    public DateOfBirth(String dateOfBirth) {","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(dateOfBirth);","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"        checkArgument(isValidDateOfBirth(dateOfBirth), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"        this.dateOfBirth \u003d DateTimeParser.parseDateTime(dateOfBirth);","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"     * Returns true if a given string is a valid date of birth.","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"    public static boolean isValidDateOfBirth(String test) {","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"        return DateTimeParser.parseDateTime(test) \u003d\u003d null ? false : true;","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"    public String toString() {","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"        return DateTimeParser.outputDateTime(dateOfBirth);","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-17"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"            return true;","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        if (!(other instanceof DateOfBirth)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"            return false;","lastModifiedDate":"2024-03-17"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"        DateOfBirth otherDateOfBirth \u003d (DateOfBirth) other;","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"        return dateOfBirth.equals(otherDateOfBirth.dateOfBirth);","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"        return dateOfBirth.hashCode();","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"jskimdev":63}},{"path":"src/main/java/seedu/address/model/patient/DateOfVisit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.logic.parser.DateTimeParser;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":" * Represents a patient\u0027s date of visit.","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateOfVisit(String)}","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"public class DateOfVisit {","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"            \"Date of visit should only contain numeric values in dd/MM/yyyy or yyyy-MM-dd format, \"","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"                    + \"and it should not be left blank\";","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"    public final LocalDate dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"     * Constructs a {@code DateOfVisit}","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"     * @param dateOfVisit","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    public DateOfVisit(String dateOfVisit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"        checkArgument(isValidDateOfVisit(dateOfVisit), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"        this.dateOfVisit \u003d DateTimeParser.parseDateTime(dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a given string is a valid date of visit","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"    public static boolean isValidDateOfVisit(String test) {","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"        return DateTimeParser.parseDateTime(test) \u003d\u003d null ? false : true;","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"        return DateTimeParser.outputDateTime(dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        //instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof DateOfVisit)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"        DateOfVisit otherDateOfVisit \u003d (DateOfVisit) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"        return dateOfVisit.equals(otherDateOfVisit.dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"    public int hashCode() {","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        return dateOfVisit.hashCode();","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":63}},{"path":"src/main/java/seedu/address/model/patient/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":" * Represents a Patient\u0027s email in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof Email)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Email otherEmail \u003d (Email) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return value.equals(otherEmail.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":1,"-":77,"Vision-2000":1}},{"path":"src/main/java/seedu/address/model/patient/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":" * Represents a Patient\u0027s name in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof Name)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Name otherName \u003d (Name) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return fullName.equals(otherName.fullName);","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":1,"-":65,"Vision-2000":1}},{"path":"src/main/java/seedu/address/model/patient/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":" * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!(other instanceof NameContainsKeywordsPredicate)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d (NameContainsKeywordsPredicate) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"jskimdev":5,"-":39}},{"path":"src/main/java/seedu/address/model/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import java.util.List;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":" * Represents a Patient in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"public class Patient {","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"    private final DateOfBirth dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"    private final Sex sex;","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"    private final Appointment appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"    private final UniqueVisitList visits;","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"    /*","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"     *   among constructors.","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"    {","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"        visits \u003d new UniqueVisitList();","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"    public Patient(Name name, Phone phone, Email email, Address address, DateOfBirth dateOfBirth, Sex sex,","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"                   Appointment appointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"        requireAllNonNull(name, phone, email, address, dateOfBirth, sex, appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        this.dateOfBirth \u003d dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"        this.sex \u003d sex;","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"    public DateOfBirth getDateOfBirth() {","lastModifiedDate":"2024-03-17"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"        return dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"jskimdev"},"content":"    public Sex getSex() {","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"jskimdev"},"content":"        return sex;","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"jskimdev"},"content":"    public Appointment getAppointment() {","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"jskimdev"},"content":"        return appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"    // Visit operations","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"    public ObservableList\u003cVisit\u003e getVisits() {","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"        return visits.asUnmodifiableObservableList();","lastModifiedDate":"2024-04-03"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"    public Visit getLatestVisit() {","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"        ObservableList\u003cVisit\u003e visits \u003d getVisits();","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"        return visits.get(visits.size() - 1);","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"     * Replaces the list of visits with {@code visits}.","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"     * {@code visits} must not contain duplicates.","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"    public void setVisits(List\u003cVisit\u003e visits) {","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"        this.visits.setVisits(visits);","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a visit with the same fields as {@code visit} exists for this patient.","lastModifiedDate":"2024-04-03"},{"lineNumber":104,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"    public boolean hasVisit(Visit visit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"Vision-2000"},"content":"        return visits.contains(visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":111,"author":{"gitId":"Vision-2000"},"content":"     * Adds a visit.","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"Vision-2000"},"content":"     * The visit must not already exist.","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"Vision-2000"},"content":"    public void addVisit(Visit v) {","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"Vision-2000"},"content":"        visits.add(v);","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":117,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"     * Replaces the given visit {@code target} with {@code editedVisit}.","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"Vision-2000"},"content":"     * {@code target} must exist.","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"Vision-2000"},"content":"     * {@code editedVisit} must not exist.","lastModifiedDate":"2024-04-03"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"Vision-2000"},"content":"    public void setVisit(Visit target, Visit editedVisit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(editedVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"Vision-2000"},"content":"        visits.setVisit(target, editedVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":128,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":129,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"Vision-2000"},"content":"     * Removes {@code visit} from this {@code Patient}.","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"Vision-2000"},"content":"     * {@code visit} must exist.","lastModifiedDate":"2024-04-03"},{"lineNumber":132,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"    public void removeVisit(Visit visit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"Vision-2000"},"content":"        visits.remove(visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":135,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if both patients have the same name.","lastModifiedDate":"2024-03-26"},{"lineNumber":139,"author":{"gitId":"Vision-2000"},"content":"     * This defines a weaker notion of equality between two patients.","lastModifiedDate":"2024-03-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"jskimdev"},"content":"    public boolean isSamePatient(Patient otherPatient) {","lastModifiedDate":"2024-03-19"},{"lineNumber":142,"author":{"gitId":"jskimdev"},"content":"        if (otherPatient \u003d\u003d this) {","lastModifiedDate":"2024-03-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"jskimdev"},"content":"        return otherPatient !\u003d null","lastModifiedDate":"2024-03-19"},{"lineNumber":147,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 otherPatient.getName().equals(getName())","lastModifiedDate":"2024-03-22"},{"lineNumber":148,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 otherPatient.getPhone().equals(getPhone());","lastModifiedDate":"2024-03-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":152,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if both patients have the same identity and data fields.","lastModifiedDate":"2024-03-26"},{"lineNumber":153,"author":{"gitId":"Vision-2000"},"content":"     * This defines a stronger notion of equality between two patients.","lastModifiedDate":"2024-03-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":162,"author":{"gitId":"jskimdev"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":166,"author":{"gitId":"jskimdev"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2024-03-19"},{"lineNumber":167,"author":{"gitId":"jskimdev"},"content":"        return name.equals(otherPatient.name)","lastModifiedDate":"2024-03-19"},{"lineNumber":168,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 phone.equals(otherPatient.phone)","lastModifiedDate":"2024-03-19"},{"lineNumber":169,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 email.equals(otherPatient.email)","lastModifiedDate":"2024-03-19"},{"lineNumber":170,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 address.equals(otherPatient.address)","lastModifiedDate":"2024-03-19"},{"lineNumber":171,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 dateOfBirth.equals(otherPatient.dateOfBirth)","lastModifiedDate":"2024-03-19"},{"lineNumber":172,"author":{"gitId":"jskimdev"},"content":"                \u0026\u0026 sex.equals(otherPatient.sex)","lastModifiedDate":"2024-04-02"},{"lineNumber":173,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 appointment.equals(otherPatient.appointment)","lastModifiedDate":"2024-04-03"},{"lineNumber":174,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 visits.equals(otherPatient.visits);","lastModifiedDate":"2024-04-03"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":180,"author":{"gitId":"Vision-2000"},"content":"        return Objects.hash(name, phone, email, address, dateOfBirth, sex, appointment, visits);","lastModifiedDate":"2024-04-03"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":190,"author":{"gitId":"jskimdev"},"content":"                .add(\"date of birth\", dateOfBirth)","lastModifiedDate":"2024-03-17"},{"lineNumber":191,"author":{"gitId":"jskimdev"},"content":"                .add(\"sex\", sex)","lastModifiedDate":"2024-03-18"},{"lineNumber":192,"author":{"gitId":"jskimdev"},"content":"                .add(\"appointment\", appointment)","lastModifiedDate":"2024-04-02"},{"lineNumber":193,"author":{"gitId":"Vision-2000"},"content":"                .add(\"visits\", visits)","lastModifiedDate":"2024-04-03"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":37,"-":83,"Vision-2000":77}},{"path":"src/main/java/seedu/address/model/patient/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":" * Represents a Patient\u0027s phone number in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!(other instanceof Phone)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Phone otherPhone \u003d (Phone) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return value.equals(otherPhone.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":1,"-":59,"Vision-2000":1}},{"path":"src/main/java/seedu/address/model/patient/PhoneMatchesPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":" * Tests that a {@code Patient}\u0027s {@code Phone} matches the number given.","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"public class PhoneMatchesPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"    private final Phone phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"    public PhoneMatchesPredicate(Phone phone) {","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"        if (patient \u003d\u003d null) {","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"        return patient.getPhone().equals(this.phone);","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof PhoneMatchesPredicate)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate otherPhoneMatchesPredicate \u003d (PhoneMatchesPredicate) other;","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"        return phone.equals(otherPhoneMatchesPredicate.phone);","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        return new ToStringBuilder(this).add(\"phone\", phone).toString();","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"Vision-2000":44}},{"path":"src/main/java/seedu/address/model/patient/Severity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":" * Represents the severity of a patient\u0027s visit.","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSeverity(String)}","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"public class Severity {","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Severity should only be High or Low\";","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"    public final SeverityOption severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"     * Constructs a {@code Severity}.","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"     * @param severity A valid severity.","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"    public Severity(String severity) {","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(severity);","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"        checkArgument(isValidSeverity(severity), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"        this.severity \u003d assignSeverity(severity);","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if a given string is a valid severity.","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"    public static boolean isValidSeverity(String test) {","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        return test.equals(\"High\") || test.equals(\"Low\") ? true : false;","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"     * Assign one of SeverityOption, High or Low, depending on the severity input.","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"     * @param severity severity input.","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"     * @return one of SeverityOption","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    public SeverityOption assignSeverity(String severity) {","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        if (severity.equals(\"High\")) {","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"            return SeverityOption.HIGH;","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        } else if (severity.equals(\"Low\")) {","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"            return SeverityOption.LOW;","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"            return null;","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"        return severity.getLabel();","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof Severity)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"        Severity otherSeverity \u003d (Severity) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        return severity.equals(otherSeverity.severity);","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"    public int hashCode() {","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        return severity.hashCode();","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":73}},{"path":"src/main/java/seedu/address/model/patient/SeverityOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":" * Represents one of severity, High or Low.","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"public enum SeverityOption {","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"    HIGH(\"High\"),","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"    LOW(\"Low\");","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"    private final String label;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"    SeverityOption(String label) {","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"        this.label \u003d label;","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"    public String getLabel() {","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"        return label;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":19}},{"path":"src/main/java/seedu/address/model/patient/Sex.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":" * Represents a Patient\u0027s sex in the list.","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSex(String)}","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"public class Sex {","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Sex should only be Male or Female\";","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"    public final SexOption sex;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"     * Constructus a {@code Sex}.","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"     * @param sex A valid sex.","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"    public Sex(String sex) {","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"        requireNonNull(sex);","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"        checkArgument(isValidSex(sex), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"        this.sex \u003d assignSex(sex);","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"     * Returns true if a given string is a valid sex.","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"    public static boolean isValidSex(String test) {","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"        return test.equals(\"Male\") || test.equals(\"Female\") ? true : false;","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"     * Assign one of SexOption, Male or Female, depending on the sex input.","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"     * @param sex sex input.","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"     * @return one of SexOption","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"    public SexOption assignSex(String sex) {","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"        if (sex.equals(\"Male\")) {","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"            return SexOption.MALE;","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        } else if (sex.equals(\"Female\")) {","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"            return SexOption.FEMALE;","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"            return null;","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        return sex.getLabel();","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"            return true;","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"        if (!(other instanceof Sex)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"            return false;","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"        Sex otherSex \u003d (Sex) other;","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"        return sex.equals(otherSex.sex);","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"jskimdev"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"jskimdev"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"jskimdev"},"content":"        return sex.hashCode();","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"jskimdev":72,"Vision-2000":1}},{"path":"src/main/java/seedu/address/model/patient/SexOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":" * Represents one of sex, Male or Female.","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":" */","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"public enum SexOption {","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"    MALE(\"Male\"),","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"    FEMALE(\"Female\");","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"    private final String label;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"    SexOption(String label) {","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"        this.label \u003d label;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"    public String getLabel() {","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"        return label;","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"jskimdev":19}},{"path":"src/main/java/seedu/address/model/patient/UniquePatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":" * A list of patients that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":" * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}. As such,","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":" * adding and updating of patients uses Patient#isSamePatient(Patient) for equality to ensure that the patient","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":" * being added or updated is unique in terms of identity in the UniquePatientList. However, the removal of a patient","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":" * uses Patient#equals(Object) to ensure that the patient with exactly the same fields will be removed.","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":" * @see Patient#isSamePatient(Patient)","lastModifiedDate":"2024-03-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"public class UniquePatientList implements Iterable\u003cPatient\u003e {","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"     * Returns true if the list contains an equivalent patient as the given argument.","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"    public boolean contains(Patient toCheck) {","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"     * Adds a patient to the list.","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"     * The patient must not already exist in the list.","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"    public void add(Patient toAdd) {","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"     * Replaces the patient {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list.","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"        internalList.set(index, editedPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"     * Removes the equivalent patient from the list.","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"     * The patient must exist in the list.","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"jskimdev"},"content":"    public void remove(Patient toRemove) {","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"jskimdev"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"jskimdev"},"content":"    public void setPatients(UniquePatientList replacement) {","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"jskimdev"},"content":"     * Replaces the contents of this list with {@code patients}.","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"jskimdev"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"jskimdev"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-19"},{"lineNumber":92,"author":{"gitId":"jskimdev"},"content":"        requireAllNonNull(patients);","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"jskimdev"},"content":"        if (!patientsAreUnique(patients)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"jskimdev"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2024-03-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"jskimdev"},"content":"        internalList.setAll(patients);","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"jskimdev"},"content":"    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"jskimdev"},"content":"    public Iterator\u003cPatient\u003e iterator() {","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":119,"author":{"gitId":"jskimdev"},"content":"        if (!(other instanceof UniquePatientList)) {","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"jskimdev"},"content":"        UniquePatientList otherUniquePatientList \u003d (UniquePatientList) other;","lastModifiedDate":"2024-03-19"},{"lineNumber":124,"author":{"gitId":"jskimdev"},"content":"        return internalList.equals(otherUniquePatientList.internalList);","lastModifiedDate":"2024-03-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return internalList.toString();","lastModifiedDate":"2019-02-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"jskimdev"},"content":"     * Returns true if {@code patients} contains only unique patients.","lastModifiedDate":"2024-03-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"jskimdev"},"content":"    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-19"},{"lineNumber":141,"author":{"gitId":"jskimdev"},"content":"        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {","lastModifiedDate":"2024-03-19"},{"lineNumber":142,"author":{"gitId":"jskimdev"},"content":"            for (int j \u003d i + 1; j \u003c patients.size(); j++) {","lastModifiedDate":"2024-03-19"},{"lineNumber":143,"author":{"gitId":"jskimdev"},"content":"                if (patients.get(i).isSamePatient(patients.get(j))) {","lastModifiedDate":"2024-03-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jskimdev":45,"-":101,"Vision-2000":4}},{"path":"src/main/java/seedu/address/model/patient/UniqueVisitList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import java.util.Iterator;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import java.util.List;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.exceptions.DuplicateVisitException;","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.exceptions.VisitNotFoundException;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":" * A list of visits that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":" * A visit is considered unique by comparing using {@code Visit#equals(Object)}.","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":" *","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"public class UniqueVisitList implements Iterable\u003cVisit\u003e {","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"    private final ObservableList\u003cVisit\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"    private final ObservableList\u003cVisit\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if the list contains an equivalent visit as the given argument.","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"    public boolean contains(Visit toCheck) {","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"     * Adds a visit to the end of the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"     * The visit must not already exist in the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"    public void add(Visit toAdd) {","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"            throw new DuplicateVisitException();","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"     * Replaces the visit {@code target} in the list with {@code editedVisit}.","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"     * {@code editedVisit} must not already be in the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"    public void setVisit(Visit target, Visit editedVisit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(target, editedVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"            throw new VisitNotFoundException();","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"        if (!target.equals(editedVisit) \u0026\u0026 contains(editedVisit)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"            throw new DuplicateVisitException();","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"        internalList.set(index, editedVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"     * Removes the equivalent visit from the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"     * The visit must exist in the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"    public void remove(Visit toRemove) {","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"            throw new VisitNotFoundException();","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"    public void setVisits(UniqueVisitList replacement) {","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"     * Replaces the contents of this list with {@code visits}.","lastModifiedDate":"2024-04-03"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"     * {@code visits} must not contain duplicate patients.","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"    public void setVisits(List\u003cVisit\u003e visits) {","lastModifiedDate":"2024-04-03"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(visits);","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"        if (!visitsAreUnique(visits)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"            throw new DuplicateVisitException();","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"Vision-2000"},"content":"        internalList.setAll(visits);","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"    public ObservableList\u003cVisit\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"Vision-2000"},"content":"    public Iterator\u003cVisit\u003e iterator() {","lastModifiedDate":"2024-04-03"},{"lineNumber":104,"author":{"gitId":"Vision-2000"},"content":"        return internalList.iterator();","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":111,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"Vision-2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof UniqueVisitList)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":117,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"Vision-2000"},"content":"        UniqueVisitList otherUniqueVisitList \u003d (UniqueVisitList) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"        return internalList.equals(otherUniqueVisitList.internalList);","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"Vision-2000"},"content":"    public int hashCode() {","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"        return internalList.hashCode();","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":128,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":129,"author":{"gitId":"Vision-2000"},"content":"        return internalList.toString();","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":132,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"     * Returns true if {@code visits} contains only unique visits.","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":135,"author":{"gitId":"Vision-2000"},"content":"    private boolean visitsAreUnique(List\u003cVisit\u003e visits) {","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"Vision-2000"},"content":"        for (int i \u003d 0; i \u003c visits.size() - 1; i++) {","lastModifiedDate":"2024-04-03"},{"lineNumber":137,"author":{"gitId":"Vision-2000"},"content":"            for (int j \u003d i + 1; j \u003c visits.size(); j++) {","lastModifiedDate":"2024-04-03"},{"lineNumber":138,"author":{"gitId":"Vision-2000"},"content":"                if (visits.get(i).equals(visits.get(j))) {","lastModifiedDate":"2024-04-03"},{"lineNumber":139,"author":{"gitId":"Vision-2000"},"content":"                    return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":140,"author":{"gitId":"Vision-2000"},"content":"                }","lastModifiedDate":"2024-04-03"},{"lineNumber":141,"author":{"gitId":"Vision-2000"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":142,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":143,"author":{"gitId":"Vision-2000"},"content":"        return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":144,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":145,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":146}},{"path":"src/main/java/seedu/address/model/patient/Visit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import java.util.Objects;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":" * Represents an instance of a Patient\u0027s visit.","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"public class Visit {","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"    private final Condition condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"    private final Severity severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"    private final DateOfVisit dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"    public Visit(Condition condition, Severity severity, DateOfVisit dateOfVisit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"        requireAllNonNull(condition, severity, dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"        this.condition \u003d condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"        this.severity \u003d severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"        this.dateOfVisit \u003d dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"    public Condition getCondition() {","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        return condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"    public Severity getSeverity() {","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        return severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"    public DateOfVisit getDateOfVisit() {","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"        return dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"    public String toString() {","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"                .add(\"condition\", condition)","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"                .add(\"severity\", severity)","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"                .add(\"date of visit\", dateOfVisit)","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"                .toString();","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"            return true;","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        if (!(other instanceof Visit)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"            return false;","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        Visit otherVisit \u003d (Visit) other;","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"        return condition.equals(otherVisit.condition)","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 severity.equals(otherVisit.severity)","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"                \u0026\u0026 dateOfVisit.equals(otherVisit.dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"    @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"    public int hashCode() {","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"        return Objects.hash(condition, severity, dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":72}},{"path":"src/main/java/seedu/address/model/patient/exceptions/DuplicatePatientException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient.exceptions;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":" * Signals that the operation will result in duplicate Patients (Patients are considered duplicates if they have the","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":" * same identity).","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"public class DuplicatePatientException extends RuntimeException {","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"    public DuplicatePatientException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"        super(\"Operation would result in duplicate patients\");","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"jskimdev":3,"-":5,"Vision-2000":3}},{"path":"src/main/java/seedu/address/model/patient/exceptions/DuplicateVisitException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient.exceptions;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":" * Signals that the operation will result in duplicate Visits (Visits are considered duplicates if they have the","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":" * same value in their fields).","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"public class DuplicateVisitException extends RuntimeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"    public DuplicateVisitException() {","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"        super(\"Operation would result in duplicate visits\");","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":11}},{"path":"src/main/java/seedu/address/model/patient/exceptions/PatientNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient.exceptions;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":" * Signals that the operation is unable to find the specified patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"public class PatientNotFoundException extends RuntimeException {}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"jskimdev":6}},{"path":"src/main/java/seedu/address/model/patient/exceptions/VisitNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient.exceptions;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":" * Signals that the operation is unable to find the specified visit.","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"public class VisitNotFoundException extends RuntimeException {}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.DateOfBirth;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":" * Contains utility methods for populating {@code PatientList} with sample data.","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    public static Patient[] getSamplePatients() {","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"        return new Patient[] {","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"            new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"                new DateOfBirth(\"25/2/2024\"), new Sex(\"Male\"), new Appointment(\"\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"            new Patient(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"                new DateOfBirth(\"2024-2-25\"), new Sex(\"Female\"), new Appointment(\"2025-12-23\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"            new Patient(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"                new DateOfBirth(\"12/12/2024\"), new Sex(\"Female\"), new Appointment(\"\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"                new DateOfBirth(\"25/2/2024\"), new Sex(\"Male\"), new Appointment(\"\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"            new Patient(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"                new DateOfBirth(\"25/2/2024\"), new Sex(\"Male\"), new Appointment(\"25/2/2024\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"            new Patient(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"                new DateOfBirth(\"25/2/2024\"), new Sex(\"Male\"), new Appointment(\"\")),","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    public static ReadOnlyPatientList getSamplePatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        PatientList sampleList \u003d new PatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        for (Patient samplePatient : getSamplePatients()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"            sampleList.addPatient(samplePatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"        return sampleList;","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"jskimdev":21,"-":18,"Vision-2000":9}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import java.util.List;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.DateOfBirth;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":" * Jackson-friendly version of {@link Patient}.","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"class JsonAdaptedPatient {","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_DUPLICATE_VISIT \u003d \"Patient has duplicate visit(s).\";","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"    private final String dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"    private final String sex;","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"    private final String appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"    private final List\u003cJsonAdaptedVisit\u003e visits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"     * Constructs a {@code JsonAdaptedPatient} with the given patient details.","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"                             @JsonProperty(\"date of birth\") String dateOfBirth,","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"                             @JsonProperty(\"sex\") String sex, @JsonProperty(\"appointment\") String appointment,","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"                              @JsonProperty(\"visits\") List\u003cJsonAdaptedVisit\u003e visits) {","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        this.dateOfBirth \u003d dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"        this.sex \u003d sex;","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"        this.visits.addAll(visits);","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"     * Converts a given {@code Patient} into this class for Jackson use.","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"        dateOfBirth \u003d source.getDateOfBirth().dateOfBirth.toString();","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"        sex \u003d source.getSex().sex.getLabel();","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"        appointment \u003d source.getAppointment().appointment \u003d\u003d null ? \"\" : source.getAppointment().appointment.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"        visits.addAll(source.getVisits().stream().map(JsonAdaptedVisit::new).collect(Collectors.toList()));","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object.","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"jskimdev"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"jskimdev"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"jskimdev"},"content":"        if (dateOfBirth \u003d\u003d null) {","lastModifiedDate":"2024-03-17"},{"lineNumber":111,"author":{"gitId":"jskimdev"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-17"},{"lineNumber":112,"author":{"gitId":"jskimdev"},"content":"                    DateOfBirth.class.getSimpleName()));","lastModifiedDate":"2024-03-17"},{"lineNumber":113,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":114,"author":{"gitId":"jskimdev"},"content":"        if (!DateOfBirth.isValidDateOfBirth(dateOfBirth)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":115,"author":{"gitId":"jskimdev"},"content":"            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":116,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":117,"author":{"gitId":"jskimdev"},"content":"        final DateOfBirth modelDateOfBirth \u003d new DateOfBirth(dateOfBirth);","lastModifiedDate":"2024-03-17"},{"lineNumber":118,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":119,"author":{"gitId":"jskimdev"},"content":"        if (sex \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":120,"author":{"gitId":"jskimdev"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-18"},{"lineNumber":121,"author":{"gitId":"jskimdev"},"content":"                    Sex.class.getSimpleName()));","lastModifiedDate":"2024-03-18"},{"lineNumber":122,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":123,"author":{"gitId":"jskimdev"},"content":"        if (!Sex.isValidSex(sex)) {","lastModifiedDate":"2024-03-18"},{"lineNumber":124,"author":{"gitId":"jskimdev"},"content":"            throw new IllegalValueException(Sex.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-18"},{"lineNumber":125,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":126,"author":{"gitId":"jskimdev"},"content":"        final Sex modelSex \u003d new Sex(sex);","lastModifiedDate":"2024-03-18"},{"lineNumber":127,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":128,"author":{"gitId":"jskimdev"},"content":"        if (!Appointment.isValidAppointment(appointment)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"jskimdev"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"jskimdev"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"jskimdev"},"content":"        final Appointment modelAppointment \u003d new Appointment(appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"        Patient patient \u003d new Patient(modelName, modelPhone, modelEmail, modelAddress, modelDateOfBirth, modelSex,","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"jskimdev"},"content":"                modelAppointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"Vision-2000"},"content":"        for (JsonAdaptedVisit jsonAdaptedVisit : visits) {","lastModifiedDate":"2024-04-03"},{"lineNumber":137,"author":{"gitId":"Vision-2000"},"content":"            Visit visit \u003d jsonAdaptedVisit.toModelType();","lastModifiedDate":"2024-04-03"},{"lineNumber":138,"author":{"gitId":"Vision-2000"},"content":"            if (patient.hasVisit(visit)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":139,"author":{"gitId":"Vision-2000"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_VISIT);","lastModifiedDate":"2024-04-03"},{"lineNumber":140,"author":{"gitId":"Vision-2000"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":141,"author":{"gitId":"Vision-2000"},"content":"            patient.addVisit(visit);","lastModifiedDate":"2024-04-03"},{"lineNumber":142,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":143,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":144,"author":{"gitId":"Vision-2000"},"content":"        return patient;","lastModifiedDate":"2024-04-03"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"jskimdev":49,"-":71,"Vision-2000":27}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedVisit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.DateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":" * Jackson-friendly version of {@link Visit}.","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"class JsonAdaptedVisit {","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Visit\u0027s %s field is missing!\";","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"    private final String condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"    private final String severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"    private final String dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"     * Constructs a {@code JsonAdaptedVisit} with the given visit details.","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    @JsonCreator","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"    public JsonAdaptedVisit(@JsonProperty(\"condition\") String condition, @JsonProperty(\"severity\") String severity,","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"                              @JsonProperty(\"dateOfVisit\") String dateOfVisit) {","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"        this.condition \u003d condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        this.severity \u003d severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"        this.dateOfVisit \u003d dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"     * Converts a given {@code Visit} into this class for Jackson use.","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"    public JsonAdaptedVisit(Visit source) {","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"        condition \u003d source.getCondition().value;","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        severity \u003d source.getSeverity().severity.getLabel();","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        dateOfVisit \u003d source.getDateOfVisit().dateOfVisit.toString();","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"     * Converts this Jackson-friendly adapted visit object into the model\u0027s {@code Visit} object.","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted visit.","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"    public Visit toModelType() throws IllegalValueException {","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        if (condition \u003d\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"                    Condition.class.getSimpleName()));","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"        if (!Condition.isValidCondition(condition)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"            throw new IllegalValueException(Condition.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        final Condition modelCondition \u003d new Condition(condition);","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"        if (severity \u003d\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"                    Severity.class.getSimpleName()));","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"        if (!Severity.isValidSeverity(severity)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"            throw new IllegalValueException(Severity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        final Severity modelSeverity \u003d new Severity(severity);","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"        if (dateOfVisit \u003d\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"                    DateOfVisit.class.getSimpleName()));","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"        if (!DateOfVisit.isValidDateOfVisit(dateOfVisit)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"            throw new IllegalValueException(DateOfVisit.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        final DateOfVisit modelDateOfVisit \u003d new DateOfVisit(dateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"        return new Visit(modelCondition, modelSeverity, modelDateOfVisit);","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"Vision-2000":82}},{"path":"src/main/java/seedu/address/storage/JsonPatientListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":" * A class to access PatientList data stored as a json file on the hard disk.","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"public class JsonPatientListStorage implements PatientListStorage {","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientListStorage.class);","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    public JsonPatientListStorage(Path filePath) {","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"    public Optional\u003cReadOnlyPatientList\u003e readPatientList() throws DataLoadingException {","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"        return readPatientList(filePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"     * Similar to {@link #readPatientList()}.","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"    public Optional\u003cReadOnlyPatientList\u003e readPatientList(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"        Optional\u003cJsonSerializablePatientList\u003e jsonPatientList \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"                filePath, JsonSerializablePatientList.class);","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        if (!jsonPatientList.isPresent()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"            return Optional.of(jsonPatientList.get().toModelType());","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2023-06-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"    public void savePatientList(ReadOnlyPatientList patientList) throws IOException {","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"        savePatientList(patientList, filePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"     * Similar to {@link #savePatientList(ReadOnlyPatientList)}.","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"    public void savePatientList(ReadOnlyPatientList patientList, Path filePath) throws IOException {","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"        requireNonNull(patientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        JsonUtil.saveJsonFile(new JsonSerializablePatientList(patientList), filePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":60,"Vision-2000":20}},{"path":"src/main/java/seedu/address/storage/JsonSerializablePatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import java.util.List;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":" * An Immutable PatientList that is serializable to JSON format.","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"@JsonRootName(value \u003d \"patientlist\")","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"class JsonSerializablePatientList {","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patient list contains duplicate patient(s).\";","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"     * Constructs a {@code JsonSerializablePatientList} with the given patients.","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"    @JsonCreator","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"    public JsonSerializablePatientList(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"        this.patients.addAll(patients);","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"     * Converts a given {@code ReadOnlyPatientList} into this class for Jackson use.","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializablePatientList}.","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    public JsonSerializablePatientList(ReadOnlyPatientList source) {","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"     * Converts this patient list into the model\u0027s {@code PatientList} object.","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"    public PatientList toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"        PatientList patientList \u003d new PatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"            if (patientList.hasPatient(patient)) {","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"            patientList.addPatient(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        return patientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"Vision-2000":60}},{"path":"src/main/java/seedu/address/storage/PatientListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"/**","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":" * Represents a storage for {@link PatientList}.","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":" */","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"public interface PatientListStorage {","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"     * Returns PatientList data as a {@link ReadOnlyPatientList}.","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"    Optional\u003cReadOnlyPatientList\u003e readPatientList() throws DataLoadingException;","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"     * @see #getPatientListFilePath()","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"    Optional\u003cReadOnlyPatientList\u003e readPatientList(Path filePath) throws DataLoadingException;","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"     * Saves the given {@link ReadOnlyPatientList} to the storage.","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"     * @param patientList cannot be null.","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    void savePatientList(ReadOnlyPatientList patientList) throws IOException;","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"     * @see #savePatientList(ReadOnlyPatientList)","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"    void savePatientList(ReadOnlyPatientList patientList, Path filePath) throws IOException;","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"Vision-2000":46}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"public interface Storage extends PatientListStorage, UserPrefsStorage {","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"    Path getPatientListFilePath();","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"    Optional\u003cReadOnlyPatientList\u003e readPatientList() throws DataLoadingException;","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"    void savePatientList(ReadOnlyPatientList patientList) throws IOException;","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":27,"Vision-2000":5}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":" * Manages storage of PatientList data in local storage.","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"    private PatientListStorage patientListStorage;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"     * Creates a {@code StorageManager} with the given {@code PatientListStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    public StorageManager(PatientListStorage patientListStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        this.patientListStorage \u003d patientListStorage;","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"    public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"        return patientListStorage.getPatientListFilePath();","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"    public Optional\u003cReadOnlyPatientList\u003e readPatientList() throws DataLoadingException {","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"        return readPatientList(patientListStorage.getPatientListFilePath());","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"    public Optional\u003cReadOnlyPatientList\u003e readPatientList(Path filePath) throws DataLoadingException {","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"        return patientListStorage.readPatientList(filePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"    public void savePatientList(ReadOnlyPatientList patientList) throws IOException {","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"        savePatientList(patientList, patientListStorage.getPatientListFilePath());","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"    public void savePatientList(ReadOnlyPatientList patientList, Path filePath) throws IOException {","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        patientListStorage.savePatientList(patientList, filePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":61,"Vision-2000":17}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2324s2-cs2103t-t14-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":101,"Vision-2000":1}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"    private PatientListPanel patientListPanel;","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"    private StackPane patientListPanelPlaceholder;","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"Vision-2000"},"content":"        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":114,"author":{"gitId":"Vision-2000"},"content":"        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());","lastModifiedDate":"2024-03-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPatientListFilePath());","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":166,"author":{"gitId":"Vision-2000"},"content":"    public PatientListPanel getPatientListPanel() {","lastModifiedDate":"2024-03-26"},{"lineNumber":167,"author":{"gitId":"Vision-2000"},"content":"        return patientListPanel;","lastModifiedDate":"2024-03-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":189,"Vision-2000":7}},{"path":"src/main/java/seedu/address/ui/PatientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":" * A UI component that displays information of a {@code Patient}.","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"public class PatientCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"    private static final String FXML \u003d \"PatientListCard.fxml\";","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"    public final Patient patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"    private Label dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    @FXML","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"    private Label sex;","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    @FXML","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"    private Label appointment;","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"    @FXML","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"    private Label visit;","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"    @FXML","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"    private Label hasLatestVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"    @FXML","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"    private Label dateOfVisit;","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"    @FXML","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"    private Label condition;","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"    @FXML","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"    private Label severity;","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"     * Creates a {@code PatientCard} with the given {@code Patient} and index to display.","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"    public PatientCard(Patient patient, int displayedIndex) {","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"        name.setText(patient.getName().fullName);","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"        phone.setText(patient.getPhone().value);","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"        address.setText(patient.getAddress().value);","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"        email.setText(patient.getEmail().value);","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"        dateOfBirth.setText(patient.getDateOfBirth().toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        sex.setText(patient.getSex().toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"        if (patient.getAppointment().appointment \u003d\u003d null) {","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"            appointment.setText(\"\");","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"            appointment.setText(\"Next appointment: \" + patient.getAppointment().toString());","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"        if (!patient.getVisits().isEmpty()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"            Visit latest \u003d patient.getLatestVisit();","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"            hasLatestVisit.setText(\"\");","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"            dateOfVisit.setText(\"Date: \" + latest.getDateOfVisit().toString());","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"            condition.setText(\"Condition: \" + latest.getCondition().value);","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"            severity.setText(\"Severity: \" + latest.getSeverity().toString());","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"            hasLatestVisit.setText(\"None\");","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"            dateOfVisit.setText(\"\");","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"            condition.setText(\"\");","lastModifiedDate":"2024-04-03"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"            severity.setText(\"\");","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"jskimdev":9,"-":38,"Vision-2000":40}},{"path":"src/main/java/seedu/address/ui/PatientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":" * Panel containing the list of patients.","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"public class PatientListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"    private static final String FXML \u003d \"PatientListPanel.fxml\";","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"    private ListView\u003cPatient\u003e patientListView;","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"     * Creates a {@code PatientListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"        patientListView.setItems(patientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}.","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"    class PatientListViewCell extends ListCell\u003cPatient\u003e {","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"        protected void updateItem(Patient patient, boolean empty) {","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"            super.updateItem(patient, empty);","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"            if (empty || patient \u003d\u003d null) {","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"jskimdev":4,"-":33,"Vision-2000":12}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"Vision-2000"},"content":"#filterField, #patientListPanel, #personWebpage {","lastModifiedDate":"2024-03-26"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"-":351,"Vision-2000":1}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-07-27"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"         title\u003d\"MediTrack\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"        \u003cVBox fx:id\u003d\"patientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"          \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"jskimdev":1,"-":57,"Vision-2000":2}},{"path":"src/main/resources/view/PatientListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"120\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"      \u003cLabel fx:id\u003d\"sex\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$sex\" /\u003e","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"      \u003cLabel fx:id\u003d\"appointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"    \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"120\" GridPane.columnIndex\u003d\"1\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"      \u003cLabel fx:id\u003d\"visit\" text\u003d\"Latest visit\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"      \u003cLabel fx:id\u003d\"hasLatestVisit\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$hasLatestVisit\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"      \u003cLabel fx:id\u003d\"dateOfVisit\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfVisit\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"      \u003cLabel fx:id\u003d\"condition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$condition\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"      \u003cLabel fx:id\u003d\"severity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$severity\" /\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jskimdev":2,"-":33,"Vision-2000":15}},{"path":"src/main/resources/view/PatientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":7,"Vision-2000":1}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;","lastModifiedDate":"2024-03-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATEOFBIRTH_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.storage.JsonPatientListStorage;","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        JsonPatientListStorage addressBookStorage \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"                new JsonPatientListStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"jeong-jaeho"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"Vision-2000"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"Vision-2000"},"content":"        // Inject LogicManager with an PatientListStorage that throws the IOException e when saving","lastModifiedDate":"2024-03-26"},{"lineNumber":155,"author":{"gitId":"Vision-2000"},"content":"        JsonPatientListStorage addressBookStorage \u003d new JsonPatientListStorage(prefPath) {","lastModifiedDate":"2024-03-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"Vision-2000"},"content":"            public void savePatientList(ReadOnlyPatientList patientList, Path filePath)","lastModifiedDate":"2024-03-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-06-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-06-13"},{"lineNumber":171,"author":{"gitId":"jskimdev"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DATEOFBIRTH_DESC_AMY + SEX_DESC_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":172,"author":{"gitId":"jskimdev"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":174,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.addPatient(expectedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"jskimdev":7,"-":157,"jeong-jaeho":1,"Vision-2000":12}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_newPatient_success() {","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.addPatient(validPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"        assertCommandSuccess(new AddCommand(validPatient), model,","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPatient)),","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                expectedModel);","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        Patient patientInList \u003d model.getPatientList().getPatientList().get(0);","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        assertCommandFailure(new AddCommand(patientInList), model,","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"                AddCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"jskimdev":7,"-":35,"jeong-jaeho":2,"Vision-2000":4}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"jeong-jaeho"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"jeong-jaeho"},"content":"        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPatient)),","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"        AddCommand addCommand \u003d new AddCommand(validPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"jeong-jaeho"},"content":"        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"jskimdev"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"Vision-2000"},"content":"        public Path getPatientListFilePath() {","lastModifiedDate":"2024-03-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"Vision-2000"},"content":"        public void setPatientListFilePath(Path patientListFilePath) {","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"Vision-2000"},"content":"        public void setPatientList(ReadOnlyPatientList newData) {","lastModifiedDate":"2024-03-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"Vision-2000"},"content":"        public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"Vision-2000"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":144,"author":{"gitId":"Vision-2000"},"content":"        public boolean hasPatient(Name name, Phone phone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":145,"author":{"gitId":"Vision-2000"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"Vision-2000"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2024-03-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"Vision-2000"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"Vision-2000"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":164,"author":{"gitId":"Vision-2000"},"content":"        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2024-03-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"Vision-2000"},"content":"        @Override","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"Vision-2000"},"content":"        public Patient getPatient(Name name, Phone phone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"Vision-2000"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"Vision-2000"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"jskimdev"},"content":"     * A Model stub that contains a single patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":177,"author":{"gitId":"jeong-jaeho"},"content":"    private class ModelStubWithPatient extends ModelStub {","lastModifiedDate":"2024-04-04"},{"lineNumber":178,"author":{"gitId":"jskimdev"},"content":"        private final Patient patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":180,"author":{"gitId":"jeong-jaeho"},"content":"        ModelStubWithPatient(Patient patient) {","lastModifiedDate":"2024-04-04"},{"lineNumber":181,"author":{"gitId":"jskimdev"},"content":"            requireNonNull(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":182,"author":{"gitId":"jskimdev"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"Vision-2000"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":187,"author":{"gitId":"jskimdev"},"content":"            requireNonNull(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":188,"author":{"gitId":"jskimdev"},"content":"            return this.patient.isSamePatient(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"jskimdev"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2024-03-19"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":195,"author":{"gitId":"jeong-jaeho"},"content":"    private class ModelStubAcceptingPatientAdded extends ModelStub {","lastModifiedDate":"2024-04-04"},{"lineNumber":196,"author":{"gitId":"jeong-jaeho"},"content":"        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":199,"author":{"gitId":"Vision-2000"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":200,"author":{"gitId":"jskimdev"},"content":"            requireNonNull(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":201,"author":{"gitId":"jeong-jaeho"},"content":"            return patientsAdded.stream().anyMatch(patient::isSamePatient);","lastModifiedDate":"2024-04-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":205,"author":{"gitId":"Vision-2000"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2024-03-26"},{"lineNumber":206,"author":{"gitId":"jskimdev"},"content":"            requireNonNull(patient);","lastModifiedDate":"2024-03-19"},{"lineNumber":207,"author":{"gitId":"jeong-jaeho"},"content":"            patientsAdded.add(patient);","lastModifiedDate":"2024-04-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"Vision-2000"},"content":"        public ReadOnlyPatientList getPatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":212,"author":{"gitId":"Vision-2000"},"content":"            return new PatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"jskimdev":20,"-":155,"jeong-jaeho":12,"Vision-2000":29}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATEOFBIRTH;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"    public static final String VALID_DATEOFBIRTH_AMY \u003d \"1/12/2024\";","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"    public static final String VALID_DATEOFBIRTH_BOB \u003d \"2024-1-3\";","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"    public static final String VALID_SEX_AMY \u003d \"Female\";","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"    public static final String VALID_SEX_BOB \u003d \"Male\";","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"    public static final String VALID_APPOINTMENT_AMY \u003d \"\";","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"    public static final String VALID_APPOINTMENT_BOB \u003d \"2025-2-4\";","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"    public static final String DATEOFBIRTH_DESC_AMY \u003d \" \" + PREFIX_DATEOFBIRTH + VALID_DATEOFBIRTH_AMY;","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"    public static final String DATEOFBIRTH_DESC_BOB \u003d \" \" + PREFIX_DATEOFBIRTH + VALID_DATEOFBIRTH_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"    public static final String SEX_DESC_AMY \u003d \" \" + PREFIX_SEX + VALID_SEX_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"    public static final String SEX_DESC_BOB \u003d \" \" + PREFIX_SEX + VALID_SEX_BOB;","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"    public static final String APPOINTMENT_DESC_AMY \u003d \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_AMY;","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"    public static final String APPOINTMENT_DESC_BOB \u003d \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_BOB;","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"    public static final String INVALID_DATEOFBIRTH_DESC \u003d \" \" + PREFIX_DATEOFBIRTH; // empty string not allowed for","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"    // date of birth","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"    public static final String INVALID_SEX_DESC \u003d \" \" + PREFIX_SEX + \"Others\";","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"    public static final String INVALID_APPOINTMENT_DESC \u003d \" \" + PREFIX_APPOINTMENT;","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"    public static final EditCommand.EditPatientDescriptor DESC_AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"jskimdev"},"content":"    public static final EditCommand.EditPatientDescriptor DESC_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"jskimdev"},"content":"        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"jskimdev"},"content":"                .withDateOfBirth(VALID_DATEOFBIRTH_AMY).withSex(VALID_SEX_AMY).withAppointment(VALID_APPOINTMENT_AMY)","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"jskimdev"},"content":"                .build();","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"jskimdev"},"content":"        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"jskimdev"},"content":"                .withDateOfBirth(VALID_DATEOFBIRTH_BOB).withSex(VALID_SEX_BOB)","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"jskimdev"},"content":"                .withAppointment(VALID_APPOINTMENT_BOB).build();","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"jskimdev"},"content":"     * - the address book, filtered patient list and selected patient in {@code actualModel} remain unchanged","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"        PatientList expectedPatientList \u003d new PatientList(actualModel.getPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":123,"author":{"gitId":"Vision-2000"},"content":"        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":126,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(expectedPatientList, actualModel.getPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":127,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":130,"author":{"gitId":"jskimdev"},"content":"     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":133,"author":{"gitId":"jeong-jaeho"},"content":"    public static void showPatientAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2024-04-04"},{"lineNumber":134,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());","lastModifiedDate":"2024-03-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":136,"author":{"gitId":"Vision-2000"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":137,"author":{"gitId":"jskimdev"},"content":"        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2024-03-19"},{"lineNumber":138,"author":{"gitId":"Vision-2000"},"content":"        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2024-03-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":140,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(1, model.getFilteredPatientList().size());","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"jskimdev":33,"-":100,"jeong-jaeho":1,"Vision-2000":9}},{"path":"src/test/java/seedu/address/logic/commands/DeleteByIndexCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"public class DeleteByIndexCommandTest {","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"jeong-jaeho"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"        String expectedMessage \u003d String.format(DeleteByIndexCommand.MESSAGE_DELETE_PATIENT_SUCCESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"                Messages.format(patientToDelete));","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"jeong-jaeho"},"content":"        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(outOfBoundIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"jeong-jaeho"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"jeong-jaeho"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"        String expectedMessage \u003d String.format(DeleteByIndexCommand.MESSAGE_DELETE_PATIENT_SUCCESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"                Messages.format(patientToDelete));","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"jeong-jaeho"},"content":"        showNoPatient(expectedModel);","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"jeong-jaeho"},"content":"        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"jeong-jaeho"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"jeong-jaeho"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientList().getPatientList().size());","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(outOfBoundIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand deleteFirstCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand deleteSecondCommand \u003d new DeleteByIndexCommand(INDEX_SECOND_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand deleteFirstCommandCopy \u003d new DeleteByIndexCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"jskimdev"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":107,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(targetIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"jeong-jaeho"},"content":"        String expected \u003d DeleteByIndexCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"jeong-jaeho"},"content":"        assertEquals(expected, deleteByIndexCommand.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"jeong-jaeho"},"content":"    private void showNoPatient(Model model) {","lastModifiedDate":"2024-04-04"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"        model.updateFilteredPatientList(p -\u003e false);","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(model.getFilteredPatientList().isEmpty());","lastModifiedDate":"2024-03-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"jskimdev":5,"-":80,"jeong-jaeho":23,"Vision-2000":12}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"        Patient editedPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"        System.out.println(descriptor);","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"jeong-jaeho"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, descriptor);","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"                Messages.format(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"        PatientBuilder personInList \u003d new PatientBuilder(lastPatient);","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"        Patient editedPatient \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"                .build();","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"                Messages.format(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.setPatient(lastPatient, editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"jeong-jaeho"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, new EditPatientDescriptor());","lastModifiedDate":"2024-04-04"},{"lineNumber":78,"author":{"gitId":"jeong-jaeho"},"content":"        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"Vision-2000"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"                Messages.format(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"jeong-jaeho"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"jeong-jaeho"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"jskimdev"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"jeong-jaeho"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,","lastModifiedDate":"2024-04-04"},{"lineNumber":95,"author":{"gitId":"jskimdev"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"                Messages.format(editedPatient));","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"        Model expectedModel \u003d new ModelManager(new PatientList(model.getPatientList()), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_duplicatePatientUnfilteredList_failure() {","lastModifiedDate":"2024-04-04"},{"lineNumber":108,"author":{"gitId":"jeong-jaeho"},"content":"        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2024-04-04"},{"lineNumber":109,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":110,"author":{"gitId":"jeong-jaeho"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PATIENT, descriptor);","lastModifiedDate":"2024-04-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"Vision-2000"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2024-03-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_duplicatePatientFilteredList_failure() {","lastModifiedDate":"2024-04-04"},{"lineNumber":117,"author":{"gitId":"jeong-jaeho"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"jskimdev"},"content":"        // edit patient in filtered list into a duplicate in address book","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"jeong-jaeho"},"content":"        Patient patientInList \u003d model.getPatientList().getPatientList().get(INDEX_SECOND_PATIENT.getZeroBased());","lastModifiedDate":"2024-04-04"},{"lineNumber":121,"author":{"gitId":"jeong-jaeho"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,","lastModifiedDate":"2024-04-04"},{"lineNumber":122,"author":{"gitId":"jskimdev"},"content":"                new EditPatientDescriptorBuilder(patientInList).build());","lastModifiedDate":"2024-03-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"Vision-2000"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2024-03-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_invalidPatientIndexUnfilteredList_failure() {","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"Vision-2000"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":130,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"Vision-2000"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_invalidPatientIndexFilteredList_failure() {","lastModifiedDate":"2024-04-04"},{"lineNumber":142,"author":{"gitId":"jeong-jaeho"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":143,"author":{"gitId":"jeong-jaeho"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientList().getPatientList().size());","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"jskimdev"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2024-03-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":150,"author":{"gitId":"Vision-2000"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2024-03-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"jeong-jaeho"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, DESC_AMY);","lastModifiedDate":"2024-04-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2024-03-19"},{"lineNumber":159,"author":{"gitId":"jeong-jaeho"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PATIENT, copyDescriptor);","lastModifiedDate":"2024-04-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"jeong-jaeho"},"content":"        assertFalse(standardCommand.equals(new DeleteAllCommand()));","lastModifiedDate":"2024-03-20"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"jeong-jaeho"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PATIENT, DESC_AMY)));","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"jeong-jaeho"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PATIENT, DESC_BOB)));","lastModifiedDate":"2024-04-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":181,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor editPersonDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2024-03-19"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"Vision-2000"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPatientDescriptor\u003d\"","lastModifiedDate":"2024-03-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"jskimdev":22,"-":116,"jeong-jaeho":25,"Vision-2000":25}},{"path":"src/test/java/seedu/address/logic/commands/EditPatientDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"public class EditPatientDescriptorTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptorWithSameValues \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"        System.out.println(DESC_AMY);","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"        System.out.println(descriptorWithSameValues);","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor editPersonDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"        String expected \u003d EditPatientDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getName().orElse(null) + \", phone\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getPhone().orElse(null) + \", email\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getEmail().orElse(null) + \", address\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"                + editPersonDescriptor.getAddress().orElse(null) + \", date of birth\u003d\"","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"                + editPersonDescriptor.getDateOfBirth().orElse(null) + \", sex\u003d\"","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"                + editPersonDescriptor.getSex().orElse(null) + \", appointment\u003d\"","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"                + editPersonDescriptor.getAppointment().orElse(null) + \"}\";","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"jskimdev":16,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.logic.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2024-03-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.CARL;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.ELLE;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.FIONA;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.PhoneMatchesPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate thirdPredicate \u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"                new PhoneMatchesPredicate(new Phone(\"99999999\"));","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate, PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate, PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"        FindCommand findThirdCommand \u003d new FindCommand(thirdPredicate, PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate, PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(findFirstCommand.equals(findThirdCommand));","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_zeroKeywords_noPatientFound() {","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2024-03-22"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\" \");","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"        FindCommand command \u003d new FindCommand(namePredicate, PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.updateFilteredPatientList(namePredicate);","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"jeong-jaeho"},"content":"    public void execute_multipleKeywords_multiplePatientsFound() {","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2024-03-22"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"        FindCommand command \u003d new FindCommand(namePredicate, PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.updateFilteredPatientList(namePredicate);","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":81,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\"name\");","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate phonePredicate \u003d preparePhonePredicate(\"12345678\");","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"        FindCommand findCommand \u003d new FindCommand(namePredicate, phonePredicate);","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"Vision-2000"},"content":"        String expected \u003d FindCommand.class.getCanonicalName() + \"{namePredicate\u003d\" + namePredicate + \", \"","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"Vision-2000"},"content":"                + \"phonePredicate\u003d\" + phonePredicate + \"}\";","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(expected, findCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"Vision-2000"},"content":"     * Parses {@code userInput} into a {@code PhoneMatchesPredicate}.","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"Vision-2000"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"Vision-2000"},"content":"    private PhoneMatchesPredicate preparePhonePredicate(String userInput) {","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"Vision-2000"},"content":"        return new PhoneMatchesPredicate(new Phone(userInput));","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"jskimdev":5,"-":65,"jeong-jaeho":2,"Vision-2000":35}},{"path":"src/test/java/seedu/address/logic/commands/ForceDeleteAllCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"jeong-jaeho"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"jeong-jaeho"},"content":" * Contains integration and unit tests for DeleteAllCommand.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"jeong-jaeho"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"jeong-jaeho"},"content":"public class ForceDeleteAllCommandTest {","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"     * Tests when PatientList is empty.","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"        assertCommandSuccess(new ForceDeleteAllCommand(), model, ForceDeleteAllCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":28,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"     * Tests when PatientList is not empty.","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"        expectedModel.setPatientList(new PatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"jeong-jaeho"},"content":"        assertCommandSuccess(new ForceDeleteAllCommand(), model, ForceDeleteAllCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"jskimdev":1,"-":24,"jeong-jaeho":10,"Vision-2000":4}},{"path":"src/test/java/seedu/address/logic/commands/ForceExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.logic.commands.ForceExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"public class ForceExitCommandTest {","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"        assertCommandSuccess(new ForceExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"-":17,"jeong-jaeho":3}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.logic.commands.HelpCommand.RESULT_MESSAGE;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"jeong-jaeho"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(RESULT_MESSAGE, true, false);","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"-":18,"jeong-jaeho":2}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"        expectedModel \u003d new ModelManager(model.getPatientList(), new UserPrefs());","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"jeong-jaeho"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"jskimdev":1,"-":34,"jeong-jaeho":3,"Vision-2000":1}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATEOFBIRTH_DESC_AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATEOFBIRTH_DESC_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATEOFBIRTH_DESC;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEX_DESC;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATEOFBIRTH_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATEOFBIRTH;","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.AMY;","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.DateOfBirth;","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"        Patient expectedPatient \u003d new PatientBuilder(BOB).withAppointment(\"\").build();","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"                + ADDRESS_DESC_BOB + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB, new AddCommand(expectedPatient));","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB).withAppointment(\"\")","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"jskimdev"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATEOFBIRTH_DESC_BOB","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"                + SEX_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"                new AddCommand(expectedPatientMultipleTags));","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"jskimdev"},"content":"                + ADDRESS_DESC_BOB + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB;","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // multiple emails","lastModifiedDate":"2023-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // multiple addresses","lastModifiedDate":"2023-07-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, ADDRESS_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":97,"author":{"gitId":"jskimdev"},"content":"        // multiple date of birth","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, DATEOFBIRTH_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"jskimdev"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATEOFBIRTH));","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"jskimdev"},"content":"        // multiple sex","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, SEX_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"jskimdev"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_SEX));","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                validExpectedPersonString + PHONE_DESC_AMY + EMAIL_DESC_AMY + NAME_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2023-07-14"},{"lineNumber":108,"author":{"gitId":"jskimdev"},"content":"                        + DATEOFBIRTH_DESC_AMY + SEX_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"jskimdev"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_PHONE,","lastModifiedDate":"2024-03-17"},{"lineNumber":110,"author":{"gitId":"jskimdev"},"content":"                        PREFIX_DATEOFBIRTH, PREFIX_SEX));","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":130,"author":{"gitId":"jskimdev"},"content":"        // invalid date of birth","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, INVALID_DATEOFBIRTH_DESC + validExpectedPersonString,","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"jskimdev"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATEOFBIRTH));","lastModifiedDate":"2024-03-19"},{"lineNumber":133,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":134,"author":{"gitId":"jskimdev"},"content":"        // invalid sex","lastModifiedDate":"2024-03-19"},{"lineNumber":135,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, INVALID_SEX_DESC + validExpectedPersonString,","lastModifiedDate":"2024-03-19"},{"lineNumber":136,"author":{"gitId":"jskimdev"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_SEX));","lastModifiedDate":"2024-03-19"},{"lineNumber":137,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":155,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":156,"author":{"gitId":"jskimdev"},"content":"        // invalid date of birth","lastModifiedDate":"2024-03-19"},{"lineNumber":157,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_DATEOFBIRTH_DESC,","lastModifiedDate":"2024-03-19"},{"lineNumber":158,"author":{"gitId":"jskimdev"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATEOFBIRTH));","lastModifiedDate":"2024-03-19"},{"lineNumber":159,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":160,"author":{"gitId":"jskimdev"},"content":"        // invalid sex","lastModifiedDate":"2024-03-19"},{"lineNumber":161,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_SEX_DESC,","lastModifiedDate":"2024-03-19"},{"lineNumber":162,"author":{"gitId":"jskimdev"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_SEX));","lastModifiedDate":"2024-03-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":168,"author":{"gitId":"jskimdev"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":169,"author":{"gitId":"jskimdev"},"content":"        System.out.println(expectedPatient);","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"jskimdev"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2024-03-17"},{"lineNumber":171,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_AMY + SEX_DESC_AMY,","lastModifiedDate":"2024-03-19"},{"lineNumber":172,"author":{"gitId":"jskimdev"},"content":"                new AddCommand(expectedPatient));","lastModifiedDate":"2024-03-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":180,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":181,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-19"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":185,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":186,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-19"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":190,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":191,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-19"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":195,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":196,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-19"},{"lineNumber":197,"author":{"gitId":"jskimdev"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-19"},{"lineNumber":198,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":199,"author":{"gitId":"jskimdev"},"content":"        // missing date of birth prefix","lastModifiedDate":"2024-03-19"},{"lineNumber":200,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":201,"author":{"gitId":"jskimdev"},"content":"                + VALID_DATEOFBIRTH_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-19"},{"lineNumber":202,"author":{"gitId":"jskimdev"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-19"},{"lineNumber":203,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":204,"author":{"gitId":"jskimdev"},"content":"        // missing sex prefix","lastModifiedDate":"2024-03-19"},{"lineNumber":205,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":206,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + VALID_SEX_BOB,","lastModifiedDate":"2024-03-19"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":210,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":211,"author":{"gitId":"jskimdev"},"content":"                + VALID_DATEOFBIRTH_BOB + VALID_SEX_BOB,","lastModifiedDate":"2024-03-19"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-17"},{"lineNumber":219,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":220,"author":{"gitId":"jskimdev"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-17"},{"lineNumber":224,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":225,"author":{"gitId":"jskimdev"},"content":"                Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-17"},{"lineNumber":229,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":230,"author":{"gitId":"jskimdev"},"content":"                Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2024-03-17"},{"lineNumber":234,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":235,"author":{"gitId":"jskimdev"},"content":"                Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-17"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":237,"author":{"gitId":"jskimdev"},"content":"        // invalid date of birth","lastModifiedDate":"2024-03-19"},{"lineNumber":238,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":239,"author":{"gitId":"jskimdev"},"content":"                + INVALID_DATEOFBIRTH_DESC + SEX_DESC_BOB,","lastModifiedDate":"2024-03-19"},{"lineNumber":240,"author":{"gitId":"jskimdev"},"content":"                DateOfBirth.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-19"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":242,"author":{"gitId":"jskimdev"},"content":"        // invalid sex","lastModifiedDate":"2024-03-19"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-19"},{"lineNumber":244,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + INVALID_SEX_DESC,","lastModifiedDate":"2024-03-19"},{"lineNumber":245,"author":{"gitId":"jskimdev"},"content":"                Sex.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-19"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":248,"author":{"gitId":"jskimdev"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2024-03-17"},{"lineNumber":249,"author":{"gitId":"jskimdev"},"content":"                + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":254,"author":{"gitId":"jskimdev"},"content":"                + ADDRESS_DESC_BOB + DATEOFBIRTH_DESC_BOB + SEX_DESC_BOB,","lastModifiedDate":"2024-03-18"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"jskimdev":97,"-":160}},{"path":"src/test/java/seedu/address/logic/parser/DateTimeParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"public class DateTimeParserTest {","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"    public void parseDateTime() {","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"        // invalid date string","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\"\"), null);","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\" \"), null);","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\"wdalsjdaj\"), null);","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\"12/2024\"), null);","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\"245/2/2024\"), null);","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\"25/24/2024\"), null);","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\"25/2/22\"), null);","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"        // valid date string","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\"25/2/2024\"),","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"                LocalDate.parse(\"25/2/2024\", DateTimeFormatter.ofPattern(\"d/M/yyyy\")));","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"        assertEquals(DateTimeParser.parseDateTime(\"2024-2-24\"), LocalDate.parse(\"2024-2-24\",","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-M-d\")));","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"    public void outputDateTime() {","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"        assertEquals(","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"                DateTimeParser.outputDateTime(","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"                        LocalDate.parse(\"25/2/2024\", DateTimeFormatter.ofPattern(\"d/M/yyyy\"))),","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"                \"2024-2-25\");","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"        assertEquals(","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"                DateTimeParser.outputDateTime(","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"                        LocalDate.parse(\"2024-2-24\", DateTimeFormatter.ofPattern(\"yyyy-M-d\"))),","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"                \"2024-2-24\");","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"jskimdev":40}},{"path":"src/test/java/seedu/address/logic/parser/DeleteByIndexCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.DeleteByIndexCommand;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"public class DeleteByIndexCommandParserTest {","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"    private DeleteByIndexCommandParser parser \u003d new DeleteByIndexCommandParser();","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"        assertParseSuccess(parser, \"1\", new DeleteByIndexCommand(INDEX_FIRST_PATIENT));","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"jeong-jaeho"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"jeong-jaeho"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByIndexCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"-":26,"jeong-jaeho":7}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-07-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2024-03-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"jskimdev"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Patient} being edited,","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"jeong-jaeho"},"content":"        Index targetIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":95,"author":{"gitId":"jskimdev"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB","lastModifiedDate":"2024-03-17"},{"lineNumber":96,"author":{"gitId":"jskimdev"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY;","lastModifiedDate":"2024-03-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"jskimdev"},"content":"                .build();","lastModifiedDate":"2024-03-17"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"jeong-jaeho"},"content":"        Index targetIndex \u003d INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"jeong-jaeho"},"content":"        Index targetIndex \u003d INDEX_THIRD_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":123,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":129,"author":{"gitId":"jskimdev"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":135,"author":{"gitId":"jskimdev"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":141,"author":{"gitId":"jskimdev"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // More extensive testing of duplicate parameter detections is done in","lastModifiedDate":"2023-07-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()","lastModifiedDate":"2023-07-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-07-14"},{"lineNumber":152,"author":{"gitId":"jeong-jaeho"},"content":"        Index targetIndex \u003d INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-07-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-07-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-07-14"},{"lineNumber":164,"author":{"gitId":"jskimdev"},"content":"                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2024-03-17"},{"lineNumber":165,"author":{"gitId":"jskimdev"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-07-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2023-07-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"jskimdev":18,"-":152,"jeong-jaeho":7}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"import java.util.List;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.PhoneMatchesPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"    public void parse_invalidArg_throwsParseException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"                FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"        assertParseFailure(parser, \"1 n/name\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"                FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        assertParseFailure(parser, \"n/ p/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"                FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"        assertParseFailure(parser, \"name\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"                FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(List.of(\"Alice\")),","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"                        new PhoneMatchesPredicate(new Phone(\"99999999\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        assertParseSuccess(parser, \" n/Alice p/99999999\", expectedFindCommand);","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t p/99999999  \\t\", expectedFindCommand);","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        expectedFindCommand \u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(List.of(\"Alice\")),","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"                        PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"        assertParseSuccess(parser, \" n/Alice\", expectedFindCommand);","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        expectedFindCommand \u003d","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"                new FindCommand(PREDICATE_SHOW_ALL_PATIENTS,","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"                        new PhoneMatchesPredicate(new Phone(\"99999999\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"        assertParseSuccess(parser, \" p/99999999\", expectedFindCommand);","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"jskimdev":1,"-":23,"Vision-2000":28}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"jeong-jaeho"},"content":"        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"jskimdev":4,"-":133,"jeong-jaeho":3}},{"path":"src/test/java/seedu/address/logic/parser/PatientListParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.DeleteAllCommand;","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.DeleteByIndexCommand;","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.ForceDeleteAllCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.ForceExitCommand;","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.NoCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"jeong-jaeho"},"content":"import seedu.address.logic.commands.YesCommand;","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientUtil;","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"public class PatientListParserTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"    private final InputParser parser \u003d new InputParser();","lastModifiedDate":"2024-03-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"        System.out.println(patient);","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        System.out.println(PatientUtil.getAddCommand(patient));","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"        assertEquals(new AddCommand(patient), command);","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"jeong-jaeho"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"jeong-jaeho"},"content":"     * Test for the delete-all command.","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"jeong-jaeho"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"jeong-jaeho"},"content":"     * @throws Exception Exception thrown by the parseCommand method.","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"jeong-jaeho"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"jeong-jaeho"},"content":"    public void parseCommand_deleteAll() throws Exception {","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"jeong-jaeho"},"content":"        assertTrue(parser.parseCommand(DeleteAllCommand.COMMAND_WORD) instanceof DeleteAllCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"jeong-jaeho"},"content":"        assertTrue(parser.parseCommand(YesCommand.COMMAND_WORD) instanceof YesCommand);","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"jeong-jaeho"},"content":"        assertTrue(parser.parseCommand(DeleteAllCommand.COMMAND_WORD) instanceof DeleteAllCommand);","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"jeong-jaeho"},"content":"        assertTrue(parser.parseCommand(NoCommand.COMMAND_WORD) instanceof NoCommand);","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"jeong-jaeho"},"content":"        assertTrue(parser.parseCommand(DeleteAllCommand.COMMAND_WORD) instanceof DeleteAllCommand);","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"jeong-jaeho"},"content":"        assertThrows(ParseException.class, InputParser.getDeleteAllErrorMessage(), ()","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"jeong-jaeho"},"content":"                -\u003e parser.parseCommand(EditCommand.COMMAND_WORD));","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"jeong-jaeho"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"jeong-jaeho"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"jeong-jaeho"},"content":"    @Test","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"jeong-jaeho"},"content":"    public void parseCommand_forceDeleteAll() throws Exception {","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"jeong-jaeho"},"content":"        assertTrue(parser.parseCommand(ForceDeleteAllCommand.COMMAND_WORD) instanceof ForceDeleteAllCommand);","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"jeong-jaeho"},"content":"        DeleteByIndexCommand command \u003d (DeleteByIndexCommand) parser.parseCommand(","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"jeong-jaeho"},"content":"                DeleteByIndexCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"jeong-jaeho"},"content":"        assertEquals(new DeleteByIndexCommand(INDEX_FIRST_PATIENT), command);","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"jskimdev"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"jskimdev"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"jeong-jaeho"},"content":"                + INDEX_FIRST_PATIENT.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"jeong-jaeho"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PATIENT, descriptor), command);","lastModifiedDate":"2024-04-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"jeong-jaeho"},"content":"    public void parseCommand_forceExit() throws Exception {","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"jeong-jaeho"},"content":"        assertTrue(parser.parseCommand(ForceExitCommand.COMMAND_WORD) instanceof ForceExitCommand);","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"jeong-jaeho"},"content":"        assertTrue(parser.parseCommand(ForceExitCommand.COMMAND_WORD + \" 3\") instanceof ForceExitCommand);","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"Vision-2000"},"content":"                FindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords),","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"                PREDICATE_SHOW_ALL_PATIENTS), command);","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"jskimdev":13,"-":71,"jeong-jaeho":35,"Vision-2000":6}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(new PatientList(), new PatientList(modelManager.getPatientList()));","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        userPrefs.setPatientListFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        userPrefs.setPatientListFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatientListFilePath(null));","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        modelManager.setPatientListFilePath(path);","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(path, modelManager.getPatientListFilePath());","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"jeong-jaeho"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"jeong-jaeho"},"content":"    public void hasPatient_patientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(modelManager.hasPatient(ALICE));","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"jeong-jaeho"},"content":"    public void hasPatient_patientInAddressBook_returnsTrue() {","lastModifiedDate":"2024-04-04"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"        modelManager.addPatient(ALICE);","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(modelManager.hasPatient(ALICE));","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"jeong-jaeho"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"jeong-jaeho"},"content":"        PatientList patientList \u003d new AddressBookBuilder().withPatient(ALICE).withPatient(BENSON).build();","lastModifiedDate":"2024-04-04"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"        PatientList differentPatientList \u003d new PatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"Vision-2000"},"content":"        modelManager \u003d new ModelManager(patientList, userPrefs);","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"Vision-2000"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(patientList, userPrefs);","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"Vision-2000"},"content":"        // different patientList -\u003e returns false","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentPatientList, userPrefs)));","lastModifiedDate":"2024-03-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":121,"author":{"gitId":"Vision-2000"},"content":"        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2024-03-26"},{"lineNumber":122,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(modelManager.equals(new ModelManager(patientList, userPrefs)));","lastModifiedDate":"2024-03-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"Vision-2000"},"content":"        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"Vision-2000"},"content":"        differentUserPrefs.setPatientListFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":130,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(modelManager.equals(new ModelManager(patientList, differentUserPrefs)));","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"jskimdev":3,"-":102,"jeong-jaeho":5,"Vision-2000":22}},{"path":"src/test/java/seedu/address/model/PatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"public class PatientListTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"    private final PatientList patientList \u003d new PatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(Collections.emptyList(), patientList.getPatientList());","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e patientList.resetData(null));","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        PatientList newData \u003d getTypicalAddressBook();","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"        patientList.resetData(newData);","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(newData, patientList);","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"jeong-jaeho"},"content":"    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"        // Two patients with the same identity fields","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPatients);","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e patientList.resetData(newData));","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"jeong-jaeho"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e patientList.hasPatient(null));","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"jeong-jaeho"},"content":"    public void hasPatient_patientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(patientList.hasPatient(ALICE));","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"jeong-jaeho"},"content":"    public void hasPatient_patientInAddressBook_returnsTrue() {","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"        patientList.addPatient(ALICE);","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(patientList.hasPatient(ALICE));","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"jeong-jaeho"},"content":"    public void hasPatient_patientWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"Vision-2000"},"content":"        patientList.addPatient(ALICE);","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"jskimdev"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(patientList.hasPatient(editedAlice));","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":81,"author":{"gitId":"jeong-jaeho"},"content":"    public void getPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e patientList.getPatientList().remove(0));","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"        String expected \u003d PatientList.class.getCanonicalName() + \"{patients\u003d\" + patientList.getPatientList() + \"}\";","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(expected, patientList.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"Vision-2000"},"content":"     * A stub ReadOnlyPatientList whose patients list can violate interface constraints.","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"    private static class AddressBookStub implements ReadOnlyPatientList {","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"jskimdev"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"jskimdev"},"content":"        AddressBookStub(Collection\u003cPatient\u003e patients) {","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"jskimdev"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"Vision-2000"},"content":"        public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"jskimdev"},"content":"            return patients;","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"jskimdev":14,"-":67,"jeong-jaeho":6,"Vision-2000":20}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPatientListFilePath(null));","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"-":20,"Vision-2000":1}},{"path":"src/test/java/seedu/address/model/patient/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Address address \u003d new Address(\"Valid Address\");","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(address.equals(new Address(\"Valid Address\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(address.equals(address));","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(new Address(\"Other Valid Address\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"jskimdev":1,"-":55}},{"path":"src/test/java/seedu/address/model/patient/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"public class AppointmentTest {","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(null));","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"    public void constructor_invalidAppointment_throwsIllegalArgumentException() {","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"        String invalidAppointment \u003d \"wdasfsdf\";","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Appointment(invalidAppointment));","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"    public void isValidAppointment() {","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"        // invalid appointment","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Appointment.isValidAppointment(\" \")); // spaces only","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Appointment.isValidAppointment(\"wdalsjdaj\")); // random string","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Appointment.isValidAppointment(\"12/2024\")); // without date","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Appointment.isValidAppointment(\"245/2/2024\")); // invalid date","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Appointment.isValidAppointment(\"25/24/2024\")); // invalid month","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Appointment.isValidAppointment(\"25/2/22\")); // invalid year","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"        // valid appointment","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"        assertTrue(Appointment.isValidAppointment(\"\")); // empty string","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"        assertTrue(Appointment.isValidAppointment(\"25/2/2024\")); // valid first input foramt","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"        assertTrue(Appointment.isValidAppointment(\"2024-2-24\")); // valid second input format","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"    public void equals() {","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"        Appointment appointment \u003d new Appointment(\"2024-2-5\");","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        assertTrue(appointment.equals(new Appointment(\"2024-2-5\")));","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"        assertTrue(appointment.equals(new Appointment(\"2024-02-05\")));","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"        // another acceptable input format -\u003e returns true","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"        assertTrue(appointment.equals(new Appointment(\"5/2/2024\")));","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        //another acceptable input format -\u003e returns true","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        assertTrue(appointment.equals(new Appointment(\"05/02/2024\")));","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"        assertTrue(appointment.equals(appointment));","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"        assertFalse(appointment.equals(null));","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"        assertFalse(appointment.equals(5.0f));","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"        assertFalse(appointment.equals(new Appointment(\"2026-12-5\")));","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"jskimdev":65}},{"path":"src/test/java/seedu/address/model/patient/DateOfBirthTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-17"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"public class DateOfBirthTest {","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateOfBirth(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"    public void constuctor_invalidDateOfBirth_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"        String invalidDateOfBirth \u003d \"\";","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DateOfBirth(invalidDateOfBirth));","lastModifiedDate":"2024-03-17"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"    public void isValidDateOfBirth() {","lastModifiedDate":"2024-03-17"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"        // null date of birth","lastModifiedDate":"2024-03-17"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateOfBirth.isValidDateOfBirth(null));","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"        // invalid date of birth","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"        assertFalse(DateOfBirth.isValidDateOfBirth(\"\")); // empty string","lastModifiedDate":"2024-03-17"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"        assertFalse(DateOfBirth.isValidDateOfBirth(\" \")); // spaces only","lastModifiedDate":"2024-03-17"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"        assertFalse(DateOfBirth.isValidDateOfBirth(\"wdalsjdaj\")); // random string","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"        assertFalse(DateOfBirth.isValidDateOfBirth(\"12/2024\")); // without date","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"        assertFalse(DateOfBirth.isValidDateOfBirth(\"245/2/2024\")); // invalid date","lastModifiedDate":"2024-03-17"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"        assertFalse(DateOfBirth.isValidDateOfBirth(\"25/24/2024\")); // invalid month","lastModifiedDate":"2024-03-17"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"        assertFalse(DateOfBirth.isValidDateOfBirth(\"25/2/22\")); // invalid year","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"        // valid date of birth","lastModifiedDate":"2024-03-17"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"        assertTrue(DateOfBirth.isValidDateOfBirth(\"25/2/2024\")); // valid first input foramt","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"        assertTrue(DateOfBirth.isValidDateOfBirth(\"2024-2-24\")); // valid second input format","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"    public void equals() {","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        DateOfBirth dateOfBirth \u003d new DateOfBirth(\"2024-2-5\");","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"        assertTrue(dateOfBirth.equals(new DateOfBirth(\"2024-2-5\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"        assertTrue(dateOfBirth.equals(new DateOfBirth(\"2024-02-05\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        // another acceptable input format -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        assertTrue(dateOfBirth.equals(new DateOfBirth(\"5/2/2024\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        //another acceptable input format -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"        assertTrue(dateOfBirth.equals(new DateOfBirth(\"05/02/2024\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"        assertTrue(dateOfBirth.equals(dateOfBirth));","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"jskimdev"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"        assertFalse(dateOfBirth.equals(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"        assertFalse(dateOfBirth.equals(5.0f));","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"        assertFalse(dateOfBirth.equals(new DateOfBirth(\"2026-12-5\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"jskimdev":68}},{"path":"src/test/java/seedu/address/model/patient/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Email email \u003d new Email(\"valid@email\");","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(email.equals(new Email(\"valid@email\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(email.equals(email));","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(new Email(\"other.valid@email\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"jskimdev":1,"-":87}},{"path":"src/test/java/seedu/address/model/patient/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"jskimdev"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d NameContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"jskimdev":10,"-":75}},{"path":"src/test/java/seedu/address/model/patient/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d new Name(\"Valid Name\");","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(new Name(\"Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(name));","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(new Name(\"Other Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"jskimdev":1,"-":59}},{"path":"src/test/java/seedu/address/model/patient/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATEOFBIRTH_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2024-03-22"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2024-03-22"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;","lastModifiedDate":"2024-03-22"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"public class PatientTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"    public void isSamePatient() {","lastModifiedDate":"2024-03-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"        assertTrue(ALICE.isSamePatient(ALICE));","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"        assertFalse(ALICE.isSamePatient(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"        // same name and phone number, all other attributes different -\u003e returns true","lastModifiedDate":"2024-03-22"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2024-03-22"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"                .withAddress(VALID_ADDRESS_BOB).withDateOfBirth(VALID_DATEOFBIRTH_BOB).build();","lastModifiedDate":"2024-03-17"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"        assertTrue(ALICE.isSamePatient(editedAlice));","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"        assertFalse(ALICE.isSamePatient(editedAlice));","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        Patient editedBob \u003d new PatientBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"        assertFalse(BOB.isSamePatient(editedBob));","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"        // different phone number, all other attributes same -\u003e returns false","lastModifiedDate":"2024-03-22"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"        editedBob \u003d new PatientBuilder(BOB).withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2024-03-22"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"        assertFalse(BOB.isSamePatient(editedBob));","lastModifiedDate":"2024-03-22"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"        // different phone number and different name, all other attributes same -\u003e returns false","lastModifiedDate":"2024-03-22"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        editedBob \u003d new PatientBuilder(BOB).withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2024-03-22"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        assertFalse(BOB.isSamePatient(editedBob));","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"jskimdev"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"jskimdev"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"jskimdev"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"jskimdev"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":88,"author":{"gitId":"jskimdev"},"content":"        // different date of birth -\u003e returns false","lastModifiedDate":"2024-03-22"},{"lineNumber":89,"author":{"gitId":"jskimdev"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DATEOFBIRTH_BOB).build();","lastModifiedDate":"2024-03-22"},{"lineNumber":90,"author":{"gitId":"jskimdev"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2024-03-22"},{"lineNumber":91,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":92,"author":{"gitId":"jskimdev"},"content":"        // different sex -\u003e returns false","lastModifiedDate":"2024-03-22"},{"lineNumber":93,"author":{"gitId":"jskimdev"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withSex(VALID_SEX_BOB).build();","lastModifiedDate":"2024-03-22"},{"lineNumber":94,"author":{"gitId":"jskimdev"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2024-03-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":99,"author":{"gitId":"jskimdev"},"content":"        String expected \u003d Patient.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"jskimdev"},"content":"                + \", email\u003d\" + ALICE.getEmail() + \", address\u003d\" + ALICE.getAddress() + \", date of birth\u003d\"","lastModifiedDate":"2024-03-17"},{"lineNumber":101,"author":{"gitId":"Vision-2000"},"content":"                + ALICE.getDateOfBirth() + \", sex\u003d\" + ALICE.getSex() + \", appointment\u003d\" + ALICE.getAppointment()","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"Vision-2000"},"content":"                + \", visits\u003d\" + ALICE.getVisits() + \"}\";","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"jskimdev":47,"-":56,"Vision-2000":2}},{"path":"src/test/java/seedu/address/model/patient/PhoneMatchesPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"public class PhoneMatchesPredicateTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"    public void equals() {","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"        String firstPhoneString \u003d \"99999999\";","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"        Phone firstPhone \u003d new Phone(firstPhoneString);","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"        String secondPhoneString \u003d \"88888888\";","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"        Phone secondPhone \u003d new Phone(secondPhoneString);","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate firstPredicate \u003d new PhoneMatchesPredicate(firstPhone);","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate secondPredicate \u003d new PhoneMatchesPredicate(secondPhone);","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"Vision-2000"},"content":"        String firstPhoneStringCopy \u003d \"99999999\";","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"Vision-2000"},"content":"        Phone firstPhoneCopy \u003d new Phone(firstPhoneStringCopy);","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate firstPredicateCopy \u003d new PhoneMatchesPredicate(firstPhoneCopy);","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"Vision-2000"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"    public void test_phoneMatches_returnsTrue() {","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"        String phoneNumber \u003d \"98765432\";","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate predicate \u003d new PhoneMatchesPredicate(new Phone(phoneNumber));","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(predicate.test(new PatientBuilder().withPhone(phoneNumber).build()));","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"Vision-2000"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"Vision-2000"},"content":"    public void test_phoneDoesNotMatch_returnsFalse() {","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"        // Null check","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"        String phoneNumber \u003d \"98765432\";","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate predicate \u003d new PhoneMatchesPredicate(new Phone(phoneNumber));","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(predicate.test(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        // Non-matching phones","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"        assertFalse(predicate.test(new PatientBuilder().withPhone(\"99999999\").build()));","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"Vision-2000"},"content":"        Phone phone \u003d new Phone(\"99999999\");","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"Vision-2000"},"content":"        PhoneMatchesPredicate predicate \u003d new PhoneMatchesPredicate(phone);","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        String expected \u003d PhoneMatchesPredicate.class.getCanonicalName() + \"{phone\u003d\" + phone + \"}\";","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"Vision-2000":69}},{"path":"src/test/java/seedu/address/model/patient/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d new Phone(\"999\");","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(phone.equals(new Phone(\"999\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(phone.equals(phone));","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(new Phone(\"995\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"jskimdev":1,"-":59}},{"path":"src/test/java/seedu/address/model/patient/SexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"public class SexTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Sex(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"    public void constructor_invalidSex_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"        String invalidSex \u003d \"\";","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Sex(invalidSex));","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"    public void isValidSex() {","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"        // null sex","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e Sex.isValidSex(null));","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"        // invalid sex","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Sex.isValidSex(\"\")); // empty string","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Sex.isValidSex(\" \")); // spaces only","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Sex.isValidSex(\"akldjkldf\")); // random string","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"        assertFalse(Sex.isValidSex(\"Malet\")); // similar to valid string","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"        // valid sex","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"        assertTrue(Sex.isValidSex(\"Male\"));","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"        assertTrue(Sex.isValidSex(\"Female\"));","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"    public void equals() {","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"        Sex sex \u003d new Sex(\"Male\");","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        assertTrue(sex.equals(new Sex(\"Male\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"        assertTrue(sex.equals(sex));","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"        assertFalse(sex.equals(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        assertFalse(sex.equals(5.0f));","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"        assertFalse(sex.equals(new Sex(\"Female\")));","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"jskimdev":56}},{"path":"src/test/java/seedu/address/model/patient/UniquePatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jskimdev"},"content":"package seedu.address.model.patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.BOB;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"public class UniquePatientListTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":"    public void contains_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"    public void contains_patientNotInList_returnsFalse() {","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"        assertFalse(uniquePatientList.contains(ALICE));","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"    public void contains_patientInList_returnsTrue() {","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"        assertTrue(uniquePatientList.contains(ALICE));","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"        assertTrue(uniquePatientList.contains(editedAlice));","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"    public void add_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"    public void add_duplicatePatient_throwsDuplicatePatientException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"    public void setPatient_nullTargetPatient_throwsNullPointerException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"    public void setPatient_nullEditedPatient_throwsNullPointerException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"jskimdev"},"content":"    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"jskimdev"},"content":"    public void setPatient_editedPatientIsSamePatient_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.setPatient(ALICE, ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"jskimdev"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"jskimdev"},"content":"        expectedUniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"jskimdev"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"jskimdev"},"content":"    public void setPatient_editedPatientHasSameIdentity_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"jskimdev"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.setPatient(ALICE, editedAlice);","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"jskimdev"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"jskimdev"},"content":"        expectedUniquePatientList.add(editedAlice);","lastModifiedDate":"2024-03-19"},{"lineNumber":92,"author":{"gitId":"jskimdev"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"jskimdev"},"content":"    public void setPatient_editedPatientHasDifferentIdentity_success() {","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.setPatient(ALICE, BOB);","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"jskimdev"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"jskimdev"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"jskimdev"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"jskimdev"},"content":"    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(BOB);","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"jskimdev"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"jskimdev"},"content":"    public void remove_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":113,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));","lastModifiedDate":"2024-03-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"jskimdev"},"content":"    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"jskimdev"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"jskimdev"},"content":"    public void remove_existingPatient_removesPatient() {","lastModifiedDate":"2024-03-19"},{"lineNumber":123,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":124,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.remove(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":125,"author":{"gitId":"jskimdev"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"jskimdev"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"jskimdev"},"content":"    public void setPatients_nullUniquePatientList_throwsNullPointerException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"jskimdev"},"content":"    public void setPatient_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {","lastModifiedDate":"2024-03-19"},{"lineNumber":136,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":137,"author":{"gitId":"jskimdev"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2024-03-19"},{"lineNumber":138,"author":{"gitId":"jskimdev"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2024-03-19"},{"lineNumber":139,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.setPatients(expectedUniquePatientList);","lastModifiedDate":"2024-03-19"},{"lineNumber":140,"author":{"gitId":"jskimdev"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2024-03-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"jskimdev"},"content":"    public void setPatients_nullList_throwsNullPointerException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":145,"author":{"gitId":"jskimdev"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));","lastModifiedDate":"2024-03-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"jskimdev"},"content":"    public void setPatients_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2024-03-19"},{"lineNumber":150,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":151,"author":{"gitId":"jskimdev"},"content":"        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2024-03-19"},{"lineNumber":152,"author":{"gitId":"jskimdev"},"content":"        uniquePatientList.setPatients(patientList);","lastModifiedDate":"2024-03-19"},{"lineNumber":153,"author":{"gitId":"jskimdev"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2024-03-19"},{"lineNumber":154,"author":{"gitId":"jskimdev"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2024-03-19"},{"lineNumber":155,"author":{"gitId":"jskimdev"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2024-03-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"jskimdev"},"content":"    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {","lastModifiedDate":"2024-03-19"},{"lineNumber":160,"author":{"gitId":"jskimdev"},"content":"        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2024-03-19"},{"lineNumber":161,"author":{"gitId":"jskimdev"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));","lastModifiedDate":"2024-03-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"jskimdev"},"content":"            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2024-03-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-24"},{"lineNumber":172,"author":{"gitId":"jskimdev"},"content":"        assertEquals(uniquePatientList.asUnmodifiableObservableList().toString(), uniquePatientList.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"jskimdev":84,"-":90}},{"path":"src/test/java/seedu/address/model/util/SampleDataUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Vision-2000"},"content":"package seedu.address.model.util;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"Vision-2000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":"public class SampleDataUtilTest {","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"Vision-2000"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"Vision-2000"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"jeong-jaeho"},"content":"    public void getSamplePatients_returnsNonEmptyArray() {","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"        Patient[] patients \u003d SampleDataUtil.getSamplePatients();","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"        assertTrue(patients.length !\u003d 0);","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"jeong-jaeho":1,"Vision-2000":15}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"Vision-2000"},"content":"import static seedu.address.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"jskimdev"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"    private static final String INVALID_DATEOFBIRTH \u003d \"24/2022\";","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"    private static final String VALID_DATEOFBIRTH \u003d BENSON.getDateOfBirth().toString();","lastModifiedDate":"2024-03-17"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"    private static final String VALID_SEX \u003d BENSON.getSex().toString();","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"    private static final String VALID_APPOINTMENT \u003d BENSON.getAppointment().toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"    private static final List\u003cJsonAdaptedVisit\u003e VALID_VISITS \u003d new ArrayList\u003c\u003e(0);","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"jeong-jaeho"},"content":"    public void toModelType_validPatientDetails_returnsPatient() throws Exception {","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(BENSON);","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"Vision-2000"},"content":"                new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATEOFBIRTH,","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"Vision-2000"},"content":"                        VALID_SEX, VALID_APPOINTMENT, VALID_VISITS);","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"                VALID_DATEOFBIRTH, VALID_SEX, VALID_APPOINTMENT, VALID_VISITS);","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"Vision-2000"},"content":"                new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATEOFBIRTH,","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"Vision-2000"},"content":"                        VALID_SEX, VALID_APPOINTMENT, VALID_VISITS);","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"                VALID_DATEOFBIRTH, VALID_SEX, VALID_APPOINTMENT, VALID_VISITS);","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_DATEOFBIRTH,","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"                        VALID_SEX, VALID_APPOINTMENT, VALID_VISITS);","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"Vision-2000"},"content":"                VALID_DATEOFBIRTH, VALID_SEX, VALID_APPOINTMENT, VALID_VISITS);","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"Vision-2000"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_DATEOFBIRTH,","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"Vision-2000"},"content":"                        VALID_SEX, VALID_APPOINTMENT, VALID_VISITS);","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"Vision-2000"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"Vision-2000"},"content":"                VALID_DATEOFBIRTH, VALID_SEX, VALID_APPOINTMENT, VALID_VISITS);","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"jskimdev":10,"-":74,"jeong-jaeho":1,"Vision-2000":23}},{"path":"src/test/java/seedu/address/storage/JsonPatientListStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.HOON;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.IDA;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"public class JsonPatientListStorageTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"Vision-2000"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPatientListStorageTest\");","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"Vision-2000"},"content":"    private java.util.Optional\u003cReadOnlyPatientList\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"        return new JsonPatientListStorage(Paths.get(filePath)).readPatientList(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"jeong-jaeho"},"content":"    public void readAddressBook_invalidPatientAddressBook_throwDataLoadingException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"jeong-jaeho"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidPatientAddressBook.json\"));","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"jeong-jaeho"},"content":"    public void readAddressBook_invalidAndValidPatientAddressBook_throwDataLoadingException() {","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"jeong-jaeho"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidAndValidPatientAddressBook.json\"));","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"Vision-2000"},"content":"        PatientList original \u003d getTypicalAddressBook();","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"Vision-2000"},"content":"        JsonPatientListStorage jsonAddressBookStorage \u003d new JsonPatientListStorage(filePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"Vision-2000"},"content":"        jsonAddressBookStorage.savePatientList(original, filePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"Vision-2000"},"content":"        ReadOnlyPatientList readBack \u003d jsonAddressBookStorage.readPatientList(filePath).get();","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(original, new PatientList(readBack));","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"Vision-2000"},"content":"        original.addPatient(HOON);","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        original.removePatient(ALICE);","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"Vision-2000"},"content":"        jsonAddressBookStorage.savePatientList(original, filePath);","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"Vision-2000"},"content":"        readBack \u003d jsonAddressBookStorage.readPatientList(filePath).get();","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(original, new PatientList(readBack));","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"Vision-2000"},"content":"        original.addPatient(IDA);","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"        jsonAddressBookStorage.savePatientList(original); // file path not specified","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"Vision-2000"},"content":"        readBack \u003d jsonAddressBookStorage.readPatientList().get(); // file path not specified","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(original, new PatientList(readBack));","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"Vision-2000"},"content":"    private void saveAddressBook(ReadOnlyPatientList addressBook, String filePath) {","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"Vision-2000"},"content":"            new JsonPatientListStorage(Paths.get(filePath))","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"Vision-2000"},"content":"                    .savePatientList(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new PatientList(), null));","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"jskimdev":4,"-":78,"jeong-jaeho":4,"Vision-2000":24}},{"path":"src/test/java/seedu/address/storage/JsonSerializablePatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import seedu.address.testutil.TypicalPatients;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"public class JsonSerializablePatientListTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"Vision-2000"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePatientListTest\");","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"jeong-jaeho"},"content":"    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientAddressBook.json\");","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"jeong-jaeho"},"content":"    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientAddressBook.json\");","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"jeong-jaeho"},"content":"    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientAddressBook.json\");","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"    public void toModelType_typicalPatientsFile_success() throws Exception {","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"jeong-jaeho"},"content":"        JsonSerializablePatientList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"Vision-2000"},"content":"                JsonSerializablePatientList.class).get();","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        PatientList patientListFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"jeong-jaeho"},"content":"        PatientList typicalPatientsPatientList \u003d TypicalPatients.getTypicalAddressBook();","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"jeong-jaeho"},"content":"        assertEquals(patientListFromFile, typicalPatientsPatientList);","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"jeong-jaeho"},"content":"    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"jeong-jaeho"},"content":"        JsonSerializablePatientList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"Vision-2000"},"content":"                JsonSerializablePatientList.class).get();","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"jeong-jaeho"},"content":"    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"jeong-jaeho"},"content":"        JsonSerializablePatientList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"Vision-2000"},"content":"                JsonSerializablePatientList.class).get();","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"Vision-2000"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePatientList.MESSAGE_DUPLICATE_PATIENT,","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"jskimdev":1,"-":27,"jeong-jaeho":11,"Vision-2000":8}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"Vision-2000"},"content":"        userPrefs.setPatientListFilePath(Paths.get(\"patientlist.json\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataLoadingException, IOException {","lastModifiedDate":"2023-06-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":122,"Vision-2000":1}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.ReadOnlyPatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        JsonPatientListStorage addressBookStorage \u003d new JsonPatientListStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"Vision-2000"},"content":"         * {@link JsonPatientListStorage} class.","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"Vision-2000"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonPatientListStorageTest} class.","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"Vision-2000"},"content":"        PatientList original \u003d getTypicalAddressBook();","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"Vision-2000"},"content":"        storageManager.savePatientList(original);","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"Vision-2000"},"content":"        ReadOnlyPatientList retrieved \u003d storageManager.readPatientList().get();","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"Vision-2000"},"content":"        assertEquals(original, new PatientList(retrieved));","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"Vision-2000"},"content":"        assertNotNull(storageManager.getPatientListFilePath());","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jskimdev":1,"-":57,"Vision-2000":10}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"Vision-2000"},"content":" *     {@code PatientList ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"Vision-2000"},"content":"    private PatientList patientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"Vision-2000"},"content":"        patientList \u003d new PatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"Vision-2000"},"content":"    public AddressBookBuilder(PatientList patientList) {","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"Vision-2000"},"content":"        this.patientList \u003d patientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"Vision-2000"},"content":"     * Adds a new {@code Patient} to the {@code PatientList} that we are building.","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"jeong-jaeho"},"content":"    public AddressBookBuilder withPatient(Patient patient) {","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"Vision-2000"},"content":"        patientList.addPatient(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"Vision-2000"},"content":"    public PatientList build() {","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"Vision-2000"},"content":"        return patientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jskimdev":1,"-":22,"jeong-jaeho":1,"Vision-2000":10}},{"path":"src/test/java/seedu/address/testutil/EditPatientDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.DateOfBirth;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"public class EditPatientDescriptorBuilder {","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"    private EditPatientDescriptor descriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder() {","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"jskimdev"},"content":"        this.descriptor \u003d new EditPatientDescriptor(descriptor);","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code patient}\u0027s details","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder(Patient patient) {","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"        descriptor.setName(patient.getName());","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"        descriptor.setPhone(patient.getPhone());","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"        descriptor.setEmail(patient.getEmail());","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"        descriptor.setAddress(patient.getAddress());","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"        descriptor.setDateOfBirth(patient.getDateOfBirth());","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"        descriptor.setSex(patient.getSex());","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"        descriptor.setAppointment(patient.getAppointment());","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder withName(String name) {","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code DateOfBirth} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder withDateOfBirth(String dateOfBirth) {","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"jskimdev"},"content":"        descriptor.setDateOfBirth(new DateOfBirth(dateOfBirth));","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"jskimdev"},"content":"        return this;","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code Sex} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":85,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder withSex(String sex) {","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"jskimdev"},"content":"        descriptor.setSex(new Sex(sex));","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"jskimdev"},"content":"        return this;","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code Appointment} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptorBuilder withAppointment(String appointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"jskimdev"},"content":"        descriptor.setAppointment(new Appointment(appointment));","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"jskimdev"},"content":"        return this;","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"jskimdev"},"content":"    public EditPatientDescriptor build() {","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"jskimdev":54,"-":47}},{"path":"src/test/java/seedu/address/testutil/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Address;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.DateOfBirth;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Email;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Name;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Phone;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":" * A utility class to help with building Patient objects.","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"public class PatientBuilder {","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"    public static final String DEFAULT_DATEOFBIRTH \u003d \"25/2/2025\";","lastModifiedDate":"2024-03-17"},{"lineNumber":22,"author":{"gitId":"jskimdev"},"content":"    public static final String DEFAULT_SEX \u003d \"Female\";","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"    public static final String DEFAULT_APPOINTMENT \u003d \"\";","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"jskimdev"},"content":"    private DateOfBirth dateOfBirth;","lastModifiedDate":"2024-03-17"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"    private Sex sex;","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"jskimdev"},"content":"    private Appointment appointment;","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"Vision-2000"},"content":"     * Creates a {@code PatientBuilder} with the default details.","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder() {","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"        dateOfBirth \u003d new DateOfBirth(DEFAULT_DATEOFBIRTH);","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"        sex \u003d new Sex(DEFAULT_SEX);","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"        appointment \u003d new Appointment(DEFAULT_APPOINTMENT);","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"Vision-2000"},"content":"     * Initializes the PatientBuilder with the data of {@code patientToCopy}.","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder(Patient patientToCopy) {","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"        phone \u003d patientToCopy.getPhone();","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"        email \u003d patientToCopy.getEmail();","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        address \u003d patientToCopy.getAddress();","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"        dateOfBirth \u003d patientToCopy.getDateOfBirth();","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"        sex \u003d patientToCopy.getSex();","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"        appointment \u003d patientToCopy.getAppointment();","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building.","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code Address} of the {@code Patient} that we are building.","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder withAddress(String address) {","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code Phone} of the {@code Patient} that we are building.","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder withPhone(String phone) {","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code Email} of the {@code Patient} that we are building.","lastModifiedDate":"2024-03-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder withEmail(String email) {","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-17"},{"lineNumber":92,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code DateOfBirth} of the {@Code Patient} that we are buidling.","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-17"},{"lineNumber":94,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder withDateOfBirth(String dateOfBirth) {","lastModifiedDate":"2024-03-19"},{"lineNumber":95,"author":{"gitId":"jskimdev"},"content":"        this.dateOfBirth \u003d new DateOfBirth(dateOfBirth);","lastModifiedDate":"2024-03-17"},{"lineNumber":96,"author":{"gitId":"jskimdev"},"content":"        return this;","lastModifiedDate":"2024-03-17"},{"lineNumber":97,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":98,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":99,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code Sex} of the {@Cose Patient} that we are building.","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder withSex(String sex) {","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"jskimdev"},"content":"        this.sex \u003d new Sex(sex);","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"jskimdev"},"content":"        return this;","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"jskimdev"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"jskimdev"},"content":"     * Sets the {@code Appointment} of the {@Cose Appointment} that we are building.","lastModifiedDate":"2024-04-02"},{"lineNumber":109,"author":{"gitId":"jskimdev"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"jskimdev"},"content":"    public PatientBuilder withAppointment(String appointment) {","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"jskimdev"},"content":"        this.appointment \u003d new Appointment(appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"jskimdev"},"content":"        return this;","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"jskimdev"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"jskimdev"},"content":"    public Patient build() {","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"jskimdev"},"content":"        return new Patient(name, phone, email, address, dateOfBirth, sex, appointment);","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"jskimdev":62,"-":55,"Vision-2000":2}},{"path":"src/test/java/seedu/address/testutil/PatientUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATEOFBIRTH;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":" * A utility class for Patient.","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"jskimdev"},"content":"public class PatientUtil {","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"jskimdev"},"content":"     * Returns an add command string for adding the {@code patient}.","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"    public static String getAddCommand(Patient patient) {","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"jeong-jaeho"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"     * Returns the part of command string for the given {@code patient}\u0027s details.","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"jeong-jaeho"},"content":"    public static String getPatientDetails(Patient patient) {","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"jskimdev"},"content":"        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"        sb.append(PREFIX_DATEOFBIRTH + patient.getDateOfBirth().toString() + \" \");","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"        sb.append(PREFIX_SEX + patient.getSex().toString() + \" \");","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"jeong-jaeho"},"content":"    public static String getEditPatientDescriptorDetails(EditPatientDescriptor descriptor) {","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"        descriptor.getDateOfBirth().ifPresent(dateOfBirth -\u003e sb.append(PREFIX_DATEOFBIRTH)","lastModifiedDate":"2024-03-17"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"                .append(dateOfBirth.dateOfBirth).append(\" \"));","lastModifiedDate":"2024-03-17"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"        descriptor.getSex().ifPresent(sex -\u003e sb.append(PREFIX_SEX).append(sex.sex.getLabel()).append(\" \"));","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"        descriptor.getAppointment().ifPresent(appointment -\u003e sb.append(PREFIX_APPOINTMENT)","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"                .append(appointment.appointment \u003d\u003d null ? \"\" : appointment.appointment).append(\" \"));","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"jskimdev":28,"-":26,"jeong-jaeho":3}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"     * Returns the middle index of the patient in the {@code model}\u0027s patient list.","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"Vision-2000"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"     * Returns the last index of the patient in the {@code model}\u0027s patient list.","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"Vision-2000"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"     * Returns the patient in the {@code model}\u0027s patient list at {@code index}.","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"jeong-jaeho"},"content":"    public static Patient getPatient(Model model, Index index) {","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"Vision-2000"},"content":"        return model.getFilteredPatientList().get(index.getZeroBased());","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jskimdev":4,"-":47,"jeong-jaeho":1,"Vision-2000":3}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"jeong-jaeho"},"content":"    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"jeong-jaeho"},"content":"    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"jeong-jaeho"},"content":"    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"-":9,"jeong-jaeho":3}},{"path":"src/test/java/seedu/address/testutil/TypicalPatients.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2024-03-17"},{"lineNumber":4,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":5,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_BOB;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATEOFBIRTH_AMY;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATEOFBIRTH_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":13,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2024-03-17"},{"lineNumber":15,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_AMY;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"jskimdev"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"jskimdev"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"Vision-2000"},"content":"import seedu.address.model.PatientList;","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"jskimdev"},"content":"import seedu.address.model.patient.Patient;","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"jskimdev"},"content":" * A utility class containing a list of {@code Patient} objects to be used in tests.","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"jskimdev"},"content":"public class TypicalPatients {","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"jskimdev"},"content":"    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"jskimdev"},"content":"            .withPhone(\"94351253\").withDateOfBirth(\"25/2/2024\").withSex(\"Female\").withAppointment(\"2025-2-25\")","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"jskimdev"},"content":"            .build();","lastModifiedDate":"2024-03-17"},{"lineNumber":34,"author":{"gitId":"jskimdev"},"content":"    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":36,"author":{"gitId":"jskimdev"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withDateOfBirth(\"25/2/2024\").withSex(\"Male\")","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"jskimdev"},"content":"            .withAppointment(\"\")","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"jskimdev"},"content":"            .build();","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"jskimdev"},"content":"    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"jskimdev"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withDateOfBirth(\"2032-06-23\")","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"jskimdev"},"content":"            .withAppointment(\"2026-12-2\")","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"jskimdev"},"content":"            .withSex(\"Male\").build();","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"jskimdev"},"content":"    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"jskimdev"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withDateOfBirth(\"2028-11-28\")","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"jskimdev"},"content":"            .withAppointment(\"\")","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"jskimdev"},"content":"            .withSex(\"Male\").build();","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"jskimdev"},"content":"    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"jskimdev"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withDateOfBirth(\"2024-01-01\")","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"jskimdev"},"content":"            .withAppointment(\"\")","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"jskimdev"},"content":"            .withSex(\"Male\").build();","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"jskimdev"},"content":"    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"jskimdev"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withDateOfBirth(\"2024-06-25\")","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"jskimdev"},"content":"            .withAppointment(\"2192-5-12\")","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"jskimdev"},"content":"            .withSex(\"Female\").build();","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"jskimdev"},"content":"    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"jskimdev"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withDateOfBirth(\"25/2/2024\")","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"jskimdev"},"content":"            .withAppointment(\"\")","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"jskimdev"},"content":"            .withSex(\"Male\").build();","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":61,"author":{"gitId":"jskimdev"},"content":"    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"jskimdev"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withDateOfBirth(\"25/2/2024\")","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"jskimdev"},"content":"            .withAppointment(\"\")","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"jskimdev"},"content":"            .withSex(\"Male\").build();","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"jskimdev"},"content":"    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"jskimdev"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withDateOfBirth(\"25/2/2024\")","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"jskimdev"},"content":"            .withAppointment(\"\")","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"jskimdev"},"content":"            .withSex(\"Female\").build();","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":71,"author":{"gitId":"jskimdev"},"content":"    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"jskimdev"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDateOfBirth(VALID_DATEOFBIRTH_AMY)","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"jskimdev"},"content":"            .withSex(VALID_SEX_AMY).withAppointment(VALID_APPOINTMENT_AMY).build();","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"jskimdev"},"content":"    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"jskimdev"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDateOfBirth(VALID_DATEOFBIRTH_BOB)","lastModifiedDate":"2024-03-17"},{"lineNumber":76,"author":{"gitId":"jskimdev"},"content":"            .withSex(VALID_SEX_BOB).withAppointment(VALID_APPOINTMENT_BOB).build();","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":80,"author":{"gitId":"jskimdev"},"content":"    private TypicalPatients() {} // prevents instantiation","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"Vision-2000"},"content":"     * Returns an {@code PatientList} with all the typical persons.","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"Vision-2000"},"content":"    public static PatientList getTypicalAddressBook() {","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"Vision-2000"},"content":"        PatientList ab \u003d new PatientList();","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"jeong-jaeho"},"content":"        for (Patient patient : getTypicalPatients()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"Vision-2000"},"content":"            ab.addPatient(patient);","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":93,"author":{"gitId":"jeong-jaeho"},"content":"    public static List\u003cPatient\u003e getTypicalPatients() {","lastModifiedDate":"2024-04-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"jskimdev":60,"-":29,"jeong-jaeho":2,"Vision-2000":5}}]
