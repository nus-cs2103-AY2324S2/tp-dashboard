[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103T-F10-3/tp/graph/badge.svg?token\u003dX33TASQ7AY)](https://codecov.io/gh/AY2324S2-CS2103T-F10-3/tp)","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"* This is **a Command Line Interface (CLI) application for users who prefer CLI to keep track of healthcare appointments and patient information**.\u003cbr\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"  * store and retrieve patient information such as name, contact information and medical allergies","lastModifiedDate":"2024-03-06"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"  * schedule an appointment for the patient","lastModifiedDate":"2024-03-06"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"  * view upcoming appointments in a concise and accessible format","lastModifiedDate":"2024-03-06"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"* The project simulates an ongoing software project for a desktop application (called CLInic) used for managing patient and appointment details.","lastModifiedDate":"2024-03-06"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"  * It is built on the AddressBook-Level3 project.","lastModifiedDate":"2024-03-06"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"  * It is **written in OOP fashion**. ","lastModifiedDate":"2024-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-03-06"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2024-03-06"}],"authorContributionMap":{"xuelinglow":10,"-":7}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"cliftonchee"},"content":"### Ang Zi Jun Dayn","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"cliftonchee"},"content":"\u003cimg src\u003d\"images/dayn-1.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"cliftonchee"},"content":"[[github](https://github.com/dayn-1)]","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"* Role: Testing","lastModifiedDate":"2024-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"cliftonchee"},"content":"### Chee Wei Xiong Clifton","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"cliftonchee"},"content":"\u003cimg src\u003d\"images/cliftonchee.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"cliftonchee"},"content":"[[github](http://github.com/cliftonchee)]","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"cliftonchee"},"content":"* Role: Documentation","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"cliftonchee"},"content":"### Jaime Ng Jia Min","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"cliftonchee"},"content":"\u003cimg src\u003d\"images/thatgirljam.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"cliftonchee"},"content":"[[github](http://github.com/thatgirljam)]","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"* Role: Scheduling and Tracking","lastModifiedDate":"2024-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"cliftonchee"},"content":"### Lim Rik","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"cliftonchee"},"content":"\u003cimg src\u003d\"images/limrik.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"cliftonchee"},"content":"[[github](http://github.com/limrik)]","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"* Role: Code quality","lastModifiedDate":"2024-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"cliftonchee"},"content":"### Low Xue Ling","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"cliftonchee"},"content":"\u003cimg src\u003d\"images/xuelinglow.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"cliftonchee"},"content":"[[github](http://github.com/xuelinglow)]","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"* Role: Integration","lastModifiedDate":"2024-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"dayn-1":4,"-":36,"cliftonchee":16}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"# CLInic Developer Guide","lastModifiedDate":"2024-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"_{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline continues till the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).\u003cbr\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"   Note that although this is shown as a single step in the diagram above (for simplicity), in the code it can take several interactions (between the command object and the `Model`) to achieve.","lastModifiedDate":"2024-02-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"The following sequence diagram shows how an undo operation goes through the `Logic` component:","lastModifiedDate":"2024-02-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Logic.puml\" alt\u003d\"UndoSequenceDiagram-Logic\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"Similarly, how an undo operation goes through the `Model` component is shown below:","lastModifiedDate":"2024-02-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Model.puml\" alt\u003d\"UndoSequenceDiagram-Model\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":267,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"limrik"},"content":"* has a need to manage a significant number of patient information","lastModifiedDate":"2024-03-05"},{"lineNumber":278,"author":{"gitId":"limrik"},"content":"* has a need to schedule patients for appointments","lastModifiedDate":"2024-03-05"},{"lineNumber":279,"author":{"gitId":"limrik"},"content":"* prefers to manage patient information and appointments in one application","lastModifiedDate":"2024-03-05"},{"lineNumber":280,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":283,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"limrik"},"content":"**Value proposition**: manage patient appointments faster than a typical mouse/GUI driven app","lastModifiedDate":"2024-03-05"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"| Priority | As a …​ | I want to …​                                                                       | So that I can…​                                                                  |","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"limrik"},"content":"|----------|---------|------------------------------------------------------------------------------------|----------------------------------------------------------------------------------|","lastModifiedDate":"2024-03-05"},{"lineNumber":294,"author":{"gitId":"limrik"},"content":"| `* * *`  | user    | add a new patient                                                                  |                                                                                  |","lastModifiedDate":"2024-03-05"},{"lineNumber":295,"author":{"gitId":"limrik"},"content":"| `* * *`  | user    | delete a patient                                                                   |                                                                                  |","lastModifiedDate":"2024-03-05"},{"lineNumber":296,"author":{"gitId":"limrik"},"content":"| `* * *`  | user    | schedule an appointment for a patient                                              |                                                                                  |","lastModifiedDate":"2024-03-05"},{"lineNumber":297,"author":{"gitId":"limrik"},"content":"| `* * *`  | user    | cancel an appointment                                                              | account for changes in scheduling                                                |","lastModifiedDate":"2024-03-05"},{"lineNumber":298,"author":{"gitId":"limrik"},"content":"| `* * *`  | user    | have an overall view of upcoming patient appointments                              | have situational awareness of the schedule for the day                           |","lastModifiedDate":"2024-03-05"},{"lineNumber":299,"author":{"gitId":"limrik"},"content":"| `* * *`  | user    | mark patients who have been seen for the day                                       | track patient\u0027s appointment attendance                                           |","lastModifiedDate":"2024-03-05"},{"lineNumber":300,"author":{"gitId":"limrik"},"content":"| `* *`    | user    | update a patient\u0027s information                                                     | keep the database up to date                                                     |","lastModifiedDate":"2024-03-05"},{"lineNumber":301,"author":{"gitId":"limrik"},"content":"| `* *`    | user    | easily filter the patients by their medical records                                | see which is in need of more assistance or follow up care                        |","lastModifiedDate":"2024-03-05"},{"lineNumber":302,"author":{"gitId":"limrik"},"content":"| `* *`    | user    | search for patients by their name                                                  | look up their appointment information quickly                                    |","lastModifiedDate":"2024-03-05"},{"lineNumber":303,"author":{"gitId":"limrik"},"content":"| `* *`    | user    | update the details of the appointment                                              | reschedule appointments as needed                                                |","lastModifiedDate":"2024-03-05"},{"lineNumber":304,"author":{"gitId":"limrik"},"content":"| `* *`    | user    | view the list of patients for the given hour                                       | see the immediate schedule                                                       |","lastModifiedDate":"2024-03-05"},{"lineNumber":305,"author":{"gitId":"limrik"},"content":"| `* *`    | user    | tag appointments based on appointment type                                         | I can categorize which appointments require test or room bookings                |","lastModifiedDate":"2024-03-05"},{"lineNumber":306,"author":{"gitId":"limrik"},"content":"| `* *`    | user    | tag appointments based on insurance type                                           | prepare necessary insurance documents before patient’s appointments              |","lastModifiedDate":"2024-03-05"},{"lineNumber":307,"author":{"gitId":"limrik"},"content":"| `* *`    | user    | input commands without having inputs to be in a specific order                     | key in commands fast in busy periods                                             |","lastModifiedDate":"2024-03-05"},{"lineNumber":308,"author":{"gitId":"limrik"},"content":"| `*`      | user    | sort the time to a patient\u0027s appointment                                           | remind patients of their appointment                                             |","lastModifiedDate":"2024-03-05"},{"lineNumber":309,"author":{"gitId":"limrik"},"content":"| `*`      | user    | see how long it has been since a patient\u0027s last appointment                        | remind patients to come for another checkup                                      |","lastModifiedDate":"2024-03-05"},{"lineNumber":310,"author":{"gitId":"limrik"},"content":"| `*`      | user    | see what appointments are overlapping                                              | ensure the patients have enough time to be seen for their different appointments |","lastModifiedDate":"2024-03-05"},{"lineNumber":311,"author":{"gitId":"limrik"},"content":"| `*`      | user    | set notifications for upcoming appointments                                        | staff and patients can be well informed early in advance                         |","lastModifiedDate":"2024-03-05"},{"lineNumber":312,"author":{"gitId":"limrik"},"content":"| `*`      | user    | track if the patients have been sent reminders on their appointments               | patients do not get spammed with reminders                                       |","lastModifiedDate":"2024-03-05"},{"lineNumber":313,"author":{"gitId":"limrik"},"content":"| `*`      | user    | be notified of upcoming appointments on entry into the system                      | will not miss approaching deadlines                                              |","lastModifiedDate":"2024-03-05"},{"lineNumber":314,"author":{"gitId":"limrik"},"content":"| `*`      | user    | easily contact the patients via SMS or email through the program                   | update patients about their details and upcoming appointments                    |","lastModifiedDate":"2024-03-05"},{"lineNumber":315,"author":{"gitId":"limrik"},"content":"| `*`      | user    | quickly navigate the CLI with intuitive commands                                   | increase my efficiency                                                           |","lastModifiedDate":"2024-03-05"},{"lineNumber":316,"author":{"gitId":"limrik"},"content":"| `*`      | user    | check if patients are related to one another                                       | have alternate contacts                                                          |","lastModifiedDate":"2024-03-05"},{"lineNumber":317,"author":{"gitId":"limrik"},"content":"| `*`      | user    | update or create new records in bulk                                               | process a family more efficiently                                                |","lastModifiedDate":"2024-03-05"},{"lineNumber":318,"author":{"gitId":"limrik"},"content":"| `*`      | user    | set recurring tasks                                                                | I do not have to keep scheduling recurring appointments                          |","lastModifiedDate":"2024-03-05"},{"lineNumber":319,"author":{"gitId":"limrik"},"content":"| `*`      | user    | retrieve past records or revert changes easily                                     | revert my changes if I accidentally delete or wrongly edit a patient’s records   |","lastModifiedDate":"2024-03-05"},{"lineNumber":320,"author":{"gitId":"limrik"},"content":"| `*`      | user    | select what information is available when I view the list of patients              | cater the view to my needs                                                       |","lastModifiedDate":"2024-03-05"},{"lineNumber":321,"author":{"gitId":"limrik"},"content":"| `*`      | user    | add notes to a patient                                                             | include other additional information                                             |","lastModifiedDate":"2024-03-05"},{"lineNumber":322,"author":{"gitId":"limrik"},"content":"| `*`      | user    | easily generate reports of the patient details and export it to the doctor/patient | have easy access                                                                 |","lastModifiedDate":"2024-03-05"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"limrik"},"content":"(For all use cases below, the **System** is the `CLInic` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2024-03-08"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"ThatGirlJam"},"content":"// EXAMPLE //","lastModifiedDate":"2024-03-05"},{"lineNumber":329,"author":{"gitId":"-"},"content":"**Use case: Delete a person**","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"1.  User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"limrik"},"content":"2.  CLInic shows a list of persons","lastModifiedDate":"2024-03-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"limrik"},"content":"4.  CLInic deletes the person","lastModifiedDate":"2024-03-08"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"limrik"},"content":"    * 3a1. CLInic shows an error message.","lastModifiedDate":"2024-03-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"ThatGirlJam"},"content":"// EXAMPLE //","lastModifiedDate":"2024-03-05"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"ThatGirlJam"},"content":"**Use case (UC1) : Add new patient information to the database**","lastModifiedDate":"2024-03-05"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":355,"author":{"gitId":"ThatGirlJam"},"content":"**MSS**","lastModifiedDate":"2024-03-05"},{"lineNumber":356,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":357,"author":{"gitId":"ThatGirlJam"},"content":"1.  User requests to add new patient information","lastModifiedDate":"2024-03-05"},{"lineNumber":358,"author":{"gitId":"limrik"},"content":"2.  CLInic validates the information ","lastModifiedDate":"2024-03-08"},{"lineNumber":359,"author":{"gitId":"limrik"},"content":"3.  CLInic adds the patient\u0027s information to the database","lastModifiedDate":"2024-03-08"},{"lineNumber":360,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":361,"author":{"gitId":"ThatGirlJam"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":362,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":363,"author":{"gitId":"ThatGirlJam"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":364,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":365,"author":{"gitId":"ThatGirlJam"},"content":"* 1a. The required information is missing.","lastModifiedDate":"2024-03-05"},{"lineNumber":366,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":367,"author":{"gitId":"limrik"},"content":"    * 1a1. CLInic prompts user to input required information.","lastModifiedDate":"2024-03-08"},{"lineNumber":368,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":369,"author":{"gitId":"ThatGirlJam"},"content":"    Use case resumes at step 1.","lastModifiedDate":"2024-03-05"},{"lineNumber":370,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":371,"author":{"gitId":"ThatGirlJam"},"content":"* 2a. The given information is invalid.","lastModifiedDate":"2024-03-05"},{"lineNumber":372,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":373,"author":{"gitId":"limrik"},"content":"    * 2a1. CLInic shows an error message.","lastModifiedDate":"2024-03-08"},{"lineNumber":374,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":375,"author":{"gitId":"ThatGirlJam"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2024-03-05"},{"lineNumber":376,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":377,"author":{"gitId":"ThatGirlJam"},"content":"**Use case (UC2) : Delete patient information from the database**","lastModifiedDate":"2024-03-05"},{"lineNumber":378,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":379,"author":{"gitId":"ThatGirlJam"},"content":"**MSS**","lastModifiedDate":"2024-03-05"},{"lineNumber":380,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":381,"author":{"gitId":"ThatGirlJam"},"content":"1.  User requests to list persons","lastModifiedDate":"2024-03-05"},{"lineNumber":382,"author":{"gitId":"limrik"},"content":"2.  CLInic shows a list of persons","lastModifiedDate":"2024-03-08"},{"lineNumber":383,"author":{"gitId":"ThatGirlJam"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2024-03-05"},{"lineNumber":384,"author":{"gitId":"limrik"},"content":"4.  CLInic deletes the person","lastModifiedDate":"2024-03-08"},{"lineNumber":385,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":386,"author":{"gitId":"ThatGirlJam"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":387,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":388,"author":{"gitId":"ThatGirlJam"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":389,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":390,"author":{"gitId":"ThatGirlJam"},"content":"* 2a. The list is empty.","lastModifiedDate":"2024-03-05"},{"lineNumber":391,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":392,"author":{"gitId":"ThatGirlJam"},"content":"  Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":393,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":394,"author":{"gitId":"ThatGirlJam"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2024-03-05"},{"lineNumber":395,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":396,"author":{"gitId":"limrik"},"content":"    * 3a1. CLInic shows an error message.","lastModifiedDate":"2024-03-08"},{"lineNumber":397,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":398,"author":{"gitId":"ThatGirlJam"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2024-03-05"},{"lineNumber":399,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":400,"author":{"gitId":"ThatGirlJam"},"content":"**Use case (UC3) : Schedule an appointment for the patient**","lastModifiedDate":"2024-03-05"},{"lineNumber":401,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":402,"author":{"gitId":"ThatGirlJam"},"content":"**MSS**","lastModifiedDate":"2024-03-05"},{"lineNumber":403,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":404,"author":{"gitId":"ThatGirlJam"},"content":"1.  User requests to list persons","lastModifiedDate":"2024-03-05"},{"lineNumber":405,"author":{"gitId":"limrik"},"content":"2.  CLInic shows a list of persons","lastModifiedDate":"2024-03-08"},{"lineNumber":406,"author":{"gitId":"ThatGirlJam"},"content":"3.  User requests to schedule an appointment for a specific person in the list","lastModifiedDate":"2024-03-05"},{"lineNumber":407,"author":{"gitId":"limrik"},"content":"4.  CLInic prompts User to input appointment details","lastModifiedDate":"2024-03-08"},{"lineNumber":408,"author":{"gitId":"ThatGirlJam"},"content":"5.  User inputs appointment details ","lastModifiedDate":"2024-03-05"},{"lineNumber":409,"author":{"gitId":"limrik"},"content":"6.  CLInic schedules appointment for the patient","lastModifiedDate":"2024-03-08"},{"lineNumber":410,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":411,"author":{"gitId":"ThatGirlJam"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":412,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":413,"author":{"gitId":"ThatGirlJam"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":414,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":415,"author":{"gitId":"ThatGirlJam"},"content":"* 2a. The list is empty.","lastModifiedDate":"2024-03-05"},{"lineNumber":416,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":417,"author":{"gitId":"ThatGirlJam"},"content":"  Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":418,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":419,"author":{"gitId":"ThatGirlJam"},"content":"* 5a. The given appointment details are invalid.","lastModifiedDate":"2024-03-05"},{"lineNumber":420,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":421,"author":{"gitId":"limrik"},"content":"    * 5a1. CLInic shows an error message.","lastModifiedDate":"2024-03-08"},{"lineNumber":422,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":423,"author":{"gitId":"ThatGirlJam"},"content":"      Use case resumes at step 4.","lastModifiedDate":"2024-03-05"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":425,"author":{"gitId":"ThatGirlJam"},"content":"**Use case (UC4) : Cancel an appointment**","lastModifiedDate":"2024-03-05"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":427,"author":{"gitId":"ThatGirlJam"},"content":"**MSS**","lastModifiedDate":"2024-03-05"},{"lineNumber":428,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":429,"author":{"gitId":"ThatGirlJam"},"content":"1.  User requests to list persons","lastModifiedDate":"2024-03-05"},{"lineNumber":430,"author":{"gitId":"limrik"},"content":"2.  CLInic shows a list of persons","lastModifiedDate":"2024-03-08"},{"lineNumber":431,"author":{"gitId":"ThatGirlJam"},"content":"3.  User requests to cancel an appointment for a specific person in the list","lastModifiedDate":"2024-03-05"},{"lineNumber":432,"author":{"gitId":"limrik"},"content":"4.  CLInic prompts User to input appointment details","lastModifiedDate":"2024-03-08"},{"lineNumber":433,"author":{"gitId":"ThatGirlJam"},"content":"5.  User inputs appointment details","lastModifiedDate":"2024-03-05"},{"lineNumber":434,"author":{"gitId":"limrik"},"content":"6.  CLInic cancels appointment for the patient","lastModifiedDate":"2024-03-08"},{"lineNumber":435,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":436,"author":{"gitId":"ThatGirlJam"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":437,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":438,"author":{"gitId":"ThatGirlJam"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":439,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":440,"author":{"gitId":"ThatGirlJam"},"content":"* 2a. The list is empty.","lastModifiedDate":"2024-03-05"},{"lineNumber":441,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":442,"author":{"gitId":"ThatGirlJam"},"content":"  Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":443,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":444,"author":{"gitId":"ThatGirlJam"},"content":"* 5a. The given appointment details are invalid.","lastModifiedDate":"2024-03-05"},{"lineNumber":445,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":446,"author":{"gitId":"limrik"},"content":"    * 5a1. CLInic shows an error message.","lastModifiedDate":"2024-03-08"},{"lineNumber":447,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":448,"author":{"gitId":"ThatGirlJam"},"content":"      Use case resumes at step 4.","lastModifiedDate":"2024-03-05"},{"lineNumber":449,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":450,"author":{"gitId":"ThatGirlJam"},"content":"* 6a. There is no appointment scheduled for that slot.","lastModifiedDate":"2024-03-05"},{"lineNumber":451,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":452,"author":{"gitId":"ThatGirlJam"},"content":"  Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":453,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":454,"author":{"gitId":"ThatGirlJam"},"content":"**Use case (UC5) : View all upcoming appointments displayed in a concise and accessible format**","lastModifiedDate":"2024-03-05"},{"lineNumber":455,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":456,"author":{"gitId":"ThatGirlJam"},"content":"**MSS**","lastModifiedDate":"2024-03-05"},{"lineNumber":457,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":458,"author":{"gitId":"ThatGirlJam"},"content":"1.  User requests to view all upcoming appointments","lastModifiedDate":"2024-03-05"},{"lineNumber":459,"author":{"gitId":"limrik"},"content":"2.  CLInic shows a list of upcoming appointments","lastModifiedDate":"2024-03-08"},{"lineNumber":460,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":461,"author":{"gitId":"ThatGirlJam"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":462,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":463,"author":{"gitId":"ThatGirlJam"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":464,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":465,"author":{"gitId":"ThatGirlJam"},"content":"* 2a. The list is empty.","lastModifiedDate":"2024-03-05"},{"lineNumber":466,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":467,"author":{"gitId":"ThatGirlJam"},"content":"  Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":468,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":469,"author":{"gitId":"ThatGirlJam"},"content":"**Use case (UC6) : Mark patient appointment as seen for that day**","lastModifiedDate":"2024-03-05"},{"lineNumber":470,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":471,"author":{"gitId":"ThatGirlJam"},"content":"**MSS**","lastModifiedDate":"2024-03-05"},{"lineNumber":472,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":473,"author":{"gitId":"ThatGirlJam"},"content":"1.  User requests to \u003cins\u003e view all upcoming appointments (UC5) \u003c/ins\u003e","lastModifiedDate":"2024-03-05"},{"lineNumber":474,"author":{"gitId":"limrik"},"content":"2.  CLInic shows a list of upcoming appointments","lastModifiedDate":"2024-03-08"},{"lineNumber":475,"author":{"gitId":"ThatGirlJam"},"content":"3.  User requests to mark a specific appointment in the list","lastModifiedDate":"2024-03-05"},{"lineNumber":476,"author":{"gitId":"limrik"},"content":"4.  CLInic marks the appointment","lastModifiedDate":"2024-03-08"},{"lineNumber":477,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":478,"author":{"gitId":"ThatGirlJam"},"content":"    Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":479,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":480,"author":{"gitId":"ThatGirlJam"},"content":"**Extensions**","lastModifiedDate":"2024-03-05"},{"lineNumber":481,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":482,"author":{"gitId":"ThatGirlJam"},"content":"* 2a. The list is empty.","lastModifiedDate":"2024-03-05"},{"lineNumber":483,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":484,"author":{"gitId":"ThatGirlJam"},"content":"  Use case ends.","lastModifiedDate":"2024-03-05"},{"lineNumber":485,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":486,"author":{"gitId":"ThatGirlJam"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2024-03-05"},{"lineNumber":487,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":488,"author":{"gitId":"limrik"},"content":"    * 3a1. CLInic shows an error message.","lastModifiedDate":"2024-03-08"},{"lineNumber":489,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":490,"author":{"gitId":"ThatGirlJam"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2024-03-05"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"dayn-1"},"content":"1. Patients should not have overlapping appointments","lastModifiedDate":"2024-03-06"},{"lineNumber":494,"author":{"gitId":"dayn-1"},"content":"2. Appointments cannot be backdated or scheduled for past dates","lastModifiedDate":"2024-03-06"},{"lineNumber":495,"author":{"gitId":"dayn-1"},"content":"3. Should be compatible with any _mainstream OS_ with Java `11` or above installed.","lastModifiedDate":"2024-03-06"},{"lineNumber":496,"author":{"gitId":"dayn-1"},"content":"4. Should load patient records and appointment details within three seconds","lastModifiedDate":"2024-03-06"},{"lineNumber":497,"author":{"gitId":"dayn-1"},"content":"5. Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2024-03-06"},{"lineNumber":498,"author":{"gitId":"dayn-1"},"content":"6. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2024-03-06"},{"lineNumber":499,"author":{"gitId":"dayn-1"},"content":"7. The project is expected to adhere to a schedule that delivers a feature set for each milestone","lastModifiedDate":"2024-03-06"},{"lineNumber":500,"author":{"gitId":"dayn-1"},"content":"8. The product is not required to have mouse-click navigation ","lastModifiedDate":"2024-03-06"},{"lineNumber":501,"author":{"gitId":"dayn-1"},"content":"9. The product is not required to integrate with other systems ","lastModifiedDate":"2024-03-06"},{"lineNumber":502,"author":{"gitId":"dayn-1"},"content":"10. The product should avoid terminology or graphics that are insensitive to patients ","lastModifiedDate":"2024-03-06"},{"lineNumber":503,"author":{"gitId":"dayn-1"},"content":"11. The product should be for a single user (not a multi-user product)","lastModifiedDate":"2024-03-06"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, MacOS","lastModifiedDate":"2024-02-09"},{"lineNumber":508,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"dayn-1"},"content":"* **Appointment**: A designated time slot for a patient to visit the clinic","lastModifiedDate":"2024-03-06"},{"lineNumber":510,"author":{"gitId":"dayn-1"},"content":"* **Appointment Type**: Categorises the purpose of visit eg. Vaccination, Medical Check-up, etc ","lastModifiedDate":"2024-03-06"},{"lineNumber":511,"author":{"gitId":"dayn-1"},"content":"* **Insurance Type**: Categorises insurance schemes applicable to the patient eg. Medisave, ElderShield, etc.","lastModifiedDate":"2024-03-06"},{"lineNumber":512,"author":{"gitId":"dayn-1"},"content":"* **Medical Records**: Refer to details of patients\u0027 medical allergies only (as at v1.2)","lastModifiedDate":"2024-03-06"},{"lineNumber":513,"author":{"gitId":"dayn-1"},"content":"* **Recurring Appointments**: Refer to appointments that occur regularly eg. weekly or monthly","lastModifiedDate":"2024-03-06"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":523,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":524,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":566,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"limrik":58,"dayn-1":16,"ThatGirlJam":118,"-":376}},{"path":"docs/_markbind/layouts/default.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003chead-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003clink rel\u003d\"stylesheet\" href\u003d\"{{baseUrl}}/stylesheets/main.css\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c/head-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cheader sticky\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003cnavbar type\u003d\"dark\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003ca slot\u003d\"brand\" href\u003d\"{{baseUrl}}/index.html\" title\u003d\"Home\" class\u003d\"navbar-brand\"\u003eCLInic\u003c/a\u003e","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/index.html\" class\u003d\"nav-link\"\u003eHome\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/UserGuide.html\" class\u003d\"nav-link\"\u003eUser Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/DeveloperGuide.html\" class\u003d\"nav-link\"\u003eDeveloper Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/AboutUs.html\" class\u003d\"nav-link\"\u003eAbout Us\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"    \u003cli\u003e\u003ca href\u003d\"https://github.com/AY2324S2-CS2103T-F10-3/tp\" target\u003d\"_blank\" class\u003d\"nav-link\"\u003e\u003cmd\u003e:fab-github:\u003c/md\u003e\u003c/a\u003e","lastModifiedDate":"2024-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cli slot\u003d\"right\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cform class\u003d\"navbar-form\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003csearchbar :data\u003d\"searchData\" placeholder\u003d\"Search\" :on-hit\u003d\"searchCallback\" menu-align-right\u003e\u003c/searchbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003c/form\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/navbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003c/header\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"flex-body\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"site-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"site-nav-top\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"fw-bold mb-2\" style\u003d\"font-size: 1.25rem;\"\u003eSite Map\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003csite-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* [Home]({{ baseUrl }}/index.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* [User Guide]({{ baseUrl }}/UserGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * [Quick Start]({{ baseUrl }}/UserGuide.html#quick-start)","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * [Features]({{ baseUrl }}/UserGuide.html#features)","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * [FAQ]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  * [Command Summary]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* [Developer Guide]({{ baseUrl }}/DeveloperGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  * [Acknowledgements]({{ baseUrl }}/DeveloperGuide.html#acknowledgements)","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * [Setting Up]({{ baseUrl }}/DeveloperGuide.html#setting-up-getting-started)","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * [Design]({{ baseUrl }}/DeveloperGuide.html#design)","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * [Implementation]({{ baseUrl }}/DeveloperGuide.html#implementation)","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * [Documentation, logging, testing, configuration, dev-ops]({{ baseUrl }}/DeveloperGuide.html#documentation-logging-testing-configuration-dev-ops)","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * [Appendix: Requirements]({{ baseUrl }}/DeveloperGuide.html#appendix-requirements)","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  * [Appendix: Instructions for manual testing]({{ baseUrl }}/DeveloperGuide.html#appendix-instructions-for-manual-testing)","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Tutorials","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * [Tracing code]({{ baseUrl }}/tutorials/TracingCode.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  * [Adding a command]({{ baseUrl }}/tutorials/AddRemark.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  * [Removing Fields]({{ baseUrl }}/tutorials/RemovingFields.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [About Us]({{ baseUrl }}/AboutUs.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u003c/site-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  \u003cdiv id\u003d\"content-wrapper\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    {{ content }}","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"page-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u003cpage-nav /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003cscroll-top-button\u003e\u003c/scroll-top-button\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003cfooter\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u003c!-- Support MarkBind by including a link to us on your landing page! --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"text-center\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    \u003csmall\u003e[\u003cmd\u003e**Powered by**\u003c/md\u003e \u003cimg src\u003d\"https://markbind.org/favicon.ico\" width\u003d\"30\"\u003e {{MarkBind}}, generated on {{timestamp}}]\u003c/small\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/footer\u003e","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"dayn-1":1,"-":66}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"# CLInic","lastModifiedDate":"2024-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)","lastModifiedDate":"2020-08-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"**CLInic is a desktop application for managing patient details and appointments in a clinic.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2024-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"* If you are interested in using CLInic, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2024-03-08"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"* If you are interested about developing CLInic, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2024-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"dayn-1":4,"-":17}},{"path":"src/main/java/seedu/address/commons/core/date/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package seedu.address.commons.core.date;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"//import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":" * Represents a date","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"public class Date {","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"    private static final String DATE_FORMAT \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"            \"Date should be in the format \" + DATE_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    public final LocalDate value;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"     * Creates a Date Object","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"     * @param dateString Date string that has to satisfy validation requirements","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"    public Date(String dateString) {","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(dateString);","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"        checkArgument(isValidDate(dateString), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"        this.value \u003d LocalDate.parse(dateString);","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"     * Returns if a given string is a valid date.","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"    public static boolean isValidDate(String dateString) {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        try {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"            LocalDate.parse(dateString, DATE_FORMATTER);","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"     * Returns if date is before today","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"    public static boolean isBeforeToday(String date) {","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        return LocalDate.parse(date, DATE_FORMATTER).isBefore(LocalDate.now());","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        return this.value.format(DATE_FORMATTER);","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-12"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"        if (!(other instanceof Date)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"        Date otherDate \u003d (Date) other;","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"        return this.value.equals(otherDate.value);","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"limrik"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        return this.value.hashCode();","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"limrik":44,"dayn-1":31}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        builder.append(person.getName())","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"                .append(\"; NRIC: \")","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"                .append(person.getNric())","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"                .append(\"; Date of Birth: \")","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"                .append(person.getDob())","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .append(person.getPhone())","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .append(person.getAddress())","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .append(\"; Tags: \");","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        person.getTags().forEach(builder::append);","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"     * Formats the {@code appointment} for display to the user.","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    public static String format(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        builder.append(appointment.getNric())","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"                .append(\"; Date: \")","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"                .append(appointment.getDate())","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"                .append(\"; Time: \")","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"                .append(appointment.getTimePeriod())","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"                .append(\"; Type: \")","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"                .append(appointment.getAppointmentType())","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"                .append(\"; Notes: \");","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"        return builder.toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dayn-1":21,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/AddAppCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":" * Creates an AddAppCommand to add the specified {@code Appointment}","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"public class AddAppCommand extends Command {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"    public static final String COMMAND_WORD \u003d \"addApp\";","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"            + \": Adds an appointment for the patient identified by the NRIC given \\n\"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"            + \"Parameters: \"","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_START_TIME + \"START_TIME \"","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_END_TIME + \"END_TIME \"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_TAG + \"APPOINTMENT_TYPE \"","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_NOTE + \"NOTE ...\\n\"","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_NRIC + \"T0123456A \"","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_DATE + \"2024-02-20 \"","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_START_TIME + \"11:00 \"","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_END_TIME + \"11:30 \"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_TAG + \"Medical Check-up \"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"            + PREFIX_NOTE + \"May come earlier \";","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_ADD_APPOINTMENT_SUCCESS \u003d \"New appointment added: %1$s\";","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in CLInic\";","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"Patient of given Nric is not found\";","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"    private final Appointment apptToAdd;","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"     * Creates an AddAppCommand to add the specified {@code Appointment}","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"    public AddAppCommand(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"        this.apptToAdd \u003d appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(model);","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        Nric nric \u003d apptToAdd.getNric();","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        if (!model.hasPersonWithNric(nric)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"        if (model.hasAppointment(apptToAdd)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"        model.addAppointment(apptToAdd);","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_APPOINTMENT_SUCCESS, Messages.format(apptToAdd)));","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"        if (!(other instanceof AddAppCommand)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"        AddAppCommand otherAddAppCommand \u003d (AddAppCommand) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"        return apptToAdd.equals(otherAddAppCommand.apptToAdd);","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"                .add(\"appointment\", apptToAdd)","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"                .toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"dayn-1":96}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the CLInic. \"","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"            + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"            + PREFIX_DOB + \"DOB \"","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"            + \"[\" + PREFIX_TAG + \"MEDICAL ALLERGIES]...\\n\"","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"            + PREFIX_NRIC + \"T0123456A \"","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"            + PREFIX_DOB + \"2001-01-30 \"","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"            + PREFIX_TAG + \"insulin \"","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"            + PREFIX_TAG + \"panadol\";","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the CLInic\";","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"limrik":11,"-":79}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":" * Edits the details of an existing person in the CLInic.","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"            + \"[\" + PREFIX_NRIC + \"NRIC] \"","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"            + \"[\" + PREFIX_DOB + \"DOB] \"","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the CLInic.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"limrik"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());","lastModifiedDate":"2024-03-12"},{"lineNumber":106,"author":{"gitId":"limrik"},"content":"        DateOfBirth updatedDob \u003d editPersonDescriptor.getDateOfBirth().orElse(personToEdit.getDob());","lastModifiedDate":"2024-03-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"limrik"},"content":"        return new Person(updatedName, updatedNric, updatedDob, updatedPhone,","lastModifiedDate":"2024-03-12"},{"lineNumber":113,"author":{"gitId":"limrik"},"content":"                updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2024-03-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":146,"author":{"gitId":"limrik"},"content":"        private Nric nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":147,"author":{"gitId":"limrik"},"content":"        private DateOfBirth dob;","lastModifiedDate":"2024-03-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":161,"author":{"gitId":"limrik"},"content":"            setNric(toCopy.nric);","lastModifiedDate":"2024-03-12"},{"lineNumber":162,"author":{"gitId":"limrik"},"content":"            setDateOfBirth(toCopy.dob);","lastModifiedDate":"2024-03-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"limrik"},"content":"            return CollectionUtil.isAnyNonNull(name, nric, dob, phone, email, address, tags);","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"limrik"},"content":"        public void setNric(Nric nric) {","lastModifiedDate":"2024-03-12"},{"lineNumber":185,"author":{"gitId":"limrik"},"content":"            this.nric \u003d nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":186,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":187,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":188,"author":{"gitId":"limrik"},"content":"        public Optional\u003cNric\u003e getNric() {","lastModifiedDate":"2024-03-12"},{"lineNumber":189,"author":{"gitId":"limrik"},"content":"            return Optional.ofNullable(nric);","lastModifiedDate":"2024-03-12"},{"lineNumber":190,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":191,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":192,"author":{"gitId":"limrik"},"content":"        public void setDateOfBirth(DateOfBirth dob) {","lastModifiedDate":"2024-03-12"},{"lineNumber":193,"author":{"gitId":"limrik"},"content":"            this.dob \u003d dob;","lastModifiedDate":"2024-03-12"},{"lineNumber":194,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":195,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":196,"author":{"gitId":"limrik"},"content":"        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {","lastModifiedDate":"2024-03-12"},{"lineNumber":197,"author":{"gitId":"limrik"},"content":"            return Optional.ofNullable(dob);","lastModifiedDate":"2024-03-12"},{"lineNumber":198,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":199,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":225,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":226,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":227,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":233,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":234,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":235,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":236,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":254,"author":{"gitId":"limrik"},"content":"                    \u0026\u0026 Objects.equals(nric, otherEditPersonDescriptor.nric)","lastModifiedDate":"2024-03-12"},{"lineNumber":255,"author":{"gitId":"limrik"},"content":"                    \u0026\u0026 Objects.equals(dob, otherEditPersonDescriptor.dob)","lastModifiedDate":"2024-03-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPersonDescriptor.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":259,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(tags, otherEditPersonDescriptor.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":266,"author":{"gitId":"limrik"},"content":"                    .add(\"nric\", nric)","lastModifiedDate":"2024-03-12"},{"lineNumber":267,"author":{"gitId":"limrik"},"content":"                    .add(\"dob\", dob)","lastModifiedDate":"2024-03-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                    .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"limrik":37,"-":238}},{"path":"src/main/java/seedu/address/logic/parser/AddAppCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.commands.AddAppCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.AppointmentType;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Note;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.TimePeriod;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"public class AddAppCommandParser implements Parser\u003cAddAppCommand\u003e {","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    public AddAppCommand parse(String args) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NRIC, PREFIX_DATE, PREFIX_START_TIME,","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"                        PREFIX_END_TIME, PREFIX_TAG, PREFIX_NOTE);","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_DATE, PREFIX_START_TIME,","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"                PREFIX_END_TIME, PREFIX_TAG, PREFIX_NOTE)","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NRIC, PREFIX_DATE, PREFIX_START_TIME,","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"                PREFIX_END_TIME, PREFIX_TAG, PREFIX_NOTE);","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        TimePeriod timePeriod \u003d ParserUtil.parseTimePeriod(","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"                argMultimap.getValue(PREFIX_START_TIME).get(),","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"                argMultimap.getValue(PREFIX_END_TIME).get());","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"        Note note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        AppointmentType appointmentType \u003d ParserUtil.parseAppointmentType(","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"                argMultimap.getValue(PREFIX_TAG).get());","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"        Appointment appToAdd \u003d new Appointment(nric, date, timePeriod, appointmentType, note);","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"        return new AddAppCommand(appToAdd);","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"dayn-1":68}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_DOB, PREFIX_PHONE,","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_DOB, PREFIX_ADDRESS,","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"                PREFIX_PHONE, PREFIX_EMAIL) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_NRIC, PREFIX_DOB,","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"        DateOfBirth dob \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get());","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"        Person person \u003d new Person(name, nric, dob, phone, email, address, tagList);","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"limrik":13,"-":55}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.commands.AddAppCommand;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        case AddAppCommand.COMMAND_WORD:","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"            return new AddAppCommandParser().parse(arguments);","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dayn-1":4,"-":86}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"i/\");","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    public static final Prefix PREFIX_DOB \u003d new Prefix(\"b/\");","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"from/\");","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"to/\");","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"note/\");","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"limrik":2,"dayn-1":4,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_DOB, PREFIX_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_NRIC, PREFIX_DOB, PREFIX_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"                PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"        if (argMultimap.getValue(PREFIX_DOB).isPresent()) {","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"            editPersonDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get()));","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"limrik":12,"-":83}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.AppointmentType;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Note;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Time;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.TimePeriod;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"     * Parses a {@code String nric} into a {@code Nric}.","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"     * @throws ParseException if the given {@code nric} is invalid.","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"    public static Nric parseNric(String nric) throws ParseException {","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"        String trimmedNric \u003d nric.trim();","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"        if (!Nric.isValidNric(trimmedNric)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"limrik"},"content":"            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":72,"author":{"gitId":"limrik"},"content":"        return new Nric(trimmedNric);","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":75,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"limrik"},"content":"     * Parses a {@code String dob} into a {@code dob}.","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"limrik"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":79,"author":{"gitId":"limrik"},"content":"     * @throws ParseException if the given {@code dob} is invalid.","lastModifiedDate":"2024-03-12"},{"lineNumber":80,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":81,"author":{"gitId":"limrik"},"content":"    public static DateOfBirth parseDateOfBirth(String dob) throws ParseException {","lastModifiedDate":"2024-03-12"},{"lineNumber":82,"author":{"gitId":"limrik"},"content":"        requireNonNull(dob);","lastModifiedDate":"2024-03-12"},{"lineNumber":83,"author":{"gitId":"limrik"},"content":"        String trimmedDob \u003d dob.trim();","lastModifiedDate":"2024-03-12"},{"lineNumber":84,"author":{"gitId":"limrik"},"content":"        if (!Date.isValidDate(trimmedDob)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"limrik"},"content":"            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"limrik"},"content":"        return new DateOfBirth(trimmedDob);","lastModifiedDate":"2024-03-12"},{"lineNumber":88,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"dayn-1"},"content":"     * Parses a {@code String date} into a {@code date}.","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"dayn-1"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"    public static Date parseDate(String date) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(date);","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"        if (!Date.isValidDate(trimmedDate)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"        return new Date(trimmedDate);","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"dayn-1"},"content":"     * Parses a {@code String appointmentType} into a {@code AppointmentType}.","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"dayn-1"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"dayn-1"},"content":"     * @throws ParseException if the given {@code appointmentType} is invalid.","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"dayn-1"},"content":"    public static AppointmentType parseAppointmentType(String apptType)","lastModifiedDate":"2024-03-13"},{"lineNumber":157,"author":{"gitId":"dayn-1"},"content":"            throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":158,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(apptType);","lastModifiedDate":"2024-03-13"},{"lineNumber":159,"author":{"gitId":"dayn-1"},"content":"        String trimmedApptType \u003d apptType.trim();","lastModifiedDate":"2024-03-13"},{"lineNumber":160,"author":{"gitId":"dayn-1"},"content":"        if (!AppointmentType.isValidAppointmentType(apptType)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":161,"author":{"gitId":"dayn-1"},"content":"            throw new ParseException(AppointmentType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":162,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":163,"author":{"gitId":"dayn-1"},"content":"        return new AppointmentType(apptType);","lastModifiedDate":"2024-03-13"},{"lineNumber":164,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":165,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":166,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":167,"author":{"gitId":"dayn-1"},"content":"     * Parses a {@code String note} into a {@code Note}.","lastModifiedDate":"2024-03-13"},{"lineNumber":168,"author":{"gitId":"dayn-1"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-13"},{"lineNumber":169,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":170,"author":{"gitId":"dayn-1"},"content":"     * @throws ParseException if the given {@code note} is invalid.","lastModifiedDate":"2024-03-13"},{"lineNumber":171,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":172,"author":{"gitId":"dayn-1"},"content":"    public static Note parseNote(String note) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":173,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(note);","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"dayn-1"},"content":"        String trimmedNote \u003d note.trim();","lastModifiedDate":"2024-03-13"},{"lineNumber":175,"author":{"gitId":"dayn-1"},"content":"        if (!Note.isValidNote(trimmedNote)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":176,"author":{"gitId":"dayn-1"},"content":"            throw new ParseException(Note.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":178,"author":{"gitId":"dayn-1"},"content":"        return new Note(note);","lastModifiedDate":"2024-03-13"},{"lineNumber":179,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":181,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":182,"author":{"gitId":"dayn-1"},"content":"     * Parses a {@code String time} into a {@code Time}.","lastModifiedDate":"2024-03-13"},{"lineNumber":183,"author":{"gitId":"dayn-1"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2024-03-13"},{"lineNumber":184,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":185,"author":{"gitId":"dayn-1"},"content":"     * @throws ParseException if the given {@code time} is invalid.","lastModifiedDate":"2024-03-13"},{"lineNumber":186,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":187,"author":{"gitId":"dayn-1"},"content":"    public static Time parseTime(String time) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":188,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(time);","lastModifiedDate":"2024-03-13"},{"lineNumber":189,"author":{"gitId":"dayn-1"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2024-03-13"},{"lineNumber":190,"author":{"gitId":"dayn-1"},"content":"        if (!Time.isValidTime(trimmedTime)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":191,"author":{"gitId":"dayn-1"},"content":"            throw new ParseException(Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":192,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":193,"author":{"gitId":"dayn-1"},"content":"        return new Time(trimmedTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":194,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":195,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":196,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":197,"author":{"gitId":"dayn-1"},"content":"     * Parses a {@code String fromTime} and {@code String toTime}into a {@code TimePeriod}.","lastModifiedDate":"2024-03-13"},{"lineNumber":198,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":199,"author":{"gitId":"dayn-1"},"content":"     * @throws ParseException if the given {@code TimePeriod} is invalid.","lastModifiedDate":"2024-03-13"},{"lineNumber":200,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":201,"author":{"gitId":"dayn-1"},"content":"    public static TimePeriod parseTimePeriod(String fromTime, String toTime) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":202,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(fromTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":203,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(toTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":204,"author":{"gitId":"dayn-1"},"content":"        Time startTime \u003d parseTime(fromTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":205,"author":{"gitId":"dayn-1"},"content":"        Time endTime \u003d parseTime(toTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":206,"author":{"gitId":"dayn-1"},"content":"        if (!TimePeriod.isValidTimePeriod(startTime, endTime)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":207,"author":{"gitId":"dayn-1"},"content":"            throw new ParseException(TimePeriod.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":208,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":209,"author":{"gitId":"dayn-1"},"content":"        return new TimePeriod(startTime, endTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":210,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":211,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"limrik":33,"dayn-1":81,"-":124}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.AppointmentList;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    private final AppointmentList appointments;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"        appointments \u003d new AppointmentList();","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"     * Returns true if a person with the same name as {@code person} exists in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"    public boolean hasPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        return persons.hasPersonWithNric(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"     * Returns true if a person with the same name as {@code person} exists in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"    public Person getPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        return persons.getPersonWithNric(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"    //// appointment-level operations","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"dayn-1"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"dayn-1"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"dayn-1"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"dayn-1"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"     * Returns true if an appointment with the same identity as {@code appointment}","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"dayn-1"},"content":"     * exists in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"dayn-1"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"dayn-1"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"     * Adds an appointment to the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"     * The appointment must not already exist in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"    public void addAppointment(Appointment a) {","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"        appointments.add(a);","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"dayn-1"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"dayn-1"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"dayn-1"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"dayn-1"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":157,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":158,"author":{"gitId":"dayn-1"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2024-03-13"},{"lineNumber":159,"author":{"gitId":"dayn-1"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":160,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":161,"author":{"gitId":"dayn-1"},"content":"    public void removeAppointment(Appointment key) {","lastModifiedDate":"2024-03-13"},{"lineNumber":162,"author":{"gitId":"dayn-1"},"content":"        appointments.remove(key);","lastModifiedDate":"2024-03-13"},{"lineNumber":163,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":164,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)","lastModifiedDate":"2019-02-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":179,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"dayn-1"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":181,"author":{"gitId":"dayn-1"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2024-03-13"},{"lineNumber":182,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":183,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddressBook)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        AddressBook otherAddressBook \u003d (AddressBook) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return persons.equals(otherAddressBook.persons);","lastModifiedDate":"2023-07-13"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"dayn-1":73,"-":130}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"     * Returns true if a person with the same nric as {@code nric} exists in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"    boolean hasPersonWithNric(Nric nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"     * Returns person with the same nric as {@code nric}.","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"    Person getPersonWithNric(Nric nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in CLInic.","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"     * Deletes the given appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"     * The appointment must exist in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"    void deleteAppointment(Appointment appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"     * Adds the given appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"     * {@code appointment} must not already exist in CLInic","lastModifiedDate":"2024-03-13"},{"lineNumber":116,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":117,"author":{"gitId":"dayn-1"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"dayn-1"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"dayn-1"},"content":"     * The appointment details of {@code editedAppointment} must","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"dayn-1"},"content":"     * not be the same as another existing appointment in CLInic.","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"dayn-1"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"dayn-1"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"dayn-1"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"dayn-1"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"dayn-1"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"dayn-1":48,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"    public boolean hasPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"        return addressBook.hasPersonWithNric(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"    public Person getPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"        return addressBook.getPersonWithNric(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"dayn-1"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"dayn-1"},"content":"        return addressBook.hasAppointment(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"        // addressBook.removeAppointment(target);","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"        addressBook.addAppointment(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"dayn-1"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"dayn-1"},"content":"        addressBook.setAppointment(target, editedAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":171,"author":{"gitId":"dayn-1"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-13"},{"lineNumber":172,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":173,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"dayn-1"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of","lastModifiedDate":"2024-03-13"},{"lineNumber":175,"author":{"gitId":"dayn-1"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2024-03-13"},{"lineNumber":176,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":178,"author":{"gitId":"dayn-1"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":179,"author":{"gitId":"dayn-1"},"content":"        return filteredAppointments;","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":181,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":182,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":183,"author":{"gitId":"dayn-1"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2024-03-13"},{"lineNumber":184,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2024-03-13"},{"lineNumber":185,"author":{"gitId":"dayn-1"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2024-03-13"},{"lineNumber":186,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":187,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        return addressBook.equals(otherModelManager.addressBook)","lastModifiedDate":"2023-07-13"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons);","lastModifiedDate":"2023-07-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"dayn-1":57,"-":148}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"     * Returns an unmodifiable view of the appointments list.","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"     * This list will not contain any duplicate appointments.","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"dayn-1":7,"-":17}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import java.util.Objects;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":" * Represents an Appointment in the application.","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"public class Appointment {","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"    // Identity fields","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    // Data fields","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"    private final Date date;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    private final TimePeriod timePeriod;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    private final AppointmentType appointmentType;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"    private final Note note;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"    public Appointment(Nric nric, Date date, TimePeriod timePeriod,","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"                       AppointmentType appointmentType, Note note) {","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"        requireAllNonNull(nric, date, timePeriod, appointmentType, note);","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"        this.timePeriod \u003d timePeriod;","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"        this.appointmentType \u003d appointmentType;","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        this.note \u003d note;","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"    public Nric getNric() {","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"        return nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"    public Date getDate() {","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"        return date;","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"    public TimePeriod getTimePeriod() {","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        return timePeriod;","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"    public AppointmentType getAppointmentType() {","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        return appointmentType;","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"    public Note getNote() {","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"        return note;","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"     * Returns true if both appointments have the same patient, date and time periods.","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"     * This defines a weaker notion of equality between two appointments.","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"    public boolean isSameAppointment(Appointment otherAppointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"        if (otherAppointment \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"        return otherAppointment !\u003d null","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 otherAppointment.nric.equals(nric)","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 otherAppointment.date.equals(date)","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 otherAppointment.timePeriod.equals(timePeriod);","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"     * Returns true if both appointments have the same patient and data fields.","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"     * This defines a stronger notion of equality between two appointments.","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"        return nric.equals(otherAppointment.nric)","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 date.equals(otherAppointment.date)","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 timePeriod.equals(otherAppointment.timePeriod)","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 appointmentType.equals(otherAppointment.appointmentType)","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 note.equals(otherAppointment.note);","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"        return Objects.hash(nric, date, timePeriod, appointmentType, note);","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"                .add(\"nric\", nric)","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"                .add(\"date\", date)","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"                .add(\"timePeriod\", timePeriod)","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"                .add(\"appointmentType\", appointmentType)","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"                .add(\"note\", note)","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"                .toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"dayn-1":112}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import java.util.Iterator;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import java.util.List;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":" * An appointment is considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}.","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":" * As such, adding and updating of appointments uses Appointment#isSameAppointment(Appointment) for equality","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":" * to ensure that the appointment being added or updated is unique and not duplicated.","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":" * However, the removal of an appointment uses Person#equals(Object) to ensure that the","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":" * appointment with exactly the same fields will be removed.","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":" *","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":" *","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":" * @see Appointment#isSameAppointment(Appointment)","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"public class AppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        return internalList.stream().anyMatch(toCheck::isSameAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"     * Adds an appointment to the list.","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"     * The appointment must not already exist in the list.","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"     * The appointment of {@code editedAppointment} must not be the same as another existing appointment in the list.","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"     * Removes the equivalent appointment from the list.","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"     * The appointment must exist in the list.","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"    public void setAppointments(AppointmentList replacement) {","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"     * Replaces the contents of this list with {@code appointments}.","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"     * {@code appointments} must not contain duplicate appointments.","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"        return internalList.iterator();","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":116,"author":{"gitId":"dayn-1"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":117,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"dayn-1"},"content":"        if (!(other instanceof AppointmentList)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"dayn-1"},"content":"        AppointmentList otherAppointmentList \u003d (AppointmentList) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"dayn-1"},"content":"        return internalList.equals(otherAppointmentList.internalList);","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"dayn-1"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"        return internalList.hashCode();","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":134,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":135,"author":{"gitId":"dayn-1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"dayn-1"},"content":"        return internalList.toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"                if (appointments.get(i).isSameAppointment(appointments.get(j))) {","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"                    return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"                }","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"dayn-1"},"content":"            }","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"dayn-1"},"content":"        return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"dayn-1":152}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":" * Represents an AppointmentType in CLInic.","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":" * Guarantees: immutable; typeName is valid as declared in {@link #isValidAppointmentType(String)}","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"public class AppointmentType {","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointment type should not be empty\";","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"    public static final String VALIDATION_REGEX \u003d \"^.+$\";","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"    public final String typeName;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"     * Constructs an {@code AppointmentType}.","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"     * @param typeName A valid appointment type name.","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    public AppointmentType(String typeName) {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(typeName);","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"        checkArgument(isValidAppointmentType(typeName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"        this.typeName \u003d typeName;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"     * Returns true if a given string is a valid appointment type name.","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"    public static boolean isValidAppointmentType(String test) {","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"        if (!(other instanceof AppointmentType)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        AppointmentType otherType \u003d (AppointmentType) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        return typeName.equals(otherType.typeName);","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        return typeName.hashCode();","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"        return \u0027[\u0027 + typeName + \u0027]\u0027;","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"dayn-1":62}},{"path":"src/main/java/seedu/address/model/appointment/Note.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":" * Represents a Note in the appointment","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":" * Guarantees: immutable; note is valid as declared in {@link #isValidNote(String)}","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"public class Note {","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"            \"Note should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"    /*","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"     * The first character of the notes must not be a whitespace,","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    public final String note;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"     * Constructs a {@code Note}.","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"     * @param note A valid note.","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"    public Note(String note) {","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(note);","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"        checkArgument(isValidNote(note), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"        this.note \u003d note;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"    public static boolean isValidNote(String test) {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"        return note;","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        if (!(other instanceof Note)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"        Note otherNote \u003d (Note) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        return note.equals(otherNote.note);","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        return note.hashCode();","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"dayn-1":67}},{"path":"src/main/java/seedu/address/model/appointment/Time.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":" * Represents a time.","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"public class Time implements Comparable\u003cTime\u003e {","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"    private static final String TIME_FORMAT \u003d \"HH:mm\";","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should be of the format \" + TIME_FORMAT","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"            + \"1. The HH part should only contain integers between 0 to 23 (24-hour clock) \\n\"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"            + \"2. The mm part should only contain integers between 0 to 59\\n\";","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    private static final String HOUR_REGEX \u003d \"([01]?[0-9]|2[0-3])\";","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    private static final String MINUTE_REGEX \u003d \"[0-5][0-9]\";","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"    private static final String VALIDATION_REGEX \u003d HOUR_REGEX + \":\" + MINUTE_REGEX;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    public final LocalTime value;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"     * Constructs a {@code Time}.","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"     * @param time A valid time string in the format \"HH:mm\".","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    public Time(String time) {","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(time);","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        value \u003d LocalTime.parse(time);","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"     * Returns if a given string is a valid time.","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"    public static boolean isValidTime(String test) {","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"    public int compareTo(Time otherTime) {","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        return value.compareTo(otherTime.value);","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        return value.format(TIME_FORMATTER);","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        if (!(other instanceof Time)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"        Time otherTime \u003d (Time) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"        return value.equals(otherTime.value);","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        return value.hashCode();","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"dayn-1":76}},{"path":"src/main/java/seedu/address/model/appointment/TimePeriod.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import java.util.Objects;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":" * Represents a time period with start and end times","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTimePeriod(Time, Time)}","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"public class TimePeriod {","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"End time of time period \"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"            + \"should be after start time\";","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"    private final Time startTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"    private final Time endTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"     * Constructs a {@code TimePeriod} with the given start and end times.","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"     * @param startTime The start time of the period.","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"     * @param endTime   The end time of the period.","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"    public TimePeriod(Time startTime, Time endTime) {","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(startTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(endTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"        checkArgument(isValidTimePeriod(startTime, endTime), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"     * Returns the start time of the period.","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"     * @return The start time.","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"    public Time getStartTime() {","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        return startTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"     * Returns the end time of the period.","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"     * @return The end time.","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"    public Time getEndTime() {","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        return endTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"     * Checks if the given start time is before the end time.","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"     * @param startTime The start time.","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"     * @param endTime   The end time.","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"     * @return True if the start time is before the end time, false otherwise.","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    public static boolean isValidTimePeriod(Time startTime, Time endTime) {","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        return startTime.compareTo(endTime) \u003c 0;","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        return startTime.toString() + \" to \" + endTime.toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        if (!(other instanceof TimePeriod)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"        TimePeriod otherTimePeriod \u003d (TimePeriod) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"        return startTime.equals(otherTimePeriod.startTime)","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 endTime.equals(otherTimePeriod.endTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"        return Objects.hash(startTime, endTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"dayn-1":88}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"public class AppointmentNotFoundException extends RuntimeException {}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"dayn-1":6}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":" * identity).","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"dayn-1":11}},{"path":"src/main/java/seedu/address/model/person/DateOfBirth.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" * Represents a Patient\u0027s Date of Birth in the CLInic.","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"public class DateOfBirth extends Date {","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"            \"Date of birth must be before today\u0027s date\";","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * Constructs an {@code DateOfBirth}.","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"     * @param dateOfBirth A valid date of birth (before today).","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    public DateOfBirth(String dateOfBirth) {","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        super(dateOfBirth);","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        checkArgument(isValidDateOfBirth(dateOfBirth), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     * Returns if a given string is a valid date of birth.","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"    public static boolean isValidDateOfBirth(String dateOfBirth) {","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"        return Date.isBeforeToday(dateOfBirth);","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"limrik":27,"dayn-1":5}},{"path":"src/main/java/seedu/address/model/person/Nric.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-12"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2024-03-12"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-03-12"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":" * Represents a Patient\u0027s NRIC in the CLInic.","lastModifiedDate":"2024-03-12"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}","lastModifiedDate":"2024-03-12"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"public class Nric {","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"            \"NRIC should start and end with capital letters with 7 numbers in between them.\";","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    public static final String VALIDATION_REGEX \u003d \"[A-Z]\\\\d{7}[A-Z]\";","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    public final String value;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * Returns if a given string is a valid NRIC.","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    public Nric(String nric) {","lastModifiedDate":"2024-03-12"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-12"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        value \u003d nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     * Returns true if a given string is a valid NRIC.","lastModifiedDate":"2024-03-12"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    public static boolean isValidNric(String test) {","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"    public String toString() {","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        return value;","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-12"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"            return true;","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"        if (!(other instanceof Nric)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"            return false;","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        Nric otherNric \u003d (Nric) other;","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        return value.equals(otherNric.value);","lastModifiedDate":"2024-03-12"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-03-12"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"        return value.hashCode();","lastModifiedDate":"2024-03-12"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-03-12"}],"authorContributionMap":{"limrik":56}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    private final Nric nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    private final DateOfBirth dob;","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"    public Person(Name name, Nric nric, DateOfBirth dob, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2024-03-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"        this.dob \u003d dob;","lastModifiedDate":"2024-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"     * Placeholder person creation with just name","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"    public Person(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        this.name \u003d new Name(\"Placeholder\");","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        this.dob \u003d new DateOfBirth(\"1988-08-08\");","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        this.phone \u003d new Phone(\"12345678\");","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"        this.email \u003d new Email(\"test@test.com\");","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"        this.address \u003d new Address(\"Placeholder\");","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"    public Nric getNric() {","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"        return nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"    public DateOfBirth getDob() {","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"        return dob;","lastModifiedDate":"2024-03-12"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"     * Returns true if both persons have the same nric.","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"                \u0026\u0026 otherPerson.getNric().equals(getNric());","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"limrik"},"content":"                \u0026\u0026 nric.equals(otherPerson.nric)","lastModifiedDate":"2024-03-12"},{"lineNumber":121,"author":{"gitId":"limrik"},"content":"                \u0026\u0026 dob.equals(otherPerson.dob)","lastModifiedDate":"2024-03-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 address.equals(otherPerson.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                \u0026\u0026 tags.equals(otherPerson.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"limrik"},"content":"        return Objects.hash(name, nric, dob, phone, email, address, tags);","lastModifiedDate":"2024-03-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":138,"author":{"gitId":"limrik"},"content":"                .add(\"nric\", nric)","lastModifiedDate":"2024-03-12"},{"lineNumber":139,"author":{"gitId":"limrik"},"content":"                .add(\"dob\", dob)","lastModifiedDate":"2024-03-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dayn-1":16,"limrik":18,"-":113}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"     * Get person with name {@code name}.","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"     * {@code name} must exist within list.","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"    public Person getPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"        Person equivalentPerson \u003d new Person(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"        for (Person person : internalList) {","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"            if (person.isSamePerson(equivalentPerson)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"                return person;","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"            }","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"        throw new PersonNotFoundException();","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"     * Returns true if a person with the same name as {@code person} exists in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":116,"author":{"gitId":"dayn-1"},"content":"    public boolean hasPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":117,"author":{"gitId":"dayn-1"},"content":"        requireNonNull(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"dayn-1"},"content":"        return contains(new Person(nric));","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(other instanceof UniquePersonList)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        UniquePersonList otherUniquePersonList \u003d (UniquePersonList) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return internalList.equals(otherUniquePersonList.internalList);","lastModifiedDate":"2023-07-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return internalList.toString();","lastModifiedDate":"2019-02-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dayn-1":21,"-":150}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2024-03-12"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2024-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Nric(\"T0123456A\"), new DateOfBirth(\"2001-01-01\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2024-02-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"            new Person(new Name(\"Bernice Yu\"), new Nric(\"T0123456B\"), new DateOfBirth(\"2001-01-02\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"                new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2024-02-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Nric(\"T0123456C\"), new DateOfBirth(\"2001-01-03\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"                new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2024-02-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"            new Person(new Name(\"David Li\"), new Nric(\"T0123456D\"), new DateOfBirth(\"2001-01-04\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"                new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2024-02-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Nric(\"T0123456E\"), new DateOfBirth(\"2001-01-05\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"                new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2024-02-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Nric(\"T0123456AF\"), new DateOfBirth(\"2001-01-06\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"                new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2024-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2024-02-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"limrik":14,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.AppointmentType;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Note;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Time;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.TimePeriod;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    private final String nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    private final String date;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"    private final String startTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"    private final String endTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    private final String appointmentType;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"    private final String note;","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"    @JsonCreator","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"nric\") String nric, @JsonProperty(\"date\") String date,","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"                             @JsonProperty(\"startTime\") String startTime, @JsonProperty(\"endTime\") String endTime,","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"                             @JsonProperty(\"appointmentType\") String appointmentType,","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"                                  @JsonProperty(\"note\") String note) {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"        this.appointmentType \u003d appointmentType;","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"        this.note \u003d note;","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        nric \u003d source.getNric().value;","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"        date \u003d source.getDate().toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        startTime \u003d source.getTimePeriod().getStartTime().toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"        endTime \u003d source.getTimePeriod().getEndTime().toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        appointmentType \u003d source.getAppointmentType().typeName;","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        note \u003d source.getNote().note;","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        if (!Date.isValidDate(date)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"        final Date modelDate \u003d new Date(date);","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"        if (startTime \u003d\u003d null) {","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        if (!Time.isValidTime(startTime)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"        final Time modelStartTime \u003d new Time(startTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"        if (endTime \u003d\u003d null) {","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"        if (!Time.isValidTime(endTime)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"        final Time modelEndTime \u003d new Time(endTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"        if (!TimePeriod.isValidTimePeriod(modelStartTime, modelEndTime)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(TimePeriod.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"        final TimePeriod modelTimePeriod \u003d new TimePeriod(modelStartTime, modelEndTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"        if (appointmentType \u003d\u003d null) {","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, AppointmentType.class.getSimpleName()));","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"        if (!AppointmentType.isValidAppointmentType(appointmentType)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(AppointmentType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"        final AppointmentType modelAppointmentType \u003d new AppointmentType(appointmentType);","lastModifiedDate":"2024-03-13"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"        if (note \u003d\u003d null) {","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, Note.class.getSimpleName()));","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"        if (!Note.isValidNote(note)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"            throw new IllegalValueException(Note.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"        final Note modelNote \u003d new Note(note);","lastModifiedDate":"2024-03-13"},{"lineNumber":116,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":117,"author":{"gitId":"dayn-1"},"content":"        return new Appointment(modelNric, modelDate, modelTimePeriod,","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"dayn-1"},"content":"                modelAppointmentType, modelNote);","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"dayn-1":121}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"    private final String nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    private final String dob;","lastModifiedDate":"2024-03-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"nric\") String nric,","lastModifiedDate":"2024-03-12"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"            @JsonProperty(\"dob\") String dob, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2024-03-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {","lastModifiedDate":"2023-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2024-03-12"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        this.dob \u003d dob;","lastModifiedDate":"2024-03-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-01-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-01-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"        nric \u003d source.getNric().value;","lastModifiedDate":"2024-03-12"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        dob \u003d source.getDob().toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-01-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-01-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"limrik"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":92,"author":{"gitId":"limrik"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2024-03-12"},{"lineNumber":93,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":94,"author":{"gitId":"limrik"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"limrik"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-12"},{"lineNumber":96,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":97,"author":{"gitId":"limrik"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":99,"author":{"gitId":"limrik"},"content":"        if (dob \u003d\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":100,"author":{"gitId":"limrik"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-12"},{"lineNumber":101,"author":{"gitId":"limrik"},"content":"                    DateOfBirth.class.getSimpleName()));","lastModifiedDate":"2024-03-12"},{"lineNumber":102,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":103,"author":{"gitId":"limrik"},"content":"        if (!Date.isValidDate(dob)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"limrik"},"content":"            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":105,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":106,"author":{"gitId":"limrik"},"content":"        final DateOfBirth modelDob \u003d new DateOfBirth(dob);","lastModifiedDate":"2024-03-12"},{"lineNumber":107,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"limrik"},"content":"        return new Person(modelName, modelNric, modelDob, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2024-03-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"limrik":28,"dayn-1":1,"-":107}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"                                       @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        if (appointments !\u003d null) {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"            this.appointments.addAll(appointments);","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        appointments.addAll(source.getAppointmentList().stream()","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"                .map(JsonAdaptedAppointment::new).collect(Collectors.toList()));","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"            if (addressBook.hasAppointment(appointment)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"            }","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"            addressBook.addAppointment(appointment);","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"dayn-1":17,"-":59}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // Inject LogicManager with an AddressBookStorage that throws the IOException e when saving","lastModifiedDate":"2023-06-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(prefPath) {","lastModifiedDate":"2023-06-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2023-06-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-06-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":170,"author":{"gitId":"limrik"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + DOB_DESC_AMY","lastModifiedDate":"2024-03-13"},{"lineNumber":171,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2023-06-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2023-06-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"limrik":4,"-":173}},{"path":"src/test/java/seedu/address/logic/commands/AddAppCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAddressBookWithAppointments;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":" * Contains integration tests (interaction with the Model) for {@code AddAppCommand}.","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"public class AddAppCommandIntegrationTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"    private Model model;","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"    public void setUp() {","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"        model \u003d new ModelManager(getTypicalAddressBookWithAppointments(), new UserPrefs());","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"    public void execute_newAppointment_success() {","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"                .withNric(CARL.getNric().value).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        expectedModel.addAppointment(validAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        assertCommandSuccess(new AddAppCommand(validAppointment), model,","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"                String.format(AddAppCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS, Messages.format(validAppointment)),","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"                expectedModel);","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"    public void execute_appointmentNricNotFound_throwsCommandException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        Appointment appointmentWithNoMatchNric \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"                .withNric(\"G9876543K\").build();","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        assertCommandFailure(new AddAppCommand(appointmentWithNoMatchNric), model,","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"                AddAppCommand.MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"        Appointment appointmentInList \u003d model.getAddressBook().getAppointmentList().get(0);","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"        assertCommandFailure(new AddAppCommand(appointmentInList), model,","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"                AddAppCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":58}},{"path":"src/test/java/seedu/address/logic/commands/AddAppCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APPT;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.BOB_APPT;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"public class AddAppCommandTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppCommand(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder(ALICE_APPT).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(ALICE);","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"        CommandResult commandResult \u003d new AddAppCommand(validAppointment).execute(modelStub);","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"        assertEquals(String.format(AddAppCommand.MESSAGE_ADD_APPOINTMENT_SUCCESS, Messages.format(validAppointment)),","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        assertTrue(modelStub.hasAppointment(validAppointment));","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        AddAppCommand addAppCommand \u003d new AddAppCommand(validAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        ModelStub modelStub \u003d new ModelStubWithAppointment(validAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"        assertThrows(CommandException.class, AddAppCommand.MESSAGE_DUPLICATE_APPOINTMENT, () -\u003e addAppCommand","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"                .execute(modelStub));","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"    public void execute_patientNotFound_throwsCommandException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder(BOB_APPT).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"        AddAppCommand addAppCommand \u003d new AddAppCommand(validAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(ALICE);","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"        assertThrows(CommandException.class, AddAppCommand.MESSAGE_PATIENT_NOT_FOUND, () -\u003e addAppCommand","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"                .execute(modelStub));","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"    public void equals() {","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"        Appointment aliceAppointment \u003d new AppointmentBuilder().withNric(\"T0000001A\").build();","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"        Appointment bobAppointment \u003d new AppointmentBuilder().withNric(\"T0000002A\").build();","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        Appointment aliceSecondAppointment \u003d new AppointmentBuilder().withDate(\"2023-01-01\").build();","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"        AddAppCommand addAliceAppCommand \u003d new AddAppCommand(aliceAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"        AddAppCommand addBobAppCommand \u003d new AddAppCommand(bobAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"        AddAppCommand addAliceSecondAppCommand \u003d new AddAppCommand(aliceSecondAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"        assertTrue(addAliceAppCommand.equals(addAliceAppCommand));","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"        AddAppCommand addAliceAppCommandCopy \u003d new AddAppCommand(aliceAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"        assertTrue(addAliceAppCommand.equals(addAliceAppCommandCopy));","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"        assertFalse(addAliceAppCommand.equals(1));","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"        assertFalse(addAliceAppCommand.equals(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"        // appointment with different nric -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"        assertFalse(addAliceAppCommand.equals(addBobAppCommand));","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"        // appointment with different date -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"        assertFalse(addAliceAppCommand.equals(addAliceSecondAppCommand));","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"        AddAppCommand addAppCommand \u003d new AddAppCommand(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"        String expected \u003d AddAppCommand.class.getCanonicalName()","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"                + \"{appointment\u003d\" + ALICE_APPT + \"}\";","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expected, addAppCommand.toString());","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"dayn-1"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"dayn-1"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":124,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":125,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":126,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":127,"author":{"gitId":"dayn-1"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"dayn-1"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2024-03-16"},{"lineNumber":133,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":134,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":137,"author":{"gitId":"dayn-1"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2024-03-16"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2024-03-16"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2024-03-16"},{"lineNumber":148,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":150,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":152,"author":{"gitId":"dayn-1"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":154,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":155,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":156,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":157,"author":{"gitId":"dayn-1"},"content":"        public boolean hasPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-16"},{"lineNumber":158,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-16"},{"lineNumber":159,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":160,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":162,"author":{"gitId":"dayn-1"},"content":"        public Person getPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-16"},{"lineNumber":163,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":164,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":165,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":166,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":167,"author":{"gitId":"dayn-1"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2024-03-16"},{"lineNumber":168,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":169,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":170,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":171,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":172,"author":{"gitId":"dayn-1"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2024-03-16"},{"lineNumber":173,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":174,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":175,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":176,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":177,"author":{"gitId":"dayn-1"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2024-03-16"},{"lineNumber":178,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":179,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":180,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":181,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":182,"author":{"gitId":"dayn-1"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":183,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":184,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":185,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":186,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":187,"author":{"gitId":"dayn-1"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2024-03-16"},{"lineNumber":188,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":189,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":190,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":191,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":192,"author":{"gitId":"dayn-1"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":193,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-16"},{"lineNumber":194,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":195,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":196,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":197,"author":{"gitId":"dayn-1"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":198,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":199,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":200,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":201,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":202,"author":{"gitId":"dayn-1"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":203,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":204,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":205,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":206,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":207,"author":{"gitId":"dayn-1"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":208,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":209,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":210,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":211,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":212,"author":{"gitId":"dayn-1"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":213,"author":{"gitId":"dayn-1"},"content":"            return null;","lastModifiedDate":"2024-03-16"},{"lineNumber":214,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":215,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":216,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":217,"author":{"gitId":"dayn-1"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2024-03-16"},{"lineNumber":218,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":219,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":220,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":221,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":222,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":223,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":224,"author":{"gitId":"dayn-1"},"content":"     * A Model stub that contains a single appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":225,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":226,"author":{"gitId":"dayn-1"},"content":"    private class ModelStubWithAppointment extends ModelStub {","lastModifiedDate":"2024-03-16"},{"lineNumber":227,"author":{"gitId":"dayn-1"},"content":"        private final Appointment appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":228,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":229,"author":{"gitId":"dayn-1"},"content":"        ModelStubWithAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":230,"author":{"gitId":"dayn-1"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":231,"author":{"gitId":"dayn-1"},"content":"            this.appointment \u003d appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":232,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":233,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":234,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":235,"author":{"gitId":"dayn-1"},"content":"        public boolean hasPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-16"},{"lineNumber":236,"author":{"gitId":"dayn-1"},"content":"            return true;","lastModifiedDate":"2024-03-16"},{"lineNumber":237,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":238,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":239,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":240,"author":{"gitId":"dayn-1"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":241,"author":{"gitId":"dayn-1"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":242,"author":{"gitId":"dayn-1"},"content":"            return this.appointment.equals(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":243,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":244,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":245,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":246,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":247,"author":{"gitId":"dayn-1"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2024-03-16"},{"lineNumber":248,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":249,"author":{"gitId":"dayn-1"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2024-03-16"},{"lineNumber":250,"author":{"gitId":"dayn-1"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded;","lastModifiedDate":"2024-03-16"},{"lineNumber":251,"author":{"gitId":"dayn-1"},"content":"        private final Person person;","lastModifiedDate":"2024-03-16"},{"lineNumber":252,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":253,"author":{"gitId":"dayn-1"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2024-03-16"},{"lineNumber":254,"author":{"gitId":"dayn-1"},"content":"            requireNonNull(person);","lastModifiedDate":"2024-03-16"},{"lineNumber":255,"author":{"gitId":"dayn-1"},"content":"            this.person \u003d person;","lastModifiedDate":"2024-03-16"},{"lineNumber":256,"author":{"gitId":"dayn-1"},"content":"            this.appointmentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-16"},{"lineNumber":257,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":258,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":259,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":260,"author":{"gitId":"dayn-1"},"content":"        public boolean hasPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-16"},{"lineNumber":261,"author":{"gitId":"dayn-1"},"content":"            requireNonNull(nric);","lastModifiedDate":"2024-03-16"},{"lineNumber":262,"author":{"gitId":"dayn-1"},"content":"            return person.getNric().equals(nric);","lastModifiedDate":"2024-03-16"},{"lineNumber":263,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":264,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":265,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":266,"author":{"gitId":"dayn-1"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":267,"author":{"gitId":"dayn-1"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":268,"author":{"gitId":"dayn-1"},"content":"            return appointmentsAdded.stream().anyMatch(appointment::equals);","lastModifiedDate":"2024-03-16"},{"lineNumber":269,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":270,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":271,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":272,"author":{"gitId":"dayn-1"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":273,"author":{"gitId":"dayn-1"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":274,"author":{"gitId":"dayn-1"},"content":"            appointmentsAdded.add(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":275,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":276,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":277,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":278,"author":{"gitId":"dayn-1"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2024-03-16"},{"lineNumber":279,"author":{"gitId":"dayn-1"},"content":"            return new AddressBook();","lastModifiedDate":"2024-03-16"},{"lineNumber":280,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":281,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":282,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"},{"lineNumber":283,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":283}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"        public boolean hasPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"        public Person getPersonWithNric(Nric nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"            return null;","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":173,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"dayn-1"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":175,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":176,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":178,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":179,"author":{"gitId":"dayn-1"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":180,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":181,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":182,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":183,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":184,"author":{"gitId":"dayn-1"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":185,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":186,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":187,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":188,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":189,"author":{"gitId":"dayn-1"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-13"},{"lineNumber":190,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":191,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":192,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":193,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":194,"author":{"gitId":"dayn-1"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":195,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":196,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":197,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":198,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":199,"author":{"gitId":"dayn-1"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2024-03-13"},{"lineNumber":200,"author":{"gitId":"dayn-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":201,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":202,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":247,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"dayn-1":43,"-":204}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"    public static final String VALID_NRIC_AMY \u003d \"T0123456A\";","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"    public static final String VALID_NRIC_BOB \u003d \"T0123456B\";","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"    public static final String VALID_DOB_AMY \u003d \"2001-01-01\";","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"    public static final String VALID_DOB_BOB \u003d \"2001-01-02\";","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_DATE_AMY \u003d \"2024-03-16\";","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_DATE_BOB \u003d \"2024-03-17\";","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_START_TIME_AMY \u003d \"11:00\";","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_END_TIME_AMY \u003d \"11:30\";","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_START_TIME_BOB \u003d \"15:00\";","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_END_TIME_BOB \u003d \"16:00\";","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_TYPE_AMY \u003d \"X-RAY\";","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_TYPE_BOB \u003d \"Health Check-up\";","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_NOTE_AMY \u003d \"Fractured her ankle\";","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    public static final String VALID_APPOINTMENT_NOTE_BOB \u003d \"Yearly check in\";","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"    public static final String DOB_DESC_AMY \u003d \" \" + PREFIX_DOB + VALID_DOB_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"    public static final String DOB_DESC_BOB \u003d \" \" + PREFIX_DOB + VALID_DOB_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"    public static final String DATE_DESC_APPOINTMENT_AMY \u003d \" \" + PREFIX_DATE + VALID_APPOINTMENT_DATE_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"    public static final String DATE_DESC_APPOINTMENT_BOB \u003d \" \" + PREFIX_DATE + VALID_APPOINTMENT_DATE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"    public static final String START_TIME_DESC_APPOINTMENT_AMY \u003d \" \" + PREFIX_START_TIME","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"            + VALID_APPOINTMENT_START_TIME_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"    public static final String END_TIME_DESC_APPOINTMENT_AMY \u003d \" \" + PREFIX_END_TIME","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"            + VALID_APPOINTMENT_END_TIME_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"    public static final String START_TIME_DESC_APPOINTMENT_BOB \u003d \" \" + PREFIX_START_TIME","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"            + VALID_APPOINTMENT_START_TIME_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"    public static final String END_TIME_DESC_APPOINTMENT_BOB \u003d \" \" + PREFIX_END_TIME","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"            + VALID_APPOINTMENT_END_TIME_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"    public static final String TYPE_DESC_APPOINTMENT_AMY \u003d \" \" + PREFIX_TAG + VALID_APPOINTMENT_TYPE_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"    public static final String TYPE_DESC_APPOINTMENT_BOB \u003d \" \" + PREFIX_TAG + VALID_APPOINTMENT_TYPE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"    public static final String NOTE_DESC_APPOINTMENT_AMY \u003d \" \" + PREFIX_NOTE + VALID_APPOINTMENT_NOTE_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"    public static final String NOTE_DESC_APPOINTMENT_BOB \u003d \" \" + PREFIX_NOTE + VALID_APPOINTMENT_NOTE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"limrik"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"t0123456A\"; // first letter must be capital","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"limrik"},"content":"    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_DOB + \"20011-30-01\"; // must be in YYYY-MM-DD format","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2024-32-32\"; // exceeds month and day range","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"24:00\"; // exceeds 24 hour clock range","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"11:30\"; // is after end time","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"    public static final String INVALID_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"11:00\"; // is before start time","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"    public static final String INVALID_APPOINTMENT_TYPE_DESC \u003d \" \" + PREFIX_TAG + \"  \"; // only white spaces","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"    public static final String INVALID_APPOINTMENT_NOTE_DESC \u003d \" \" + PREFIX_NOTE + \"@@\"; // non-alphanumeric","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":113,"author":{"gitId":"limrik"},"content":"                .withNric(VALID_NRIC_AMY).withDateOfBirth(VALID_DOB_AMY)","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":117,"author":{"gitId":"limrik"},"content":"                .withNric(VALID_NRIC_BOB).withDateOfBirth(VALID_DOB_BOB)","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":152,"author":{"gitId":"dayn-1"},"content":"     * - the address book, filtered person list, filtered appointment list and","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"dayn-1"},"content":"     * - selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2024-03-16"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":159,"author":{"gitId":"dayn-1"},"content":"        List\u003cPerson\u003e expectedFilteredPersonList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2024-03-16"},{"lineNumber":160,"author":{"gitId":"dayn-1"},"content":"        List\u003cAppointment\u003e expectedFilteredAppointmentList \u003d","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"dayn-1"},"content":"                new ArrayList\u003c\u003e(actualModel.getFilteredAppointmentList());","lastModifiedDate":"2024-03-16"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":165,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expectedFilteredPersonList, actualModel.getFilteredPersonList());","lastModifiedDate":"2024-03-16"},{"lineNumber":166,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expectedFilteredAppointmentList, actualModel.getFilteredAppointmentList());","lastModifiedDate":"2024-03-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"dayn-1":44,"limrik":14,"-":124}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expected \u003d EditPersonDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"                + editPersonDescriptor.getNric().orElse(null) + \", nric\u003d\"","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"                + editPersonDescriptor.getDateOfBirth().orElse(null) + \", dob\u003d\"","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getName().orElse(null) + \", phone\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getPhone().orElse(null) + \", email\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getEmail().orElse(null) + \", address\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getAddress().orElse(null) + \", tags\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getTags().orElse(null) + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"limrik":2,"-":71}},{"path":"src/test/java/seedu/address/logic/parser/AddAppCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_APPOINTMENT_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_APPOINTMENT_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_APPOINTMENT_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_APPOINTMENT_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_NOTE_DESC;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_TYPE_DESC;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_APPOINTMENT_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_APPOINTMENT_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_APPOINTMENT_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_APPOINTMENT_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_APPOINTMENT_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_APPOINTMENT_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_END_TIME_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NOTE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_START_TIME_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TYPE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.BOB_APPT;","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"import seedu.address.logic.commands.AddAppCommand;","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.AppointmentType;","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Note;","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.TimePeriod;","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"public class AddAppCommandParserTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"    private final AddAppCommandParser parser \u003d new AddAppCommandParser();","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(BOB_APPT).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"        // whitespace only preamble","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"                + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"                + TYPE_DESC_APPOINTMENT_BOB + NOTE_DESC_APPOINTMENT_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"                new AddAppCommand(expectedAppointment));","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"        String validExpectedAppointmentString \u003d NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"                + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"                + TYPE_DESC_APPOINTMENT_BOB + NOTE_DESC_APPOINTMENT_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        // multiple NRICs","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_AMY + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"        // multiple dates","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, DATE_DESC_APPOINTMENT_AMY + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATE));","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        // multiple start times","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, START_TIME_DESC_APPOINTMENT_AMY + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_START_TIME));","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"        // multiple end times","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, END_TIME_DESC_APPOINTMENT_AMY + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_END_TIME));","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"        // multiple appointment types","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, TYPE_DESC_APPOINTMENT_AMY + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_TAG));","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"        // multiple notes","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NOTE_DESC_APPOINTMENT_AMY + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NOTE));","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"        // multiple fields repeated","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"                validExpectedAppointmentString + DATE_DESC_APPOINTMENT_AMY + NRIC_DESC_AMY","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"                        + START_TIME_DESC_APPOINTMENT_AMY + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC, PREFIX_DATE, PREFIX_START_TIME,","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"                        PREFIX_END_TIME, PREFIX_TAG, PREFIX_NOTE));","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"        // invalid NRIC","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, INVALID_NRIC_DESC + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"        // invalid date","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, INVALID_DATE_DESC + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATE));","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"        // invalid start time","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, INVALID_START_TIME_DESC + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_START_TIME));","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"dayn-1"},"content":"        // invalid end time","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, INVALID_END_TIME_DESC + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_END_TIME));","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"dayn-1"},"content":"        // invalid appointment type","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, INVALID_APPOINTMENT_TYPE_DESC + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":124,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_TAG));","lastModifiedDate":"2024-03-16"},{"lineNumber":125,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":126,"author":{"gitId":"dayn-1"},"content":"        // invalid note","lastModifiedDate":"2024-03-16"},{"lineNumber":127,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, INVALID_APPOINTMENT_NOTE_DESC + validExpectedAppointmentString,","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"dayn-1"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NOTE));","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"dayn-1"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2024-03-16"},{"lineNumber":133,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppCommand.MESSAGE_USAGE);","lastModifiedDate":"2024-03-16"},{"lineNumber":134,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"dayn-1"},"content":"        // missing NRIC prefix","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, DATE_DESC_APPOINTMENT_BOB + START_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":137,"author":{"gitId":"dayn-1"},"content":"                        + END_TIME_DESC_APPOINTMENT_BOB + VALID_APPOINTMENT_TYPE_BOB + VALID_APPOINTMENT_NOTE_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-16"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"        // missing date prefix","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + START_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"                        + END_TIME_DESC_APPOINTMENT_BOB + VALID_APPOINTMENT_TYPE_BOB + VALID_APPOINTMENT_NOTE_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-16"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"        // missing start time prefix","lastModifiedDate":"2024-03-16"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"                        + END_TIME_DESC_APPOINTMENT_BOB + VALID_APPOINTMENT_TYPE_BOB + VALID_APPOINTMENT_NOTE_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":148,"author":{"gitId":"dayn-1"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":150,"author":{"gitId":"dayn-1"},"content":"        // missing end time prefix","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":152,"author":{"gitId":"dayn-1"},"content":"                        + START_TIME_DESC_APPOINTMENT_BOB + VALID_APPOINTMENT_TYPE_BOB + VALID_APPOINTMENT_NOTE_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"dayn-1"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-16"},{"lineNumber":154,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":155,"author":{"gitId":"dayn-1"},"content":"        // missing appointment type prefix","lastModifiedDate":"2024-03-16"},{"lineNumber":156,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":157,"author":{"gitId":"dayn-1"},"content":"                        + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB + VALID_APPOINTMENT_NOTE_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":158,"author":{"gitId":"dayn-1"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-16"},{"lineNumber":159,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":160,"author":{"gitId":"dayn-1"},"content":"        // missing note prefix","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":162,"author":{"gitId":"dayn-1"},"content":"                        + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB + VALID_APPOINTMENT_TYPE_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":163,"author":{"gitId":"dayn-1"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-16"},{"lineNumber":164,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":165,"author":{"gitId":"dayn-1"},"content":"        // all prefixes missing","lastModifiedDate":"2024-03-16"},{"lineNumber":166,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, VALID_NRIC_BOB + VALID_APPOINTMENT_DATE_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":167,"author":{"gitId":"dayn-1"},"content":"                + VALID_APPOINTMENT_START_TIME_BOB + VALID_APPOINTMENT_END_TIME_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":168,"author":{"gitId":"dayn-1"},"content":"                + VALID_APPOINTMENT_TYPE_BOB + VALID_APPOINTMENT_NOTE_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":169,"author":{"gitId":"dayn-1"},"content":"                expectedMessage);","lastModifiedDate":"2024-03-16"},{"lineNumber":170,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":171,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":172,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":173,"author":{"gitId":"dayn-1"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2024-03-16"},{"lineNumber":174,"author":{"gitId":"dayn-1"},"content":"        // invalid NRIC","lastModifiedDate":"2024-03-16"},{"lineNumber":175,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, INVALID_NRIC_DESC + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":176,"author":{"gitId":"dayn-1"},"content":"                + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":177,"author":{"gitId":"dayn-1"},"content":"                + TYPE_DESC_APPOINTMENT_BOB + NOTE_DESC_APPOINTMENT_BOB, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-16"},{"lineNumber":178,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":179,"author":{"gitId":"dayn-1"},"content":"        // invalid date","lastModifiedDate":"2024-03-16"},{"lineNumber":180,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + INVALID_DATE_DESC","lastModifiedDate":"2024-03-16"},{"lineNumber":181,"author":{"gitId":"dayn-1"},"content":"                + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":182,"author":{"gitId":"dayn-1"},"content":"                + TYPE_DESC_APPOINTMENT_BOB + NOTE_DESC_APPOINTMENT_BOB, Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-16"},{"lineNumber":183,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":184,"author":{"gitId":"dayn-1"},"content":"        // invalid time period","lastModifiedDate":"2024-03-16"},{"lineNumber":185,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":186,"author":{"gitId":"dayn-1"},"content":"                + INVALID_START_TIME_DESC + INVALID_END_TIME_DESC","lastModifiedDate":"2024-03-16"},{"lineNumber":187,"author":{"gitId":"dayn-1"},"content":"                + TYPE_DESC_APPOINTMENT_BOB + NOTE_DESC_APPOINTMENT_BOB, TimePeriod.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-16"},{"lineNumber":188,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":189,"author":{"gitId":"dayn-1"},"content":"        // invalid appointment type","lastModifiedDate":"2024-03-16"},{"lineNumber":190,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":191,"author":{"gitId":"dayn-1"},"content":"                + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":192,"author":{"gitId":"dayn-1"},"content":"                + INVALID_APPOINTMENT_TYPE_DESC + NOTE_DESC_APPOINTMENT_BOB, AppointmentType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-16"},{"lineNumber":193,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":194,"author":{"gitId":"dayn-1"},"content":"        // invalid note","lastModifiedDate":"2024-03-16"},{"lineNumber":195,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":196,"author":{"gitId":"dayn-1"},"content":"                + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":197,"author":{"gitId":"dayn-1"},"content":"                + TYPE_DESC_APPOINTMENT_BOB + INVALID_APPOINTMENT_NOTE_DESC, Note.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-16"},{"lineNumber":198,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":199,"author":{"gitId":"dayn-1"},"content":"        // multiple invalid values, only the first one reported","lastModifiedDate":"2024-03-16"},{"lineNumber":200,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, INVALID_NRIC_DESC + INVALID_DATE_DESC","lastModifiedDate":"2024-03-16"},{"lineNumber":201,"author":{"gitId":"dayn-1"},"content":"                + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":202,"author":{"gitId":"dayn-1"},"content":"                + TYPE_DESC_APPOINTMENT_BOB + NOTE_DESC_APPOINTMENT_BOB, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-16"},{"lineNumber":203,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":204,"author":{"gitId":"dayn-1"},"content":"        // non-empty preamble","lastModifiedDate":"2024-03-16"},{"lineNumber":205,"author":{"gitId":"dayn-1"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NRIC_DESC_BOB + DATE_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":206,"author":{"gitId":"dayn-1"},"content":"                        + START_TIME_DESC_APPOINTMENT_BOB + END_TIME_DESC_APPOINTMENT_BOB","lastModifiedDate":"2024-03-16"},{"lineNumber":207,"author":{"gitId":"dayn-1"},"content":"                        + VALID_APPOINTMENT_TYPE_BOB + VALID_APPOINTMENT_NOTE_BOB,","lastModifiedDate":"2024-03-16"},{"lineNumber":208,"author":{"gitId":"dayn-1"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppCommand.MESSAGE_USAGE));","lastModifiedDate":"2024-03-16"},{"lineNumber":209,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":210,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":211,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":212,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":213,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":214,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":214}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"//import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"limrik"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"limrik"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"limrik"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"limrik"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND;","lastModifiedDate":"2023-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":93,"author":{"gitId":"limrik"},"content":"        // multiple nrics","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NRIC_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"limrik"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"limrik"},"content":"        // multiple dobs","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, DOB_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2024-03-13"},{"lineNumber":99,"author":{"gitId":"limrik"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DOB));","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // multiple emails","lastModifiedDate":"2023-07-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // multiple addresses","lastModifiedDate":"2023-07-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, ADDRESS_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                validExpectedPersonString + PHONE_DESC_AMY + EMAIL_DESC_AMY + NAME_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2023-07-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                        + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":117,"author":{"gitId":"limrik"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_NRIC, PREFIX_DOB,","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"limrik"},"content":"                        PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_PHONE));","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":126,"author":{"gitId":"limrik"},"content":"        // invalid nric","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, INVALID_NRIC_DESC + validExpectedPersonString,","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"limrik"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-13"},{"lineNumber":129,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":130,"author":{"gitId":"limrik"},"content":"        // invalid dob","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, INVALID_DOB_DESC + validExpectedPersonString,","lastModifiedDate":"2024-03-13"},{"lineNumber":132,"author":{"gitId":"limrik"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DOB));","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":148,"author":{"gitId":"limrik"},"content":"        // invalid nric","lastModifiedDate":"2024-03-13"},{"lineNumber":149,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NRIC_DESC,","lastModifiedDate":"2024-03-13"},{"lineNumber":150,"author":{"gitId":"limrik"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2024-03-13"},{"lineNumber":151,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":152,"author":{"gitId":"limrik"},"content":"        // invalid dob","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_DOB_DESC,","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"limrik"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DOB));","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":173,"author":{"gitId":"limrik"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY + DOB_DESC_AMY","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"limrik"},"content":"                        + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2024-03-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":183,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":184,"author":{"gitId":"limrik"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-13"},{"lineNumber":185,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":186,"author":{"gitId":"limrik"},"content":"        // missing nric prefix","lastModifiedDate":"2024-03-13"},{"lineNumber":187,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":188,"author":{"gitId":"limrik"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-13"},{"lineNumber":189,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":190,"author":{"gitId":"limrik"},"content":"        // missing dob prefix","lastModifiedDate":"2024-03-13"},{"lineNumber":191,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + VALID_DOB_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":192,"author":{"gitId":"limrik"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-13"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":195,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":196,"author":{"gitId":"limrik"},"content":"                        + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-13"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":199,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":200,"author":{"gitId":"limrik"},"content":"                        + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2024-03-13"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":203,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":204,"author":{"gitId":"limrik"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB, expectedMessage);","lastModifiedDate":"2024-03-13"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":207,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":208,"author":{"gitId":"limrik"},"content":"                        + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);","lastModifiedDate":"2024-03-13"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":214,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":215,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":218,"author":{"gitId":"limrik"},"content":"        // invalid nric","lastModifiedDate":"2024-03-13"},{"lineNumber":219,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":220,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":221,"author":{"gitId":"limrik"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":222,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":223,"author":{"gitId":"limrik"},"content":"        //        // invalid dob","lastModifiedDate":"2024-03-13"},{"lineNumber":224,"author":{"gitId":"limrik"},"content":"        //        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_DOB_DESC","lastModifiedDate":"2024-03-13"},{"lineNumber":225,"author":{"gitId":"limrik"},"content":"        //                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":226,"author":{"gitId":"limrik"},"content":"        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DateOfBirth.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2024-03-13"},{"lineNumber":227,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":229,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":230,"author":{"gitId":"limrik"},"content":"                + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":234,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":235,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":239,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":240,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2024-03-13"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":244,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":245,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":249,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":250,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2024-03-13"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":254,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":255,"author":{"gitId":"limrik"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2024-03-13"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"limrik":88,"-":171}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":89,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, \"1 q/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS); // invalid nric","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"limrik"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC, DateOfBirth.MESSAGE_CONSTRAINTS); // invalid dob","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":120,"author":{"gitId":"limrik"},"content":"                + NRIC_DESC_AMY + DOB_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"limrik"},"content":"                .withNric(VALID_NRIC_AMY).withDateOfBirth(VALID_DOB_AMY)","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"limrik"},"content":"        // nric","lastModifiedDate":"2024-03-13"},{"lineNumber":153,"author":{"gitId":"limrik"},"content":"        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":154,"author":{"gitId":"limrik"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_AMY).build();","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"limrik"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"limrik"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2024-03-13"},{"lineNumber":157,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":158,"author":{"gitId":"limrik"},"content":"        // dob","lastModifiedDate":"2024-03-13"},{"lineNumber":159,"author":{"gitId":"limrik"},"content":"        userInput \u003d targetIndex.getOneBased() + DOB_DESC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":160,"author":{"gitId":"limrik"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_AMY).build();","lastModifiedDate":"2024-03-13"},{"lineNumber":161,"author":{"gitId":"limrik"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2024-03-13"},{"lineNumber":162,"author":{"gitId":"limrik"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2024-03-13"},{"lineNumber":163,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // More extensive testing of duplicate parameter detections is done in","lastModifiedDate":"2023-07-14"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()","lastModifiedDate":"2023-07-14"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-07-14"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-07-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-07-14"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-07-14"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-07-14"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2023-07-14"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":231,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"limrik":25,"-":206}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APPT;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAddressBookWithAppointments;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        assertEquals(Collections.emptyList(), addressBook.getAppointmentList());","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        AddressBook newData \u003d getTypicalAddressBookWithAppointments();","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"        List\u003cAppointment\u003e newAppointments \u003d List.of();","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newAppointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"    public void hasPerson_personWithNricInAddressBook_returnsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"        Nric aliceNric \u003d ALICE.getNric();","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"        assertTrue(addressBook.hasPersonWithNric(aliceNric));","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"    public void hasAppointment_withAppointmentInAddressBook_returnsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"        addressBook.addAppointment(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"        assertTrue(addressBook.hasAppointment(ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"    public void hasAppointment_withAppointmentWithSameDetailsInAddressBook_returnsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"        addressBook.addAppointment(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"        Appointment editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"                .withAppointmentType(\"Blood test\").withNote(\"routine checks\")","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"                .build();","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"        assertTrue(addressBook.hasAppointment(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String expected \u003d AddressBook.class.getCanonicalName() + \"{persons\u003d\" + addressBook.getPersonList() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertEquals(expected, addressBook.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"dayn-1"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":129,"author":{"gitId":"dayn-1"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"            this.appointments.setAll(appointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"        @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2024-03-13"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"            return appointments;","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"dayn-1":41,"-":104}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APPT;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APPT_1;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.BOB_APPT;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import java.util.List;","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"public class AppointmentListTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    private final AppointmentList appointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    public void contains_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.contains(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"    public void contains_appointmentNotInList_returnsFalse() {","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"        assertFalse(appointmentList.contains(ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"    public void contains_appointmentInList_returnsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        assertTrue(appointmentList.contains(ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"    public void contains_appointmentWithSameIdentityAndTimeInList_returnsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"        Appointment editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"                .withAppointmentType(\"Throat Infection\").withNote(\"called in\")","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"                .build();","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        assertTrue(appointmentList.contains(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"    public void add_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.add(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    public void add_duplicateAppointment_throwsDuplicateAppointmentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e appointmentList.add(ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment_nullTargetAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.setAppointment(null, ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment_nullEditedAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"                .setAppointment(ALICE_APPT, null));","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment_targetAppointmentNotInList_throwsAppointmentNotFoundException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e appointmentList","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"                .setAppointment(ALICE_APPT, ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment_editedAppointmentIsSameAppointment_success() {","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        appointmentList.setAppointment(ALICE_APPT, ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"        AppointmentList expectedAppointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"        expectedAppointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment_editedAppointmentHasSameIdentity_success() {","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"        Appointment editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"                .withAppointmentType(\"Knee Injury\").withNote(\"Fell down\")","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"                .build();","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"        appointmentList.setAppointment(ALICE_APPT, editedAliceAppt);","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"        AppointmentList expectedAppointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"        expectedAppointmentList.add(editedAliceAppt);","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment_editedAppointmentHasDifferentIdentity_success() {","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"        appointmentList.setAppointment(ALICE_APPT, BOB_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"        AppointmentList expectedAppointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"        expectedAppointmentList.add(BOB_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"    public void setAppointment_editedAppointmentHasNonUniqueIdentity_throwsDuplicateAppointmentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(BOB_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e appointmentList","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"                .setAppointment(ALICE_APPT, BOB_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"dayn-1"},"content":"    public void remove_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.remove(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"dayn-1"},"content":"    public void remove_appointmentDoesNotExist_throwsAppointmentNotFoundException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"dayn-1"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e appointmentList.remove(ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":124,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":125,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":126,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":127,"author":{"gitId":"dayn-1"},"content":"    public void remove_existingAppointment_removesAppointment() {","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"dayn-1"},"content":"        appointmentList.remove(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"dayn-1"},"content":"        AppointmentList expectedAppointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":133,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":134,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"dayn-1"},"content":"    public void setAppointments_nullAppointmentList_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.setAppointments((AppointmentList) null));","lastModifiedDate":"2024-03-16"},{"lineNumber":137,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"    public void setAppointments_appointmentList_replacesOwnListWithProvidedAppointmentList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT_1);","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"        AppointmentList expectedAppointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"        expectedAppointmentList.add(BOB_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"        appointmentList.setAppointments(expectedAppointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":148,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"dayn-1"},"content":"    public void setAppointments_nullList_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":150,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.setAppointments((List\u003cAppointment\u003e) null));","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":152,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":154,"author":{"gitId":"dayn-1"},"content":"    public void setAppointments_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":155,"author":{"gitId":"dayn-1"},"content":"        appointmentList.add(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":156,"author":{"gitId":"dayn-1"},"content":"        List\u003cAppointment\u003e listOfAppointments \u003d Collections.singletonList(BOB_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":157,"author":{"gitId":"dayn-1"},"content":"        appointmentList.setAppointments(listOfAppointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":158,"author":{"gitId":"dayn-1"},"content":"        AppointmentList expectedAppointmentList \u003d new AppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":159,"author":{"gitId":"dayn-1"},"content":"        expectedAppointmentList.add(BOB_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":160,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":162,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":163,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":164,"author":{"gitId":"dayn-1"},"content":"    public void setAppointments_listWithDuplicateAppointments_throwsDuplicateAppointmentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":165,"author":{"gitId":"dayn-1"},"content":"        List\u003cAppointment\u003e listWithDuplicateAppointments \u003d Arrays.asList(ALICE_APPT, ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":166,"author":{"gitId":"dayn-1"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e appointmentList","lastModifiedDate":"2024-03-16"},{"lineNumber":167,"author":{"gitId":"dayn-1"},"content":"                .setAppointments(listWithDuplicateAppointments));","lastModifiedDate":"2024-03-16"},{"lineNumber":168,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":169,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":170,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":171,"author":{"gitId":"dayn-1"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":172,"author":{"gitId":"dayn-1"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e appointmentList","lastModifiedDate":"2024-03-16"},{"lineNumber":173,"author":{"gitId":"dayn-1"},"content":"                .asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2024-03-16"},{"lineNumber":174,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":175,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":176,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":177,"author":{"gitId":"dayn-1"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-16"},{"lineNumber":178,"author":{"gitId":"dayn-1"},"content":"        assertEquals(appointmentList.asUnmodifiableObservableList().toString(), appointmentList.toString());","lastModifiedDate":"2024-03-16"},{"lineNumber":179,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":180,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":180}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_END_TIME_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NOTE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_START_TIME_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TYPE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APPT;","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APPT_1;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"public class AppointmentTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(null, null, null, null, null));","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"    public void isSameAppointment() {","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"        assertTrue(ALICE_APPT.isSameAppointment(ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.isSameAppointment(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"        // same nric, date and time, all other attributes different -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        Appointment editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"                .withAppointmentType(VALID_APPOINTMENT_TYPE_BOB).withNote(VALID_APPOINTMENT_NOTE_BOB)","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"                .build();","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        assertTrue(ALICE_APPT.isSameAppointment(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"        // different nric, all other attributes same -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.isSameAppointment(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"        // different date, all other attributes same -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT).withDate(VALID_APPOINTMENT_DATE_BOB).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.isSameAppointment(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"        // different time period, all other attributes same -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"                .withStartTime(VALID_APPOINTMENT_START_TIME_BOB)","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"                .withEndTime(VALID_APPOINTMENT_END_TIME_BOB)","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"                .build();","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.isSameAppointment(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"    public void equals() {","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"        Appointment aliceApptCopy \u003d new AppointmentBuilder(ALICE_APPT).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        assertTrue(ALICE_APPT.equals(aliceApptCopy));","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"        assertTrue(ALICE_APPT.equals(ALICE_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.equals(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.equals(5));","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"        // different nric -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        Appointment editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"                .withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.equals(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"                .withDate(VALID_APPOINTMENT_DATE_BOB).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.equals(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"        // different time period -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"                .withStartTime(VALID_APPOINTMENT_START_TIME_BOB)","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"                .withEndTime(VALID_APPOINTMENT_END_TIME_BOB)","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"                .build();","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.equals(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"        // different appointment type -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"                .withAppointmentType(VALID_APPOINTMENT_TYPE_BOB).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.equals(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"        // different note -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(ALICE_APPT)","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"                .withNote(VALID_APPOINTMENT_NOTE_BOB).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"        assertFalse(ALICE_APPT.equals(editedAliceAppt));","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"        String expected \u003d Appointment.class.getCanonicalName()","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"                + \"{nric\u003d\" + ALICE_APPT_1.getNric()","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"                + \", date\u003d\" + ALICE_APPT_1.getDate()","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"                + \", timePeriod\u003d\" + ALICE_APPT_1.getTimePeriod()","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"                + \", appointmentType\u003d\" + ALICE_APPT_1.getAppointmentType()","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"                + \", note\u003d\" + ALICE_APPT_1.getNote() + \"}\";","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"        assertEquals(expected, ALICE_APPT_1.toString());","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":110}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTypeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"public class AppointmentTypeTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentType(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"    public void constructor_invalidAppointmentTypeName_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"        String invalidTypeName \u003d \"\";","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AppointmentType(invalidTypeName));","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    public void isValidAppointmentType() {","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"        // null appointment type","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppointmentType.isValidAppointmentType(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"        // invalid appointment type","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"        assertFalse(AppointmentType.isValidAppointmentType(\"\")); // empty string","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"        // assertFalse(AppointmentType.isValidAppointmentType(\"  \")); // blank spaces","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"        // valid appointment type","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"        assertTrue(AppointmentType.isValidAppointmentType(\"X-ray\"));","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"        assertTrue(AppointmentType.isValidAppointmentType(\"Health Check Up\"));","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"    public void equals() {","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        AppointmentType appointmentType \u003d new AppointmentType(\"valid type\");","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"        assertTrue(appointmentType.equals(new AppointmentType(\"valid type\")));","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"        assertTrue(appointmentType.equals(appointmentType));","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        assertFalse(appointmentType.equals(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"        assertFalse(appointmentType.equals(5.0f));","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"        assertFalse(appointmentType.equals(new AppointmentType(\"another valid type\")));","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":57}},{"path":"src/test/java/seedu/address/model/appointment/NoteTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"public class NoteTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Note(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"    public void constructor_invalidNote_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"        String invalidNote \u003d \"!-@\u003d\";","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Note(invalidNote));","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    public void isValidNote() {","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"        // null note","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e Note.isValidNote(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"        // invalid note","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Note.isValidNote(\"\")); // empty string","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Note.isValidNote(\" \")); // spaces only","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Note.isValidNote(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Note.isValidNote(\"health*\")); // contains non-alphanumeric characters","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"        // valid note","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"        assertTrue(Note.isValidNote(\"peter jack\")); // alphabets only","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"        assertTrue(Note.isValidNote(\"12345\")); // numbers only","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        assertTrue(Note.isValidNote(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        assertTrue(Note.isValidNote(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        assertTrue(Note.isValidNote(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"    public void equals() {","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"        Note note \u003d new Note(\"valid note\");","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        assertTrue(note.equals(new Note(\"valid note\")));","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"        assertTrue(note.equals(note));","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        assertFalse(note.equals(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"        assertFalse(note.equals(5.0f));","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        assertFalse(note.equals(new Note(\"different note\")));","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":60}},{"path":"src/test/java/seedu/address/model/appointment/TimePeriodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"public class TimePeriodTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"        Time time \u003d new Time(\"10:00\");","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TimePeriod(time, null));","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TimePeriod(null, time));","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"    public void constructor_invalidTimePeriod_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"        Time startTime \u003d new Time(\"10:00\");","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"        Time endTime \u003d new Time(\"09:00\");","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new TimePeriod(startTime, endTime));","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    public void isValidTimePeriod() {","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"        Time time \u003d new Time(\"10:00\");","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"        // null time","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e TimePeriod.isValidTimePeriod(time, null));","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e TimePeriod.isValidTimePeriod(null, time));","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e TimePeriod.isValidTimePeriod(null, null));","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"        assertFalse(TimePeriod.isValidTimePeriod(new Time(\"12:00\"), new Time(\"12:00\"))); // duration 0","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"        assertFalse(TimePeriod.isValidTimePeriod(new Time(\"12:01\"), new Time(\"12:00\"))); // start after end","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        assertFalse(TimePeriod.isValidTimePeriod(new Time(\"23:59\"), new Time(\"00:01\"))); // start after end","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        // Valid time period","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        assertTrue(TimePeriod.isValidTimePeriod(new Time(\"11:00\"), new Time(\"12:00\")));","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"        assertTrue(TimePeriod.isValidTimePeriod(new Time(\"09:00\"), new Time(\"09:01\")));","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"    public void equals() {","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"        Time startTime \u003d new Time(\"12:00\");","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        Time endTime \u003d new Time(\"13:00\");","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        TimePeriod timePeriod \u003d new TimePeriod(startTime, endTime);","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        assertTrue(timePeriod.equals(new TimePeriod(new Time(\"12:00\"), new Time(\"13:00\"))));","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        assertTrue(timePeriod.equals(timePeriod));","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"        assertFalse(timePeriod.equals(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"        assertFalse(timePeriod.equals(5.0f));","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"        assertFalse(timePeriod.equals(new TimePeriod(new Time(\"12:30\"), new Time(\"13:00\"))));","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":64}},{"path":"src/test/java/seedu/address/model/appointment/TimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"public class TimeTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Time(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"    public void constructor_invalidTime_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"        String invalidTime \u003d \"\";","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    public void isValidTime() {","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"        // null time","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"        // blank time","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"\")); // empty string","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\" \")); // spaces only","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"        // missing parts","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\":00\")); // missing HH part","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12:\")); // missing mm part","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"1200\")); // missing \u0027:\u0027 symbol","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        // invalid parts","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"24:00\")); // invalid HH part","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"1200:00\")); // invalid HH part","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"012:00\")); // invalid HH part","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12:60\")); // invalid mm part","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12:555\")); // invalid mm part","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12:0\")); // invalid mm part","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12/50\")); // invalid delimiter","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12-50\")); // invalid delimiter","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12::50\")); // invalid delimiter","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12:50:22\")); // ss given","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\" 12:50\")); // leading space","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        assertFalse(Time.isValidTime(\"12:50 \")); // trailing space","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        // valid time","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"        assertTrue(Time.isValidTime(\"23:59\")); // 24-hour clock","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        assertTrue(Time.isValidTime(\"11:59\")); // 24-hour clock","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"        assertTrue(Time.isValidTime(\"00:00\")); // 24-hour clock","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    public void equals() {","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        Time time \u003d new Time(\"12:00\");","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        assertTrue(time.equals(new Time(\"12:00\")));","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"        assertTrue(time.equals(time));","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"        assertFalse(time.equals(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"        assertFalse(time.equals(5.0f));","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        assertFalse(time.equals(new Time(\"00:00\")));","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":75}},{"path":"src/test/java/seedu/address/model/person/DateOfBirthTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"public class DateOfBirthTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateOfBirth(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    public void constructor_invalidDateOfBirth_throwsDateTimeParseException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"        String invalidDob \u003d \"\";","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DateOfBirth(invalidDob));","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    public void isValidDateOfBirth() {","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"        // null dob","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateOfBirth.isValidDateOfBirth(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"        // invalid dob","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        assertFalse(DateOfBirth.isValidDateOfBirth(LocalDate.now().plusDays(1).toString())); // Tomorrow","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"        // Test dob","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"        assertTrue(DateOfBirth.isValidDateOfBirth(LocalDate.now().minusDays(1).toString())); // Yesterday","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"        DateOfBirth dob \u003d new DateOfBirth(\"2001-01-01\");","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"        assertTrue(dob.equals(new DateOfBirth(\"2001-01-01\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        assertTrue(dob.equals(dob));","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"        assertFalse(dob.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        assertFalse(dob.equals(5.0f));","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"        assertFalse(dob.equals(new DateOfBirth(\"2001-01-02\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"limrik":54}},{"path":"src/test/java/seedu/address/model/person/NricTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package seedu.address.model.person;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"public class NricTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Nric(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    public void constructor_invalidNric_throwsIllegalArgumentException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"        String invalidNric \u003d \"\";","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    public void isValidNric() {","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"        // null nric","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"        assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"        // blank nric","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"\")); // empty string","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\" \")); // spaces only","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"        // missing parts","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"01234567A\")); // missing first alphabet","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"T01234567\")); // missing last alphabet","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"        // invalid parts","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"T01234567@\")); // \"@\u0027 invalid","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"@0123456A\")); // \"@\u0027 invalid","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"T012345A\")); // missing number","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"T01234567A\")); // extra number","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"TT0123456A\")); // extra first alphabet","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        assertFalse(Nric.isValidNric(\"T0123456AA\")); // extra last alphabet","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        // valid nric","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"        assertTrue(Nric.isValidNric(\"T0123456A\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        Nric nric \u003d new Nric(\"T0123456A\");","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"        assertTrue(nric.equals(new Nric(\"T0123456A\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"        assertTrue(nric.equals(nric));","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"        assertFalse(nric.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"        assertFalse(nric.equals(5.0f));","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"        assertFalse(nric.equals(new Nric(\"T0123456B\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"limrik":66}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        // same nric, all other attributes different -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB)","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"        // different nric, all other attributes same -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"limrik"},"content":"        String expected \u003d Person.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", nric\u003d\" + ALICE.getNric()","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"limrik"},"content":"                + \", dob\u003d\" + ALICE.getDob() + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                + \", email\u003d\" + ALICE.getEmail() + \", address\u003d\" + ALICE.getAddress() + \", tags\u003d\" + ALICE.getTags() + \"}\";","lastModifiedDate":"2024-02-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"dayn-1":6,"limrik":2,"-":85}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedAppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.storage;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.storage.JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APPT;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.AppointmentType;","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Note;","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Time;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.TimePeriod;","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"public class JsonAdaptedAppointmentTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"    private static final String INVALID_NRIC \u003d \"t01234567A\";","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    private static final String INVALID_DATE \u003d \"2024-13-01\";","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"    private static final String INVALID_TIME \u003d \"25:00\";","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    private static final String INVALID_TIME_PERIOD_START \u003d \"12:00\";","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    private static final String INVALID_TIME_PERIOD_END \u003d \"11:00\";","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    private static final String INVALID_TYPE \u003d \"\";","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"    private static final String INVALID_NOTE \u003d \"@@@\";","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"    private static final String VALID_NRIC \u003d ALICE_APPT.getNric().toString();","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"    private static final String VALID_DATE \u003d ALICE_APPT.getDate().toString();","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"    private static final String VALID_START_TIME \u003d ALICE_APPT.getTimePeriod().getStartTime().toString();","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"    private static final String VALID_END_TIME \u003d ALICE_APPT.getTimePeriod().getEndTime().toString();","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"    private static final String VALID_TYPE \u003d ALICE_APPT.getAppointmentType().typeName;","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"    private static final String VALID_NOTE \u003d ALICE_APPT.getNote().note;","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(ALICE_APPT);","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        assertEquals(ALICE_APPT, appointment.toModelType());","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(INVALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, VALID_END_TIME, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(null, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, VALID_END_TIME, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"                Nric.class.getSimpleName());","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, INVALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, VALID_END_TIME, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d seedu.address.commons.core.date.Date.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, null,","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, VALID_END_TIME, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"                Date.class.getSimpleName());","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"                INVALID_TIME, VALID_END_TIME, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"                null, VALID_END_TIME, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"                Time.class.getSimpleName());","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, INVALID_TIME, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_invalidTimePeriod_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"                INVALID_TIME_PERIOD_START, INVALID_TIME_PERIOD_END, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d TimePeriod.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"dayn-1"},"content":"                VALID_END_TIME, null, VALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"dayn-1"},"content":"                Time.class.getSimpleName());","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_invalidType_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, VALID_END_TIME, INVALID_TYPE, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d AppointmentType.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":124,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":125,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":126,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":127,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_nullType_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, VALID_END_TIME, null, VALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"dayn-1"},"content":"                AppointmentType.class.getSimpleName());","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":133,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":134,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_invalidNote_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":137,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":138,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, VALID_END_TIME, VALID_TYPE, INVALID_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":139,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d Note.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-16"},{"lineNumber":140,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":143,"author":{"gitId":"dayn-1"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":144,"author":{"gitId":"dayn-1"},"content":"    public void toModelType_nullNote_throwsIllegalValueException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":145,"author":{"gitId":"dayn-1"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_DATE,","lastModifiedDate":"2024-03-16"},{"lineNumber":146,"author":{"gitId":"dayn-1"},"content":"                VALID_START_TIME, VALID_END_TIME, VALID_TYPE, null);","lastModifiedDate":"2024-03-16"},{"lineNumber":147,"author":{"gitId":"dayn-1"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2024-03-16"},{"lineNumber":148,"author":{"gitId":"dayn-1"},"content":"                Note.class.getSimpleName());","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"dayn-1"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2024-03-16"},{"lineNumber":150,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":151}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    private static final String INVALID_NRIC \u003d \"t01234567A\";","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"    private static final String INVALID_DOB \u003d \"20220-13-01\";","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"    private static final String VALID_DOB \u003d BENSON.getDob().toString();","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_NRIC, VALID_DOB,","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"                        VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_NRIC, VALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_NRIC, VALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"                        VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"limrik"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"limrik"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"limrik"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"limrik"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"limrik"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"limrik"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"limrik"},"content":"    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"limrik"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"limrik"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, INVALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"limrik"},"content":"                        VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"limrik"},"content":"        String expectedMessage \u003d DateOfBirth.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"limrik"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"limrik"},"content":"    public void toModelType_nullDateOfBirth_throwsIllegalValueException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"limrik"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, null, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":93,"author":{"gitId":"limrik"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":94,"author":{"gitId":"limrik"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"limrik"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"limrik"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, INVALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":102,"author":{"gitId":"limrik"},"content":"                        VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"limrik"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB,","lastModifiedDate":"2024-03-13"},{"lineNumber":110,"author":{"gitId":"limrik"},"content":"                null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"limrik"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":119,"author":{"gitId":"limrik"},"content":"                        INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"limrik"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"limrik"},"content":"                null, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"limrik"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":136,"author":{"gitId":"limrik"},"content":"                        VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"limrik"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":144,"author":{"gitId":"limrik"},"content":"                VALID_EMAIL, null, VALID_TAGS);","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":154,"author":{"gitId":"limrik"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_PHONE,","lastModifiedDate":"2024-03-13"},{"lineNumber":155,"author":{"gitId":"limrik"},"content":"                        VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2024-03-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"limrik":58,"-":101}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import seedu.address.commons.core.date.Date;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.AppointmentType;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Note;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Time;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.TimePeriod;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":" * A utility class to help with building Appointment objects.","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"    public static final String DEFAULT_NRIC \u003d \"T0123456I\";","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"    public static final String DEFAULT_DATE \u003d \"2001-01-01\";","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"    public static final String DEFAULT_START_TIME \u003d \"23:58\";","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"    public static final String DEFAULT_END_TIME \u003d \"23:59\";","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"    public static final String DEFAULT_APPOINTMENT_TYPE \u003d \"Health Check-up\";","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"    public static final String DEFAULT_NOTE \u003d \"Only speaks mandarin\";","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"    private Nric nric;","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"    private Date date;","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":"    private TimePeriod timePeriod;","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":"    private AppointmentType appointmentType;","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":"    private Note note;","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"     * Creates a {@code AppointmentBuilder} with the default details.","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"        date \u003d new Date(DEFAULT_DATE);","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"        Time startTime \u003d new Time(DEFAULT_START_TIME);","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"        Time endTime \u003d new Time(DEFAULT_END_TIME);","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"        timePeriod \u003d new TimePeriod(startTime, endTime);","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"        appointmentType \u003d new AppointmentType(DEFAULT_APPOINTMENT_TYPE);","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"        note \u003d new Note(DEFAULT_NOTE);","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}.","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"    public AppointmentBuilder(Appointment apptToCopy) {","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"        nric \u003d apptToCopy.getNric();","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"        date \u003d apptToCopy.getDate();","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"        timePeriod \u003d apptToCopy.getTimePeriod();","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"        appointmentType \u003d apptToCopy.getAppointmentType();","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"        note \u003d apptToCopy.getNote();","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"     * Sets the {@code Nric} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"    public AppointmentBuilder withNric(String nric) {","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"     * Sets the {@code Date} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"    public AppointmentBuilder withDate(String date) {","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"        this.date \u003d new Date(date);","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"     * Sets the start time of {@code TimePeriod} of the {@code Appointment}","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"     * that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"    public AppointmentBuilder withStartTime(String startTime) {","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"        Time newStart \u003d new Time(startTime);","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"dayn-1"},"content":"        this.timePeriod \u003d new TimePeriod(newStart, this.timePeriod.getEndTime());","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"dayn-1"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"dayn-1"},"content":"     * Sets the end time of {@code TimePeriod} of the {@code Appointment}","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"dayn-1"},"content":"     * that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"dayn-1"},"content":"    public AppointmentBuilder withEndTime(String endTime) {","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"dayn-1"},"content":"        Time newEnd \u003d new Time(endTime);","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"dayn-1"},"content":"        this.timePeriod \u003d new TimePeriod(this.timePeriod.getStartTime(), newEnd);","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"dayn-1"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"dayn-1"},"content":"     * Sets the {@code AppointmentType} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"dayn-1"},"content":"    public AppointmentBuilder withAppointmentType(String typeName) {","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"dayn-1"},"content":"        this.appointmentType \u003d new AppointmentType(typeName);","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"dayn-1"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"dayn-1"},"content":"     * Sets the {@code Note} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"dayn-1"},"content":"    public AppointmentBuilder withNote(String note) {","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"dayn-1"},"content":"        this.note \u003d new Note(note);","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"dayn-1"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"dayn-1"},"content":"    public Appointment build() {","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"dayn-1"},"content":"        return new Appointment(nric, date, timePeriod, appointmentType, note);","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":109}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"        descriptor.setNric(person.getNric());","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        descriptor.setDateOfBirth(person.getDob());","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"    public EditPersonDescriptorBuilder withNric(String nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"        descriptor.setNric(new Nric(nric));","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"        return this;","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"     * Sets the {@code DateOfBirth} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"    public EditPersonDescriptorBuilder withDateOfBirth(String dob) {","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"        descriptor.setDateOfBirth(new DateOfBirth(dob));","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"        return this;","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"limrik":20,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.DateOfBirth;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"    public static final String DEFAULT_NRIC \u003d \"T0123456I\";","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    public static final String DEFAULT_DOB \u003d \"2001-01-01\";","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"    private Nric nric;","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    private DateOfBirth dob;","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"        dob \u003d new DateOfBirth(DEFAULT_DOB);","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"        nric \u003d personToCopy.getNric();","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"        dob \u003d personToCopy.getDob();","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"limrik"},"content":"     * Sets the {@code Nric} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"limrik"},"content":"    public PersonBuilder withNric(String nric) {","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"limrik"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"limrik"},"content":"        return this;","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"limrik"},"content":"     * Sets the {@code DateOfBirth} of the {@code Person} that we are building.","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"limrik"},"content":"    public PersonBuilder withDateOfBirth(String dob) {","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"limrik"},"content":"        this.dob \u003d new DateOfBirth(dob);","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"limrik"},"content":"        return this;","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":119,"author":{"gitId":"limrik"},"content":"        return new Person(name, nric, dob, phone, email, address, tags);","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"limrik":26,"dayn-1":1,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"        sb.append(PREFIX_NRIC + person.getNric().value + \" \");","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"        sb.append(PREFIX_DOB + person.getDob().toString() + \" \");","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"        descriptor.getDateOfBirth().ifPresent(dob -\u003e sb.append(PREFIX_DOB).append(dob.value).append(\" \"));","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"limrik":5,"dayn-1":1,"-":62}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dayn-1"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_END_TIME_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_END_TIME_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NOTE_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NOTE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_START_TIME_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_START_TIME_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TYPE_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TYPE_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"dayn-1"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"dayn-1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"dayn-1"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"dayn-1"},"content":"import java.util.List;","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"dayn-1"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"dayn-1"},"content":"/**","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"dayn-1"},"content":" * A utility class containing a list of {@code Appointment} objects to be used in tests.","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"dayn-1"},"content":" * Appointment NRICs match those in {@code TypicalPersons}.","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"dayn-1"},"content":" */","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"dayn-1"},"content":"public class TypicalAppointments {","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"dayn-1"},"content":"    public static final Appointment ALICE_APPT \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"dayn-1"},"content":"            .withNric(\"T0123456A\").withDate(\"2024-03-01\")","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"dayn-1"},"content":"            .withStartTime(\"16:00\").withEndTime(\"17:00\")","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"dayn-1"},"content":"            .withAppointmentType(\"Monthly check-up\")","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"dayn-1"},"content":"            .withNote(\"Routine follow up\").build();","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"dayn-1"},"content":"    public static final Appointment ALICE_APPT_1 \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"dayn-1"},"content":"            .withNric(\"T0123456A\").withDate(\"2024-04-01\")","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"dayn-1"},"content":"            .withStartTime(\"16:00\").withEndTime(\"17:00\")","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"dayn-1"},"content":"            .withAppointmentType(\"Monthly check-up\")","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"dayn-1"},"content":"            .withNote(\"Routine follow up\").build();","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"dayn-1"},"content":"    public static final Appointment BENSON_APPT \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"dayn-1"},"content":"            .withNric(\"T0123456B\").withDate(\"2024-03-02\")","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"dayn-1"},"content":"            .withStartTime(\"12:00\").withEndTime(\"12:30\")","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"dayn-1"},"content":"            .withAppointmentType(\"X-Ray\")","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"dayn-1"},"content":"            .withNote(\"Fractured finger\").build();","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"dayn-1"},"content":"    // Manually added - Appointment\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"dayn-1"},"content":"    public static final Appointment AMY_APPT \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"dayn-1"},"content":"            .withNric(VALID_NRIC_AMY).withDate(VALID_APPOINTMENT_DATE_AMY)","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"dayn-1"},"content":"            .withStartTime(VALID_APPOINTMENT_START_TIME_AMY).withEndTime(VALID_APPOINTMENT_END_TIME_AMY)","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"dayn-1"},"content":"            .withAppointmentType(VALID_APPOINTMENT_TYPE_AMY)","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"dayn-1"},"content":"            .withNote(VALID_APPOINTMENT_NOTE_AMY).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"dayn-1"},"content":"    public static final Appointment BOB_APPT \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"dayn-1"},"content":"            .withNric(VALID_NRIC_BOB).withDate(VALID_APPOINTMENT_DATE_BOB)","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"dayn-1"},"content":"            .withStartTime(VALID_APPOINTMENT_START_TIME_BOB).withEndTime(VALID_APPOINTMENT_END_TIME_BOB)","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"dayn-1"},"content":"            .withAppointmentType(VALID_APPOINTMENT_TYPE_BOB)","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"dayn-1"},"content":"            .withNote(VALID_APPOINTMENT_NOTE_BOB).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"dayn-1"},"content":"    private TypicalAppointments() {} // prevents instantiation","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"dayn-1"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"     * Returns an {@code AddressBook} with all the typical","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"dayn-1"},"content":"     * persons and appointments","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"dayn-1"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"dayn-1"},"content":"    public static AddressBook getTypicalAddressBookWithAppointments() {","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"dayn-1"},"content":"        AddressBook ab \u003d getTypicalAddressBook();","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"dayn-1"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"dayn-1"},"content":"            ab.addAppointment(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"dayn-1"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"dayn-1"},"content":"        return ab;","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"dayn-1"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"dayn-1"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"dayn-1"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_APPT, ALICE_APPT_1, BENSON_APPT));","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"dayn-1"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"dayn-1"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"dayn-1":75}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"            .withNric(\"T0123456A\").withDateOfBirth(\"2001-01-01\")","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2024-02-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"            .withNric(\"T0123456B\").withDateOfBirth(\"2001-01-02\")","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2024-02-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"            .withNric(\"T0123456C\").withDateOfBirth(\"2001-01-03\")","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"            .withNric(\"T0123456D\").withDateOfBirth(\"2001-01-04\")","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"            .withNric(\"T0123456E\").withDateOfBirth(\"2001-01-05\")","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"            .withNric(\"T0123456F\").withDateOfBirth(\"2001-01-06\")","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"            .withNric(\"T0123456G\").withDateOfBirth(\"2001-01-07\")","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"            .withNric(\"T0123456H\").withDateOfBirth(\"2001-01-08\")","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"dayn-1"},"content":"            .withNric(\"T0123456I\").withDateOfBirth(\"2001-01-09\")","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"            .withNric(VALID_NRIC_AMY).withDateOfBirth(VALID_DOB_AMY)","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"            .withNric(VALID_NRIC_BOB).withDateOfBirth(VALID_DOB_BOB)","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"limrik":14,"dayn-1":1,"-":76}}]
