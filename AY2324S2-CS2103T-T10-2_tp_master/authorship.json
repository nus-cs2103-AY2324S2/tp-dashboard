[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"qinboan"},"content":"# RAPID TRACER","lastModifiedDate":"2024-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103T-T10-2/tp/graph/badge.svg?token\u003d1R92MZ3PFL)](https://codecov.io/gh/AY2324S2-CS2103T-T10-2/tp)","lastModifiedDate":"2024-02-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"qinboan"},"content":"[![CI Status](https://github.com/AY2324S2-CS2103T-T10-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103T-T10-2/tp/actions)","lastModifiedDate":"2024-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"qinboan"},"content":"## Introduction","lastModifiedDate":"2024-03-08"},{"lineNumber":9,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":10,"author":{"gitId":"qinboan"},"content":"RapidTracer is a pioneering software solution designed specifically for healthcare professionals like Mr. Surya, a seasoned clinical clerk. In environments where rapid and accurate contact tracing is crucial for controlling infectious disease outbreaks, RapidTracer stands out as a vital tool.","lastModifiedDate":"2024-03-08"},{"lineNumber":11,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":12,"author":{"gitId":"qinboan"},"content":"## Background","lastModifiedDate":"2024-03-08"},{"lineNumber":13,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":14,"author":{"gitId":"qinboan"},"content":"Mr. Surya, a clinical counter clerk, faces daily challenges in managing extensive patient data and identifying potential transmission chains swiftly. His responsibilities include:","lastModifiedDate":"2024-03-08"},{"lineNumber":15,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":16,"author":{"gitId":"qinboan"},"content":"- Administering administrative tasks and contact tracing for both patients and staff.","lastModifiedDate":"2024-03-08"},{"lineNumber":17,"author":{"gitId":"qinboan"},"content":"- Handling large volumes of patient data including contact histories, contact numbers, and dates of visit.","lastModifiedDate":"2024-03-08"},{"lineNumber":18,"author":{"gitId":"qinboan"},"content":"- Rapidly identifying potential transmission chains to prevent outbreaks within the community.","lastModifiedDate":"2024-03-08"},{"lineNumber":19,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":20,"author":{"gitId":"qinboan"},"content":"An expert in navigating excel sheets, Mr. Surya requires a solution that complements his fast typing skills and allows for quick navigation and manipulation of datasets, preferably using keyboard commands for enhanced efficiency.","lastModifiedDate":"2024-03-08"},{"lineNumber":21,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":22,"author":{"gitId":"qinboan"},"content":"## Value Proposition","lastModifiedDate":"2024-03-08"},{"lineNumber":23,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":24,"author":{"gitId":"qinboan"},"content":"RapidTracer offers a unique solution, combining a simple and intuitive Graphical User Interface (GUI) with a keyboard-driven interface reminiscent of Vim’s efficiency. It is tailored to meet the specific needs of healthcare professionals engaged in contact tracing. Our solution stands out by:","lastModifiedDate":"2024-03-08"},{"lineNumber":25,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":26,"author":{"gitId":"qinboan"},"content":"- Providing a user-friendly tool that is more efficient than traditional Excel spreadsheets for managing large volumes of patient records and data.","lastModifiedDate":"2024-03-08"},{"lineNumber":27,"author":{"gitId":"qinboan"},"content":"- Offering swift navigation through complex patient data and contact histories, catering specifically to the needs of users like Dr. Surya.","lastModifiedDate":"2024-03-08"},{"lineNumber":28,"author":{"gitId":"qinboan"},"content":"- Ensuring a keyboard-driven interface that enhances speed and reduces reliance on a mouse.","lastModifiedDate":"2024-03-08"},{"lineNumber":29,"author":{"gitId":"qinboan"},"content":"- Supporting the loading and storing of large datasets, crucial for comprehensive contact tracing.","lastModifiedDate":"2024-03-08"},{"lineNumber":30,"author":{"gitId":"qinboan"},"content":"- Optimizing workflows to reduce administrative burdens, allowing healthcare professionals to focus more on critical aspects of patient care and outbreak management.","lastModifiedDate":"2024-03-08"},{"lineNumber":31,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":32,"author":{"gitId":"qinboan"},"content":"RapidTracer is not just a tool; it\u0027s an extension of the healthcare professional’s workflow, enhancing public health responses and significantly simplifying the process of contact tracing.","lastModifiedDate":"2024-03-08"},{"lineNumber":33,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":34,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":35,"author":{"gitId":"qinboan"},"content":"## Features","lastModifiedDate":"2024-03-08"},{"lineNumber":36,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":37,"author":{"gitId":"qinboan"},"content":"- **Intuitive GUI**: Easy to navigate and designed for efficiency.","lastModifiedDate":"2024-03-08"},{"lineNumber":38,"author":{"gitId":"qinboan"},"content":"- **Keyboard-Driven Commands**: Tailored for fast typers, reducing the need for a mouse.","lastModifiedDate":"2024-03-08"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"- **Efficient Data Management**: Streamlines handling of large datasets.","lastModifiedDate":"2024-03-08"},{"lineNumber":40,"author":{"gitId":"qinboan"},"content":"- **Optimized Contact Tracing Workflows**: Focuses on key functionalities needed in a clinical setting.","lastModifiedDate":"2024-03-08"},{"lineNumber":41,"author":{"gitId":"qinboan"},"content":"- **Vim-like Efficiency**: Familiar to those comfortable with keyboard shortcuts.","lastModifiedDate":"2024-03-08"},{"lineNumber":42,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":43,"author":{"gitId":"qinboan"},"content":"## License","lastModifiedDate":"2024-03-08"},{"lineNumber":44,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":45,"author":{"gitId":"qinboan"},"content":"MIT License","lastModifiedDate":"2024-03-08"},{"lineNumber":46,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":47,"author":{"gitId":"qinboan"},"content":"## Contact","lastModifiedDate":"2024-03-08"},{"lineNumber":48,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":49,"author":{"gitId":"qinboan"},"content":"For support or inquiries, please contact us at minrei.seah@u.nus.edu.","lastModifiedDate":"2024-03-08"},{"lineNumber":50,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":51,"author":{"gitId":"qinboan"},"content":"---","lastModifiedDate":"2024-03-08"},{"lineNumber":52,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":53,"author":{"gitId":"qinboan"},"content":"RapidTracer – Empowering healthcare professionals in the fight against infectious diseases.","lastModifiedDate":"2024-03-08"},{"lineNumber":54,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":55,"author":{"gitId":"qinboan"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"qinboan":50,"-":5}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"minreiseah"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg). To learn good software engineering practies, we have different team leads each week. This week\u0027s team lead is Shuyuan.","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"minreiseah"},"content":"### Boan","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"qinboan"},"content":"\u003cimg src\u003d\"images/qinboan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"[[homepage](http://www.comp.nus.edu.sg/~damithch)]","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"qinboan"},"content":"[[github](https://github.com/qinboan)]","lastModifiedDate":"2024-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"minreiseah"},"content":"* Role: Algorithms \u0026 Data Structures","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"minreiseah"},"content":"* Responsibilities: Algorithms \u0026 Data Structures","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"minreiseah"},"content":"### Jun Yuan","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"chengjunyuan"},"content":"\u003cimg src\u003d\"images/chengjunyuan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"chengjunyuan"},"content":"[[github](https://github.com/chengjunyuan)] [[linkedin](https://www.linkedin.com/in/jun-yuan-cheng-2867931a9/)] [[portfolio](team/chengjunyuan.md)]","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"chengjunyuan"},"content":"Interested in computational biology and bioinformatics!","lastModifiedDate":"2024-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"minreiseah"},"content":"### Min Rei","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"minreiseah"},"content":"\u003cimg src\u003d\"images/minreiseah.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"minreiseah"},"content":"[[github](http://github.com/minreiseah)] [[portfolio](team/minrei.md)]","lastModifiedDate":"2024-03-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"minreiseah"},"content":"### Sampson","lastModifiedDate":"2024-03-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"SampsonYe1999"},"content":"\u003cimg src\u003d\"images/sampsonye1999.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"SampsonYe1999"},"content":"[[github](http://github.com/SampsonYe1999)]","lastModifiedDate":"2024-03-07"},{"lineNumber":50,"author":{"gitId":"SampsonYe1999"},"content":"[[portfolio](team/sampsonye.md)]","lastModifiedDate":"2024-03-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"minreiseah"},"content":"### Shuyuan","lastModifiedDate":"2024-03-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"legionlegion"},"content":"\u003cimg src\u003d\"images/legionlegion.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2024-03-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"legionlegion"},"content":"[[github](http://github.com/legionlegion)]","lastModifiedDate":"2024-03-07"},{"lineNumber":60,"author":{"gitId":"legionlegion"},"content":"[[portfolio](team/legionlegion.md)]","lastModifiedDate":"2024-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"legionlegion":3,"minreiseah":10,"qinboan":2,"chengjunyuan":4,"-":41,"SampsonYe1999":3}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"DevOps guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# DevOps guide","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c!-- -------------------------------------------------------------------------------------------------------------------- --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"minreiseah"},"content":"## Github Forking Workflow","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"minreiseah"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"minreiseah"},"content":"### Making Changes","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"minreiseah"},"content":"1. Create branch on fork (local)","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"minreiseah"},"content":"2. Push branch to fork (remote: github)","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"minreiseah"},"content":"3. Create pr from fork (remote) to main (remote)","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"minreiseah"},"content":"4. Merge pr onto main (remote)","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"minreiseah"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"minreiseah"},"content":"Note:","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"minreiseah"},"content":"- When to create PRs? ONLY from FORK\u0027s feature-branch to MAIN. there is no need to make PRs WITHIN the fork, only from fork -\u003e main.","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"minreiseah"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"minreiseah"},"content":"### Updating Local Fork","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"minreiseah"},"content":"1. First, ensure that you did git remote add upstream https://github.com/AY2324S2-CS2103T-T10-2/tp.git","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"minreiseah"},"content":"    - So now you have two remotes on github (origin: the fork, upstream: the main)","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"minreiseah"},"content":"2. To update your local forked branch: git pull upstream main. ","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"minreiseah"},"content":"    - If you\u0027re working on a branch, then make sure you merge changes from main to that branch; i.e. git checkout that branch, then git merge main.","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"minreiseah"},"content":"3. Once you\u0027re ready, just push the BRANCH to your fork (remote).","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"minreiseah"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Build automation","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**.","lastModifiedDate":"2020-06-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks.","lastModifiedDate":"2020-05-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`","lastModifiedDate":"2020-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`.","lastModifiedDate":"2020-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it.","lastModifiedDate":"2020-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base.","lastModifiedDate":"2020-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.","lastModifiedDate":"2023-01-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests","lastModifiedDate":"2020-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests","lastModifiedDate":"2020-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"## Continuous integration (CI)","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Code coverage","lastModifiedDate":"2020-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. When CI runs, it will generate code coverage data (based on the tests run by CI) and upload that data to the CodeCov website, which in turn can provide you more info about the coverage of your tests.","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"However, because Codecov is known to run into intermittent problems (e.g., report upload fails) due to issues on the Codecov service side, the CI is configured to pass even if the Codecov task failed. Therefore, developers are advised to check the code coverage levels periodically and take corrective actions if the coverage level falls below desired levels.","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"To enable Codecov for forks of this project, follow the steps given in [this se-edu guide](https://se-education.org/guides/tutorials/codecov.html).","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### Repository-wide checks","lastModifiedDate":"2020-07-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements.","lastModifiedDate":"2020-07-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:","lastModifiedDate":"2020-07-28"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`","lastModifiedDate":"2020-07-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console.","lastModifiedDate":"2020-07-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**If adding new checks:**","lastModifiedDate":"2020-07-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest.","lastModifiedDate":"2020-07-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`","lastModifiedDate":"2020-07-28"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN.","lastModifiedDate":"2020-07-28"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory.","lastModifiedDate":"2020-07-28"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error.","lastModifiedDate":"2020-07-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur.","lastModifiedDate":"2020-07-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Making a release","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Here are the steps to create a new release.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java).","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadowJar`).","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created.","lastModifiedDate":"2020-05-26"}],"authorContributionMap":{"minreiseah":18,"-":82}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"chengjunyuan"},"content":"# Rapid Tracer Developer Guide","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"chengjunyuan"},"content":"This project was adapted from [AB3](https://se-education.org/addressbook-level3/), the source code of which can be found [here](https://github.com/nus-cs2103-AY2324S2/tp).","lastModifiedDate":"2024-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline continues till the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).\u003cbr\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"   Note that although this is shown as a single step in the diagram above (for simplicity), in the code it can take several interactions (between the command object and the `Model`) to achieve.","lastModifiedDate":"2024-02-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"The following sequence diagram shows how an undo operation goes through the `Logic` component:","lastModifiedDate":"2024-02-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Logic.puml\" alt\u003d\"UndoSequenceDiagram-Logic\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"Similarly, how an undo operation goes through the `Model` component is shown below:","lastModifiedDate":"2024-02-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram-Model.puml\" alt\u003d\"UndoSequenceDiagram-Model\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":267,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"legionlegion"},"content":"* A clinical counter clerk in charge of administrative tasks and contact tracing that involves both patients and staff.","lastModifiedDate":"2024-03-08"},{"lineNumber":278,"author":{"gitId":"legionlegion"},"content":"* Very fast typer due to years of experience with excel sheets","lastModifiedDate":"2024-03-08"},{"lineNumber":279,"author":{"gitId":"legionlegion"},"content":"* Tasked with managing large volumes of patient data, including contact histories, contact number, date of visit, across various settings.","lastModifiedDate":"2024-03-08"},{"lineNumber":280,"author":{"gitId":"legionlegion"},"content":"* Responsible for swiftly identifying potential transmission chains to prevent outbreaks within the community.","lastModifiedDate":"2024-03-08"},{"lineNumber":281,"author":{"gitId":"legionlegion"},"content":"* Requires an interface that allows for quick navigation and manipulation of datasets without relying on a mouse, favoring keyboard commands for efficiency.","lastModifiedDate":"2024-03-08"},{"lineNumber":282,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":283,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":284,"author":{"gitId":"legionlegion"},"content":"**Value proposition**: ","lastModifiedDate":"2024-03-08"},{"lineNumber":285,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":286,"author":{"gitId":"legionlegion"},"content":"A simple and intuitive GUI with a keyboard-driven interface that mirrors the efficiency of Vim.","lastModifiedDate":"2024-03-08"},{"lineNumber":287,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":288,"author":{"gitId":"legionlegion"},"content":"RapidTracer is a more user-friendly tool than Excel for managing large volumes of patient records and data; optimized patient care and outbreak management workflows designed to reduce administrative burdens. For healthcare professionals engaged in contact tracing, RapidTracer combines:","lastModifiedDate":"2024-03-08"},{"lineNumber":289,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":290,"author":{"gitId":"legionlegion"},"content":"* Simple and intuitive GUI","lastModifiedDate":"2024-03-08"},{"lineNumber":291,"author":{"gitId":"legionlegion"},"content":"* Quick to use for fast typers","lastModifiedDate":"2024-03-08"},{"lineNumber":292,"author":{"gitId":"legionlegion"},"content":"* Instead of using Excel spreadsheets which tends to end up with too much redundant information (everything for everyone), and offers way too many features that a specific user like Dr Surya will not * use, RapidTracer is catered to Dr Surya’s context and field of work (everything for someone).","lastModifiedDate":"2024-03-08"},{"lineNumber":293,"author":{"gitId":"legionlegion"},"content":"* Swiftly navigation through complex patient data and contact histories.","lastModifiedDate":"2024-03-08"},{"lineNumber":294,"author":{"gitId":"legionlegion"},"content":"* A keyboard-driven interface that mirrors the efficiency of Vim","lastModifiedDate":"2024-03-08"},{"lineNumber":295,"author":{"gitId":"legionlegion"},"content":"* The ability to load and store large datasets","lastModifiedDate":"2024-03-08"},{"lineNumber":296,"author":{"gitId":"legionlegion"},"content":"* Optimized workflows designed to reduce administrative burdens, allowing healthcare professionals to concentrate on critical aspects of patient care and outbreak management.","lastModifiedDate":"2024-03-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​           | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"chengjunyuan"},"content":"|----------|--------------------------------------------|------------------------|------------------------------------------------------------------------|","lastModifiedDate":"2024-03-07"},{"lineNumber":306,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | new clinic clerk                                      | see usage instructions | refer to instructions when I forget how to use the App                 |","lastModifiedDate":"2024-03-08"},{"lineNumber":307,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                                          | add a new patient       | keep track of clinical records                                               |","lastModifiedDate":"2024-03-08"},{"lineNumber":308,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                                          | delete a patient        | remove entries that I no longer need                                   |","lastModifiedDate":"2024-03-08"},{"lineNumber":309,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                                          | find a patient by name  | locate details of patient without having to go through the entire list |","lastModifiedDate":"2024-03-08"},{"lineNumber":310,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                                          | update contact details | keep track of their current details                                    |","lastModifiedDate":"2024-03-08"},{"lineNumber":311,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | create contacts for new patients | store their patient data |","lastModifiedDate":"2024-03-08"},{"lineNumber":312,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | update existing patient contacts | keep track of their current information |","lastModifiedDate":"2024-03-08"},{"lineNumber":313,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | delete patient contacts | abide by PDPA regulations |","lastModifiedDate":"2024-03-08"},{"lineNumber":314,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | see the records of existing patient contacts | see their relevant information for administrative use |","lastModifiedDate":"2024-03-08"},{"lineNumber":315,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | search my patient records | find a specific patient without scrolling through every single patient record |","lastModifiedDate":"2024-03-08"},{"lineNumber":316,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | make an appointment for an existing contact | keep track of upcoming visits |","lastModifiedDate":"2024-03-08"},{"lineNumber":317,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | update existing appointments | help my patients reschedule their appointments |","lastModifiedDate":"2024-03-08"},{"lineNumber":318,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | delete upcoming appointments | help my patients reschedule their appointments |","lastModifiedDate":"2024-03-08"},{"lineNumber":319,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | see the details of an appointment | maintain patient records |","lastModifiedDate":"2024-03-08"},{"lineNumber":320,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | search my appointments | find a specific appointment without scrolling through every appointment |","lastModifiedDate":"2024-03-08"},{"lineNumber":321,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | tag patients which have contracted infectious diseases such as COVID | keep track of their immunity period |","lastModifiedDate":"2024-03-08"},{"lineNumber":322,"author":{"gitId":"legionlegion"},"content":"| `* * *`  | clinic clerk                               | see which patients have visited the clinic on the same day as each other | facilitate close contact tracing |","lastModifiedDate":"2024-03-08"},{"lineNumber":323,"author":{"gitId":"legionlegion"},"content":"| `* *`    | clinic clerk                               | leave notes and remarks on patient contacts | take note of them for future appointments |","lastModifiedDate":"2024-03-08"},{"lineNumber":324,"author":{"gitId":"legionlegion"},"content":"| `* *`    | clinic clerk                               | leave notes and remarks on appointment records | take note of important details for subsequent appointments |","lastModifiedDate":"2024-03-08"},{"lineNumber":325,"author":{"gitId":"legionlegion"},"content":"| `* *`    | clinic clerk                               | navigate to an appointment record from a patient record | see the details of a specific appointment |","lastModifiedDate":"2024-03-08"},{"lineNumber":326,"author":{"gitId":"legionlegion"},"content":"| `* *`    | clinic clerk                               | navigate to a patient contact from an appointment record | see the details of that specific patient |","lastModifiedDate":"2024-03-08"},{"lineNumber":327,"author":{"gitId":"legionlegion"},"content":"| `* *`    | fast typer                                 | have an undo function (similar to \"Ctrl + Z\") | undo mistakes if I make a typo |","lastModifiedDate":"2024-03-08"},{"lineNumber":328,"author":{"gitId":"legionlegion"},"content":"| `*`      | clinic clerk                               | have a calendar view of all my appointments | collect data on clinic popularity over time |","lastModifiedDate":"2024-03-08"},{"lineNumber":329,"author":{"gitId":"legionlegion"},"content":"| `*`      | clinic clerk                               | download and save all my patient and appointment data | transfer my work to a new laptop |","lastModifiedDate":"2024-03-08"},{"lineNumber":330,"author":{"gitId":"legionlegion"},"content":"| `*`      | clinic clerk                               | upload all my patient and appointment data | continue working when I switch to a new device |","lastModifiedDate":"2024-03-08"},{"lineNumber":331,"author":{"gitId":"legionlegion"},"content":"| `*`      | clinic clerk with many patients in the address book | sort patient by name   | locate a patient easily                                                 |","lastModifiedDate":"2024-03-08"},{"lineNumber":332,"author":{"gitId":"legionlegion"},"content":"| `*`      | normal guy just chilling                   | be able to click buttons | navigate the system even if I am not familiar with a CLI |","lastModifiedDate":"2024-03-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"legionlegion"},"content":"As Rapid Tracer is meant to be single-user, the System and Actor for all use cases will be RapidTracer and Clinic Clerk (Mr. Surya) respectively, unless otherwise specified.","lastModifiedDate":"2024-03-08"},{"lineNumber":339,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":340,"author":{"gitId":"legionlegion"},"content":"#### General Use Cases","lastModifiedDate":"2024-03-08"},{"lineNumber":341,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":342,"author":{"gitId":"legionlegion"},"content":"**Use Case: G01 - Exit System**","lastModifiedDate":"2024-03-08"},{"lineNumber":343,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":344,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":345,"author":{"gitId":"legionlegion"},"content":"1. Actor requests to exit the System.","lastModifiedDate":"2024-03-08"},{"lineNumber":346,"author":{"gitId":"legionlegion"},"content":"2. System saves current patient and appointment data to a file.","lastModifiedDate":"2024-03-08"},{"lineNumber":347,"author":{"gitId":"legionlegion"},"content":"3. System exits.","lastModifiedDate":"2024-03-08"},{"lineNumber":348,"author":{"gitId":"legionlegion"},"content":"4. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":349,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":350,"author":{"gitId":"legionlegion"},"content":"## Use Case: G02 - Display Help Message","lastModifiedDate":"2024-03-08"},{"lineNumber":351,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":352,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":353,"author":{"gitId":"legionlegion"},"content":"1. Actor requests to display a help message.","lastModifiedDate":"2024-03-08"},{"lineNumber":354,"author":{"gitId":"legionlegion"},"content":"2. System displays a help message.","lastModifiedDate":"2024-03-08"},{"lineNumber":355,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":356,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":357,"author":{"gitId":"legionlegion"},"content":"# Contact Use Cases","lastModifiedDate":"2024-03-08"},{"lineNumber":358,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":359,"author":{"gitId":"legionlegion"},"content":"**Use Case: C01 - Add New Contact**","lastModifiedDate":"2024-03-08"},{"lineNumber":360,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":361,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":362,"author":{"gitId":"legionlegion"},"content":"1. Actor enters the details required to make a new contact.","lastModifiedDate":"2024-03-08"},{"lineNumber":363,"author":{"gitId":"legionlegion"},"content":"2. System saves the contact details and displays a confirmation message.","lastModifiedDate":"2024-03-08"},{"lineNumber":364,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":365,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":366,"author":{"gitId":"legionlegion"},"content":"**Extensions**","lastModifiedDate":"2024-03-08"},{"lineNumber":367,"author":{"gitId":"legionlegion"},"content":"- 1a. System detects an error in the entered data.","lastModifiedDate":"2024-03-08"},{"lineNumber":368,"author":{"gitId":"legionlegion"},"content":"    1. System displays a help message with the correct data entry format.","lastModifiedDate":"2024-03-08"},{"lineNumber":369,"author":{"gitId":"legionlegion"},"content":"    2. System requests for new data.","lastModifiedDate":"2024-03-08"},{"lineNumber":370,"author":{"gitId":"legionlegion"},"content":"    3. Actor enters new data.","lastModifiedDate":"2024-03-08"},{"lineNumber":371,"author":{"gitId":"legionlegion"},"content":"    - Steps 1a1-1a3 are repeated until the data entered is correct.","lastModifiedDate":"2024-03-08"},{"lineNumber":372,"author":{"gitId":"legionlegion"},"content":"    - Use case resumes from step 2.","lastModifiedDate":"2024-03-08"},{"lineNumber":373,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":374,"author":{"gitId":"legionlegion"},"content":"**Use Case: C02 - Edit an Existing Contact**","lastModifiedDate":"2024-03-08"},{"lineNumber":375,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":376,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":377,"author":{"gitId":"legionlegion"},"content":"1. Actor enters the details required to edit an existing contact.","lastModifiedDate":"2024-03-08"},{"lineNumber":378,"author":{"gitId":"legionlegion"},"content":"2. System saves the updated contact details and displays a confirmation message.","lastModifiedDate":"2024-03-08"},{"lineNumber":379,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":380,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":381,"author":{"gitId":"legionlegion"},"content":"**Extensions**","lastModifiedDate":"2024-03-08"},{"lineNumber":382,"author":{"gitId":"legionlegion"},"content":"- 1a. System detects an error in the entered data.","lastModifiedDate":"2024-03-08"},{"lineNumber":383,"author":{"gitId":"legionlegion"},"content":"    1. System displays a help message with the correct data entry format.","lastModifiedDate":"2024-03-08"},{"lineNumber":384,"author":{"gitId":"legionlegion"},"content":"    2. System requests for new data.","lastModifiedDate":"2024-03-08"},{"lineNumber":385,"author":{"gitId":"legionlegion"},"content":"    3. Actor enters new data.","lastModifiedDate":"2024-03-08"},{"lineNumber":386,"author":{"gitId":"legionlegion"},"content":"    - Steps 1a1-1a3 are repeated until the data entered is correct.","lastModifiedDate":"2024-03-08"},{"lineNumber":387,"author":{"gitId":"legionlegion"},"content":"    - Use case resumes from step 2.","lastModifiedDate":"2024-03-08"},{"lineNumber":388,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":389,"author":{"gitId":"legionlegion"},"content":"**Use Case: C03 - Find a Contact**","lastModifiedDate":"2024-03-08"},{"lineNumber":390,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":391,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":392,"author":{"gitId":"legionlegion"},"content":"1. Actor requests to find a contact and enters the contact’s details.","lastModifiedDate":"2024-03-08"},{"lineNumber":393,"author":{"gitId":"legionlegion"},"content":"2. System shows a list of contacts with matching details.","lastModifiedDate":"2024-03-08"},{"lineNumber":394,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":395,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":396,"author":{"gitId":"legionlegion"},"content":"**Extensions**","lastModifiedDate":"2024-03-08"},{"lineNumber":397,"author":{"gitId":"legionlegion"},"content":"- 2a. The list is empty.","lastModifiedDate":"2024-03-08"},{"lineNumber":398,"author":{"gitId":"legionlegion"},"content":"    - Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":400,"author":{"gitId":"legionlegion"},"content":"**Use Case: C04 - Delete a Contact**","lastModifiedDate":"2024-03-08"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"legionlegion"},"content":"1. Actor requests to delete a specific person in the list of contacts currently displayed.","lastModifiedDate":"2024-03-08"},{"lineNumber":404,"author":{"gitId":"legionlegion"},"content":"2. System deletes the person.","lastModifiedDate":"2024-03-08"},{"lineNumber":405,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"legionlegion"},"content":"**Extensions**","lastModifiedDate":"2024-03-08"},{"lineNumber":408,"author":{"gitId":"legionlegion"},"content":"- 1a. The given index is invalid.","lastModifiedDate":"2024-03-08"},{"lineNumber":409,"author":{"gitId":"legionlegion"},"content":"    1. System shows an error message.","lastModifiedDate":"2024-03-08"},{"lineNumber":410,"author":{"gitId":"legionlegion"},"content":"    - Use case resumes at step 1.","lastModifiedDate":"2024-03-08"},{"lineNumber":411,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":412,"author":{"gitId":"legionlegion"},"content":"**Use Case: C05 - List All Contacts**","lastModifiedDate":"2024-03-08"},{"lineNumber":413,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":414,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":415,"author":{"gitId":"legionlegion"},"content":"1. Actor requests to list all contacts.","lastModifiedDate":"2024-03-08"},{"lineNumber":416,"author":{"gitId":"legionlegion"},"content":"2. System lists all contacts.","lastModifiedDate":"2024-03-08"},{"lineNumber":417,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"legionlegion"},"content":"**Use Case: C06 - Conduct Contact Tracing**","lastModifiedDate":"2024-03-08"},{"lineNumber":420,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":421,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":422,"author":{"gitId":"legionlegion"},"content":"1. Actor requests to list all contacts with appointments in a specific window of time.","lastModifiedDate":"2024-03-08"},{"lineNumber":423,"author":{"gitId":"legionlegion"},"content":"2. System shows a list of contacts with matching details.","lastModifiedDate":"2024-03-08"},{"lineNumber":424,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"legionlegion"},"content":"- 2a. The list is empty.","lastModifiedDate":"2024-03-08"},{"lineNumber":428,"author":{"gitId":"legionlegion"},"content":"    - Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":429,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":430,"author":{"gitId":"legionlegion"},"content":"# Appointment Use Cases","lastModifiedDate":"2024-03-08"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"legionlegion"},"content":"**Use Case: A01 - Add Appointment**","lastModifiedDate":"2024-03-08"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"legionlegion"},"content":"**MSS:**","lastModifiedDate":"2024-03-08"},{"lineNumber":435,"author":{"gitId":"legionlegion"},"content":"1. Actor enters appointment details for a patient visit.","lastModifiedDate":"2024-03-08"},{"lineNumber":436,"author":{"gitId":"legionlegion"},"content":"2. System saves the appointment details.","lastModifiedDate":"2024-03-08"},{"lineNumber":437,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"legionlegion"},"content":"**Extensions**","lastModifiedDate":"2024-03-08"},{"lineNumber":440,"author":{"gitId":"legionlegion"},"content":"- 1a. System detects an error in the entered data.","lastModifiedDate":"2024-03-08"},{"lineNumber":441,"author":{"gitId":"legionlegion"},"content":"    1. System displays a help message with the correct data entry format.","lastModifiedDate":"2024-03-08"},{"lineNumber":442,"author":{"gitId":"legionlegion"},"content":"    2. System requests for new data.","lastModifiedDate":"2024-03-08"},{"lineNumber":443,"author":{"gitId":"legionlegion"},"content":"    3. Actor enters new data.","lastModifiedDate":"2024-03-08"},{"lineNumber":444,"author":{"gitId":"legionlegion"},"content":"    - Steps 1a1-1a3 are repeated until the data entered is correct.","lastModifiedDate":"2024-03-08"},{"lineNumber":445,"author":{"gitId":"legionlegion"},"content":"    - Use case resumes from step 2.","lastModifiedDate":"2024-03-08"},{"lineNumber":446,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":447,"author":{"gitId":"legionlegion"},"content":"**Use Case: A02 - Edit an Appointment**","lastModifiedDate":"2024-03-08"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":450,"author":{"gitId":"legionlegion"},"content":"1. Actor enters the details required to edit an existing appointment.","lastModifiedDate":"2024-03-08"},{"lineNumber":451,"author":{"gitId":"legionlegion"},"content":"2. System saves the updated appointment details and displays a confirmation message.","lastModifiedDate":"2024-03-08"},{"lineNumber":452,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":453,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":454,"author":{"gitId":"legionlegion"},"content":"**Extensions**","lastModifiedDate":"2024-03-08"},{"lineNumber":455,"author":{"gitId":"legionlegion"},"content":"- 1a. System detects an error in the entered data.","lastModifiedDate":"2024-03-08"},{"lineNumber":456,"author":{"gitId":"legionlegion"},"content":"    1. System displays a help message with the correct data entry format.","lastModifiedDate":"2024-03-08"},{"lineNumber":457,"author":{"gitId":"legionlegion"},"content":"    2. System requests for new data.","lastModifiedDate":"2024-03-08"},{"lineNumber":458,"author":{"gitId":"legionlegion"},"content":"    3. Actor enters new data.","lastModifiedDate":"2024-03-08"},{"lineNumber":459,"author":{"gitId":"legionlegion"},"content":"    - Steps 1a1-1a3 are repeated until the data entered is correct.","lastModifiedDate":"2024-03-08"},{"lineNumber":460,"author":{"gitId":"legionlegion"},"content":"    - Use case resumes from step 2.","lastModifiedDate":"2024-03-08"},{"lineNumber":461,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":462,"author":{"gitId":"legionlegion"},"content":"**Use Case: A03 - Delete an Appointment**","lastModifiedDate":"2024-03-08"},{"lineNumber":463,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":464,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":465,"author":{"gitId":"legionlegion"},"content":"1. Actor requests to delete a specific appointment in the list of appointments currently displayed.","lastModifiedDate":"2024-03-08"},{"lineNumber":466,"author":{"gitId":"legionlegion"},"content":"2. System deletes the appointment.","lastModifiedDate":"2024-03-08"},{"lineNumber":467,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":468,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":469,"author":{"gitId":"legionlegion"},"content":"**Extensions**","lastModifiedDate":"2024-03-08"},{"lineNumber":470,"author":{"gitId":"legionlegion"},"content":"- 1a. The given index is invalid.","lastModifiedDate":"2024-03-08"},{"lineNumber":471,"author":{"gitId":"legionlegion"},"content":"    1. System shows an error message.","lastModifiedDate":"2024-03-08"},{"lineNumber":472,"author":{"gitId":"legionlegion"},"content":"    - Use case resumes at step 1.","lastModifiedDate":"2024-03-08"},{"lineNumber":473,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":474,"author":{"gitId":"legionlegion"},"content":"**Use Case: A04 - List All Appointments**","lastModifiedDate":"2024-03-08"},{"lineNumber":475,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":476,"author":{"gitId":"legionlegion"},"content":"**MSS**","lastModifiedDate":"2024-03-08"},{"lineNumber":477,"author":{"gitId":"legionlegion"},"content":"1. Actor requests to list all appointments.","lastModifiedDate":"2024-03-08"},{"lineNumber":478,"author":{"gitId":"legionlegion"},"content":"2. System lists all contacts.","lastModifiedDate":"2024-03-08"},{"lineNumber":479,"author":{"gitId":"legionlegion"},"content":"3. Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":480,"author":{"gitId":"legionlegion"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":481,"author":{"gitId":"legionlegion"},"content":"**Extensions**","lastModifiedDate":"2024-03-08"},{"lineNumber":482,"author":{"gitId":"legionlegion"},"content":"- 2a. The list is empty.","lastModifiedDate":"2024-03-08"},{"lineNumber":483,"author":{"gitId":"legionlegion"},"content":"    - Use case ends.","lastModifiedDate":"2024-03-08"},{"lineNumber":484,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"chengjunyuan"},"content":"1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2024-03-08"},{"lineNumber":491,"author":{"gitId":"chengjunyuan"},"content":"2. Should save backups of patient and appointment data at regular intervals (once every time the app is opened), in order to facilitate disaster recovery processes.","lastModifiedDate":"2024-03-08"},{"lineNumber":492,"author":{"gitId":"chengjunyuan"},"content":"3. Should work on any *mainstream OS* as long as it has Java `11` or above installed. For Mac users, it should minimally work on any Mac which has been set up according to the advisory [here](https://nus-cs2103-ay2324s2.github.io/website/admin/programmingLanguages.html#programming-language).","lastModifiedDate":"2024-03-08"},{"lineNumber":493,"author":{"gitId":"chengjunyuan"},"content":"4. Should be able to hold up to 1000 contacts without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2024-03-08"},{"lineNumber":494,"author":{"gitId":"chengjunyuan"},"content":"5. Should be able to hold up to 10000 appointments without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2024-03-08"},{"lineNumber":495,"author":{"gitId":"chengjunyuan"},"content":"6. Should have the ability to import patient and appointment data stored in common formats, such as CSV or JSON.","lastModifiedDate":"2024-03-08"},{"lineNumber":496,"author":{"gitId":"chengjunyuan"},"content":"7. Should have comprehensive documentation for both users and developers in the form of a User and Developer Guide respectively.","lastModifiedDate":"2024-03-08"},{"lineNumber":497,"author":{"gitId":"legionlegion"},"content":"8. Should respond to user commands within a reasonable timeframe( less than 1s)","lastModifiedDate":"2024-03-08"},{"lineNumber":498,"author":{"gitId":"legionlegion"},"content":"9. Should be available during clinic operating hours with minimal downtime.","lastModifiedDate":"2024-03-08"},{"lineNumber":499,"author":{"gitId":"legionlegion"},"content":"10. Should have mechanisms in place to prevent data loss or corruption, such as regular backups.","lastModifiedDate":"2024-03-08"},{"lineNumber":500,"author":{"gitId":"legionlegion"},"content":"11. Should be able to recover from failures, minimizing downtime.","lastModifiedDate":"2024-03-08"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, MacOS","lastModifiedDate":"2024-02-09"},{"lineNumber":507,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":517,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":518,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"legionlegion":186,"chengjunyuan":10,"-":366}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"minreiseah"},"content":"# Rapid Tracer","lastModifiedDate":"2024-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"minreiseah"},"content":"RapidTracer offers a fast-paced GUI for clinic managers to handle contacts and appointments. It combines:","lastModifiedDate":"2024-03-08"},{"lineNumber":10,"author":{"gitId":"minreiseah"},"content":"- Simple and intuitive GUI","lastModifiedDate":"2024-03-08"},{"lineNumber":11,"author":{"gitId":"minreiseah"},"content":"- Quick to use for fast typers","lastModifiedDate":"2024-03-08"},{"lineNumber":12,"author":{"gitId":"minreiseah"},"content":"- Instead of using Excel spreadsheets which tends to end up with too much redundant information (everything for everyone), and offers way too many features that a specific user like Dr Surya will not use, RapidTracer is catered to Dr Surya’s context and field of work (everything for someone).","lastModifiedDate":"2024-03-08"},{"lineNumber":13,"author":{"gitId":"minreiseah"},"content":"- Swiftly navigation through complex patient data and contact histories.","lastModifiedDate":"2024-03-08"},{"lineNumber":14,"author":{"gitId":"minreiseah"},"content":"- A keyboard-driven interface that mirrors the efficiency of Vim","lastModifiedDate":"2024-03-08"},{"lineNumber":15,"author":{"gitId":"minreiseah"},"content":"- The ability to load and store large datasets","lastModifiedDate":"2024-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"minreiseah"},"content":"- Creating, Reading, Updating, Deleting Contacts","lastModifiedDate":"2024-03-08"},{"lineNumber":31,"author":{"gitId":"minreiseah"},"content":"- Creating, Reading, Updating, Deleting Appointments","lastModifiedDate":"2024-03-08"},{"lineNumber":32,"author":{"gitId":"minreiseah"},"content":"- Searching contacts and appointments","lastModifiedDate":"2024-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"minreiseah"},"content":"## Commands","lastModifiedDate":"2024-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"minreiseah"},"content":"### General Commands","lastModifiedDate":"2024-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"minreiseah"},"content":"#### Viewing help : `help`","lastModifiedDate":"2024-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"minreiseah"},"content":"#### Exiting program : `exit`","lastModifiedDate":"2024-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"minreiseah"},"content":"### Contact Commands","lastModifiedDate":"2024-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":44,"author":{"gitId":"minreiseah"},"content":"#### Adding a contact: `add`","lastModifiedDate":"2024-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"minreiseah"},"content":"Adds a new contact to RapidTracer.","lastModifiedDate":"2024-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"minreiseah"},"content":"Format: `add n/NAME p/PHONE_NUMBER [a/ADDRESS] [t/TAG] [d/DATE] [s/START_TIME] [e/END_TIME]`","lastModifiedDate":"2024-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"minreiseah"},"content":"- Commands in [brackets] are optional parameters.","lastModifiedDate":"2024-03-08"},{"lineNumber":51,"author":{"gitId":"minreiseah"},"content":"- The name to be added “NAME” can only contain alphabets. Most normal people don’t have numbers in their names.","lastModifiedDate":"2024-03-08"},{"lineNumber":52,"author":{"gitId":"minreiseah"},"content":"- Parameters may be typed in any order.","lastModifiedDate":"2024-03-08"},{"lineNumber":53,"author":{"gitId":"minreiseah"},"content":"- On the implementation side, adding w/o date and times just creates one contact object. Else, it creates one contact object and appointment object and links them.","lastModifiedDate":"2024-03-08"},{"lineNumber":54,"author":{"gitId":"minreiseah"},"content":"- If [d/DATE] is not given, assume the current date.","lastModifiedDate":"2024-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"minreiseah"},"content":"#### Listing contacts: `list`","lastModifiedDate":"2024-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"minreiseah"},"content":"Shows a list of all contacts in RapidTracer.","lastModifiedDate":"2024-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"minreiseah"},"content":"#### Editing contact: `edit`","lastModifiedDate":"2024-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"minreiseah"},"content":"Edits an existing contact’s details in RapidTracer. This does not deal with user appointments.","lastModifiedDate":"2024-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"minreiseah"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [a/ADDRESS] [t/TAG]`","lastModifiedDate":"2024-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"minreiseah"},"content":"- Edits the contact at the specified INDEX.","lastModifiedDate":"2024-03-08"},{"lineNumber":67,"author":{"gitId":"minreiseah"},"content":"- INDEX is a positive integer that is currently displayed on the screen.","lastModifiedDate":"2024-03-08"},{"lineNumber":68,"author":{"gitId":"minreiseah"},"content":"- Only one INDEX can be edited at a time.","lastModifiedDate":"2024-03-08"},{"lineNumber":69,"author":{"gitId":"minreiseah"},"content":"- At least one of the optional fields must be provided.","lastModifiedDate":"2024-03-08"},{"lineNumber":70,"author":{"gitId":"minreiseah"},"content":"- Existing values will be updated to the input values.","lastModifiedDate":"2024-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"minreiseah"},"content":"#### Searching for contacts: `find`","lastModifiedDate":"2024-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"minreiseah"},"content":"Shows a list of contacts in RapidTracer matching the description provided. Found searches must meet ALL keywords.","lastModifiedDate":"2024-03-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"minreiseah"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2024-03-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"minreiseah"},"content":"- The KEYWORD searched is case-insensitive.","lastModifiedDate":"2024-03-08"},{"lineNumber":79,"author":{"gitId":"minreiseah"},"content":"- Order of keywords does not matter.","lastModifiedDate":"2024-03-08"},{"lineNumber":80,"author":{"gitId":"minreiseah"},"content":"- Possible keyword types:","lastModifiedDate":"2024-03-08"},{"lineNumber":81,"author":{"gitId":"minreiseah"},"content":"    - NAME","lastModifiedDate":"2024-03-08"},{"lineNumber":82,"author":{"gitId":"minreiseah"},"content":"    - PHONE_NUMBER","lastModifiedDate":"2024-03-08"},{"lineNumber":83,"author":{"gitId":"minreiseah"},"content":"    - ADDRESS","lastModifiedDate":"2024-03-08"},{"lineNumber":84,"author":{"gitId":"minreiseah"},"content":"    - TAG","lastModifiedDate":"2024-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"minreiseah"},"content":"#### Deleting contacts: `delete`","lastModifiedDate":"2024-03-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"minreiseah"},"content":"Deletes the specified contact from the given index.","lastModifiedDate":"2024-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"minreiseah"},"content":"Format: `delete INDEX`","lastModifiedDate":"2024-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"minreiseah"},"content":"- Deletes the contact at the specified INDEX.","lastModifiedDate":"2024-03-08"},{"lineNumber":93,"author":{"gitId":"minreiseah"},"content":"- INDEX is a positive integer that is currently displayed on the screen.","lastModifiedDate":"2024-03-08"},{"lineNumber":94,"author":{"gitId":"minreiseah"},"content":"- Only one INDEX can be deleted at a time.","lastModifiedDate":"2024-03-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"minreiseah"},"content":"### Appointment Commands","lastModifiedDate":"2024-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"minreiseah"},"content":"#### Adding appointment: `add appt`","lastModifiedDate":"2024-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"minreiseah"},"content":"Adds an appointment for a user.","lastModifiedDate":"2024-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"minreiseah"},"content":"Format: `appt INDEX DATE``","lastModifiedDate":"2024-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"minreiseah"},"content":"- Adds an appointment to the contact at the specified INDEX.","lastModifiedDate":"2024-03-08"},{"lineNumber":105,"author":{"gitId":"minreiseah"},"content":"- INDEX is a positive integer displayed on the screen.","lastModifiedDate":"2024-03-08"},{"lineNumber":106,"author":{"gitId":"minreiseah"},"content":"- DATE must be in the following formats:","lastModifiedDate":"2024-03-08"},{"lineNumber":107,"author":{"gitId":"minreiseah"},"content":"    - dd/MM/yyyy","lastModifiedDate":"2024-03-08"},{"lineNumber":108,"author":{"gitId":"minreiseah"},"content":"    - dd/MM/yyyy (HH:mm)","lastModifiedDate":"2024-03-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"minreiseah"},"content":"#### Listing appointments: `list appt`","lastModifiedDate":"2024-03-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"minreiseah"},"content":"Shows a list of all appointments in RapidTracer.","lastModifiedDate":"2024-03-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"minreiseah"},"content":"Format: `list appt`","lastModifiedDate":"2024-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"minreiseah"},"content":"#### Editing appointment: `edit appt`","lastModifiedDate":"2024-03-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"minreiseah"},"content":"Edits the appointment at the specified INDEX","lastModifiedDate":"2024-03-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"minreiseah"},"content":"Format: `edit appt INDEX [s/START_TIME] [e/END_TIME]`","lastModifiedDate":"2024-03-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"minreiseah"},"content":"- INDEX is a positive integer that is currently displayed on the screen.","lastModifiedDate":"2024-03-08"},{"lineNumber":123,"author":{"gitId":"minreiseah"},"content":"- Only one INDEX can be edited at a time.","lastModifiedDate":"2024-03-08"},{"lineNumber":124,"author":{"gitId":"minreiseah"},"content":"- At least one of the optional fields must be provided.","lastModifiedDate":"2024-03-08"},{"lineNumber":125,"author":{"gitId":"minreiseah"},"content":"- Existing values will be updated to the input values.","lastModifiedDate":"2024-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"minreiseah"},"content":"#### Finding appointment: `find appt`","lastModifiedDate":"2024-03-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"minreiseah"},"content":"Shows a list of appointments in RapidTracer matching the keywords provided. Found searches must match ALL keywords.","lastModifiedDate":"2024-03-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"minreiseah"},"content":"Format: `find appt KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2024-03-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":133,"author":{"gitId":"minreiseah"},"content":"- The KEYWORD searched is case-insensitive.","lastModifiedDate":"2024-03-08"},{"lineNumber":134,"author":{"gitId":"minreiseah"},"content":"- Order of keywords does not matter.","lastModifiedDate":"2024-03-08"},{"lineNumber":135,"author":{"gitId":"minreiseah"},"content":"- Possible keyword types:","lastModifiedDate":"2024-03-08"},{"lineNumber":136,"author":{"gitId":"minreiseah"},"content":"    - NAME","lastModifiedDate":"2024-03-08"},{"lineNumber":137,"author":{"gitId":"minreiseah"},"content":"    - PHONE_NUMBER","lastModifiedDate":"2024-03-08"},{"lineNumber":138,"author":{"gitId":"minreiseah"},"content":"    - ADDRESS","lastModifiedDate":"2024-03-08"},{"lineNumber":139,"author":{"gitId":"minreiseah"},"content":"    - TAG","lastModifiedDate":"2024-03-08"},{"lineNumber":140,"author":{"gitId":"minreiseah"},"content":"    - DATE","lastModifiedDate":"2024-03-08"},{"lineNumber":141,"author":{"gitId":"minreiseah"},"content":"    - START_DATE END_DATE","lastModifiedDate":"2024-03-08"},{"lineNumber":142,"author":{"gitId":"minreiseah"},"content":"    - DATE START_TIME END_TIME","lastModifiedDate":"2024-03-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":144,"author":{"gitId":"minreiseah"},"content":"#### Deleting appointment: `delete`","lastModifiedDate":"2024-03-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"minreiseah"},"content":"Deletes the specified appointment from the given index.","lastModifiedDate":"2024-03-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":148,"author":{"gitId":"minreiseah"},"content":"Format: `delete INDEX`","lastModifiedDate":"2024-03-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"minreiseah"},"content":"- Deletes the appointment at the specified INDEX.","lastModifiedDate":"2024-03-08"},{"lineNumber":151,"author":{"gitId":"minreiseah"},"content":"- Note: delete is generic (it just deletes the object at the specified index)","lastModifiedDate":"2024-03-08"},{"lineNumber":152,"author":{"gitId":"minreiseah"},"content":"- INDEX is a positive integer that is currently displayed on the screen.","lastModifiedDate":"2024-03-08"},{"lineNumber":153,"author":{"gitId":"minreiseah"},"content":"- Only one INDEX can be deleted at a time.","lastModifiedDate":"2024-03-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"minreiseah"},"content":"**A**: Copy paste.","lastModifiedDate":"2024-03-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"chengjunyuan"},"content":"**Q**: A command is not working, what am I doing wrong?\u003cbr\u003e","lastModifiedDate":"2024-03-08"},{"lineNumber":163,"author":{"gitId":"chengjunyuan"},"content":"**A**: There\u0027s a chance that the feature is still under development. We will fix it!","lastModifiedDate":"2024-03-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Action     | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"chengjunyuan"},"content":"WIP | WIP","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"minreiseah":90,"chengjunyuan":3,"-":84}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"minreiseah"},"content":"# Rapid Tracer","lastModifiedDate":"2024-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"minreiseah"},"content":"[![CI Status](https://github.com/AY2324S2-CS2103T-T10-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S2-CS2103T-T10-2/tp/actions)","lastModifiedDate":"2024-03-08"},{"lineNumber":10,"author":{"gitId":"minreiseah"},"content":"[![codecov](https://codecov.io/gh/AY2324S2-CS2103T-T10-2/tp/graph/badge.svg?token\u003d1R92MZ3PFL)](https://codecov.io/gh/AY2324S2-CS2103T-T10-2/tp)","lastModifiedDate":"2024-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"minreiseah"},"content":"* If you are interested in using RapidTracer, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2024-03-08"},{"lineNumber":15,"author":{"gitId":"minreiseah"},"content":"* If you are interested about developing RapidTracer, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2024-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"minreiseah":5,"-":15}},{"path":"docs/team/chengjunyuan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"chengjunyuan"},"content":"---","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"chengjunyuan"},"content":"  layout: default.md","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"chengjunyuan"},"content":"  title: \"chengjunyuan\u0027s Project Portfolio Page\"","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"chengjunyuan"},"content":"---","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"chengjunyuan"},"content":"### Project: RapidTracer","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"chengjunyuan"},"content":"RapidTracer is a desktop address book application used for clinical clerk applications. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 6 kLoC.","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"chengjunyuan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"chengjunyuan"},"content":"* **Documentation**:","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"chengjunyuan"},"content":"  * Updated [`DeveloperGuide`](../DeveloperGuide.md) and [`UserGuide`](../UserGuide.md).","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"chengjunyuan":13}},{"path":"src/main/java/seedu/address/logic/parser/TimeParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chengjunyuan"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"chengjunyuan"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"chengjunyuan"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"chengjunyuan"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"chengjunyuan"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"chengjunyuan"},"content":"import seedu.address.model.appointment.AppointmentTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"chengjunyuan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"chengjunyuan"},"content":" * Parses input arguments and creates a new AppointmentTime object","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"chengjunyuan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"chengjunyuan"},"content":"public class TimeParser {","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"chengjunyuan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"chengjunyuan"},"content":"     * The ideal format for an AppointmentTime is:","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"chengjunyuan"},"content":"     * dd/MM/yyyy [x]am-[y]pm","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"chengjunyuan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"chengjunyuan"},"content":"    private static final Pattern DAY \u003d","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"chengjunyuan"},"content":"            Pattern.compile(\"(0[1-9]|[12][0-9]|3[01])\\\\/(0[1-9]|1[012])\\\\/(2[0-9]{3})\");","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"chengjunyuan"},"content":"    private static final Pattern HOUR \u003d Pattern.compile(\"([1-9]|1[0-2])(?i)[ap]m\");","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"chengjunyuan"},"content":"    private static final Pattern HOUR_WINDOW \u003d Pattern.compile(HOUR + \"([ ]?-[ ]?)\" + HOUR);","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"chengjunyuan"},"content":"    private static final Pattern APPOINTMENT_TIME \u003d Pattern.compile(DAY + \" \" + HOUR_WINDOW);","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"chengjunyuan"},"content":"    private static final String MESSAGE_USAGE \u003d \"Use dd/MM/yyyy [x]am-[y]pm\";","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"chengjunyuan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"chengjunyuan"},"content":"     * To be very honest I have no idea what args would look like, I\u0027m following the format","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"chengjunyuan"},"content":"     * of the other Parser subclasses in this package. This portion needs some severe","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"chengjunyuan"},"content":"     * rewriting in the future - JY","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"chengjunyuan"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"chengjunyuan"},"content":"     * Checks that the message follows the correct format.","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"chengjunyuan"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"chengjunyuan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"chengjunyuan"},"content":"    public AppointmentTime parse(String args) throws ParseException {","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"chengjunyuan"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"chengjunyuan"},"content":"            throw new ParseException(","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"chengjunyuan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimeParser.MESSAGE_USAGE));","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"chengjunyuan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"chengjunyuan"},"content":"        Matcher matcher \u003d TimeParser.APPOINTMENT_TIME.matcher(args);","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"chengjunyuan"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"chengjunyuan"},"content":"            throw new ParseException(\"Filler\");","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"chengjunyuan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"chengjunyuan"},"content":"        return new AppointmentTime(args);","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"chengjunyuan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"chengjunyuan":46}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"qinboan"},"content":"import java.util.Objects;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":22,"author":{"gitId":"qinboan"},"content":"    private final UniqueAppointmentList appointments;","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":33,"author":{"gitId":"qinboan"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"qinboan"},"content":"     * Replaces the contents of the person list with {@code appointments}.","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"qinboan"},"content":"     * {@code appointments} must not contain duplicate persons.","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"qinboan"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"qinboan"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":71,"author":{"gitId":"qinboan"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"qinboan"},"content":"    //// appointment methods","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"qinboan"},"content":"     * Returns true if the internal list of appointments contains the specified appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"qinboan"},"content":"     * @param appointment The appointment to check for existence.","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"qinboan"},"content":"     * @return True if the appointment is found in the list, false otherwise.","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"qinboan"},"content":"     * @throws NullPointerException if the given appointment is null.","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"qinboan"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"qinboan"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"qinboan"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":124,"author":{"gitId":"qinboan"},"content":"     * Adds an appointment to the list of appointments.","lastModifiedDate":"2024-03-16"},{"lineNumber":125,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":126,"author":{"gitId":"qinboan"},"content":"     * @param appointment The appointment to be added.","lastModifiedDate":"2024-03-16"},{"lineNumber":127,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"qinboan"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"qinboan"},"content":"        appointments.add(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":133,"author":{"gitId":"qinboan"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2024-03-16"},{"lineNumber":134,"author":{"gitId":"qinboan"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"qinboan"},"content":"     * The appointment identity of {@code editedAppointment} must not be the same as another existing appointment","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"qinboan"},"content":"     * in the address book.","lastModifiedDate":"2024-03-16"},{"lineNumber":137,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":138,"author":{"gitId":"qinboan"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":139,"author":{"gitId":"qinboan"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":140,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"qinboan"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":143,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":144,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":145,"author":{"gitId":"qinboan"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2024-03-16"},{"lineNumber":146,"author":{"gitId":"qinboan"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2024-03-16"},{"lineNumber":147,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":148,"author":{"gitId":"qinboan"},"content":"    public void removeAppointment(Appointment key) {","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"qinboan"},"content":"        appointments.remove(key);","lastModifiedDate":"2024-03-16"},{"lineNumber":150,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)","lastModifiedDate":"2019-02-23"},{"lineNumber":158,"author":{"gitId":"qinboan"},"content":"                .add(\"appointments\", appointments)","lastModifiedDate":"2024-03-16"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":167,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":168,"author":{"gitId":"qinboan"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":169,"author":{"gitId":"qinboan"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2024-03-16"},{"lineNumber":170,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":171,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddressBook)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        AddressBook otherAddressBook \u003d (AddressBook) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":184,"author":{"gitId":"qinboan"},"content":"        return persons.equals(otherAddressBook.persons)","lastModifiedDate":"2024-03-16"},{"lineNumber":185,"author":{"gitId":"qinboan"},"content":"                \u0026\u0026 appointments.equals(otherAddressBook.appointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":190,"author":{"gitId":"qinboan"},"content":"        return Objects.hash(persons, appointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"qinboan":64,"-":128}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"qinboan"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"qinboan"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the address book.","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"qinboan"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"qinboan"},"content":"     * Deletes the given appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"qinboan"},"content":"     * The appointment must exist in the address book.","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"qinboan"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"qinboan"},"content":"     * Adds the given appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"qinboan"},"content":"     * {@code appointment} must not already exist in the address book.","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"qinboan"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"qinboan"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"qinboan"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"qinboan"},"content":"     * The appointment identity of {@code editetAppointment} must not be the same as another existing appointment in the","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"qinboan"},"content":"     * address book.","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"qinboan"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"qinboan"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"qinboan"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"qinboan"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"qinboan"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"qinboan"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"qinboan":36,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"qinboan"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"qinboan"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"qinboan"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"qinboan"},"content":"        return addressBook.hasAppointment(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"qinboan"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"qinboan"},"content":"        addressBook.removeAppointment(target);","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":116,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"qinboan"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"qinboan"},"content":"        addressBook.addAppointment(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"qinboan"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":127,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"qinboan"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"qinboan"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"qinboan"},"content":"        addressBook.setAppointment(target, editedAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":150,"author":{"gitId":"qinboan"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":152,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"qinboan"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of","lastModifiedDate":"2024-03-16"},{"lineNumber":154,"author":{"gitId":"qinboan"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2024-03-16"},{"lineNumber":155,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":156,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":157,"author":{"gitId":"qinboan"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":158,"author":{"gitId":"qinboan"},"content":"        return filteredAppointments;","lastModifiedDate":"2024-03-16"},{"lineNumber":159,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":160,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":162,"author":{"gitId":"qinboan"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2024-03-16"},{"lineNumber":163,"author":{"gitId":"qinboan"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2024-03-16"},{"lineNumber":164,"author":{"gitId":"qinboan"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2024-03-16"},{"lineNumber":165,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":166,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        return addressBook.equals(otherModelManager.addressBook)","lastModifiedDate":"2023-07-13"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":181,"author":{"gitId":"qinboan"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons)","lastModifiedDate":"2024-03-16"},{"lineNumber":182,"author":{"gitId":"qinboan"},"content":"                \u0026\u0026 filteredAppointments.equals(otherModelManager.filteredAppointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"qinboan":41,"-":144}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"qinboan"},"content":"     * Returns an unmodifiable view of the persons list and appointment list.","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"qinboan"},"content":"     * This list will not contain any duplicate persons or appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"qinboan"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"qinboan":4,"-":15}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chengjunyuan"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"chengjunyuan"},"content":"import java.util.UUID;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"chengjunyuan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"chengjunyuan"},"content":" * Represents an Appointment in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"chengjunyuan"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"chengjunyuan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"chengjunyuan"},"content":"public class Appointment {","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"chengjunyuan"},"content":"    // Data fields","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"chengjunyuan"},"content":"    private final UUID id;","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"qinboan"},"content":"    private final UUID personId;","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"chengjunyuan"},"content":"    private final AppointmentTime appointmentTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"chengjunyuan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"chengjunyuan"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"chengjunyuan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"qinboan"},"content":"    public Appointment(UUID personId, AppointmentTime appointmentTime) {","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"chengjunyuan"},"content":"        this.id \u003d UUID.randomUUID();","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"chengjunyuan"},"content":"        this.appointmentTime \u003d appointmentTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"qinboan"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"qinboan"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"qinboan"},"content":"    public Appointment(UUID id, UUID personId, AppointmentTime appointmentTime) {","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"qinboan"},"content":"        this.id \u003d id;","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"qinboan"},"content":"        this.appointmentTime \u003d appointmentTime;","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"qinboan"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"chengjunyuan"},"content":"    public UUID getID() {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"chengjunyuan"},"content":"        return id;","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"    public UUID getPersonId() {","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"qinboan"},"content":"        return personId;","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"chengjunyuan"},"content":"    public AppointmentTime getAppointmentTime() {","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"chengjunyuan"},"content":"        return appointmentTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"chengjunyuan"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"chengjunyuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"chengjunyuan"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"chengjunyuan"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"chengjunyuan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"chengjunyuan"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"chengjunyuan"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"chengjunyuan"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"chengjunyuan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"chengjunyuan"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"chengjunyuan"},"content":"        boolean sameID \u003d id.equals(otherAppointment.getID());","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"qinboan"},"content":"        boolean samePersonId \u003d personId.equals(otherAppointment.getPersonId());","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"chengjunyuan"},"content":"        boolean sameDate \u003d appointmentTime.equals(otherAppointment.getAppointmentTime());","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"qinboan"},"content":"        return (sameID \u0026\u0026 samePersonId \u0026\u0026 sameDate);","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"chengjunyuan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"qinboan":17,"chengjunyuan":48}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chengjunyuan"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"chengjunyuan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"chengjunyuan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"chengjunyuan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"chengjunyuan"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"chengjunyuan"},"content":" * Represents an Appointment\u0027s email in the address book.","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"chengjunyuan"},"content":" * ASSUMPTION: An Appointment CANNOT SPAN MULTIPLE DAYS!!!","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"chengjunyuan"},"content":" * Guarantees: none at the moment.","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"chengjunyuan"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"chengjunyuan"},"content":"public class AppointmentTime {","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"chengjunyuan"},"content":"    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"chengjunyuan"},"content":"    private final LocalDate appointmentDate;","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"chengjunyuan"},"content":"    private final LocalTime startTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"chengjunyuan"},"content":"    private final LocalTime endTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"chengjunyuan"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"chengjunyuan"},"content":"     * Constructor for an AppointmentTime object.","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"chengjunyuan"},"content":"     * @param time Follow the format \"dd/MM/yyyy [x]am-[y]pm\".","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"chengjunyuan"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"chengjunyuan"},"content":"    public AppointmentTime(String time) {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"chengjunyuan"},"content":"        String dateString \u003d time.substring(0, 10); // first 10 chars is the date","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"chengjunyuan"},"content":"        String rawTimings \u003d time.substring(11);","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"chengjunyuan"},"content":"        String[] timings \u003d rawTimings.toUpperCase().split(\"-\"); // each time will be \"AM\" or \"PM\" now","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"chengjunyuan"},"content":"        String startTime \u003d timings[0].trim();","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"chengjunyuan"},"content":"        String endTime \u003d timings[1].trim();","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"chengjunyuan"},"content":"        this.appointmentDate \u003d LocalDate.parse(dateString, AppointmentTime.DATE_FORMAT);","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"chengjunyuan"},"content":"        this.startTime \u003d parseRawTiming(startTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"chengjunyuan"},"content":"        this.endTime \u003d parseRawTiming(endTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"chengjunyuan"},"content":"    private LocalTime parseRawTiming(String rawTime) {","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"chengjunyuan"},"content":"        int length \u003d rawTime.length();","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"chengjunyuan"},"content":"        if (length \u003d\u003d 4) {","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"chengjunyuan"},"content":"            int num \u003d Integer.parseInt(rawTime.substring(0, 2));","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"chengjunyuan"},"content":"            if (rawTime.charAt(2) \u003d\u003d \u0027A\u0027) { // AM","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"chengjunyuan"},"content":"                return LocalTime.of(num, 0);","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"chengjunyuan"},"content":"            } else { // PM","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"chengjunyuan"},"content":"                return LocalTime.of(12 + num, 0);","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"chengjunyuan"},"content":"            }","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"chengjunyuan"},"content":"        } else {","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"chengjunyuan"},"content":"            int num \u003d Integer.parseInt(rawTime.substring(0, 1));","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"chengjunyuan"},"content":"            if (rawTime.charAt(1) \u003d\u003d \u0027A\u0027) { // AM","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"chengjunyuan"},"content":"                return LocalTime.of(num, 0);","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"chengjunyuan"},"content":"            } else { // PM","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"chengjunyuan"},"content":"                return LocalTime.of(12 + num, 0);","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"chengjunyuan"},"content":"            }","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"chengjunyuan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"chengjunyuan"},"content":"    public LocalDate getAppointmentDate() {","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"chengjunyuan"},"content":"        return appointmentDate;","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"chengjunyuan"},"content":"    public LocalTime getStartTime() {","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"chengjunyuan"},"content":"        return startTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":59,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"chengjunyuan"},"content":"    public LocalTime getEndTime() {","lastModifiedDate":"2024-03-13"},{"lineNumber":61,"author":{"gitId":"chengjunyuan"},"content":"        return endTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":63,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"chengjunyuan"},"content":"    @Override","lastModifiedDate":"2024-03-13"},{"lineNumber":65,"author":{"gitId":"chengjunyuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"chengjunyuan"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"chengjunyuan"},"content":"            return true;","lastModifiedDate":"2024-03-13"},{"lineNumber":68,"author":{"gitId":"chengjunyuan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":69,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":70,"author":{"gitId":"chengjunyuan"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-13"},{"lineNumber":71,"author":{"gitId":"chengjunyuan"},"content":"        if (!(other instanceof AppointmentTime)) {","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"chengjunyuan"},"content":"            return false;","lastModifiedDate":"2024-03-13"},{"lineNumber":73,"author":{"gitId":"chengjunyuan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":74,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"chengjunyuan"},"content":"        AppointmentTime otherAppointmentTime \u003d (AppointmentTime) other;","lastModifiedDate":"2024-03-13"},{"lineNumber":76,"author":{"gitId":"chengjunyuan"},"content":"        boolean sameDate \u003d appointmentDate.equals(otherAppointmentTime.getAppointmentDate());","lastModifiedDate":"2024-03-13"},{"lineNumber":77,"author":{"gitId":"chengjunyuan"},"content":"        boolean sameStart \u003d startTime.equals(otherAppointmentTime.getStartTime());","lastModifiedDate":"2024-03-13"},{"lineNumber":78,"author":{"gitId":"chengjunyuan"},"content":"        boolean sameEnd \u003d endTime.equals(otherAppointmentTime.getEndTime());","lastModifiedDate":"2024-03-13"},{"lineNumber":79,"author":{"gitId":"chengjunyuan"},"content":"        return (sameDate \u0026\u0026 sameStart \u0026\u0026 sameEnd);","lastModifiedDate":"2024-03-13"},{"lineNumber":80,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"chengjunyuan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"chengjunyuan":81}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"qinboan"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"qinboan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"qinboan"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"qinboan"},"content":"import java.util.Iterator;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"qinboan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"qinboan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"qinboan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentsException;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"qinboan"},"content":"/**","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"qinboan"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"qinboan"},"content":" * An appointment is considered unique by comparing using {@code Appointment#equals(Appointment)}.","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"qinboan"},"content":" *","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"qinboan"},"content":" */","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"qinboan"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"qinboan"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"qinboan"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"qinboan"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"qinboan"},"content":"     * Checks if the list contains the specified appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"qinboan"},"content":"     * @param toCheck The appointment to check.","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"qinboan"},"content":"     * @return True if the list contains the appointment, false otherwise.","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"qinboan"},"content":"     * @throws NullPointerException if the appointment to check is null.","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"qinboan"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"qinboan"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"qinboan"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"qinboan"},"content":"     * Adds an appointment to the list.","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"qinboan"},"content":"     * @param toAdd The appointment to add.","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"     * @throws NullPointerException if the appointment is null.","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"qinboan"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"qinboan"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"qinboan"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"qinboan"},"content":"            throw new DuplicateAppointmentsException();","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"qinboan"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"qinboan"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"qinboan"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"qinboan"},"content":"     * The appointment identity of {@code editedAppointment} must not be the same as another existing appointment","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"qinboan"},"content":"     * in the list.","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"qinboan"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"qinboan"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"qinboan"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"qinboan"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"qinboan"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"qinboan"},"content":"        if (!target.equals(editedAppointment) \u0026\u0026 contains(editedAppointment)) {","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"qinboan"},"content":"            throw new DuplicateAppointmentsException();","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"qinboan"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"qinboan"},"content":"     * Removes an appointment from the list.","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"qinboan"},"content":"     * @param toRemove The appointment to be removed.","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"qinboan"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"qinboan"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"qinboan"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"qinboan"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"qinboan"},"content":"     * Sets the appointments in the list with another list of appointments.","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"qinboan"},"content":"     * @param appointments List of appointments to set.","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"qinboan"},"content":"     * @throws NullPointerException if the list of appointments is null.","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"qinboan"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"qinboan"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"qinboan"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"qinboan"},"content":"            throw new DuplicateAppointmentsException();","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"qinboan"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"qinboan"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"qinboan"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"qinboan"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"qinboan"},"content":"     * Returns an unmodifiable view of the list of appointments.","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"qinboan"},"content":"     * @return Unmodifiable view of the list.","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"qinboan"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"qinboan"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"qinboan"},"content":"     * Returns an iterator over the elements in this list in proper sequence.","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"qinboan"},"content":"     * @return An iterator.","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"qinboan"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"qinboan"},"content":"        return internalList.iterator();","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"qinboan"},"content":"     * Indicates whether some other object is \"equal to\" this one.","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":124,"author":{"gitId":"qinboan"},"content":"     * @param other The object to compare.","lastModifiedDate":"2024-03-16"},{"lineNumber":125,"author":{"gitId":"qinboan"},"content":"     * @return True if equal, false otherwise.","lastModifiedDate":"2024-03-16"},{"lineNumber":126,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":127,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"qinboan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"qinboan"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"qinboan"},"content":"            return true;","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":133,"author":{"gitId":"qinboan"},"content":"        // instanceof handles nulls","lastModifiedDate":"2024-03-16"},{"lineNumber":134,"author":{"gitId":"qinboan"},"content":"        if (!(other instanceof UniqueAppointmentList)) {","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"qinboan"},"content":"            return false;","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":137,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":138,"author":{"gitId":"qinboan"},"content":"        UniqueAppointmentList otherUniqueAppointmentList \u003d (UniqueAppointmentList) other;","lastModifiedDate":"2024-03-16"},{"lineNumber":139,"author":{"gitId":"qinboan"},"content":"        return internalList.equals(otherUniqueAppointmentList.internalList);","lastModifiedDate":"2024-03-16"},{"lineNumber":140,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":143,"author":{"gitId":"qinboan"},"content":"     * Returns a hash code value for the list.","lastModifiedDate":"2024-03-16"},{"lineNumber":144,"author":{"gitId":"qinboan"},"content":"     *","lastModifiedDate":"2024-03-16"},{"lineNumber":145,"author":{"gitId":"qinboan"},"content":"     * @return The hash code.","lastModifiedDate":"2024-03-16"},{"lineNumber":146,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":147,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":148,"author":{"gitId":"qinboan"},"content":"    public int hashCode() {","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"qinboan"},"content":"        return internalList.hashCode();","lastModifiedDate":"2024-03-16"},{"lineNumber":150,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":152,"author":{"gitId":"qinboan"},"content":"    @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"qinboan"},"content":"    public String toString() {","lastModifiedDate":"2024-03-16"},{"lineNumber":154,"author":{"gitId":"qinboan"},"content":"        return internalList.toString();","lastModifiedDate":"2024-03-16"},{"lineNumber":155,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":156,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":157,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":158,"author":{"gitId":"qinboan"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2024-03-16"},{"lineNumber":159,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":160,"author":{"gitId":"qinboan"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"qinboan"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2024-03-16"},{"lineNumber":162,"author":{"gitId":"qinboan"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2024-03-16"},{"lineNumber":163,"author":{"gitId":"qinboan"},"content":"                if (appointments.get(i).equals(appointments.get(j))) {","lastModifiedDate":"2024-03-16"},{"lineNumber":164,"author":{"gitId":"qinboan"},"content":"                    return false;","lastModifiedDate":"2024-03-16"},{"lineNumber":165,"author":{"gitId":"qinboan"},"content":"                }","lastModifiedDate":"2024-03-16"},{"lineNumber":166,"author":{"gitId":"qinboan"},"content":"            }","lastModifiedDate":"2024-03-16"},{"lineNumber":167,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":168,"author":{"gitId":"qinboan"},"content":"        return true;","lastModifiedDate":"2024-03-16"},{"lineNumber":169,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":170,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":171,"author":{"gitId":"qinboan"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"qinboan":171}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"qinboan"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"qinboan"},"content":"/**","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"qinboan"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"qinboan"},"content":" */","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"qinboan"},"content":"public class AppointmentNotFoundException extends RuntimeException{","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"qinboan"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"qinboan":6}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"qinboan"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"qinboan"},"content":"/**","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"qinboan"},"content":" * Signals that the operation will result in duplicate Appointments","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"qinboan"},"content":" */","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"qinboan"},"content":"public class DuplicateAppointmentsException extends RuntimeException {","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"qinboan"},"content":"    public DuplicateAppointmentsException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"qinboan"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"qinboan"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"qinboan":10}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"qinboan"},"content":"import java.util.UUID;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"qinboan"},"content":"    private UUID id;","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"qinboan"},"content":"        requireAllNonNull(name, phone, address, tags);","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"qinboan"},"content":"        this.id \u003d UUID.randomUUID();","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"qinboan"},"content":"        this.address \u003d address;","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"qinboan"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":44,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"qinboan"},"content":"     * Constructor for Person with an ID","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"qinboan"},"content":"     * @param id id of the person","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"qinboan"},"content":"     * @param name name of the person","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"qinboan"},"content":"     * @param phone phone number of the person","lastModifiedDate":"2024-03-15"},{"lineNumber":49,"author":{"gitId":"qinboan"},"content":"     * @param email email address of the person","lastModifiedDate":"2024-03-15"},{"lineNumber":50,"author":{"gitId":"qinboan"},"content":"     * @param address address of the person","lastModifiedDate":"2024-03-15"},{"lineNumber":51,"author":{"gitId":"qinboan"},"content":"     * @param tags tags of the person","lastModifiedDate":"2024-03-15"},{"lineNumber":52,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":53,"author":{"gitId":"qinboan"},"content":"    public Person(UUID id, Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2024-03-15"},{"lineNumber":54,"author":{"gitId":"qinboan"},"content":"        requireAllNonNull(name, phone, address, tags);","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"qinboan"},"content":"        this.id \u003d id;","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2024-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-03-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"qinboan"},"content":"    public UUID getID() {","lastModifiedDate":"2024-03-15"},{"lineNumber":64,"author":{"gitId":"qinboan"},"content":"        return id;","lastModifiedDate":"2024-03-15"},{"lineNumber":65,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"qinboan"},"content":"     * Note that equivalence is agnostic to ID","lastModifiedDate":"2024-03-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2024-03-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 address.equals(otherPerson.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                \u0026\u0026 tags.equals(otherPerson.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"qinboan"},"content":"        return Objects.hash(id, name, phone, email, address, tags);","lastModifiedDate":"2024-03-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":137,"author":{"gitId":"qinboan"},"content":"                .add(\"id\", id)","lastModifiedDate":"2024-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2024-03-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"qinboan":28,"-":118}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"qinboan"},"content":"import java.util.UUID;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"qinboan"},"content":"    private final UUID id;","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"id\") UUID id,","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"qinboan"},"content":"                             @JsonProperty(\"name\") String name,","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"qinboan"},"content":"                             @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"qinboan"},"content":"                             @JsonProperty(\"email\") String email,","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"qinboan"},"content":"                             @JsonProperty(\"address\") String address,","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {","lastModifiedDate":"2023-05-12"},{"lineNumber":45,"author":{"gitId":"qinboan"},"content":"        this.id \u003d id;","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-01-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-01-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"qinboan"},"content":"        id \u003d source.getID();","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-01-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-01-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"qinboan"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"qinboan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"qinboan"},"content":"        final UUID modelId \u003d id;","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"qinboan"},"content":"        return new Person(modelId, modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"qinboan":14,"-":106}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"qinboan"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"qinboan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"qinboan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":166,"author":{"gitId":"qinboan"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":167,"author":{"gitId":"qinboan"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":168,"author":{"gitId":"qinboan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":169,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":170,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":171,"author":{"gitId":"qinboan"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":172,"author":{"gitId":"qinboan"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2024-03-16"},{"lineNumber":173,"author":{"gitId":"qinboan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":174,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":175,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":176,"author":{"gitId":"qinboan"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":177,"author":{"gitId":"qinboan"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2024-03-16"},{"lineNumber":178,"author":{"gitId":"qinboan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":179,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":180,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":181,"author":{"gitId":"qinboan"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":182,"author":{"gitId":"qinboan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":183,"author":{"gitId":"qinboan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":184,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":185,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":186,"author":{"gitId":"qinboan"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":187,"author":{"gitId":"qinboan"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2024-03-16"},{"lineNumber":188,"author":{"gitId":"qinboan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":189,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"qinboan":30,"-":204}},{"path":"src/test/java/seedu/address/logic/parser/TimeParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chengjunyuan"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"chengjunyuan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"chengjunyuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"chengjunyuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"chengjunyuan"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"chengjunyuan"},"content":"import seedu.address.model.appointment.AppointmentTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"chengjunyuan"},"content":"public class TimeParserTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"chengjunyuan"},"content":"    private TimeParser parser \u003d new TimeParser();","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"chengjunyuan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"chengjunyuan"},"content":"    public void regex() {","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"chengjunyuan"},"content":"        try {","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 9am-10am\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 9AM-10am\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 9am-10AM\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 9AM-10AM\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 9am -10Am\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 9am - 10am\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 9aM - 10AM\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 9Am- 10Am\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 10am -10pm\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 2Pm - 5PM\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 2PM - 2pM\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"chengjunyuan"},"content":"            assertTrue(parser.parse(\"15/02/2024 2PM- 3Pm\") instanceof AppointmentTime);","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"chengjunyuan"},"content":"            assertThrows(ParseException.class, () -\u003e parser.parse(\"15/02/20242PM- 3Pm\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"chengjunyuan"},"content":"            assertThrows(ParseException.class, () -\u003e parser.parse(\"15/02/2024 20PM- 3Pm\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"chengjunyuan"},"content":"            assertThrows(ParseException.class, () -\u003e parser.parse(\"15/02/2024 1PM- 13Pm\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"chengjunyuan"},"content":"            assertThrows(ParseException.class, () -\u003e parser.parse(\"\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"chengjunyuan"},"content":"            assertThrows(NullPointerException.class, () -\u003e parser.parse(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"chengjunyuan"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"chengjunyuan"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"chengjunyuan"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"chengjunyuan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"chengjunyuan":38}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"qinboan"},"content":"import static seedu.address.testutil.TypicalAppointments.APPT1;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"qinboan"},"content":"    public void hasAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasAppointment(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"qinboan"},"content":"    public void hasAppointment_appointmentNotInAddressBook_returnsFalse() {","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"qinboan"},"content":"        assertFalse(addressBook.hasAppointment(APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"qinboan"},"content":"    public void hasAppointment_appointmentInAddressBook_returnsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"qinboan"},"content":"        addressBook.addAppointment(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"qinboan"},"content":"        assertTrue(addressBook.hasAppointment(APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"qinboan"},"content":"    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"qinboan"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getAppointmentList().remove(0));","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":112,"author":{"gitId":"qinboan"},"content":"        String expected \u003d AddressBook.class.getCanonicalName() + \"{persons\u003d\" + addressBook.getPersonList()","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"qinboan"},"content":"                + \", appointments\u003d\" + addressBook.getAppointmentList() + \"}\";","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expected, addressBook.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"qinboan"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":132,"author":{"gitId":"qinboan"},"content":"        @Override","lastModifiedDate":"2024-03-16"},{"lineNumber":133,"author":{"gitId":"qinboan"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":134,"author":{"gitId":"qinboan"},"content":"            return appointments;","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"qinboan":30,"-":108}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"qinboan"},"content":"import static seedu.address.testutil.TypicalAppointments.APPT1;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"qinboan"},"content":"    public void hasAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAppointment(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"qinboan"},"content":"    public void hasAppointment_appointmentNotInAddressBook_returnsFalse() {","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"qinboan"},"content":"        assertFalse(modelManager.hasAppointment(APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"qinboan"},"content":"    public void hasAppointment_appointmentInAddressBook_returnsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"qinboan"},"content":"        modelManager.addAppointment(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"qinboan"},"content":"        assertTrue(modelManager.hasAppointment(APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"qinboan"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"qinboan"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"qinboan"},"content":"                modelManager.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"qinboan":24,"-":132}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chengjunyuan"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"chengjunyuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"chengjunyuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"chengjunyuan"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"chengjunyuan"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"chengjunyuan"},"content":"import java.util.UUID;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"chengjunyuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"chengjunyuan"},"content":"public class AppointmentTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"chengjunyuan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"chengjunyuan"},"content":"    public void getters() {","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"chengjunyuan"},"content":"        AppointmentTime appointmentTime \u003d new AppointmentTime(\"10/02/2024 11am-2pm\");","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"qinboan"},"content":"        Appointment appointment \u003d new Appointment(ALICE.getID(), appointmentTime);","lastModifiedDate":"2024-03-15"},{"lineNumber":18,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"chengjunyuan"},"content":"        // same UUID","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointment.getID() instanceof UUID);","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"chengjunyuan"},"content":"        // same person","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"qinboan"},"content":"        assertTrue(appointment.getPersonId().compareTo(ALICE.getID()) \u003d\u003d 0);","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"chengjunyuan"},"content":"        // same time","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointment.getAppointmentTime().equals(appointmentTime));","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"chengjunyuan"},"content":"        // same time, different object","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointment.getAppointmentTime().equals(new AppointmentTime(\"10/02/2024 11am - 2pm\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"chengjunyuan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"chengjunyuan"},"content":"    public void isSameAppointment() {","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"chengjunyuan"},"content":"        AppointmentTime appointmentTime \u003d new AppointmentTime(\"10/02/2024 11am-2pm\");","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"chengjunyuan"},"content":"        AppointmentTime otherAppointmentTime \u003d new AppointmentTime(\"11/02/2024 11am-2pm\");","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"qinboan"},"content":"        Appointment appointment \u003d new Appointment(ALICE.getID(), appointmentTime);","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"qinboan"},"content":"        Appointment otherPersonAppointment \u003d new Appointment(BOB.getID(), appointmentTime);","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"        Appointment otherTimeAppointment \u003d new Appointment(ALICE.getID(), otherAppointmentTime);","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"chengjunyuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointment.equals(appointment));","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"chengjunyuan"},"content":"        // different people -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"chengjunyuan"},"content":"        assertFalse(appointment.equals(otherPersonAppointment));","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"chengjunyuan"},"content":"        // different time -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"chengjunyuan"},"content":"        assertFalse(appointment.equals(otherTimeAppointment));","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"chengjunyuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"chengjunyuan"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"chengjunyuan"},"content":"        // not an Appointment object -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"chengjunyuan"},"content":"        assertFalse(appointment.equals(\"not an appointment\"));","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"chengjunyuan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"qinboan":5,"chengjunyuan":50}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chengjunyuan"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"chengjunyuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"chengjunyuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"chengjunyuan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"chengjunyuan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"chengjunyuan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"chengjunyuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"chengjunyuan"},"content":"public class AppointmentTimeTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"chengjunyuan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"chengjunyuan"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"chengjunyuan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentTime(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"chengjunyuan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"chengjunyuan"},"content":"    public void getters() {","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"chengjunyuan"},"content":"        AppointmentTime appointmentTime \u003d new AppointmentTime(\"12/01/2024 2pm-4pm\");","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"chengjunyuan"},"content":"        // same date","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointmentTime.getAppointmentDate().equals(LocalDate.of(2024, 1, 12)));","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"chengjunyuan"},"content":"        // same start time","lastModifiedDate":"2024-03-13"},{"lineNumber":27,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointmentTime.getStartTime().equals(LocalTime.of(14, 0)));","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":29,"author":{"gitId":"chengjunyuan"},"content":"        // same end time","lastModifiedDate":"2024-03-13"},{"lineNumber":30,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointmentTime.getEndTime().equals(LocalTime.of(16, 0)));","lastModifiedDate":"2024-03-13"},{"lineNumber":31,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"chengjunyuan"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":34,"author":{"gitId":"chengjunyuan"},"content":"    public void equals() {","lastModifiedDate":"2024-03-13"},{"lineNumber":35,"author":{"gitId":"chengjunyuan"},"content":"        AppointmentTime appointmentTime \u003d new AppointmentTime(\"12/01/2024 2pm-4pm\");","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":37,"author":{"gitId":"chengjunyuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointmentTime.equals(new AppointmentTime(\"12/01/2024 2pm-4pm\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":39,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":40,"author":{"gitId":"chengjunyuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":41,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointmentTime.equals(appointmentTime));","lastModifiedDate":"2024-03-13"},{"lineNumber":42,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"chengjunyuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"chengjunyuan"},"content":"        assertFalse(appointmentTime.equals(null));","lastModifiedDate":"2024-03-13"},{"lineNumber":45,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"chengjunyuan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"chengjunyuan"},"content":"        assertFalse(appointmentTime.equals(5.0f));","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"chengjunyuan"},"content":"        // different typing -\u003e returns true","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"chengjunyuan"},"content":"        assertTrue(appointmentTime.equals(new AppointmentTime(\"12/01/2024 2PM - 4PM\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"chengjunyuan"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"chengjunyuan"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"chengjunyuan"},"content":"        assertFalse(appointmentTime.equals(new AppointmentTime(\"12/01/2024 2pm-5pm\")));","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"chengjunyuan"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"chengjunyuan"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"chengjunyuan":55}},{"path":"src/test/java/seedu/address/model/appointment/UniqueAppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"qinboan"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"qinboan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"qinboan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"qinboan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"qinboan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"qinboan"},"content":"import static seedu.address.testutil.TypicalAppointments.APPT1;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"qinboan"},"content":"import static seedu.address.testutil.TypicalAppointments.APPT2;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"qinboan"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"qinboan"},"content":"import java.util.Collections;","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"qinboan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"qinboan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentsException;","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"qinboan"},"content":"public class UniqueAppointmentListTest {","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"qinboan"},"content":"    private final UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"qinboan"},"content":"    public void contains_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.contains(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"qinboan"},"content":"    public void contains_appointmentNotInList_returnsFalse() {","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"qinboan"},"content":"        assertFalse(uniqueAppointmentList.contains(APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"qinboan"},"content":"    public void contains_appointmentInList_returnsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"qinboan"},"content":"        assertTrue(uniqueAppointmentList.contains(APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"    public void add_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.add(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"qinboan"},"content":"    public void add_duplicateAppointment_throwsDuplicateAppointmentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"qinboan"},"content":"        assertThrows(DuplicateAppointmentsException.class, () -\u003e uniqueAppointmentList.add(APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"qinboan"},"content":"    public void setAppointment_nullTargetAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointment(null, APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"qinboan"},"content":"    public void setAppointment_nullEditedAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointment(APPT1, null));","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"qinboan"},"content":"    public void setAppointment_targetAppointmentNotInList_throwsAppointmentNotFoundException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"qinboan"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.setAppointment(APPT1, APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"qinboan"},"content":"    public void setAppointment_editedAppointmentIsSameAppointment_success() {","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.setAppointment(APPT1, APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"qinboan"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"qinboan"},"content":"        expectedUniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"qinboan"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":73,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"qinboan"},"content":"    public void setAppointment_editedAppointmentHasDifferentIdentity_success() {","lastModifiedDate":"2024-03-16"},{"lineNumber":75,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.setAppointment(APPT1, APPT2);","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"qinboan"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"qinboan"},"content":"        expectedUniqueAppointmentList.add(APPT2);","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"qinboan"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":80,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":81,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":83,"author":{"gitId":"qinboan"},"content":"    public void setAppointment_editedAppointmentHasNonUniqueIdentity_throwsDuplicateAppointmentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":85,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT2);","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"qinboan"},"content":"        assertThrows(DuplicateAppointmentsException.class, () -\u003e uniqueAppointmentList.setAppointment(APPT1, APPT2));","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":88,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":89,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":90,"author":{"gitId":"qinboan"},"content":"    public void remove_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":91,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.remove(null));","lastModifiedDate":"2024-03-16"},{"lineNumber":92,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":93,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"qinboan"},"content":"    public void remove_appointmentDoesNotExist_throwsAppointmentNotFoundException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":96,"author":{"gitId":"qinboan"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.remove(APPT1));","lastModifiedDate":"2024-03-16"},{"lineNumber":97,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":98,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":100,"author":{"gitId":"qinboan"},"content":"    public void remove_existingAppointment_removesAppointment() {","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.remove(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"qinboan"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":104,"author":{"gitId":"qinboan"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":105,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":106,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":108,"author":{"gitId":"qinboan"},"content":"    public void setAppointments_nullUniqueAppointmentList_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":109,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointments(","lastModifiedDate":"2024-03-16"},{"lineNumber":110,"author":{"gitId":"qinboan"},"content":"                (UniqueAppointmentList) null));","lastModifiedDate":"2024-03-16"},{"lineNumber":111,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"qinboan"},"content":"    public void setAppointments_uniqueAppointmentList_replacesOwnListWithProvidedUniqueAppointmentList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":116,"author":{"gitId":"qinboan"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":117,"author":{"gitId":"qinboan"},"content":"        expectedUniqueAppointmentList.add(APPT2);","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.setAppointments(expectedUniqueAppointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":119,"author":{"gitId":"qinboan"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":120,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":121,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":122,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":123,"author":{"gitId":"qinboan"},"content":"    public void setAppointments_nullList_throwsNullPointerException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":124,"author":{"gitId":"qinboan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointments((List\u003cAppointment\u003e) null));","lastModifiedDate":"2024-03-16"},{"lineNumber":125,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":126,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":127,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"qinboan"},"content":"    public void setAppointments_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2024-03-16"},{"lineNumber":129,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"qinboan"},"content":"        List\u003cAppointment\u003e appointmentList \u003d Collections.singletonList(APPT2);","lastModifiedDate":"2024-03-16"},{"lineNumber":131,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.setAppointments(appointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":132,"author":{"gitId":"qinboan"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":133,"author":{"gitId":"qinboan"},"content":"        expectedUniqueAppointmentList.add(APPT2);","lastModifiedDate":"2024-03-16"},{"lineNumber":134,"author":{"gitId":"qinboan"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":136,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":137,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":138,"author":{"gitId":"qinboan"},"content":"    public void setAppointments_listWithDuplicateAppointments_throwsDuplicateAppointmentException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":139,"author":{"gitId":"qinboan"},"content":"        List\u003cAppointment\u003e listWithDuplicateAppointments \u003d Arrays.asList(APPT1, APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":140,"author":{"gitId":"qinboan"},"content":"        assertThrows(DuplicateAppointmentsException.class, () -\u003e uniqueAppointmentList","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"qinboan"},"content":"                .setAppointments(listWithDuplicateAppointments));","lastModifiedDate":"2024-03-16"},{"lineNumber":142,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":143,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":144,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":145,"author":{"gitId":"qinboan"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2024-03-16"},{"lineNumber":146,"author":{"gitId":"qinboan"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2024-03-16"},{"lineNumber":147,"author":{"gitId":"qinboan"},"content":"                -\u003e uniqueAppointmentList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2024-03-16"},{"lineNumber":148,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":150,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":151,"author":{"gitId":"qinboan"},"content":"    public void toStringMethod() {","lastModifiedDate":"2024-03-16"},{"lineNumber":152,"author":{"gitId":"qinboan"},"content":"        assertEquals(uniqueAppointmentList.asUnmodifiableObservableList().toString(), uniqueAppointmentList.toString());","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":154,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":155,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":156,"author":{"gitId":"qinboan"},"content":"    public void equalsSameObjectTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":157,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":158,"author":{"gitId":"qinboan"},"content":"        assertTrue(uniqueAppointmentList.equals(uniqueAppointmentList));","lastModifiedDate":"2024-03-16"},{"lineNumber":159,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":160,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"qinboan"},"content":"    public void equalsTrue() {","lastModifiedDate":"2024-03-16"},{"lineNumber":162,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":163,"author":{"gitId":"qinboan"},"content":"        UniqueAppointmentList otherList \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":164,"author":{"gitId":"qinboan"},"content":"        otherList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":165,"author":{"gitId":"qinboan"},"content":"        assertTrue(uniqueAppointmentList.equals(otherList));","lastModifiedDate":"2024-03-16"},{"lineNumber":166,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":167,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":168,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":169,"author":{"gitId":"qinboan"},"content":"    public void equalsFalse() {","lastModifiedDate":"2024-03-16"},{"lineNumber":170,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":171,"author":{"gitId":"qinboan"},"content":"        UniqueAppointmentList otherList \u003d new UniqueAppointmentList();","lastModifiedDate":"2024-03-16"},{"lineNumber":172,"author":{"gitId":"qinboan"},"content":"        otherList.add(APPT2);","lastModifiedDate":"2024-03-16"},{"lineNumber":173,"author":{"gitId":"qinboan"},"content":"        assertFalse(uniqueAppointmentList.equals(otherList));","lastModifiedDate":"2024-03-16"},{"lineNumber":174,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":175,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":176,"author":{"gitId":"qinboan"},"content":"    @Test","lastModifiedDate":"2024-03-16"},{"lineNumber":177,"author":{"gitId":"qinboan"},"content":"    public void equalsDifferentTypeFalse() {","lastModifiedDate":"2024-03-16"},{"lineNumber":178,"author":{"gitId":"qinboan"},"content":"        uniqueAppointmentList.add(APPT1);","lastModifiedDate":"2024-03-16"},{"lineNumber":179,"author":{"gitId":"qinboan"},"content":"        String s \u003d \"APPT1\";","lastModifiedDate":"2024-03-16"},{"lineNumber":180,"author":{"gitId":"qinboan"},"content":"        assertFalse(uniqueAppointmentList.equals(s));","lastModifiedDate":"2024-03-16"},{"lineNumber":181,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":182,"author":{"gitId":"qinboan"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"qinboan":182}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":60,"author":{"gitId":"qinboan"},"content":"        assertEquals(ALICE.getID(), aliceCopy.getID());","lastModifiedDate":"2024-03-15"},{"lineNumber":61,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":99,"author":{"gitId":"qinboan"},"content":"        String expected \u003d Person.class.getCanonicalName() + \"{id\u003d\" + ALICE.getID() + \", name\u003d\" + ALICE.getName()","lastModifiedDate":"2024-03-15"},{"lineNumber":100,"author":{"gitId":"qinboan"},"content":"                + \", phone\u003d\" + ALICE.getPhone() + \", email\u003d\" + ALICE.getEmail() + \", address\u003d\"","lastModifiedDate":"2024-03-15"},{"lineNumber":101,"author":{"gitId":"qinboan"},"content":"                + ALICE.getAddress() + \", tags\u003d\" + ALICE.getTags() + \"}\";","lastModifiedDate":"2024-03-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"qinboan":7,"-":97}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"qinboan"},"content":"import java.util.UUID;","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"qinboan"},"content":"    private static final UUID VALID_ID \u003d BENSON.getID();","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"qinboan"},"content":"                new JsonAdaptedPerson(VALID_ID, INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"qinboan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"qinboan"},"content":"                VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"qinboan"},"content":"                new JsonAdaptedPerson(VALID_ID, VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"qinboan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, null,","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"qinboan"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"qinboan"},"content":"                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"qinboan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, null,","lastModifiedDate":"2024-03-16"},{"lineNumber":86,"author":{"gitId":"qinboan"},"content":"                VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"qinboan"},"content":"                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2024-03-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"qinboan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2024-03-16"},{"lineNumber":102,"author":{"gitId":"qinboan"},"content":"                null, VALID_TAGS);","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"qinboan"},"content":"                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"qinboan":15,"-":101}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"qinboan"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"qinboan"},"content":"import java.util.UUID;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.AppointmentTime;","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"qinboan"},"content":"/**","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"qinboan"},"content":" * A utility class to help with building Appointment objects.","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"qinboan"},"content":" */","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"qinboan"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"qinboan"},"content":"    public static final UUID DEFAULT_ID \u003d UUID.fromString(\"a1577f3b-c8f6-40f3-b0df-e6af13118951\");","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"qinboan"},"content":"    public static final UUID DEFAULT_PERSONID \u003d UUID.fromString(\"c7cc471f-32b4-4ba5-880a-3cf25ba855a6\");","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"qinboan"},"content":"    public static final AppointmentTime DEFAULT_APPOINTMENTTIME \u003d new AppointmentTime(\"10/02/2024 11am-2pm\");","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"qinboan"},"content":"    private UUID id;","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"qinboan"},"content":"    private UUID personId;","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"qinboan"},"content":"    private AppointmentTime appointmentTime;","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"qinboan"},"content":"     * Creates a {@code AppointmentBuilder} with the default details.","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"qinboan"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"qinboan"},"content":"        id \u003d DEFAULT_ID;","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"qinboan"},"content":"        personId \u003d DEFAULT_PERSONID;","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"qinboan"},"content":"        appointmentTime \u003d DEFAULT_APPOINTMENTTIME;","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"qinboan"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}.","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"qinboan"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"qinboan"},"content":"        id \u003d appointmentToCopy.getID();","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"qinboan"},"content":"        personId \u003d appointmentToCopy.getPersonId();","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"qinboan"},"content":"        appointmentTime \u003d appointmentToCopy.getAppointmentTime();","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"qinboan"},"content":"     * Sets the {@code id} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"qinboan"},"content":"    public AppointmentBuilder withId(String id) {","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"qinboan"},"content":"        this.id \u003d UUID.fromString(id);","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"qinboan"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":46,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":47,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":48,"author":{"gitId":"qinboan"},"content":"     * Sets the {@code personId} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":49,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":50,"author":{"gitId":"qinboan"},"content":"    public AppointmentBuilder withPersonId(String personId) {","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"qinboan"},"content":"        this.personId \u003d UUID.fromString(personId);","lastModifiedDate":"2024-03-16"},{"lineNumber":52,"author":{"gitId":"qinboan"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":53,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":54,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":55,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"qinboan"},"content":"     * Sets the {@code appointmentTime} of the {@code Appointment} that we are building.","lastModifiedDate":"2024-03-16"},{"lineNumber":57,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"qinboan"},"content":"    public AppointmentBuilder withAppointmentTime(AppointmentTime appointmentTime) {","lastModifiedDate":"2024-03-16"},{"lineNumber":59,"author":{"gitId":"qinboan"},"content":"        this.appointmentTime \u003d appointmentTime;","lastModifiedDate":"2024-03-16"},{"lineNumber":60,"author":{"gitId":"qinboan"},"content":"        return this;","lastModifiedDate":"2024-03-16"},{"lineNumber":61,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":62,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"qinboan"},"content":"     * Builds an appointment object","lastModifiedDate":"2024-03-16"},{"lineNumber":65,"author":{"gitId":"qinboan"},"content":"     * @return an appointment object","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"qinboan"},"content":"    public Appointment build() {","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"qinboan"},"content":"        return new Appointment(id, personId, appointmentTime);","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"qinboan"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"qinboan":70}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"qinboan"},"content":"import java.util.UUID;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"qinboan"},"content":"    private UUID id;","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"qinboan"},"content":"        id \u003d personToCopy.getID();","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-15"},{"lineNumber":96,"author":{"gitId":"qinboan"},"content":"     * Builds a person object","lastModifiedDate":"2024-03-15"},{"lineNumber":97,"author":{"gitId":"qinboan"},"content":"     * @return a person object","lastModifiedDate":"2024-03-15"},{"lineNumber":98,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":100,"author":{"gitId":"qinboan"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2024-03-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return new Person(name, phone, email, address, tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":102,"author":{"gitId":"qinboan"},"content":"        } else {","lastModifiedDate":"2024-03-15"},{"lineNumber":103,"author":{"gitId":"qinboan"},"content":"            return new Person(id, name, phone, email, address, tags);","lastModifiedDate":"2024-03-15"},{"lineNumber":104,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"qinboan":11,"-":96}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"qinboan"},"content":"package seedu.address.testutil;","lastModifiedDate":"2024-03-16"},{"lineNumber":2,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":3,"author":{"gitId":"qinboan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-16"},{"lineNumber":4,"author":{"gitId":"qinboan"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-16"},{"lineNumber":5,"author":{"gitId":"qinboan"},"content":"import java.util.List;","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2024-03-16"},{"lineNumber":9,"author":{"gitId":"qinboan"},"content":"import seedu.address.model.appointment.AppointmentTime;","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"qinboan"},"content":"/**","lastModifiedDate":"2024-03-16"},{"lineNumber":12,"author":{"gitId":"qinboan"},"content":" * A utility class containing a list of {@code Appointment} objects to be used in tests.","lastModifiedDate":"2024-03-16"},{"lineNumber":13,"author":{"gitId":"qinboan"},"content":" */","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"qinboan"},"content":"public class TypicalAppointments {","lastModifiedDate":"2024-03-16"},{"lineNumber":15,"author":{"gitId":"qinboan"},"content":"    public static final Appointment APPT1 \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":16,"author":{"gitId":"qinboan"},"content":"            .withId(\"a1577f3b-c8f6-40f3-b0df-e6af13118951\")","lastModifiedDate":"2024-03-16"},{"lineNumber":17,"author":{"gitId":"qinboan"},"content":"            .withPersonId(\"c7cc471f-32b4-4ba5-880a-3cf25ba855a6\")","lastModifiedDate":"2024-03-16"},{"lineNumber":18,"author":{"gitId":"qinboan"},"content":"            .withAppointmentTime(new AppointmentTime(\"10/02/2024 11am-2pm\")).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":19,"author":{"gitId":"qinboan"},"content":"    public static final Appointment APPT2 \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":20,"author":{"gitId":"qinboan"},"content":"            .withId(\"0fc8e682-4048-4c8d-9108-0f275132aad7\")","lastModifiedDate":"2024-03-16"},{"lineNumber":21,"author":{"gitId":"qinboan"},"content":"            .withPersonId(\"d36fee3a-03ea-4ad9-af5a-e6b1e76f6251\")","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"qinboan"},"content":"            .withAppointmentTime(new AppointmentTime(\"11/02/2024 11am-2pm\")).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"qinboan"},"content":"    public static final Appointment APPT3 \u003d new AppointmentBuilder()","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"qinboan"},"content":"            .withId(\"d08cd77c-19d8-4c7a-8a28-aedf7a4f3c80\")","lastModifiedDate":"2024-03-16"},{"lineNumber":25,"author":{"gitId":"qinboan"},"content":"            .withPersonId(\"60eb3b8c-247d-4dcd-b71c-9ecf9dd52237\")","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"qinboan"},"content":"            .withAppointmentTime(new AppointmentTime(\"12/02/2024 11am-2pm\")).build();","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":28,"author":{"gitId":"qinboan"},"content":"    private TypicalAppointments() {} // prevents instantiation","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"qinboan"},"content":"    /**","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"qinboan"},"content":"     * Returns an {@code AddressBook} with all the typical appointments.","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"qinboan"},"content":"     */","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"qinboan"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"qinboan"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"qinboan"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"qinboan"},"content":"            ab.addAppointment(appointment);","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"qinboan"},"content":"        }","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"qinboan"},"content":"        return ab;","lastModifiedDate":"2024-03-16"},{"lineNumber":39,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"qinboan"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":41,"author":{"gitId":"qinboan"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"qinboan"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(APPT1, APPT2, APPT3));","lastModifiedDate":"2024-03-16"},{"lineNumber":43,"author":{"gitId":"qinboan"},"content":"    }","lastModifiedDate":"2024-03-16"},{"lineNumber":44,"author":{"gitId":"qinboan"},"content":"}","lastModifiedDate":"2024-03-16"}],"authorContributionMap":{"qinboan":44}}]
